{
// Ninjas

	"Young Ninja": {
		name: "Young Ninja",
		set: "Jade_Islands",
		rarity: 0,
		type: "creature",
		portrait: "jl_novice_ninja.png",
		cost: 3,
		school: "@eval [SAPIENZA, ENTROPIA]",
		is_response: true,
		creature: {
			tags: ['Human, Ninja'],
			attack: 3,
			life: 3,
			move: 1,

			portrait_y_offset: 105,
			portrait_scale: 0.35,
		}		
	},

	"Kunoichi": {
		name: "Kunoichi",
		set: "Jade_Islands",
		rarity: 0,
		type: "creature",
		portrait: "jl_kunoichi.png",
		cost: 3,
		loyalty_cost: 1,
		school: "@eval SAPIENZA",
		is_response: true,
		creature: {
			tags: ['Human, Ninja'],
			attack: 4,
			life: 3,
			move: 1,

			portrait_y_offset: 70,
			portrait_scale: 0.25,
			
            triggered_abilities:[{
				name: "Senbon",
				rules: "When summoned, deal 1 damage to every adjacent enemy creature",

				on_summoned: "def(class creature ninja, class game game) ->commands 
				map( filter(game.all_locs, game.locs_adjacent(value, ninja.loc)),
					if (creature and (not creature.is_building) and (ninja.controller != creature.controller), creature.inflict_combat_damage(game, ninja, 1))
					where creature = game.creature_at_loc(Loc<- value))",
			}],
		}
	},
	
    "Ninja Ambusher": {
		name: "Ninja Ambusher",
		rarity: 1,
		type: "creature",
        set: "Jade_Islands",
		portrait: "jl_ninja_ambusher.png",
		cost: 4,
		loyalty_cost: 1,
		school: "@eval SAPIENZA",
		is_response: true,
		creature: {
			tags: ['Human', 'Ninja'],
			attack: 4,
			life: 4,
			move: 1,
			portrait_x_offset: 10,
			portrait_y_offset: 60,
			portrait_scale: 0.3,
            passive_abilities: [
			{
				name: "Hiding",
				rules: "While Ninja Ambusher is on a land, Ninja Ambusher has cover.",
				deferred: true,
				static_effect: "def(class game game, class creature creature) ->commands 
				if(game.construct_at_loc(creature.loc), creature.add_ability_static_duration('Cover'))",
			},		
			{
				name: "Ambusher",
				rules: "While Ninja Ambusher has cover, Ninja Ambusher has first strike.",
				deferred: true,
				static_effect: "def(class game game, class creature creature) ->commands 
                if('Cover' in creature.abilities, creature.add_ability_static_duration('First Strike'))
                "
			},],
		}
	},	
	
	"Saboteur": {
		name: "Saboteur",
		set: "Jade_Islands",
		rarity: 0,
		type: "creature",
		portrait: "jl_saboteur.png",
		school: "@eval ENTROPIA",
		cost: 4,
		loyalty_cost: 2,

		creature: {
			tags: ['Human','Ninja'],
			portrait_x_offset: -5,
			portrait_y_offset: 35,
			portrait_scale: 0.3,
			attack: 5,
			life: 5,
			move: 1,
            triggered_abilities:[{
				name: "Sabotage",
				rules: "When this creature enters the enemy citadel, deal 5 extra damage to your opponent.",

				on_reach_endzone: 'def(class creature creature, class game game) ->commands
					add(game.players[((game.current_player_index+1)%2)].life, -5)',
			}],
		}
	},	
	
	"Elite Ninja": {
		name: "Elite Ninja",
		set: "Jade_Islands",
		rarity: 1,
		type: "creature",
		portrait: "jl_elite_ninja.png",
		cost: 5,
		loyalty_cost: 2,
		school: "@eval [SAPIENZA, ENTROPIA]",
		is_response: true,
		creature: {
			tags: ['Human','Ninja'],
			abilities: ['Lethal'],
			portrait_y_offset: 50,
			portrait_scale: 0.4,
			attack: 7,
			life: 6,
			move: 1
		}
	},	
	
	"Fujita, the White": {
		name: "Fujita, the White",
		set: "Jade_Islands",
		rarity: 2,
		type: "creature",
		portrait: "jl_fujita_the_white.png",
		school: "@eval FAITH",
		cost: 6,
		loyalty_cost: 3,
        hero: true,
		is_response: true,

		flavor_text: "Like in tales, his skill and willingness to fight for stupid causes qualified him as a hero.",
		creature: {
			tags: ['Human','Ninja'],
			abilities: ['First Strike','Valiant'],
			portrait_x_offset: 15,
			portrait_y_offset: 60,
			portrait_scale: 0.3,
			attack: 8,
			life: 5,
			move: 1
		}
	},


	"Hiding": {
		name: "Hiding",
		set: "Jade_Islands",
		rarity: 0,
		type: "invocation",
		is_response: true,
		cost: 1,
		loyalty_cost: 2,
		school: "@eval SAPIENZA",
		portrait: "jl_hiding.png",
		rules: "Target creature has <i>Cover</i> until end of turn.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands
		  creature.add_ability_until_end_of_turn('Cover')
					asserting size(info.targets) = 1
					where creature = game.creature_at_loc_or_die(info.targets[0])",
	},	
	
    "Shuriken": {
		name: "Shuriken",
		set: "Jade_Islands",
		rarity: 0,
		type: "invocation",
		school: "@eval ENTROPIA",
		portrait: "jl_shuriken.png",
		cost: 2,
		loyalty_cost: 2,
		is_response: true,
		
		rules: "Target twice among players and creatures, and deal 2 damage to each target.",
		possible_targets: "def(class game game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(size(targets) < 2, [creature.loc | creature <- game.creatures, not creature.is_building, creature.is_valid_target(game, avatar.controller, me)] +
		                [[-1, player.player_index] | player <- game.players])",		
			
		on_play: "def(class game game, class message.play_card info) ->commands
		[if(info.targets[0][0] = -1,
		  //targeting a player
		  add(game.players[info.targets[0][1]].life, -2),

		  //targeting a creature
		  creature.inflict_damage(game, 2)
			asserting size(info.targets) = 2
			where creature = game.creature_at_loc_or_die(info.targets[0])),
			
		if(info.targets[1][0] = -1,
		  //targeting a player
		  add(game.players[info.targets[1][1]].life, -2),

		  //targeting a creature
		  creature.inflict_damage(game, 2)
			asserting size(info.targets) = 2
			where creature = game.creature_at_loc_or_die(info.targets[1])),	]"
	},

	"Substitution Jutsu": {
		name: "Substitution Jutsu",
		set: "core",
		rarity: 1,
		type: "invocation",
		portrait: "jl_substitution_jutsu.png",
		cost: 2,
		loyalty_cost: 2,
		school: "@eval SAPIENZA",
		is_response: true,
		rules: "Swap the positions of two target creatures you control.",
		possible_targets: "
		def(class game game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(size(targets) = 0,
		    [creature.loc | creature <- game.creatures,
			                not creature.is_building,
							creature.is_valid_target(game, avatar.controller, me),
							creature.controller = avatar.controller ],
			if(size(targets) = 1,
				[creature.loc | creature <- game.creatures,
								not creature.is_building,
								creature.is_valid_target(game, avatar.controller, me),
								creature.controller = avatar.controller ],
			 null))",
		on_play: "def(class game game, class message.play_card info) ->commands [
			target_a.set_loc(target_b.loc, 'swap'),
			target_b.set_loc(target_a.loc, 'swap'),

		] where target_a = game.creature_at_loc_or_die(info.targets[0]),
		        target_b = game.creature_at_loc_or_die(info.targets[1])",

	},	
	
    "Kazama's Windmill": {
		name: "Kazama's Windmill",
		set: "Jade_Islands",
		rarity: 0,
		type: "invocation",
		school: "@eval ENTROPIA",
		portrait: "jl_kazama_windmill.png",
		cost: 2,
		loyalty_cost: 2,
		is_response: true,
		
        is_channeled: true,
//		default_channeled_mana: 2,
		rules: "Deal 4 damage to target creature or player. 
If channeled mana is no less than 2, add another Kazama's Windmill to your hand.",
		possible_targets: "all_creatures_and_players_as_possible_targets",
			
		on_play: "def(class game game, class message.play_card info) ->commands[
		if(info.targets[0][0] = -1,
		  //targeting a player
		  add(game.players[info.targets[0][1]].life, -4),

		  //targeting a creature
		  creature.inflict_damage(game, 4)
			asserting size(info.targets) = 1
			where creature = game.creature_at_loc_or_die(info.targets[0])),
		
		if(info.channel > 1, add(game.players[game.current_player].hand, ['Kazamas Windmill']))]"
	},	
	"Kazamas Windmill" : "Kazama's Windmill",
	
    "Hidden Village": {
		name: "Hidden Village",
		type: "creature",
        set: "core",
		cost: 5,
		loyalty_cost: 2,
		school: "@eval [ENTROPIA, SAPIENZA]",
		portrait: "jl_hidden_village.png",
		creature: {
			tags: ["Terrain"],
			is_construct: true,
			portrait_scale: 0.3,
			portrait_x_offset: 10,			
			portrait_y_offset: 95,
            passive_abilities: [{
                name: 'Ninja Village',
                rules: "The cost of Ninjas in your hand is one less.",
				static_effect: "def(class game game, class creature creature) ->commands
				if(creature.controller >= 0,
				   game.players[creature.controller].add_static_cost_filter(
				     construct('cost_filter', {
						filter_cost: q(def(class player p, class card_base card, int cost) ->int
						   if(card.creature_object and ('Ninja' in card.creature_object.tags),
                           max(0, cost-1), cost)),
					})))",
			}],
		},
	},	

	
/* =======================have trouble with code=====================================	

===============================================================  */		
	
}