{
	"Skeletal Parasite": {
		name: "Skeletal Parasite",
		set: "core",
		type: "creature",
		portrait: "skeletal-parasite.png",
		cost: 4,
		loyalty_cost: 0,
		school: "@eval BLOOD",
		flavor_text: "&ldquo;Yes, yes. I remember now,
They called me Bernie, once;
Now they don't call me anything
at all. They just scream.&rdquo;",
		creature: {
			tags: ['Horror'],
			sound_walk: "creatures/move-swift.wav",
			attack: 6,
			life: 4,
			move: 1,
			image_num: 45,

			portrait_y_offset: 20,

			rules: "At the start of your turn, Skeletal Parasite deals one damage to you",

			on_begin_turn: "def(class game game) ->commands
				//deal 1 damage to controller at start of turn.
				if(game.current_player_turn_index = me.controller,
					add(game.players[me.controller].life, -1),
				)
			",
		},
	},

	"Goblin Assassin": {
		name: "Goblin Assassin",
		set: "core",
		type: "creature",
		portrait: "goblin-assassin.png",
		cost: 5,
		loyalty_cost: 2,
		school: "@eval BLOOD",
		creature: {
			tags: ['Goblin', 'Rogue'],
			abilities: ['Assassinate'],
			sound_walk: "creatures/move-swift.wav",
			attack: 2,
			life: 4,
			move: 1,
			image_num: 45
		}
	},
	"Gezzix, Lord of Death": {
		name: "Gezzix, Lord of Death",
		set: "core",
		type: "creature",
		portrait: "gezzix-lord-of-death.png",
		cost: 8,
		loyalty_cost: 5,
		school: "@eval BLOOD",
		rules: "Creatures you control have Life Drain. Creatures opponents control have 'When this creature takes damage, it is destroyed'",
		creature: {
			tags: ['Undead'],
			attack: 8,
			life: 8,
			move: 1,
			image_num: 80,
			static_ability_effect: "if(not target.is_building, if(creature.controller = target.controller, 
				target.add_ability_static_duration('Life Drain'),
				target.add_triggered_ability_static_duration({
					name: q(Gezzix's Curse),
					rules: 'When this creature takes damage, it is destroyed',
					on_attacked: 'def(class creature creature, class game game, class creature attacker, int damage) ->commands 
						if(damage > 0, set(creature.destroyed, true))
					',
				}))
			)",
		}
	},
	"Tower of Death": "Duskwind Obelisk",
	
	"Duskwind Obelisk": {
		name: "Duskwind Obelisk",
		set: "core",
		type: "creature",
		cost: 4,
		loyalty_cost: 2,
		school: "@eval BLOOD",
		portrait: "duskwind-obelisk.png",
		rarity: 0,
		rules: "Enemy creatures in this lane have -2 life.",
		creature: {
			tags: ["Tower"],
			life: 6,
			is_construct: true,
			portrait_y_offset: 80,
			image_num: 1,
			static_ability_effect: "if(creature.controller != target.controller and creature.loc[0] = target.loc[0], target.apply_static_effect('life', -2))",
		}
	},
	
	"Festering Wound": {
		name: "Festering Wound",
		set: "core",
		type: "invocation",
		cost: 2,
		loyalty_cost: 1,
		school: "@eval BLOOD",
		rarity: 0,
		rules: "Target creature gains Poisoned.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands
		add(game.creature_at_loc_or_die(info.targets[0]).status_effects, ['Poisoned'])",
		
		ai_score: "def(class game game, [Loc] targets) ->int
		if(target.controller = game.current_player_index, 0,
		target.ai_value(game)*(9 - target.tiles_from_start))
		where target = game.creature_at_loc_or_die(targets[0])",
	},
	"Chill Wind": "Hypothermia",
	
	"Hypothermia": {
		name: "Hypothermia",
		set: "core",
		type: "invocation",
		school: "@eval BLOOD",
		portrait: "hypothermia.png",
		cost: 2,
		loyalty_cost: 1,
		is_response: true,
		rules: "Target creature gets -4 life this turn.",
		//flavour_text: "This is the sort of cold, damp wind your mother told you to come in out of. Too bad you're in the middle of a battle.",
		flavor_text: "Hundreds were were slain by the sword, but
thousands perished in the chill winds of winter.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands
		game.creature_at_loc_or_die(info.targets[0])
		.apply_effect_until_end_of_turn('life', -4)
		asserting size(info.targets) = 1",
		
		ai_score: "def(class game game, [Loc] targets) ->int
		if(target.controller = game.current_player_index, -10000,
		if(target.life <= 4, target.ai_value(game)*10, 0))
		where target = game.creature_at_loc_or_die(targets[0])",
	},
	"Knife in the Dark": {
		name: "Knife in the Dark",
		set: "core",
		type: "invocation",
		school: "@eval BLOOD",
		portrait: "knife-in-the-dark.png",
		background_color_top: "{ red: 0.33, green: 0.24, blue: 0.18 }",
		background_color_bot: "{ red: 0.05, green: 0.02, blue: 0.02 }",
		cost: 3,
		loyalty_cost: 3,
		is_response: false,
		rarity: 0,
		rules: "Destroy target creature.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands
		set(game.creature_at_loc_or_die(info.targets[0]).destroyed, true)",
		
		ai_score: "def(class game game, [Loc] targets) ->int
		if(target.controller = game.current_player_index, 0,
		target.ai_value(game)*10
		) where target = game.creature_at_loc_or_die(targets[0])",
		
		runes: [
		{
			color: 'black',
			points: [[20,100], [80,0], [80,0], [80,100]]
		},
		{
			color: 'red',
			points: [[0,50], [100,50], [100,50]]
		},
		],
		
	},
	"Soothsayer": {
		name: "Soothsayer",
		set: "core",
		type: "creature",
		portrait: "soothsayer.png",
		cost: 3,
		loyalty_cost: 0,
		school: "@eval BLOOD",
		rarity: 0,
		rules: "When Soothsayer dies, draw a card",
		creature: {
			tags: ['Human'],
			attack: 4,
			life: 2,
			move: 1,
			image_num: 21,
			portrait_y_offset: 40,
			on_die: "def(class game game) ->commands
			game.players[controller].draw_cards(game, 1)",
		}
	},

	"Vampire": {
		name: "Vampire",
		set: "core",
		type: "creature",
		portrait: "vampire.png",
		cost: 4,
		loyalty_cost: 0,
		school: "@eval BLOOD",
		rarity: 0,
		creature: {
			tags: ['Vampire', "Undead"],
			abilities: ['Life Drain'],
			attack: 3,
			life: 3,
			move: 1,
			initiative: 20,
			image_num: 16,
		}
	},
	
	"Dark Emissary": {
		name: "Dark Emissary",
		set: "core",
		type: "creature",
		portrait: "dark-emissary.png",
		cost: 6,
		loyalty_cost: 1,
		school: "@eval BLOOD",
		rarity: 0,
		rules: "When Dark Emissary kills a creature, restore its life and gain control of it.",
		creature: {
			tags: ['Vampire', "Undead"],
			attack: 5,
			life: 5,
			move: 1,
			sound_summoned: "creatures/summon-dark-emissary.wav",
			sound_death: "creatures/death-dark-emissary.wav",
			initiative: 20,
			image_num: 43,
			on_kill: "def(class game game, class creature victim) ->commands if(not victim.is_building, if(resurrect, [resurrect, set(victim.controller, me.controller), set(victim.life, victim.starting_life)]) where resurrect = game.return_from_graveyard(victim))",
		}
	},
	
	"Blood Altar": {
		name: "Blood Altar",
		set: "core",
		type: "creature",
		cost: 2,
		loyalty_cost: 2,
		school: "@eval BLOOD",
		rarity: 0,
		rules: "When a creature dies, deal one damage to your opponent.",
		creature: {
			tags: ['Altar'],
			life: 4,
			image_num: 12,
			is_construct: "true",
			on_another_creature_died: "def(class game game, class creature victim) ->commands
			if(me.controller != -1 and (not victim.is_building) and (not victim.is_construct), [
				add(game.players[(me.controller+1)%2].life, -1),
				add(game.animation_hints, [construct('animation.player_damage_hint', { type: 'player_damage_hint', target_player: (me.controller+1)%2, source: me, amount: 1})]),
			])"
		}
	},
	
	"Assassin's Den": {
		name: "Assassin's Den",
		set: "core",
		type: "creature",
		cost: 4,
		loyalty_cost: 2,
		school: "@eval BLOOD",
		rarity: 2,
		rules: "When you summon a creature in this lane, it gains Assassinate.",
		creature: {
			tags: ['Den'],
			life: 4,
			image_num: 12,
			is_construct: "true",
			on_another_creature_summoned: "def(class game game, class creature new_creature) ->commands
			if(new_creature.controller = controller and new_creature.loc[0] = loc[0], add(new_creature.abilities, ['Assassinate']))"
		}
	},
	
	"Zombie": {
		name: "Zombie",
		set: "core",
		type: "creature",
		portrait: "zombie.png",
		cost: 3,
		loyalty_cost: 0,
		school: "@eval BLOOD",
		rarity: 0,
		rules: "When Zombie destroys a creature, summon a Zombie in its place.",
		creature: {
			tags: ['Zombie', "Undead"],
			attack: 3,
			life: 3,
			move: 1,

			initiative: 10,
			image_num: 4,
			sound_summoned: "creatures/summon-zombie.wav",
			sound_death: "creatures/death-zombie.wav",
			sound_walk: "creatures/move-stiff.wav",
			on_summoned: "def(class game game) ->commands
			add(me.status_effects, ['Exhausted']*2)",
			on_kill: "def(class game game, class creature victim) ->commands
			if(not victim.is_building, game.summon_creature(
			lib.citadel.create_creature('Zombie', {
				name: 'Zombie',
				controller: me.controller,
				loc: victim.loc,
			})))
			",
		}
	},
	
	"Ghost": {
		name: "Ghost",
		set: "core",
		type: "creature",
		portrait: "ghost.png",
		cost: 4,
		loyalty_cost: 0,
		school: "@eval BLOOD",
		rarity: 0,
		rules: "When Ghost dies, return it to its owner's hand.",
		creature: {
			tags: ["Ghost", "Undead"],
			attack: 4,
			life: 4,
			move: 1,
			initiative: 20,
			image_num: 34,
			sound_summoned: "creatures/summon-ghost.wav",
			sound_death: "creatures/death-ghost.wav",
			on_die: "def(class game game) ->commands [
			set(game.graveyard, remove_from_map(game.graveyard, summon_id)),
			add(game.players[controller].hand, [lib.citadel.create_card('Ghost')])
			]",
		},
	},
	
	"Skeleton": {
		name: "Skeleton",
		set: "core",
		type: "creature",
		portrait: "skeleton.png",
		cost: 4,
		loyalty_cost: 0,
		school: "@eval BLOOD",
		rarity: 0,
		rules: "When Skeleton dies, summon a Skeleton Corpse in its place.",
		creature: {
			tags: ["Skeleton", "Undead"],
			attack: 4,
			life: 4,
			move: 1,
			initiative: 20,
			sound_summoned: "creatures/summon-skeleton.wav",
			sound_death: "creatures/death-skeleton.wav",
			sound_walk: "creatures/move-stiff.wav",
			image_num: 13,
			// has sword
			overlays: [{image_num: 7}],
			on_die: "def(class game game) ->commands
			game.summon_construct(
			lib.citadel.create_creature('Skeleton Corpse',
			{
				name: 'Skeleton Corpse',
				controller: me.controller,
				loc: me.loc,
			}))",
		},
	},

	"Curse": {
		name: "Curse",
		set: "core",
		type: "invocation",
		cost: 1,
		loyalty_cost: 2,
		school: "@eval BLOOD",
		rarity: 0,
		rules: "Target creature or player loses one life. Draw a card.",

		possible_targets: "all_creatures_and_players_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands
		[
		game.players[game.current_player].draw_cards(game, 1),
		if(info.targets[0][0] = -1,
		  //targeting a player
		  add(game.players[info.targets[0][1]].life, -1),

		  //targeting a creature
		  add(creature.life, -1)
			asserting size(info.targets) = 1
			where creature = game.creature_at_loc_or_die(info.targets[0]))
		]"
	},



	
	"Vampire Lord": {
		name: "Vampire Lord",
		type: "creature",
		portrait: "vampire-lord.png",
		cost: 3,
		loyalty_cost: 3,
		school: "@eval BLOOD",
		rarity: 1,
		rules: "'Vampire' creatures you control in this lane have +1 attack.",
		creature: {
			tags: ['Vampire', "Undead"],
			abilities: ['Life Drain'],
			attack: 4,
			life: 6,
			move: 1,
			initiative: 20,
			image_num: 7,
			static_ability_effect: "[if(creature != target and creature.controller = target.controller and creature.loc[0] = target.loc[0] and ('Vampire' in target.tags), target.apply_static_effect('attack', 1))]",
		}
	},
	
	"Vampire Bat": {
		name: "Vampire Bat",
		type: "creature",
		portrait: "vampire-bat.png",
		cost: 2,
		loyalty_cost: 1,
		school: "@eval BLOOD",
		rarity: 0,
		rules: "",
		creature: {
			tags: ['Vampire', "Undead"],
			abilities: [ "Flying" ],
			
			activated_abilities: [
			{
				name: "Transform",
				cost: 1,
				school: "@eval BLOOD",
				rules: "Transform this creature into a Vampire.",
				on_play: "def(class game game, class creature creature, class message.play_ability info) ->commands creature.transform(game, map<- lib.citadel.create_creature('Vampire'))"
			}
			],
			attack: 2,
			life: 2,
			move: 2,
			sound_walk: "creatures/move-wings.wav",
			initiative: 20,
			image_num: 27,
			
			//the bat has a shadow.
			overlays: [{
				image_num: 0,
				alpha: 0.5,
			}],
		}
	},
	
	"Lich": {
		name: "Lich",
		type: "creature",
		portrait: "lich.png",
		cost: 4,
		loyalty_cost: 4,
		school: "@eval BLOOD",
		rarity: 1,
		rules: "Lich takes half combat damage from non-blood sources.",
		creature: {
			tags: ["Lich", "Undead"],
			abilities: ["Life Drain"],
			attack: 6,
			life: 10,
			move: 1,
			initiative: 25,
			image_num: 28,
			resistance_against: "
			def(class game game, class creature attacker, int damage) ->int
			if(not (2 in attacker.school), 0, damage / 2)",
		}
	},
	
	"Skeleton Corpse": {
		name: "Skeleton Corpse",
		type: "creature",
		cost: 0,
		loyalty_cost: 4,
		school: "@eval BLOOD",
		creature: {
			tags: ["Undead"],
			token: true,
			life: 2,
			sprite_sheet: "creature",
			image_num: 8,
			is_construct: true,
			activated_abilities: [{
				name: 'Resurrect',
				cost: 2,
				school: "@eval BLOOD",
				is_response: false,
				exhausts_creature: false,
				rules: 'Sacrifice this construct, summon a Skeleton in its place.',
				on_play: "def(class game game, class creature creature, class message.play_ability info) ->commands
				[game.summon_creature(
			    lib.citadel.create_creature('Skeleton',
				{
					name: 'Skeleton',
					controller: creature.controller,
					loc: creature.loc
			    })), set(creature.destroyed, true)]",
			}]
		},
	},
	
	"Dark Knight": {
		name: "Dark Knight",
		type: "creature",
		portrait: "dark-knight.png",
		cost: 3,
		loyalty_cost: 3,
		school: "@eval BLOOD",
		rarity: 0,
		creature: {
			tags: ['Undead'],
			attack: 8,
			life: 6,
			move: 1,
			image_num: 19,
		}
	},
	
	"Blood Harvest": {
		name: "Blood Harvest",
		type: "invocation",
		school: "@eval BLOOD",
		cost: 0,
		loyalty_cost: 3,
		is_response: true,
		rarity: 0,
		rules: "When a creature dies this turn, you gain 2 mana.",
		on_play: "def(class game game, class message.play_card info) ->commands
		game.players[game.current_player]
		.creature_avatar.add_triggered_ability_until_end_of_turn({
			name: q(Blood Harvest),
			on_another_creature_died: q(def(class creature creature, class game game, class creature victim) ->commands
			if(creature.controller != -1 and (not victim.is_building) and (not victim.is_construct), [
			add(game.players[creature.controller].resources, 2)
			]))
		})"
	},
	
	"Thirst for Blood": {
		name: "Thirst for Blood",
		type: "invocation",
		school: "@eval BLOOD",
		portrait: "thirst-for-blood.png",
		cost: 1,
		loyalty_cost: 2,
		is_response: true,
		rarity: 0,
		rules: "Target creature gains Life Drain.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands
		add(game.creature_at_loc_or_die(info.targets[0]).abilities, ['Life Drain'])"
	},
	
	"Sudden Illness": "Chill Wind",
	
	"Slow Illness": {
		name: "Slow Illness",
		type: "invocation",
		school: "@eval BLOOD",
		cost: 2,
		loyalty_cost: 2,
		is_response: false,
		rarity: 1,
		rules: "Target creature gets -2 life this turn.",
		possible_targets: "enemy_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands
		game.creature_at_loc_or_die(info.targets[0])
		.apply_effect_until_end_of_turn('life', -2)",
		
		ai_score: "def(class game game, [Loc] targets) ->int
		if(target.controller = game.current_player_index, 0,
		if(target.life, target.ai_value(game)*10, 0))
		where target = game.creature_at_loc_or_die(targets[0])",
	},
	
	"Dark Coven": {
		name: "Dark Coven",
		type: "creature",
		cost: 3,
		loyalty_cost: 3,
		portrait: "dark-coven.png",
		school: "@eval BLOOD",
		rarity: 0,
		rules: "Creatures you control in this lane have Life Drain.",
		creature: {
			tags: ["Tower"],
			life: 6,
			is_construct: true,
			image_num: 1,
			static_ability_effect: "if(creature.controller = target.controller and creature.loc[0] = target.loc[0], target.add_ability_static_duration('Life Drain'))",
		}
	},
	
	"Fleshworks": {
		name: "Fleshworks",
		type: "creature",
		cost: 4,
		loyalty_cost: 3,
		school: "@eval BLOOD",
		rarity: 1,
		rules: "When a creature attacks this building, gain control of that creature.",
		creature: {
			tags: ["Tower"],
			life: 6,
			sprite_sheet: 'building',
			image_num: 1,
			is_building: true,
			on_attacked: "
			def(class game game, class creature attacker, int damage) ->commands
			if(attacker.controller != me.controller and attacker.range = 1,
			set(attacker.controller, me.controller))",
		},
	},
	
	"Fiendish Sprite": {
		name: "Fiendish Sprite",
		type: "creature",
		portrait: "fiendish-sprite.png",
		cost: 3,
		loyalty_cost: 2,
		school: "@eval BLOOD",
		rarity: 0,
		rules: "When Fiendish Sprite attacks a creature, that creature gains Poisoned.",
		creature: {
			tags: ["Fiend", "Undead"],
			attack: 2,
			life: 2,
			move: 2,
			image_num: 55,
			on_attacked: "
			def(class game game, class creature attacker, int damage) ->commands
			if(damage != 0 and attacker.controller != me.controller and
			(not attacker.is_building),
			add(attacker.status_effects, ['Poisoned']))",
		},
	},
	
	"Witch-King": {
		name: "Witch-King",
		cost: 4,
		portrait: "witch-king.png",
		loyalty_cost: 2,
		school: "@eval BLOOD",
		rarity: 2,
		rules: "Other creatures you control have +1 attack, +1 life. When Witch-King dies, destroy all creatures.",
		creature: {
			tags: ["Witch", "Human"],
			attack: 6,
			life: 8,
			move: 1,
			image_num: 7,
			on_die: "def(class game game) ->commands
			map(game.creatures,
			if(not value.is_building,
			set(value.destroyed, true)))",
			static_ability_effect: "if(creature != target and creature.controller = target.controller and not target.is_building,
			[target.apply_static_effect('attack', 1),
			target.apply_static_effect('life', 1)])",
		},
	},
	
	"Krelethi the Soul-Devourer": {
		name: "Krelethi the Soul-Devourer",
		cost: 5,
		loyalty_cost: 3,
		school: "@eval BLOOD",
		hero: true,
		rarity: 2,
		rules: "All 'Undead' creatures you control have +1 attack. When Krelethi the Soul-Devourer destroys a creature, restore that creature's life and gain control of it. It becomes 'Undead'.",
		//flavour_text: "Reaching from the afterlife, destroying the souls of humanity",
		creature: {
			tags: ['Undead'],
			abilities: ['Life Drain'],
			attack: 8,
			life: 8,
			move: 1,
			image_num: 7,
			on_kill: "def(class game game, class creature victim) ->commands
			if(not victim.is_building, if(resurrect, [resurrect, set(victim.controller, me.controller), set(victim.life, victim.starting_life), add(victim.tags, ['Undead'])]) where resurrect = game.return_from_graveyard(victim))",
			static_ability_effect: "if(creature != target and creature.controller = target.controller and not target.is_building and 'Undead' in creature.tags, target.apply_static_effect('attack', 1))",
		},
	},
	
	"Patched Horror": {
		name: "Patched Horror",
		portrait: "patched-horror.png",
		cost: 4,
		loyalty_cost: 3,
		school: "@eval BLOOD",
		rarity: 1,
		rules: "When Patched Horror destroys a creature, it gains half the destroyed creature's attack.",
		creature: {
			tags: ['Undead'],
			attack: 8,
			life: 8,
			move: 1,
			image_num: 60,
			on_kill: "def(class game game, class creature victim) ->commands
			if(not victim.is_building, add(me.attack, victim.attack/2))",
		},
	},
}
