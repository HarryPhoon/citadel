{
	"Vampire": {
		name: "Vampire",
		type: "creature",
		cost: 2,
		loyalty_cost: 1,
		school: BLOOD,
		creature: {
			tags: ['Vampire', "Undead"],
			abilities: ['Life Drain'],
			attack: 1,
			life: 2,
			move: 2,
			initiative: 20,
			image_num: 16,
		}
	},

	"Vampire Lord": {
		name: "Vampire Lord",
		type: "creature",
		cost: 4,
		loyalty_cost: 4,
		school: BLOOD,
		rules: "Friendly vampires in the same lane get +1 attack.",
		creature: {
			tags: ['Vampire', "Undead"],
			abilities: ['Life Drain'],
			attack: 2,
			life: 3,
			move: 2,
			initiative: 20,
			image_num: 7,
			static_ability_effect: "[if(creature != target and creature.controller = target.controller and creature.loc[0] = target.loc[0] and ('Vampire' in target.tags), target.apply_static_effect('attack', 1))]",
		}
	},

	"Dark Emissary": {
		name: "Dark Emissary",
		type: "creature",
		cost: 3,
		loyalty_cost: 2,
		school: BLOOD,
		rules: "When Dark Emissary kills a creature, it transforms into a Vampire, is fully healed, and you gain control of it.",
		creature: {
			tags: ['Vampire', "Undead"],
			attack: 2,
			life: 3,
			move: 2,
			initiative: 20,
			image_num: 43,
			on_kill: "def(game, victim) if(not victim.is_building, if(resurrect, [resurrect, set(victim.controller, me.controller), set(victim.wounds, 0)]) where resurrect = game.return_from_graveyard(victim))",
		}
	},

	"Vampire Bat": {
		name: "Vampire Bat",
		type: "creature",
		cost: 2,
		loyalty_cost: 1,
		school: BLOOD,
		rules: "",

		creature: {
			tags: ['Vampire', "Undead"],
			abilities: [
				"Flying",
				{
					name: "Transform",
					cost: 1,
					school: BLOOD,
					rules: "Transform into a Vampire",
					on_play: "def(game, creature, info) creature.transform(game, get_document('data/cards.cfg')['Vampire'].creature)"
				}
			],
			attack: 1,
			life: 1,
			move: 3,
			initiative: 20,
			image_num: 27,

			//the bat has a shadow.
			overlays: [{
				image_num: 0,
				alpha: 0.5,
			}],
		}
	},

	"Blood Altar": {
		name: "Blood Altar",
		type: "creature",
		cost: 2,
		loyalty_cost: 2,
		school: BLOOD,
		rules: "When a creature dies, +1 mana.",
		creature: {
			tags: ['Tower'],
			life: 2,
			image_num: 12,
			is_construct: "true",
			on_another_creature_died: "def(game, victim) if((not victim.is_building), add(game.players[me.controller].resources, 1))"
		}
	},

	"Zombie": {
		name: "Zombie",
		type: "creature",
		cost: 1,
		loyalty_cost: 2,
		school: BLOOD,
		rules: "Exhausted when summoned.
When Zombie destroys a creature, it is replaced by a copy of Zombie under your control.",
		creature: {
			tags: ['Zombie', "Undead"],
			attack: 2,
			life: 2,
			move: 1,
			initiative: 10,
			image_num: 4,
			on_summoned: "def(game) add(me.status_effects, ['Exhausted']*2)",
			on_kill: "def(game, victim)
			   if(not victim.is_building, game.summon_creature(
				  construct('creature',
				     get_document('data/cards.cfg')['Zombie'].creature + {
						controller: me.controller,
						loc: victim.loc,
					 })))
			",
		}
	},
	
	"Lich": {
		name: "Lich",
		type: "creature",
		cost: 6,
		loyalty_cost: 5,
		school: BLOOD,
		rules: "Only takes half damage from non-blood attacks.",
		creature: {
			tags: ["Lich", "Undead"],
			abilities: ["Life Drain"],
			attack: 3,
			life: 5,
			move: 2,
			initiative: 25,
			image_num: 28,
			resistance_against: "def(game, attacker, damage) if(not (2 in attacker.school), 0, damage / 2)",
		}
	},
	
	"Ghost": {
		name: "Ghost",
		type: "creature",
		cost: 3,
		loyalty_cost: 2,
		school: BLOOD,
		rules: "Returns to owner's hand upon death.",
		creature: {
			tags: ["Ghost", "Undead"],
			attack: 2,
			life: 2,
			move: 2,
			abilities: ["Flying"],
			initiative: 20,
			image_num: 34,
			on_die: "def(game) [
				remove_from_map(game.graveyard, summon_id), 
				add(game.players[controller].hand, [construct('card', get_document('data/cards.cfg')['Ghost'])])
			]",
		},
	},
	
	"Marcavis' Ghost": {
		name: "Marcavis' Ghost",
		type: "creature",
		cost: 4,
		loyalty_cost: 3,
		school: BLOOD,
		rules: "Returns to owner's hand upon death.",
		creature: {
			tags: ["Ghost", "Undead"],
			attack: 1,
			life: 3,
			move: 3,
			abilities: ["Flying"],
			initiative: 20,
			image_num: 54,
			on_die: "def(game) [
				remove_from_map(game.graveyard, summon_id), 
				add(game.players[controller].hand, [construct('card', get_document('data/cards.cfg')[q(Marcavis' Ghost)])])
			]",
		},
	},
	
	"Skeleton": {
		name: "Skeleton",
		type: "creature",
		cost: 2,
		loyalty_cost: 1,
		school: BLOOD,
		creature: {
			tags: ["Skeleton", "Undead"],
			attack: 2,
			life: 2,
			move: 2,
			initiative: 20,
			image_num: 13,
			// has sword
			overlays: [{image_num: 7}],
			on_die: "def(game) game.summon_construct(construct('creature', {
				name: 'Skeleton Corpse',
				tags: ['Construct', 'Corpse'],
				school: BLOOD,
				controller: game.current_player,
				loc: me.loc,
				sprite_sheet: 'creature',
				image_num: 8,
				is_construct: true,
				abilities: [{
					name: 'Resurrect',
					cost: 2,
					school: BLOOD,					
					is_response: true,
					exhausts_creature: true,
					rules: 'Raises the Skeleton from the dead',
					is_usable: q(def(game, creature) not ('Exhausted' in creature.status_effects)),
					on_play: q(def(game, creature, info) [game.summon_creature(construct('creature', 
						get_document('data/cards.cfg')['Skeleton'].creature + {
							controller: creature.controller, 
							loc: creature.loc
						}
					)), set(creature.destroyed, true)]),
				}],
			}))",
		},
	},

	"Soothsayer": {
		name: "Soothsayer",
		type: "creature",
		cost: 2,
		loyalty_cost: 2,
		school: BLOOD,
		rules: "When Soothsayer dies, draw a card",
		creature: {
			tags: ['Human'],
			attack: 2,
			life: 1,
			move: 2,
			image_num: 21,
			on_die: "def(game) game.players[controller].draw_cards(game, 1)",
		}
	},

	"Dark Knight": {
		name: "Dark Knight",
		type: "creature",
		cost: 3,
		loyalty_cost: 3,
		school: BLOOD,
		creature: {
			tags: ['Undead'],
			attack: 4,
			life: 3,
			move: 2,
			image_num: 19,
		}
	},

	"Blood Harvest": {
		name: "Blood Harvest",
		type: "spell",
		school: BLOOD,
		cost: 0,
		loyalty_cost: 3,
		is_response: true,
		rules: "Gain 2 mana every time a creature dies this turn.",
		possible_targets: "def(game, nplayer, targets) null",
		on_play: "def(game, info) game.players[game.current_player]
			.creature_avatar.add_triggered_ability_until_end_of_turn({
				name: q(Blood Harvest),
				on_another_creature_died: q(def(creature, game, victim)
				if(not victim.is_building, [
					add(game.players[creature.controller].resources, 2)
				]))
			})"
	},

	"Thirst for Blood": {
		name: "Thirst for Blood",
		type: "spell",
		school: BLOOD,
		cost: 1,
		loyalty_cost: 2,
		is_response: true,
		rules: "Target creature gains Life Drain",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(game, info) add(game.creature_at_loc(info.targets[0]).abilities, ['Life Drain'])"
	},

	"Knife in the Dark": {
		name: "Knife in the Dark",
		type: "spell",
		school: BLOOD,
		cost: 4,
		loyalty_cost: 4,
		is_response: false,
		rules: "Destroy target creature",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(game, info) set(game.creature_at_loc(info.targets[0]).destroyed, true)",

		ai_score: "def(game, targets)
		  if(target.controller = game.current_player_index, 0,
				target.ai_value(game)*10
			) where target = game.creature_at_loc(targets[0])"

	},

	"Sudden Illness": {
		name: "Sudden Illness",
		type: "spell",
		school: BLOOD,
		cost: 2,
		loyalty_cost: 2,
		is_response: true,
		rules: "Target creature gets -2 life this turn",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(game, info) game.creature_at_loc(info.targets[0]).apply_effect_until_end_of_turn('life', -2)",

		ai_score: "def(game, targets)
		  if(target.controller = game.current_player_index, 0,
		   if(target.life - target.wounds <= 2, target.ai_value(game)*10, 0))
				  where target = game.creature_at_loc(targets[0])",
	},

	"Dark Coven": {
		name: "Dark Coven",
		type: "creature",
		cost: 3,
		loyalty_cost: 3,
		school: BLOOD,
		rules: "Creatures you control in this lane have Life Drain",
		creature: {
			tags: ["Tower"],
			life: 3,
			is_construct: true,
			image_num: 1,
			static_ability_effect: "if(creature.controller = target.controller and creature.loc[0] = target.loc[0], target.add_ability_static_duration('Life Drain'))",
		}
	},

	"Tower of Death": {
		name: "Tower of Death",
		type: "creature",
		cost: 3,
		loyalty_cost: 2,
		school: BLOOD,
		rules: "Enemy creatures in this lane have -1 life",
		creature: {
			tags: ["Tower"],
			life: 3,
			is_construct: true,
			image_num: 1,
			static_ability_effect: "if(creature.controller != target.controller and creature.loc[0] = target.loc[0], target.apply_static_effect('life', -1))",
		}
	},

	"Festering Wound": {
		name: "Festering Wound",
		type: "spell",
		cost: 2,
		loyalty_cost: 1,
		school: BLOOD,
		rules: "Target creature is Poisoned",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(game, info) add(game.creature_at_loc(info.targets[0]).status_effects, ['Poisoned'])",

		ai_score: "def(game, targets)
		  if(target.controller = game.current_player_index, 0,
		   target.ai_value(game)*(9 - target.tiles_from_start))
			  where target = game.creature_at_loc(targets[0])",
	},

	"Fleshworks": {
		name: "Fleshworks",
		type: "creature",
		cost: 4,
		loyalty_cost: 3,
		school: BLOOD,
		rules: "Any creatures making a melee attack against this building come under control of the building's controller",
		creature: {
			tags: ["Tower"],
			abilities: ["Fortification"],
			life: 3,
			sprite_sheet: 'building',
			image_num: 1,
			on_attacked: "def(game, attacker, damage) if(attacker.controller != me.controller and attacker.range = 1, set(attacker.controller, me.controller))",
		},
	},

	"Fiendish Sprite": {
		name: "Fiendish Sprite",
		type: "creature",
		cost: 3,
		loyalty_cost: 2,
		school: BLOOD,
		rules: "When creature is attacked the attacker is Poisoned",
		creature: {
			tags: ["Fiend", "Undead"],
			attack: 1,
			life: 1,
			move: 3,
			image_num: 55,
			on_attacked: "def(game, attacker, damage) if(damage != 0 and attacker.controller != me.controller and (not attacker.is_building), add(attacker.status_effects, ['Poisoned']))",
		},
	},
	
	"Witch-King": {
		name: "Witch-King",
		cost: 4,
		loyalty_cost: 2,
		school: BLOOD,
		rules: "Creatures you control get +1 attack, +2 life. When Witch-King dies, all your creatures die",
		creature: {
			tags: ["Witch", "Human"],
			attack: 3,
			life: 4,
			move: 2,
			image_num: 7,
			on_die: "def(game) map(game.creatures, target, if(target.controller = controller and not target.is_building, set(target.destroyed, true)))",
			static_ability_effect: "if(creature != target and creature.controller = target.controller and not target.is_building, 
				[target.apply_static_effect('attack', 1), 
				target.apply_static_effect('life', 2)])",
		},		
	},
	
	"Krelethi the Soul-Devourer": {
		name: "Krelethi the Soul-Devourer",
		cost: 5,
		loyalty_cost: 3,
		school: BLOOD,
		hero: true,
		rules: "All undead creatures you control gain +1 attack. Everytime Krelethi takes a life that creature rises up as an undead to fight for you.",
		//flavour_text: "Reaching from the afterlife, destroying the souls of humanity",
		creature: {
			tags: ['Undead'],
			abilities: ['Life Drain'],
			attack: 4,
			life: 4,
			move: 2,
			image_num: 7,
			on_kill: "def(game, victim) if(not victim.is_building, if(resurrect, [resurrect, set(victim.controller, me.controller), set(victim.wounds, 0), add(victim.tags, ['Undead'])]) where resurrect = game.return_from_graveyard(victim))",
			static_ability_effect: "if(creature != target and creature.controller = target.controller and not target.is_building and 'Undead' in creature.tags, target.apply_static_effect('attack', 1))",
		},		
	},
	
	"Patched Horror": {
		name: "Patched Horror",
		cost: 4,
		loyalty_cost: 3,
		school: BLOOD,
		rules: "Everytime Patched Horror kills, he gains half their &attack;",
		creature: {
			tags: ['Construct', 'Undead'],
			attack: 4,
			life: 4,
			move: 2,
			image_num: 60,
			on_kill: "def(game, victim) if(not victim.is_building, add(me.attack, victim.attack/2))",
		},
	},

	"Sigil of the Red God": {
		name: "Sigil of the Red God",
		type: "creature",
		cost: 0,
		loyalty_cost: 2,
		school: [2, 5],
		rules: "You have +1 level in &faith; and in &blood;",
		creature: {
			tags: ["Sigil"],
			is_construct: true,
			image_num: 1,
			static_effect: "def(game) [game.players[controller].add_static_level_up(2), game.players[controller].add_static_level_up(5)]"
		}
	},
}
