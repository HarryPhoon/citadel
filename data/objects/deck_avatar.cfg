{
	id: "deck_avatar",
	is_strict: true,

	properties: {
		_width: { type: "int" },
		_height: "int :: round_to_even(_width*0.996/0.800)",
		_height_tex: " int :: int(_height*0.12)",

		_portrait: { type: "string" },
		_name: { type: "string" },

		_font: "string :: lib.font.regular_font",
		_font_size: "int(_width*0.1)",

		render: "def() ->commands
		[
		set(animation, lib.citadel.render_frame(c, _width, _height_tex, [
			c.rectangle(0, 0, _width, _height_tex),
			c.set_source_rgba(0, 0, 0, 0.8),
			c.fill(),

			c.set_source_rgba(1, 1, 1, 1),
			c.set_font(_font),
			c.set_font_size(_font_size),
			c.translate(_width*0.5 - text_area.width*0.5, _height_tex*0.5 - text_area.height*0.5 - text_area.y_bearing),
			c.text_path(_name),
			c.fill(),
		]
		where text_area = c.text_extents(_font, _font_size, _name)
		) where c = canvas()),
		]
		",

		_spawn_children: "def() ->commands [
			remove_object(_image_widget),

			spawn('image_widget', 0, 0, {
				image: 'portraits/' + _portrait,
				image_area: [0, 0, 799, 995],
				draw_width: _width,
				draw_height: _height,
				zorder: zorder-1,
				mid_x: mid_x,
				mid_y: mid_y,
			}, [
				set(_image_widget, child),
			]),
		]",

		_image_widget: { type: "null|obj image_widget" },
	},

	on_create: "[render(), _spawn_children()]",

	on_type_updated: "[render(), _spawn_children()]",
}
