{
	id: "lobby_controller",
	is_human: true,
	//is_strict: true,
    hidden_in_level: true,
	always_active: true,
	hidden_in_game: true,
	zorder: 50,

    vars: {
		client: null,
		font: 'RobotoCondensed-Regular',
		color: 'antique_white',
    },
	
    tmp: {
		username: "@eval USERNAME",
		session_id: -1,
		salt: null,
		password: '',
		signed_on: false,
		lobby_game_id: -1,
		
		child: null,
		
		servers: null,
		lobby_users: [],
		lobby_games: [],
		requesting_player: null,
		
		game_selection: null,
		create_game_params: null,
		
		last_error_msg: 'Checking Server...',
		last_error_color: 'green',
		
		sign_on_button_state: false,	
    },

    properties: {
		// Helper stuff.
		level_width: "level.dimensions[2]",
		level_height: "level.dimensions[3]",
		error_text: "def(string txt) ->commands if(me.widgets.error_text, [set(me.widgets.error_text.text, txt), set(tmp.last_error_msg, txt), set(tmp.last_error_color, 'red'), set(me.widgets.error_text.color, 'red')])",
		info_text:  "def(string txt) ->commands if(me.widgets.error_text, [set(me.widgets.error_text.text, txt), set(tmp.last_error_msg, txt), set(tmp.last_error_color, 'green'), set(me.widgets.error_text.color, 'green')])",
		checked_tbs_send: "def(map callable) ->commands if(vars.client, tbs_send(object<-vars.client, callable), error_text('No TBS client configured'))",
		enable_frames: "def(bool en=true) ->commands map(me.widgets.children, set(value.enable, en))",
		
		// Messages sent to lobby server
		get_server_info: "checked_tbs_send({type:'lobby_get_server_info'})",
		get_lobby_users: "checked_tbs_send({type:'lobby_get_users'})",
		do_sign_on: "checked_tbs_send({
			type:'lobby_login', 
			user:tmp.username, 
			session_id:tmp.session_id
		} + if(tmp.salt and tmp.password, {password:sha1(tmp.salt+sha1(tmp.password))})
		  + if(tmp.salt and PASSWORD and not tmp.password, {password:sha1(tmp.salt+PASSWORD)})
		)",
		do_sign_off: "[
			checked_tbs_send({type:'lobby_quit', user:tmp.username, session_id:tmp.session_id}),
			set(tmp.username, ''),
			set(tmp.session_id, -1),
			set(tmp.salt, null),
			set(tmp.servers, null),
			set(tmp.lobby_users, []),
			set(tmp.game_selection, null),
			set(tmp.lobby_games, []),			
			// XXX clear games/user/chat lists
			fire_event('redraw_interface'),
		]",
		send_heartbeat: "if(vars.client != null and vars.client.in_flight = 0, checked_tbs_send({
			type: 'lobby_heartbeat', 
			user: tmp.username, 
			session_id: tmp.session_id, 
		}))",
		lobby_create_game: "checked_tbs_send({
			type: 'lobby_create_game',
			game_type: tmp.game_selection,
			user: tmp.username, 
			session_id: tmp.session_id, 
		})",
		do_join_game: "checked_tbs_send({
			type: 'lobby_join_game',
			game_id: tmp.lobby_games[widgets.games_list_grid.selected_row].game_id,
			user: tmp.username, 
			session_id: tmp.session_id, 
		})",
		do_join_reply: "def(req_user, reply) ->commands checked_tbs_send({
			type: 'lobby_join_reply', 
			user: tmp.username, 
			session_id: tmp.session_id, 
			game_id: tmp.lobby_game_id,
			accept: reply, 
			requesting_user: req_user,
		})",
		do_start_game: "checked_tbs_send({
			type: 'lobby_start_game', 
			user: tmp.username, 
			session_id: tmp.session_id, 
			game_id: tmp.lobby_game_id
		})",
		do_add_bot: "debug('finish add bot')",
		
		do_request_to_join: "def(user) ->commands [set(me.widgets.child, {
			type: 'dialog',
			id: 'request_to_join_dlg',
			background_alpha: 255,
			background_frame: 'empty_window',
			upscale_frame: false,
			rect: [0.35*level_width, 0.2*level_height, 0.6*level_width, 0.3*level_height],
			zorder: 2000,
			on_close: def(cancelled) [do_join_reply(tmp.requesting_player, true), schedule(1,enable_frames(true)), set(me.widgets.request_to_join_dlg, null)],
			children: [{
				type: 'label', 
				text: 'Player ' + user + ' has requested to join. Allow?',
				color: vars.color,
				font: vars.font,
				size: 28,
				xy: [0.35*level_width, 10],
				align_h: 'middle',
			}, {
				type: 'button',
				rect: [0.2*level_width, 0.3*level_height - 75, 150, 40],
				label: {type: 'label', font:vars.font, size: 20, color:vars.color, text: 'Yes'},
				on_click: def() [
					schedule(1, enable_frames(true)), 
					set(me.widgets.request_to_join_dlg, null),
					do_join_reply(tmp.requesting_player, true),
					set(tmp.requesting_player, null),
				],
				align_h: 'middle',
			}, {
				type: 'button',
				rect: [0.55*level_width, 0.3*level_height - 75, 150, 40],
				label: {type: 'label', font:vars.font, size: 20, color:vars.color, text: 'No'},
				on_click: def() [
					schedule(1,enable_frames(true)), 
					set(me.widgets.request_to_join_dlg, null), 
					do_join_reply(tmp.requesting_player, false), 
					set(tmp.requesting_player, null)
				],
				align_h: 'middle',
			}],
		}), 
		enable_frames(false),
		set(tmp.requesting_player, user)
		]",
		
		gl_button_widget: "def(pindex, game) ->widget widget(me, if(size(game.users) > pindex, {
			type: 'grid',
			columns: 1,
			children: [{
				type: 'image',
				image: 'silhouette.png',
				image_width: 16,
				image_height: 16,
			}, {
				type: 'label',
				font: vars.font,
				color: vars.color,
				size: 14,
				text: game.users[pindex],
			}],
		}, {
			type: 'button',
			id: 'join_button',
			enabled: if(tmp.signed_on, true, false),
			label: {
				type: 'label',
				id: 'join_label',
				font: vars.font,
				color: vars.color,
				size: 14,
				text: if(tmp.username in game.users, 'Add Bot', 'Join'),
			},
			on_click: def() if(tmp.username = game.users[0], do_add_bot, [
				spawn('select_deck_controller', 0, 0, 1), 
				set(widgets.join_button.disable, true),
				info_text('Waiting for players to respond...')]),
		}))",
		
		make_games_list: "map(tmp.lobby_games, widget(me, {
			type: 'grid',
			columns: 2 + value.max_players - 1,
			horizontal_padding: 20,
			children: [{
				type: 'image',
				image: 'silhouette.png',
				image_width: 32,
				image_height: 32,
			}, {
				type: 'label',
				font: vars.font,
				color: vars.color,
				size: 20,
				text: if(size(value.users) > 0, value.users[0], 'BADUSER'),
			}] + map(range(value.max_players-1), player_index, gl_button_widget(player_index+1, value))
		}))",
	
		games_list_widget: "widget(me, {
			type: 'dialog', 
			id: 'games_list_dlg',
			rect: [0, 0, 2*level_width/3, level_height],
			background_alpha: 255,
			background_frame: 'empty_window',
			upscale_frame: false,
			cursor: [10, 10],
			children: [{
				type: 'grid',
				columns: 3,
				horizontal_padding: 40,
				children: [{
					type: 'text_editor', 
					id: 'username_edit_box',
					font_size: 12, 
					color: vars.color,
					width: 200, 
					height: 30,
					text: USERNAME or '',
					enabled: if(tmp.signed_on, false, true),
					on_change: 'set(tmp.username, text)'
				}, {
					type: 'text_editor', 
					id: 'password_edit_box',
					font_size: 12, 
					color: vars.color,
					width: 200, 
					height: 30,
					text: if(PASSWORD, '********', ''),
					enabled: if(tmp.signed_on, false, true),
					on_change: 'if(text != q(********), set(tmp.password, text))'
				}, {
					type: 'button', 
					id: 'sign_on_button',
					padding: [25, 10],
					enabled: tmp.sign_on_button_state,
					label: {
						type: 'label', 
						text: if(tmp.signed_on, 'Sign Off', 'Sign On'), 
						size: 16, 
						color: vars.color, 
						font: vars.font
					},
					on_click: def() if(tmp.password or PASSWORD, if(tmp.signed_on, [
						do_sign_off,
						set(me.widgets.sign_on_button.disable, true),
						set(tmp.sign_on_button_state, false),
					], [
						do_sign_on,
						set(me.widgets.sign_on_button.disable, true),
						set(tmp.sign_on_button_state, false),
					]), error_text('No password given'))
				}],
			}, {
				type: 'grid',
				columns: 2,
				horizontal_padding: 40,
				children: [{			
					type: 'button',
					id: 'create_game_button',
					padding: [25, 10],
					enabled: if(tmp.signed_on, true, false),
					label: {
						type: 'label', 
						text: 'Create Game', 
						size: 16, 
						color: vars.color, 
						font: vars.font
					},
					on_click: def() spawn('create_game_controller', 0, 0, 1),
				}, {
					type: 'button',
					id: 'start_game_button',
					padding: [25, 10],
					enabled: if(tmp.signed_on, true, false),
					label: {
						type: 'label', 
						text: 'Start Game', 
						size: 16, 
						color: vars.color, 
						font: vars.font
					},
					on_click: def() do_start_game,
				}]
			}, {
				type: 'grid',
				id: 'games_list_grid',
				columns: 1,
				column_widths: 2*level_width/3,
				allow_selection: true,
				max_height: 2*level.height/3,
				wh: [2*level_width/3, 2*level.height/3],
				children: make_games_list,
			}, {
				type: 'label',
				size: 20,
				y: level_height - 40,
				x: 10,
				id: 'error_text',
				color: tmp.last_error_color,
				font: vars.font,
				text: tmp.last_error_msg,
			}],
		})",
		
		user_widget: "def(username) ->widget widget(me, {
			type: 'grid',
			columns: 2,
			horizontal_padding: 20,
			children: [{
				type: 'image',
				image: 'silhouette.png',
				image_width: 16,
				image_height: 16,
			}, {
				type: 'label',
				font: vars.font,
				color: vars.color,
				size: 18,
				text: username,
			}],
		})",
		
		user_list_widget: "widget(me, {
			type: 'dialog', 
			id: 'user_list_dlg',
			rect: [2*level_width/3, 0, level_width/3, level_height/2],
			background_alpha: 255,
			background_frame: 'empty_window',
			upscale_frame: false,
			cursor: [10, 10],
			children: [{
				type: 'grid',
				id: 'user_list_grid',
				columns: 1,
				column_widths: level_width/2,
				max_height: level_height/2,
				children: map(tmp.lobby_users, user_widget(value)),
			}],
		})",
		
		chat_box_widget: "widget(me, {
			type: 'dialog', 
			rect: [2*level_width/3, level_height/2, level_width/3, level_height/2],
			background_alpha: 255,
			background_frame: 'empty_window',
			upscale_frame: false,
			cursor: [10, 10],
			children: [
			]
		})",
		
		draw_interface: "set_widgets(me, [games_list_widget, user_list_widget, chat_box_widget])",
    },
    
    on_create: "[
		fire_event('window_resize', {width: level.camera_position[2], height: level.camera_position[3]}),
		console_output_to_screen(false),
		set(x, 0), set(y, 0),
        set(vars.client, tbs_client(TBS_SERVER_ADDRESS, TBS_SERVER_PORT)),
		fire_event(me, 'redraw_interface'),
		fire_event(me, 'get_server_info'),
    ]",
	
	on_window_resize: "[
		set(level.dimensions, [0,0,new_width,new_height]),
		fire_event(me, 'redraw_interface'),
	] where new_width = max(width,800)-1
	  where new_height = max(height,600)-1
	",

	on_redraw_interface: "draw_interface",
	on_get_server_info: "get_server_info",
	on_execute_login: "if(tmp.password or PASSWORD, do_sign_on, error_text('No password given'))",
	on_update_client_list: "if(me.widgets.user_list_dlg, set(me.widgets.user_list_dlg, user_list_widget), set(me.widgets.child, user_list_widget))",
	
	on_process: "if(vars.client, tbs_process(vars.client))",
    
    on_connection_error: "[
		if(not tmp.signed_on, [set(me.widgets.sign_on_button.enable, true), set(tmp.sign_on_button_state, true)]),
		error_text(error),
	]",
    
	on_connection_success: "error_text(null)",

	on_child_spawned: "[set(tmp.child, child), enable_frames(false)]",
	
	on_do_create_game: "[
		set(tmp.game_selection, game_type),
		set(tmp.create_game_params, params),
		set(tmp.child, null), 
		enable_frames(true),
		fire_event('create_game'),
	]",
	on_create_game_cancelled: "[set(tmp.child, null), enable_frames(true)]",
	on_create_game: "lobby_create_game",
	
	on_do_join_game: "[set(tmp.child, null), enable_frames(true), set(tmp.create_game_params, params), do_join_game]",
	join_game_user_cancel: "[set(tmp.child, null), enable_frames(true), set(widgets.join_button.disable, false)]",
	
	on_draw_games_list: "[
		debug('LOBBY GAMES:', tmp.lobby_games),
		if(me.widgets.games_list_dlg, set(me.widgets.games_list_dlg, games_list_widget), set(me.widgets.child, games_list_widget))
	]",
	
	on_message_received: "[debug(message.type, message),
		switch(message.type, 
			'lobby_heartbeat_reply', send_heartbeat,
			
			'lobby_server_info', [
				if(message.servers, [
					set(tmp.servers, message.servers),
					set(tmp.game_selection, game_key),
					info_text('Got game server information.'),
				] where game_key = keys(message.servers)[0]), 
				get_lobby_users
			],
			
			'lobby_users', [
				set(tmp.lobby_users, message.users), 
				set(tmp.lobby_games, message.games),
				set(widgets.sign_on_button.enable, true),
				set(tmp.sign_on_button_state, true),
				info_text('Got lobby user list.'),
				if(message.users, fire_event('update_client_list')),
				if(message.games, fire_event('draw_games_list')),
				send_heartbeat,
			],
			
			'lobby_password_request', [
				set(tmp.salt, message.salt),
				set(tmp.session_id, message.session_id),
				fire_event('execute_login')
			],
			
			'lobby_user_login', [
				if(message.user = tmp.username, [
					set(widgets.sign_on_button.enable, true),
					set(tmp.sign_on_button_state, true),
					set(widgets.sign_on_button.label.text, 'Sign Off'),
					set(widgets.create_game_button.enable, true),
					set(widgets.username_edit_box.enable, false),
					set(widgets.password_edit_box.enable, false),
					set(tmp.signed_on, true), 
					info_text('Logged in okay'),
					get_lobby_users
				], send_heartbeat),
				if(not(message.user in tmp.lobby_users), add(tmp.lobby_users, [message.user])),
				fire_event('update_client_list'),				
			],
			
			'error', [
				debug('ERROR IN SENT MESSAGE', message.description),
				error_text(message.description),
			],
			
			'lobby_user_quit', [
				if(message.user = tmp.username, [
					set(tmp.signed_on, false), 
					set(widgets.sign_on_button.label.text, 'Sign On'),
					set(widgets.sign_on_button.enable, true),
					set(tmp.sign_on_button_state, true),
					set(widgets.username_edit_box.enable, true),
					set(widgets.password_edit_box.enable, true),
				], [
					set(tmp.lobby_users, filter(tmp.lobby_users, value != message.user)),
					fire_event('update_client_list'),
					send_heartbeat,
				])
			],
			
			'lobby_game_created', [
				debug('LGC:', message.user, message.game_id, message.game_type, message.max_players),
				if(tmp.username = message.user, set(tmp.lobby_game_id, message.game_id)),
				add(tmp.lobby_games, [{
					users: [message.user],
					game_id: message.game_id,
					game_type: message.game_type,
					max_players: message.max_players,
				}]),
				fire_event('draw_games_list'),
				send_heartbeat,
			],
			
			'lobby_remove_game', [
				set(tmp.lobby_games, filter(tmp.lobby_games, value.game_id != message.game_id)),
				fire_event('draw_games_list'),
				send_heartbeat,
			],
			
			'lobby_player_left_game', [
				map(tmp.lobby_games, set(value.users, filter(value.users, u, u != message.user))),
				fire_event('draw_games_list'),
				send_heartbeat,
			],
			
			'lobby_request_to_join', [
				do_request_to_join(message.user),
				send_heartbeat,
			],
			
			'lobby_player_join_reply', [
				if(me.widgets.request_to_join_dlg, [set(me.widgets.request_to_join_dlg, null), enable_frames()]), 
				if(message.requesting_user = tmp.username, set(tmp.lobby_game_id, if(message.accept, message.game_id, -1))),
				map(tmp.lobby_games, if(value.game_id = message.game_id and message.accept, add(value.users, [message.requesting_user]))),
				if(message.requesting_user = tmp.username and not message.accept, error_text('Your request to join was rejected.')),
				fire_event('draw_games_list'),
				send_heartbeat,
			],
			
			'game_created', [
				set(tmp.lobby_games, filter(tmp.lobby_games, value.game_id != tmp.lobby_game_id)),
				set(vars.client, null),
				teleport('level1.cfg', '', 'fade', playable) 
					where playable = object_playable('citadel_controller', 336, 372, 0, {
						game_server_address: message.game_server_address, 
						game_server_port: message.game_server_port, 
						session_id: tmp.session_id, 
						game_created: true} + tmp.create_game_params)
			],
		)
    ]",

	on_end_anim: "animation('normal')",
	
	animation: {
		id: "normal",
		image: "effects/particles.png",
		x: 86,
		y: 73,
		w: 28,
		h: 28,
		collide: [0,0,28,28],
		frames: 1,
		duration: 1000,
	},
	
	editor_info: {
		category: "controllers",
		var: [
			{
				name: "x_bound",
				type: "x",
				value: "x-100",
			},
			{
				name: "x2_bound",
				type: "x",
				value: "x+150",
			},
			{
				name: "y_bound",
				type: "y",
				value: "y-100",
			},
			{
				name: "y2_bound",
				type: "y",
				value: "y+150",
			},
		],
	},
}
