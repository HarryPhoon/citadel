{
	id: "creature_status",
	is_strict: true,

	hidden_in_game: true,

	animation: [
	{
		id: "normal",
		image: "effects/particles.png",
		x: 86,
		y: 73,
		w: 28,
		h: 28,
		collide: [0,0,28,28],
		frames: 1,
		duration: 1000,
	}
	],

	vars: {
		creature_object: null,
		controller: null,
		creature_child: null,
		font: 'RobotoCondensed-Regular',
		color: 'antique_white',
	},

	on_spawned: "set(vars.controller, spawner)",

	properties: {
		destroy: "def() [remove_object(vars.creature_child), remove_object(me)]",
		creature_object: {
		  set: "execute(me, ([
		    spawn('creature', me.mid_x + 50, me.mid_y, 1, [set(child.zorder, zorder+5), if(value.is_building, set(child.animation, 'building')), set(child.image_num, value.image_num), set(vars.creature_child, child)]),
			set_widgets([
			  {
			  	type: 'grid',
				padding: [10,10],
				columns: 3,
				horizontal_padding: 5,
				x: 40,
				y: 60,
				children: fold(map(abilities,
				 [
				  {
					type: 'grid',
					padding: [2,2],
					columns: value.cost,
					children: map(range(value.cost),
					  {
						type: 'image',
						image: 'magic-icons.png',
						area: [3+(context.value.school-1)*17,3,18+(context.value.school-1)*17,18],
					  })
				  },
				  if(controller.can_use_ability(new_creature_object, value.name),
				  //if we can use the ability show a clickable button.
				  {
					type: 'button',
					resolution: 'normal',
					//padding: [10, 10],
					wh: [100, 25],
					label: {type: 'label', text: value.name, font: vars.font, size: 12, color: vars.color},
					on_click: 'vars.controller.ability_clicked(vars.creature_object, q(' + value.name + '))'
				  },

				  //can't use the ability, show a label.
				  {
				    type: 'label',
					text: value.name,
					wh: [100, 25],
					font: vars.font,
					color: vars.color,
					size: 12
				  }
				  ),


				  {
					type: 'label',
					text: value.rules,
					font: vars.font,
					color: vars.color,
					size: 12
				  }
				 ]),
				 a + b
				)
			  }
			]) where abilities = [a | a <- value.abilities, not is_string(a)],
		    set(vars.creature_object, value),
		  ] asserting controller
		    where new_creature_object = value,
		          controller = find(level.chars, value.type = 'citadel_controller')))",
		  get: "vars.creature_object"
		},
	},
}
