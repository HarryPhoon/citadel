{
	id: "player_profile_pane",
	is_strict: true,

	properties: {
		title_controller: { type: "obj title_controller" },

		_width: "int :: lib.citadel.py(380)",
		_height: "int :: lib.citadel.py(184)",

		_avatar: { type: "null|obj player_avatar" },
		_combo: { type: "null|obj combo_label_controller" },

		_adjust_gold_display: { type: "int", default: 0 },

		render: "def() ->commands [
		set(animation, lib.citadel.render_frame(c, ww, hh,
		[
			c.rectangle(0,0,ww,hh),
			c.set_source_rgba(0.09,0.10,0.11,1),
			c.fill(),

			c.set_line_width(lib.citadel.dpy(1.0)),
			c.rectangle(0,0,ww,hh),
			c.set_source_rgba(0.22,0.25,0.29,1),
			c.stroke(),

			c.move_to(0,lib.citadel.py(28)),
			c.line_to(ww,lib.citadel.py(28)),
			c.stroke(),

			c.set_source_rgba(0,1,1,1),

			c.move_to(lib.citadel.py(164), lib.citadel.py(70)),
			c.line_to(ww - lib.citadel.py(10), lib.citadel.py(70)),
			c.stroke(),

			c.set_source_rgba(1,1,1,1),

			map(fragments, [
				c.save(),
				c.translate(lib.citadel.py(8), lib.citadel.py(6)),
				value.path,
				c.fill(),
				c.restore(),
			])

			where fragments = c.markup_text(q(<font size='14'>Player Profile</font>), { width: lib.citadel.py(1000), scale: lib.citadel.dpy(1.0) }),


			map(fragments, [
				c.save(),
				c.translate(lib.citadel.py(164), lib.citadel.py(40)),
				value.path,
				c.fill(),
				c.restore(),
			])

			where fragments = c.markup_text(q(<font size='24'>) + lib.chat.nick_display(title_controller.username) + q(</font>), { width: lib.citadel.py(1000), scale: lib.citadel.dpy(1.0) }),


			map(fragments, [
				c.save(),
				c.translate(lib.citadel.py(290), lib.citadel.py(43)),
				value.path,
				c.fill(),
				c.restore(),
			])

			where fragments = c.markup_text(q(<font size='20'>Level ) + q(</font>), { width: lib.citadel.py(1000), scale: lib.citadel.dpy(1.0) }),


			map(fragments, [
				c.save(),
				c.translate(lib.citadel.py(200), lib.citadel.py(80)),
				value.path,
				c.fill(),
				c.restore(),
			])

			where fragments = c.markup_text(q(<font size='16'>Gold: ) + str((title_controller.account_info.gold or 0) - _adjust_gold_display) + q(</font>), { width: lib.citadel.py(1000), scale: lib.citadel.dpy(1.0) }),


			map(fragments, [
				c.save(),
				c.translate(lib.citadel.py(290), lib.citadel.py(80)),
				value.path,
				c.fill(),
				c.restore(),
			])

			where fragments = c.markup_text(q(<font size='16'>Packs: ) + q(</font>), { width: lib.citadel.py(1000), scale: lib.citadel.dpy(1.0) }),


			map(fragments, [
				c.save(),
				c.translate(lib.citadel.py(164), lib.citadel.py(110)),
				value.path,
				c.fill(),
				c.restore(),
			])

			where fragments = c.markup_text(q(<font size='14'>Matches: ) + str(title_controller.account_info.games_played) + q(</font>), { width: lib.citadel.py(1000), scale: lib.citadel.dpy(1.0) }),


			map(fragments, [
				c.save(),
				c.translate(lib.citadel.py(260), lib.citadel.py(110)),
				value.path,
				c.fill(),
				c.restore(),
			])

			where fragments = c.markup_text(q(<font size='14'>Wins: ) + str(title_controller.account_info.games_won) + q(</font>), { width: lib.citadel.py(1000), scale: lib.citadel.dpy(1.0) }),

			
			if(title_controller.account_info.first_match != null,
				map(fragments, [
					c.save(),
					c.translate(lib.citadel.py(164), lib.citadel.py(130)),
					value.path,
					c.fill(),
					c.restore(),
				])

				where fragments = c.markup_text(q(<font size='14'>First Match: ) + str(first_match.year) + '/' + str(first_match.month) + '/' + str(first_match.day) + q(</font>), { width: lib.citadel.py(1000), scale: lib.citadel.dpy(1.0) })
				where first_match = time(title_controller.account_info.first_match)
			),
		]))
			where ww = _width
			where hh = _height
			where c = canvas()
		]",

		dummy_handler: "def(int) ->commands []",

		create_objects: "def() ->commands [
			remove_object(_avatar),
			spawn('player_avatar', {
				 player_num: 0,
				 _creature: null,
				 _avatar: title_controller.account_info.avatar,
				 zorder: zorder+10,
				 _top: y + lib.citadel.py(40),
				 _edge: lib.citadel.py(26),
				 _width: lib.citadel.py(130),
				 _height: lib.citadel.py(130),
				 _nick: '',
				 facing: 1,
				 highlight: true,
				 current_desaturation: 0.0,
				 target_desaturation: 0.0,
			}, [
				set(_avatar, child),
			]),

			spawn('combo_label_controller', {
				xpos: x + lib.citadel.py(60) + _width/2,
				ypos: y2 - lib.citadel.py(14),
				items: ['Recent Games', 'Stats'],
				_font_size: lib.citadel.py(14),
				click_handler: dummy_handler,
				zorder: zorder+10,
			}, [
				set(_combo, child),
			]),
		]",
	},

	on_create: "render(); create_objects()",

	on_being_removed: "map(spawned_children, remove_object(value))",

	on_type_updated: "fire_event('create')",
}
