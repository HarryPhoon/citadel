{
	id: "open_packs_screen",
	is_strict: true,

	hidden_in_game: true,

	properties: {
		_hidden_objects: { type: "[custom_obj]", default: [] },
		controller: { type: "obj title_controller" },

		_button: { type: "null|obj button_controller" },
		_pack: { type: "null|obj pack" },

		_exhausted_packs: { type: "bool", default: false },

		spawn_button: "def() ->commands
		execute(me,
		[

		remove_object(_button),
		set(_button, null),

		remove_object(_pack),
		set(_pack, null),

		if(num_owned_packs > 0, [

			spawn('button_controller', {
				mid_x: level.dimensions[2]/2 - lib.gui.py(200),
				mid_y: level.dimensions[3]/2 + lib.gui.py(140),
				text: 'Open Pack',
				button_width: lib.gui.py(140),
				button_height: lib.gui.py(45),
				_font_size: 22,
				color_scheme: lib.citadel.library_color_scheme,
				on_click: me.open_pack,
			}, [
				set(_button, child),
			]),

			spawn('pack', {
				mid_x: level.dimensions[2]/2 - lib.gui.py(200),
				mid_y: level.dimensions[3]/2 - lib.gui.py(80),
				zorder: 4000,
				scale: lib.gui.dpy(1.0),
			}, [
				set(_pack, child),
			]),

			set(_exhausted_packs, false),

		], [
			map(cards_in_store, [
				spawn('card', {
					mid_x: x_pos,
					mid_y: y_pos,
					zorder: 100,
					card_type: card_obj,
					in_hand: false,
					allow_drag: false,
					card_size: 1.5,
					show_shadow: true,
					use_absolute_screen_coordinates: true,
				}, [
					add(_widgets, [child]),
				]),

				if(num_owned > 0,
					spawn('label', {
						x2: x_pos + lib.gui.py(150),
						y: y_pos + lib.gui.py(40),
						_text: [sprintf('x%d', num_owned)],
						_bg_color: [0.04,0.06,0.09,1.0],
						_font_size: lib.citadel.py(24),

						_pad_left: lib.citadel.py(24),
						_pad_right: lib.citadel.py(8),
						_pad_above: lib.citadel.py(6),
						zorder: -1,
					}, [
						add(_widgets, [child]),
					])
				),

				spawn('label', {
					mid_x: x_pos,
					mid_y: y_pos + lib.gui.py(148),
					_text: [sprintf('%d Gold', lib.citadel.card_gold_cost(card_obj))],
					_color: if(can_afford, [1,1,1,1], [1,0,0,1]),
					_font_size: 20,
				}, [
					add(_widgets, [child]),
				]),

				if(can_afford and num_owned < 3,
				spawn('button_controller', {
					mid_x: x_pos,
					mid_y: y_pos + lib.gui.py(180),
					text: 'Buy',
					_font_size: lib.gui.py(20),
					button_width: lib.gui.py(60),
					button_height: lib.gui.py(30),
					color_scheme: lib.citadel.library_color_scheme,
					on_click: (def()->commands me._buy_card(value, lib.citadel.card_gold_cost(card_obj))),
				}, [
					add(_widgets, [child]),
				])
				),

				set(_cards_for_sale, cards_in_store),
			]
			where x_pos = level.dimensions[2]/2 - lib.gui.py(225) + pos*lib.gui.py(370)
			where y_pos = level.dimensions[3]/3 + lib.gui.py(40)
			where num_owned = count(controller.client_state.account_info.collection, value.name = context.value)
			where can_afford = (lib.citadel.card_gold_cost(card_obj) <= controller.client_state.account_info.gold)
			where card_obj = lib.citadel.create_card(value)
			where pos = index - size(cards_in_store)/2
			) where cards_in_store = lib.citadel.cards_in_store(),

			spawn('label', 0, 0, {
				mid_x: level.dimensions[2]/2 - lib.gui.py(225),
				mid_y: level.dimensions[3]/3 - lib.gui.py(170),
				_text: [q(Daily Card Sale)],
				_color: [1,1,1,1],
				_font_size: 48,
			}, [
				add(_widgets, [child]),
			]),

			set(_exhausted_packs, true),
		]),

		])
		",

		_buy_card: "def(string card_name, int price) ->commands [
			controller.buy_card(card_name, price);
			create_widgets()
		]
		",

		_cards_for_sale: { type: "[string]", default: [] },

		_widgets: { type: "[custom_obj]", default: [] },

		create_widgets: "def() ->commands
		[
		map(_cards, remove_object(value)),
		set(_cards, []),

		map(_widgets, remove_object(value)),
		set(_widgets, []),

		spawn('combo_label', 0, 0, {
			x: lib.gui.py(112),
			y: level.dimensions[3] - lib.gui.py(64),
			_text: 'Main Menu',
			_font_size: lib.gui.py(26),
			left_rect: lib.gui.lib.gui.py(-4),
			right_rect: lib.gui.lib.gui.py(2),
			grouping: 'back',
			index: 0,
			click_handler: (def(obj combo_label lb) ->commands return_to_titlescreen()),
		}, [
			add(_widgets, [child]),
		]),

		spawn('pack', {
			mid_x: lib.gui.py(1380),
			mid_y: lib.gui.py(400),
			scale: lib.gui.dpy(0.45),
			zorder: 100,
		}, [
			add(_widgets, [child]),
		]),

		spawn('label', 0, 0, {
			x2: lib.gui.py(1410),
			y: lib.gui.py(475),
			_text: [sprintf('Core set pack: %d gold', lib.citadel.pack_gold_cost())],
			_color: if(controller.client_state.account_info.gold >= lib.citadel.pack_gold_cost(), [1,1,1,1], [1,0,0,1]),
			_font_size: 18,
		}, [
			add(_widgets, [child]),
		]),

		if(controller.client_state.account_info.gold >= lib.citadel.pack_gold_cost(),
			spawn('button_controller', {
				mid_x: lib.gui.py(1380),
				mid_y: lib.gui.py(548),
				text: 'Buy',
				_font_size: lib.gui.py(20),
				button_width: lib.gui.py(60),
				button_height: lib.gui.py(30),
				color_scheme: lib.citadel.library_color_scheme,
				on_click: (def()->commands controller.buy_pack('core')),
			}, [
				add(_widgets, [child]),
			])
		),

		spawn_button(),

		]
		",

		open_pack: "def() ->commands
		[
			if(_pack,
				animate(_pack, {
					brightness: 1000,
				}, {
					duration: 20,
				})
			),
			remove_object(_button),
			set(_button, null),
			controller.send_message({
				type: 'open_pack',
				set: 'core',
			}),
		]
		",

		mouseover_card: "def(int n) ->commands
		if(card.cycle > (n+1)*20,
		[
			animate(card, {
				card_size: 2.6,
				mid_x: level.dimensions[2]/2 + int(0.75*lib.gui.py(500)*sin(angle)),
				mid_y: level.dimensions[3]/2 + int(0.75*lib.gui.py(300)*cos(angle)),
			}, {
				duration: 20,
			}),

			set(card.zorder, 3801)
		]
		)
		where card = _cards[n]
		where angle = 360.0 - (decimal(n+1)/size(_cards))*360.0
		",

		mouseoff_card: "def(int n) ->commands
		if(card.cycle > (n+1)*20,
		[
			animate(card, {
				card_size: 1.5,
				mid_x: level.dimensions[2]/2 + int(lib.gui.py(500)*sin(angle)),
				mid_y: level.dimensions[3]/2 + int(lib.gui.py(300)*cos(angle)),
			}, {
				duration: 20,
				on_complete: set(card.zorder, 3800 - n),
			}),
		]
		)
		where card = _cards[n]
		where angle = 360.0 - (decimal(n+1)/size(_cards))*360.0
		",

		_cards: { type: "[obj card]", default: [] },

		pack_opened: "def(map msg) ->commands
		execute(me,
		[
			if(_pack != null, [
				spawn('fizzle_effect', {
					mid_x: _pack.mid_x,
					mid_y: _pack.mid_y,
					zorder: 4200,
					scale: lib.gui.dpy(0.5),
				}),

				remove_object(_pack),
				set(_pack, null),
			]),

			map(_cards, remove_object(value)),
			set(_cards, []),

			map(reverse(contents), [
				spawn('card', {
					mid_x: level.dimensions[2]/2,
					mid_y: level.dimensions[3]/2,
					zorder: 3800 - index,
					card_type: lib.citadel.create_card(value.name),
					in_hand: false,
					allow_drag: false,
					card_size: 1.5,
					show_shadow: true,
					use_absolute_screen_coordinates: true,
					mouse_enter_handler: (def() ->commands mouseover_card(index)),
					mouse_leave_handler: (def() ->commands mouseoff_card(index)),
				}, [
					add(_cards, [child]),
					schedule(index*20,
						animate(child, {
							mid_x: level.dimensions[2]/2 + int(lib.gui.py(500)*sin(angle)),
							mid_y: level.dimensions[3]/2 + int(lib.gui.py(300)*cos(angle)),
						}, {
							duration: 20,
						})
					),
				])
			] where angle = 360.0 - (decimal(index+1)/size(contents))*360.0),

			spawn('button_controller', {
				mid_x: level.dimensions[2]/2,
				mid_y: level.dimensions[3]/2,
				text: 'Continue',
				button_width: lib.gui.py(130),
				button_height: lib.gui.py(44),
				_font_size: 24,
				color_scheme: lib.citadel.library_color_scheme,
				on_click: me.finish_pack,
			}, [
				set(_button, child),
			]),

		])
			where set = string<- msg['set']
			where contents = [CardInstance]<- msg['contents']
		",

		finish_pack: "def() ->commands
		create_widgets()
		",

		num_owned_packs: "int :: controller.client_state.account_info.packs['core']",

		return_to_titlescreen: "def() ->commands
		execute(me,
		controller.transition_screen(
		; [
			remove_object(me),
		],
		[enum transition_after_zoom, enum transition_all_zorders, enum transition_no_remove_objects]
		)
		)
		",
	},

	events: {
		create: "[
			[[add(_hidden_objects, [c]), add(c.y, lib.gui.py(10000))] | c <- level.chars, c != me, c != controller, c not in profile_pane_children],
			create_widgets(),
		]
		where profile_pane_children = controller.spawned_descendants(profile_pane)
		where profile_pane = find_or_die(level.chars, value is obj player_profile_pane)",

		process: "[
			if(_exhausted_packs and num_owned_packs > 0, create_widgets()),
		]",

		being_removed: "[
			map(_widgets, remove_object(value)),
			map(spawned_children, remove_object(value)),
			map(_hidden_objects, add(value.y, -lib.gui.py(10000))),
		]",
	},
}
