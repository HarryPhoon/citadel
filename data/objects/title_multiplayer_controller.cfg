{
	id: "title_multiplayer_controller",
	hidden_in_game: true,
	is_strict: true,

	properties: {
		level_width: "int :: level.dimensions[2]",
		level_height: "int :: level.dimensions[3] - 80",

		_mm_client_state: { type: "class mm_client_state" },

		mm_client: "object <- _mm_client_state.client",

		_decks: "DeckMap :: lib.citadel.get_decks()",

		_go_button: { type: "null|obj button_controller" },
		_cancel_button: { type: "null|obj button_controller" },

		_queued_label: { type: "null|obj label" },


		spawn_deck_summaries: "def() ->commands [
			[remove_object(c) | c <- level.chars, c is obj library_deck_summary],

			map(_decks, spawn('library_deck_summary', 0, 0, {selected: index = if(selected_index >= 0, selected_index, 0), zorder: 500, deck_name: key, x2: level_width, y: 28 + 72 + 72*index}))
			    where selected_index = index(keys(_decks), find(keys(_decks), value = lib.citadel.preferences.selected_deck)),
		]",

		spawn_objects: "def() ->commands [
			spawn_deck_summaries(),

			if(_go_button, [remove_object(_go_button), set(_go_button, null)]),
			if(_cancel_button, [remove_object(_cancel_button), set(_cancel_button, null)]),
			if(_queued_label, [remove_object(_queued_label), set(_queued_label, null)]),

			if(_in_queue, [

				spawn('button_controller', level_width - 220, level_height - 50, {
					text: 'Cancel',
					on_click: (def() -> commands fire_event(me, 'cancel_game')),
					button_width: 240,
					button_height: 50,
				}, [
					set(_cancel_button, child),
				]),
			], [

				spawn('button_controller', level_width - 220, level_height - 50, {
					text: 'Play',
					on_click: (def() -> commands fire_event(me, 'play_game')),
					button_width: 240,
					button_height: 50,
				}, [
					set(_go_button, child),
				]),

			]),

		]",

		_in_queue: { default: false },

		chosen_deck: "string :: find_or_die(level.chars, value is obj library_deck_summary and value.selected).deck_name",

		title_controller: "obj title_controller :: find_or_die(level.chars, value is obj title_controller)",
	},

	on_create: "[
		spawn_objects(),
	]",

	on_process: "[
		if(chosen_deck != lib.citadel.preferences.selected_deck,
			add(lib.citadel.preferences, { selected_deck: chosen_deck })),

		if(_in_queue and level.cycle%10 = 0,
		[
			if(_queued_label != null, remove_object(_queued_label)),
			spawn('label', level_width - 220, level_height - 100, {
				_text: ['Queued for Game' + fold(map(range(nitem), '.'), a+b)],
				_font_size: 28,
				_halign: 'left',
			}, [
				set(_queued_label, child),
			])
		where nitem = (level.cycle/10)%3 + 1
		]
		)
	]",

	on_play_game: "[
		title_controller.send_matchmaking_request(),
		set(_in_queue, true),

		bind_command(spawn_objects),
	]",

	on_cancel_game: "[
		title_controller.send_cancel_matchmaking_request(),
		set(_in_queue, false),
		bind_command(spawn_objects),
	]",

	on_being_removed: "map(spawned_children, remove_object(value))",

	on_window_resize: "[
		spawn_objects(),
	]",
}
