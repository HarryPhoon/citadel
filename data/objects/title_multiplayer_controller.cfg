{
	id: "title_multiplayer_controller",
	hidden_in_game: true,
	is_strict: true,

	prototype: ["title_multiplayer_base"],

	properties: {
		level_width: "int :: level.dimensions[2]",
		level_height: "int :: level.dimensions[3] - lib.citadel.px(80)",

		_mm_client_state: { type: "class mm_client_state" },

		mm_client: "object <- _mm_client_state.client",

		_decks: "DeckMap :: _mm_client_state.account_info.decks",

		_last_game_servers: { type: "[GameServer]", default: [] },
		_last_users_online: { type: "[OnlineUser]", default: [] },

		_type_button: { type: "null|obj combo_controller" },
		_go_button: { type: "null|obj button_controller" },
		_cancel_button: { type: "null|obj button_controller" },

		_queued_label: { type: "null|obj label" },

		_chat_area: { type: "null|obj chat_area" },

		spawn_deck_summaries: "def() ->commands [
			[remove_object(c) | c <- level.chars, c is obj library_deck_summary],

			map(_decks, spawn('library_deck_summary', 0, 0, {selected: index = if(selected_index >= 0, selected_index, 0), zorder: 500, deck_name: key, x2: level_width, y: lib.citadel.py(28 + 72) + lib.citadel.py(72)*index}))
			    where selected_index = index(keys(_decks), find(keys(_decks), value = lib.citadel.preferences.selected_deck)),
		]",

		receive_chat_messages: "def([{nick: string, message: string}] messages) ->commands
		[
			if(_chat_area,
				map(messages, _chat_area.message_received(value.nick, value.message))
			)
		]",

		spawn_objects: "def() ->commands [
			spawn_deck_summaries(),

			if(_type_button, [remove_object(_type_button), set(_type_button, null)]),
			if(_go_button, [remove_object(_go_button), set(_go_button, null)]),
			if(_cancel_button, [remove_object(_cancel_button), set(_cancel_button, null)]),
			if(_queued_label, [remove_object(_queued_label), set(_queued_label, null)]),
			if(_chat_area, [remove_object(_chat_area)]),

			[
				set(_chat_area, chat_area),
				set(chat_area.x, lib.citadel.px(10)),
				set(chat_area.y, level_height - lib.citadel.py(380)),
				add_object(chat_area),
				fire_event(chat_area, 'construct'),
			]
			where chat_area = if(_chat_area, _chat_area, object('chat_area', 0, 0, { zorder: 1000, chat_width: lib.citadel.px(340), chat_height: lib.citadel.py(300), _message_send_handler: title_controller.send_global_chat })),


			if(_in_queue, [

				spawn('button_controller', level_width - lib.citadel.px(260), level_height - lib.citadel.py(80), {
					text: 'Cancel',
					on_click: (def() -> commands fire_event(me, 'cancel_game')),
					button_width: lib.citadel.px(240),
					button_height: lib.citadel.py(50),
				}, [
					set(_cancel_button, child),
				]),
			], [

				spawn('combo_controller', level_width - lib.citadel.px(480), level_height - lib.citadel.py(80), {
					items: ['Player vs Player', 'Co-op vs AI'],
				}, [
					set(_type_button, child)
				]),

				spawn('button_controller', level_width - lib.citadel.px(260), level_height - lib.citadel.py(80), {
					text: 'Play',
					on_click: (def() -> commands fire_event(me, 'play_game')),
					button_width: lib.citadel.px(240),
					button_height: lib.citadel.py(50),
				}, [
					set(_go_button, child),
				]),

			]),

		]",

		_in_queue: { default: false },

		chosen_deck: "string :: find_or_die(level.chars, value is obj library_deck_summary and value.selected).deck_name",

		title_controller: "obj title_controller :: find_or_die(level.chars, value is obj title_controller)",

		create_user_grid: "def([OnlineUser] users) ->commands [
			set_widgets([{
				id: 'user_grid',
				x: lib.citadel.px(500),
				y: level_height - lib.citadel.py(380),
				type: 'grid',
				columns: 2,
				column_alignments: ['left', 'left'],
				column_widths: [lib.citadel.px(80), lib.citadel.px(80)],
				children: 
				[
				{
					type: 'label',
					font: 'RobotoCondensed-Bold',
					size: lib.citadel.px(14),
					color: 'antique_white',
					text: 'User',
				},

				{
					type: 'label',
					font: 'RobotoCondensed-Bold',
					size: lib.citadel.px(14),
					color: 'antique_white',
					text: 'Status',
				},
				] +
				
				
				fold(map(users, [
				{
					type: 'label',
					font: 'RobotoCondensed-Regular',
					size: lib.citadel.px(14),
					color: 'antique_white',
					text: value.id,
				},

				{
					type: 'label',
					font: 'RobotoCondensed-Regular',
					size: lib.citadel.px(14),
					color: 'antique_white',
					text: value.status,
				},
				]), a+b)
			}])
		]",

		create_server_grid: "def([GameServer] servers) ->commands [
			set_widgets([{
				id: 'server_grid',
				x: lib.citadel.px(100),
				y: lib.citadel.py(200),
				type: 'grid',
				columns: 2,
				column_alignments: ['left', 'left'],
				column_widths: [lib.citadel.px(200), lib.citadel.px(150)],
				children: fold(map(servers, [
				{
					type: 'label',
					font: 'RobotoCondensed-Regular',
					size: lib.citadel.px(24),
					color: 'antique_white',
					text: value.users[0].user + ' vs ' + value.users[1].user,
				},

				{
					type: 'button',
					color_scheme: lib.citadel.button_color_scheme,
					label: 'Observe',
					on_click: 'observe_game(' + str(index) + ')',
				},
				]), a+b)
			}])
		]",

		observe_game: "def(int index) ->commands if(index >= 0 and index < size(title_controller.game_servers), [
			title_controller.observe_game(server)
		] where server = title_controller.game_servers[index])",
	},

	on_create: "[
		spawn_objects(),
	]",

	on_process: "[
		create_server_status_labels(),

		if(chosen_deck != lib.citadel.preferences.selected_deck,
			add(lib.citadel.preferences, { selected_deck: chosen_deck })),

		if(_in_queue and level.cycle%10 = 0,
		[
			if(_queued_label != null, remove_object(_queued_label)),
			spawn('label', level_width - lib.citadel.px(220), level_height - lib.citadel.py(100), {
				_text: ['Queued for Game' + fold(map(range(nitem), '.'), a+b)],
				_font_size: lib.citadel.px(28),
				_halign: 'left',
			}, [
				set(_queued_label, child),
			])
		where nitem = (level.cycle/10)%3 + 1
		]
		),

		if(ctrl.users_online != _last_users_online, [
			set(_last_users_online, ctrl.users_online),
			create_user_grid(ctrl.users_online),
		]),

		if(ctrl.game_servers != _last_game_servers, [
			set(_last_game_servers, ctrl.game_servers),
			create_server_grid(ctrl.game_servers),
		]),
	] where ctrl = title_controller",

	on_play_game: "[
		title_controller.send_matchmaking_request(
		 if(_type_button != null and _type_button.selected_index = 0,
			{ type: 'pvp' },
			{
				type: 'coop',
				bot_users: [{ user: 'bot', bot_type: 'intro4', bot: true, avatar: 'skeletal-parasite.png', session_id: 10000, index: 1 }],
			}
		)
		),
		set(_in_queue, true),

		bind_command(spawn_objects),
	]",

	on_cancel_game: "[
		title_controller.send_cancel_matchmaking_request(),
		set(_in_queue, false),
		bind_command(spawn_objects),
	]",

	on_being_removed: "map(spawned_children, remove_object(value))",

	on_window_resize: "[
		lib.citadel.set_screen_dimensions(level),
		bind_command(spawn_objects),
	]",
}
