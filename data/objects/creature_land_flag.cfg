{
	id: "creature_land_flag",
	is_strict: true,
	always_active: true,

	properties: {

		controller: { type: "obj citadel_controller" },
		creature: { type: "obj creature" },

		banner_width: "int :: controller.tile_width/7",
		width: "int :: controller.tile_width/4 + banner_width",
		height: "int :: int(controller.tile_height*0.96)",

		has_mouseover: { type: "bool", default: false },

		is_enemy: { type: "bool" },

		raise_anim: { type: "decimal", default: 1.0 },

		animate_flag_raise: "def() ->commands
			execute(me,
			[
				set(raise_anim, 0.0),
				schedule(100,
				animate(me, {
					raise_anim: 1.0,
				}, {
					duration: 50,
					easing: lib.math.ease_out_elastic,
				})
				)
			]
			)
		",

		animate_flag_retraction: "def() ->commands
			execute(me,
			[
				animate(me, {
					raise_anim: 0.0,
				}, {
					duration: 50,
					on_complete: remove_object(me),
				})
			])
		",

		render: "def(int ww, int hh) ->Animation

		lib.citadel.render_frame(c, ww, hh, [
			if(is_enemy, c.set_source_rgba(0,0,0,1), c.set_source_rgba(1,1,1,1)),

			c.save(),
			if(is_enemy, [
				c.translate(ww, 0),
				c.scale(-1, 1),
			]),
			c.move_to(0, hh/2),
			c.line_to(ww - banner_width, 0),
			c.line_to(ww, 0),
			c.line_to(banner_width, hh/2),
			c.fill(),

			c.move_to(0, hh/2),
			c.line_to(ww - banner_width, hh),
			c.line_to(ww, hh),
			c.line_to(banner_width, hh/2),
			c.fill(),
			c.restore(),

			//c.translate(ww/2, 0),
			if(is_enemy, [
				c.translate(ww*0.15, hh*0.05),
				c.rotate(3.14/3),
			], [
				c.translate(ww*0.26, hh*0.5),
				c.rotate(-3.14/3),
			]),

			[
				c.translate(ww/2 - area.width/2, 0),
			] where area = c.text_extents(lib.font.regular_font, lib.citadel.py(14), creature.creature_object.name),
			c.set_font(lib.font.regular_font),
			c.set_font_size(lib.citadel.py(14)),
			if(is_enemy, c.set_source_rgba(1,1,1,1), c.set_source_rgba(0,0,0,1)),
			c.text_path(creature.creature_object.name),
			c.fill(),
		])
		where c = canvas()
		",
	},

	on_type_updated: "fire_event('create')",

	on_mouse_enter: "set(has_mouseover, true)",
	on_mouse_leave: "set(has_mouseover, false)",

	on_create: "set(animation, render(width, height))",

	on_process: "[
		set(mid_y, creature.mid_y),
		set(mid_x, if(is_enemy, creature.mid_x + (controller.tile_width/2 - int(banner_width*0.4))*raise_anim,
		                        creature.mid_x - (controller.tile_width/2 - int(banner_width*0.4))*raise_anim)),
	]",

	on_show_tooltip: "[
		fire_event(creature, 'show_tooltip', { controller: ctrl })
	] where ctrl = obj citadel_controller <- arg.controller",
}
