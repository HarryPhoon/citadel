{
id: "bdk_controller",
is_strict: true,
always_active: true,
hidden_in_game: true,
zorder: 2000,

timer_frequency: 5,

animation: {
	id: "normal",
	image: "effects/particles.png",
	x: 86,
	y: 73,
	w: 28,
	h: 28,
	collide: [0,0,28,28],
	frames: 1,
	duration: 1000,
},

vars: {
	controller: null,
	bot: null,
	bot_name: null,
},

tmp: {
},

properties: {
	load: "def(string class_name) [
		set(me.bot, new_bot),
		set(vars.bot_name, class_name),
	] where new_bot = construct('bot_' + class_name)",

	bot: {
		get: "vars.bot",
		set: "[
			set(vars.bot, value),

			set_widgets([
				
			] +
			
			[ {
				type: 'label',
				text: if(play = null, 'N/A', str(play.score)),
				font: font,
				size: 14,
				color: 'antique_white',
				align_h: 'center',
				align_v: 'bottom',
				x: card_obj.mid_x + 20,
				y: card_obj.y + 30,
			  } where play = value.calculate_card_play(game, player_obj.hand[card_obj.vars.hand_index])
				
			  | card_obj <- me.level.chars,
			    card_obj.type = 'card', card_obj.vars.in_hand ] +
			  
			  ((
			  if(selected_card and selected_card.vars.in_hand,
			  if(targets, map(targets,

			  if(tile_obj and card.possible_targets(game, game.nplayer, [value]) = null,
			  	{
					type: 'label',
					font: font,
					size: 14,
					color: 'antique_white',
					align_h: 'center',
					x: tile_obj.mid_x,
					y: tile_obj.mid_y,
					text: str(bot.score_play(game, card, [value])),
				}
			  	
			  ) where tile_obj = find(level.chars, value.type = 'tile' and value.vars.loc = context.value)))
			     where targets = card.possible_targets(game, game.nplayer, [])
			     where card = player_obj.hand[selected_card.vars.hand_index]
			  ) where selected_card = vars.controller.tmp.card_mouseover
			  ) or [])
			
			),
		]",
	},

	font: "'RobotoCondensed-Regular'",
	game: "vars.controller.vars.state",
	player_obj: "game.players[game.nplayer]",
},

on_timer: "if(vars.bot_name and game.current_player = game.nplayer, load(vars.bot_name))",

on_spawned: "[set(vars.controller, spawner)]",

on_create: "vars.controller.force_submit_deck(bot.deck)",

}
