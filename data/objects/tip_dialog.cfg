{
id: "tip_dialog",
is_strict: true,

properties: {
	_tip: { type: "Tip" },
	_width: { type: "int" },
	_height: { type: "int" },
	render: "def(int ww, int hh) ->commands [
	set(animation, {
		id: 'fbo',
		image: 'fbo',
		x: 0, y: 0, w: ww, h: hh,
		scale: 1, frames: 1,
		fbo: c.render(ww, hh, [
			c.rectangle(0, 0, ww, hh),
			c.set_source_rgba(0.0, 0.0, 0.0, 0.5),
			c.fill(),

			c.set_font_size(16),
			c.set_source_rgba(1.0, 1.0, 1.0, 1.0),
			c.translate(10, 20),
			c.show_rich_text_multiline(_tip.text, _width-20, _height, {svg_width: 10, svg_scale: 1.0}),
		]) where c = canvas()
	})
	]",

	dismiss_dialog: "def() ->commands [
		remove_object(me),
	]",

	_tips_drawn: { type: "[Loc]|null" },
},

on_process: "if(_tip.targets != null,
  if(_tips_drawn != target_locs, [
	set(draw_primitives, map(target_locs, {
		type: 'arrow',
		texture: 'ink.png',
		texture_scale: 0.2,
		arrow_head_length: 40,
		arrow_head_width: 0.4,
		color: [0,255,0,196],
		points: [
			if(diff_x > diff_y, [x, mid_y], if(value[1] > mid_y, [mid_x, y2], [mid_y, y])),
			[(x + value[0])/2, value[1]],
			[value[0], value[1]],
		]
		 where diff_x = abs(mid_x - value[0])
		 where diff_y = abs(mid_y - value[1])
	})),
	set(_tips_drawn, target_locs),
  ]
  )
  where target_locs = map(_tip.targets, [value.mid_x, value.mid_y])
)",

on_create: "[
	render(_width, _height),

	set(widgets, [{
		type: 'button',
		color_scheme: lib.citadel.button_color_scheme,
		label: 'Dismiss',
		on_click: me.dismiss_dialog,
		x: 180,
		y: 170,
	}]),
]",
}
