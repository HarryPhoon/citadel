{
id: "tip_dialog",
is_strict: true,
use_absolute_screen_coordinates: true,

properties: {
	_title: { type: "string", default: "Tip" },
	_tip: { type: "Tip" },
	tip: "Tip :: _tip",
	_width: { type: "int" },
	_height: { type: "int" },
	_has_close: { type: "bool", default: true },
	_delay_widgets: { default: 50 },

	_targets: "[custom_obj] :: if(_tip.targets is [custom_obj|null], filter(_tip.targets, value != null), [])",
	

	_font_size: { type: "int", init: "lib.gui.py(18)" },

	close_button: { type: "null|obj button_controller" },

	calculate_font_size: "def(int|null max_size=null) ->commands
		if(cur_font_size < 8 or find(fragments, value.y + value.height > _height - 36) = null,
		   set(_font_size, cur_font_size),
		   calculate_font_size(cur_font_size-2)
		)
		
		where fragments = c.markup_text(q(<font size=') + cur_font_size + q('>) + _tip.text + q(</font>), _width - 20),
		where cur_font_size = if(max_size != null, max_size, px(20))
		where c = canvas()
	",

	px: "def(int pixels) ->int if(res%2 = 1, res+1, res) where res = int((decimal(pixels)*decimal(level.dimensions[3]))/900.0)",

	_target_offset_x: { type: "int", default: 0, get: "_data + px(_tip.target_offset_x or 0)" },
	_target_offset_y: { type: "int", default: 0, get: "_data + px(_tip.target_offset_y or 0)" },

	_draw_text_fn: {
		type: "null|function(cairo_callable) ->cairo_commands",
	},

	_flashing: { default: false },

	flash_tip: "def() ->commands execute(me, map(range(3), [
		schedule(10*value, [ set(_flashing, true), fire_event('flash') ]),
		schedule(10*value+5, [ set(_flashing, false), fire_event('flash') ]),
	]))",

	render: "def(int ww, int hh) ->commands [
	set(animation, {
		id: 'fbo',
		image: 'fbo',
		x: 0, y: 0, w: ww, h: hh,
		scale: 1, frames: 1,
		fbo: c.render(ww, hh, [
			c.rectangle(0, 0, ww, lib.gui.py(32)),
			c.set_source_rgba(1.0, 1.0, 1.0, 1.0),
			c.fill(),

			c.rectangle(0, lib.gui.py(32), ww, hh-lib.gui.py(32)),
			if(_flashing,
				c.set_source_rgba(0.8, 0.2, 0.2, 1.0),
				c.set_source_rgba(0.2, 0.2, 0.2, 1.0),
			),
			c.fill(),

			c.save(),
			c.set_font_size(lib.gui.py(22)),
			c.set_source_rgba(0.0, 0.0, 0.0, 1.0),
			c.translate(lib.gui.py(10), 2),

			map(fragments,
			[
				c.save(),
				value.path,
				c.fill(),
				c.restore()
			]) where fragments = c.markup_text(q(<font size='22'>) + _title + q(</font>), {width: _width-lib.gui.py(20), scale: lib.gui.py_scale}),

			c.set_font_size(lib.gui.py(16)),
			c.set_source_rgba(1.0, 1.0, 1.0, 1.0),
			c.restore(),

			c.save(),
			c.translate(lib.gui.py(10), lib.gui.py(36)),

			if(_draw_text_fn, _draw_text_fn(c),
			  [
			    c.set_source_color([1,1,1]),
			  	map(fragments,
				[
					c.save(),
					value.path,
					c.fill(),

					if(value.tag is list and 'circle' in value.tag, [
						c.arc(value.width/2,
						      -value.ascent + value.height/2,
							  value.height*0.45, 0, 3.15*2),
						c.set_line_width(1),
						c.stroke(),
					]),
					c.restore()
				]
				),

			  ] where fragments = c.markup_text(q(<font size=') + _font_size + q('>) + _tip.text + q(</font>), _width-20)
			),

			c.restore(),

		]) where c = canvas()
	}),

	bind_command(check_position_on_screen),

	]",

	check_position_on_screen: "def() ->commands [
		if(x2 > level.dimensions[2] - lib.gui.px(12),
		   set(x2, level.dimensions[2] - lib.gui.px(12)))
	]",

	dismiss_dialog: "def() ->commands [
		remove_object(me),
	]",

	_tips_drawn: { type: "[Loc]|null" },

	set_targets: "def([custom_obj|null] targets) ->commands [
		set(_tip.targets, targets),
		set(_tips_drawn, null),
	]",

	calculate_entry_point: "def() ->commands [
		set(alpha, 0),
		set(_calculating_entry, true),
	]",

	_calculating_entry: { type: "bool", default: false },
	_cycles_suppressed_entry: { type: "int", default: 0 },

	_should_enter: "def() ->bool
	if(_tip.targets = null, true,
		if(find(_targets, _suppress_enter(value)) = null, true, false)
	)
	",

	_suppress_enter: "def(custom_obj c) ->bool
	if(c is obj card,
	   if(c.show_back, true, false),
	   false)
	",

	_force_source_point: { type: "null|[decimal,decimal]" },
},

on_process: "[

	if(close_button, [
		set(close_button.x, x2 - lib.gui.py(52)),
		set(close_button.y, y + (lib.gui.py(32) - lib.gui.py(24))/2),
	]),

	if(_calculating_entry, [
		if(_should_enter(), [
			set(_calculating_entry, false),
			schedule(_cycles_suppressed_entry,
				animate(me, {
					alpha: 255,
				}, {
					duration: 30,
				})
			)
		], [
			if(_cycles_suppressed_entry < 80, add(_cycles_suppressed_entry, 1))
		])
	]),


	if(_tip.targets != null and cycle > _delay_widgets,

  if(_tips_drawn != target_locs, [
	set(draw_primitives, fold(map(target_locs, [{
		type: 'line',
		color1: [255,255,255,255],
		color2: [255,255,255,64],
		p1: source_point,
		p2: dest_point,
		width: 4,

	}

	where dest_point = value

	where source_point =
	if(	_force_source_point != null,
		[int(mix(x, x2, _force_source_point[0])), int(mix(y, y2, _force_source_point[1]))],
		diff_x > diff_y,
		if(value[0] > mid_x, [x2, mid_y], [x, mid_y]),
		if(value[1] > mid_y, [mid_x, y2], [mid_x, y])
	)
	where diff_x = abs(mid_x - value[0])
	where diff_y = abs(mid_y - value[1])
	
	
	] where target_obj = _targets[index]), a+b)),
	set(_tips_drawn, target_locs),
  ]
  )
  where target_locs = map(_targets, [value.mid_x + _target_offset_x, value.mid_y + _target_offset_y])
)
]",

on_flash: "
	render(_width, _height)
",

on_type_updated: "[fire_event('being_removed'), fire_event('create'), set(_tips_drawn, null)]",

on_being_removed: "[
//	lib.gui.play_sound(me, 'interface/tooltip_off'),
	remove_object(close_button)
]",

on_create: "[
//	lib.gui.play_sound(me, 'interface/tooltip_on'),
	bind_command(me.calculate_font_size),
	bind_command(me.render, _width, _height),

	if(_has_close,
		spawn('button_controller', {
			text: 'Close',
			x: x +_width - lib.gui.py(60),
			y: y + lib.gui.py(4),
			_font_size: lib.gui.py(14),
			button_width: lib.gui.py(48),
			button_height: lib.gui.py(24),
			on_click: me.dismiss_dialog,
			zorder: zorder+1
		}, [
			set(close_button, child)
		]),
	),

	if(_tip.max_shows != null and _tip.key and lib.citadel.num_times_tip_shown(_tip.key) >= _tip.max_shows,
	   remove_object(me),
	   _tip.key,
	   lib.citadel.tip_shown(_tip.key)),
]",
}
