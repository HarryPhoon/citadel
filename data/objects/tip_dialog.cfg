{
id: "tip_dialog",
is_strict: true,

properties: {
	_title: { type: "string", default: "Tip" },
	_tip: { type: "Tip" },
	tip: "Tip :: _tip",
	_width: { type: "int" },
	_height: { type: "int" },
	_has_close: { type: "bool", default: true },
	_delay_widgets: { default: 50 },

	_font_size: { default: 18 },

	calculate_font_size: "def(int|null max_size=null) ->commands
		if(cur_font_size < 8 or find(fragments, value.y + value.height > _height - 36) = null,
		   set(_font_size, cur_font_size),
		   calculate_font_size(cur_font_size-2)
		)
		
		where fragments = c.markup_text(q(<font size=') + cur_font_size + q('>) + _tip.text + q(</font>), _width - 20),
		where cur_font_size = if(max_size != null, max_size, px(20))
		where c = canvas()
	",

	px: "def(int pixels) ->int if(res%2 = 1, res+1, res) where res = int((decimal(pixels)*decimal(level.dimensions[3]))/900.0)",

	_target_offset_x: { type: "int", default: 0, get: "px(_data + (_tip.target_offset_x or 0))" },
	_target_offset_y: { type: "int", default: 0, get: "px(_data + (_tip.target_offset_y or 0))" },

	_draw_text_fn: {
		type: "null|function(cairo_callable) ->cairo_commands",
	},

	_flashing: { default: false },

	flash_tip: "def() ->commands execute(me, map(range(3), [
		schedule(10*value, [ set(_flashing, true), fire_event('flash') ]),
		schedule(10*value+5, [ set(_flashing, false), fire_event('flash') ]),
	]))",

	render: "def(int ww, int hh) ->commands [
	debug(ww, hh),
	set(animation, {
		id: 'fbo',
		image: 'fbo',
		x: 0, y: 0, w: ww, h: hh,
		scale: 1, frames: 1,
		fbo: c.render(ww, hh, [
			c.rectangle(0, 0, ww, 32),
			c.set_source_rgba(1.0, 1.0, 1.0, 1.0),
			c.fill(),

			c.rectangle(0, 32, ww, hh-32),
			if(_flashing,
				c.set_source_rgba(0.8, 0.2, 0.2, 1.0),
				c.set_source_rgba(0.2, 0.2, 0.2, 1.0),
			),
			c.fill(),

			c.save(),
			c.set_font_size(22),
			c.set_source_rgba(0.0, 0.0, 0.0, 1.0),
			c.translate(10, 2),

			map(fragments,
			[
				c.save(),
				value.path,
				c.fill(),
				c.restore()
			]) where fragments = c.markup_text(q(<font size=') + 22 + q('>) + _title + q(</font>), _width-20),

			c.set_font_size(16),
			c.set_source_rgba(1.0, 1.0, 1.0, 1.0),
			c.restore(),

			c.save(),
			c.translate(10, 32),

			if(_draw_text_fn, _draw_text_fn(c),
			  [
			    c.set_source_color([1,1,1]),
			  	map(fragments,
				[
					c.save(),
					value.path,
					c.fill(),
					c.restore()
				]
				),

			  ] where fragments = c.markup_text(q(<font size=') + _font_size + q('>) + _tip.text + q(</font>), _width-20)
			),

			c.restore(),

		]) where c = canvas()
	})
	]",

	dismiss_dialog: "def() ->commands [
		remove_object(me),
	]",

	_tips_drawn: { type: "[Loc]|null" },

	set_targets: "def([custom_obj] targets) ->commands [
		set(_tip.targets, targets),
		set(_tips_drawn, null),
	]",
},

on_process: "if(_tip.targets != null and cycle > _delay_widgets,
  if(_tips_drawn != target_locs, [
	set(draw_primitives, fold(map(target_locs, [{
		type: 'line',
		color1: [255,255,255,255],
		color2: [255,255,255,64],
		p1: source_point,
		p2: dest_point,
		width: 4,

	}

	where dest_point = value

	where source_point = if(diff_x > diff_y, if(value[0] > mid_x, [x2, mid_y], [x, mid_y]), if(value[1] > mid_y, [mid_x, y2], [mid_x, y]))
	where diff_x = abs(mid_x - value[0])
	where diff_y = abs(mid_y - value[1]),
	
	{
		type: 'circle',
		x: value[0],
		y: value[1],
		radius: 14,
		color: [0,0,0,0],
		stroke_color: [255,255,255,128],
		stroke_width: 2.5,
	}] where target_obj = _tip.targets[index]), a+b)),
	set(_tips_drawn, target_locs),
  ]
  )
  where target_locs = map(_tip.targets, [value.mid_x + _target_offset_x, value.mid_y + _target_offset_y])
)",

on_flash: "
	render(_width, _height)
",

on_type_updated: "[fire_event('create'), set(_tips_drawn, null)]",

on_create: "[
	bind_command(me.calculate_font_size),
	bind_command(me.render, _width, _height),

	if(_has_close, set(widgets, [{
		type: 'button',
		color_scheme: lib.citadel.button_color_scheme,
		label: 'Close',
		on_click: me.dismiss_dialog,
		x: 200,
		y: 4,
	}])),

	if(_tip.max_shows != null and _tip.key and lib.citadel.num_times_tip_shown(_tip.key) >= _tip.max_shows,
	   remove_object(me),
	   _tip.key,
	   lib.citadel.tip_shown(_tip.key)),
]",
}
