{
	id: "edit_deck_details_dialog",
	is_strict: true,
	always_active: true,
	prototype: ["dialog"],
	zorder: 7000,

	properties: {
		_controller: { type: "obj library_controller" },

		level_width: "int :: level.dimensions[2]",
		level_height: "int :: level.dimensions[3]",

		summary: { type: "obj library_deck_summary" },
		deck_name: { type: "string" },
		deck: { type: "Deck" },

		_selected_deck: {
			type: "null|obj deck_avatar",

			set: "if(_data != value, [
				if(_data, animate(_data, { halo: 0.0 }, { duration: 10 })),
				if(value, animate(value, { halo: 40.0 }, { duration: 10 })),
				set(_data, value),
			])"
		},

		deck_mouseover: "def(obj deck_avatar deck) ->commands 


		if(deck != _selected_deck,
			lib.sound.play_sound(me, 'interface/deck-avatar-mouseover');
			animate(deck, {
				halo: 20.0,
			}, {
				duration: 10,
			}),
		)
		",

		deck_mouseoff: "def(obj deck_avatar deck) ->commands
		if(deck != _selected_deck,
			animate(deck, {
				halo: 0.0,
			}, {
				duration: 10,
			})
		)
		",

		add_children: "def() ->commands [
			spawn('label', {
				x: lib.gui.py(12),
				y: lib.gui.py(12),
				_halign: 'left',
				_text: ['Deck Name:'],
				_font_size: lib.gui.py(32),
			}, [
				add_widget(child),
			]);

			spawn('text_entry', {
				x: lib.gui.py(24) + last_widget.img_w,
				y: lib.gui.py(12),
				_max_size: 16,
				_width: lib.gui.py(320),
				_height: lib.gui.py(42),
				font_size: lib.gui.py(32),
				default_text: 'Enter deck name',
				text: deck_name,
				_on_change: def()->commands me.update_avatar(),
			}, [
				add_widget(child),
				set(_name_entry, child),
			]);

			update_avatar();

			spawn('scrollable_pane', {
				x: lib.gui.py(600),
				y: lib.gui.py(70),
				area_width: lib.gui.py(600),
				area_height: lib.gui.py(600),
				use_absolute_screen_coordinates: true,

				elements: map(card_objects, {
					xpos: col_width*ncol,
					ypos: nrow*row_height,
					height: lib.gui.py(220),
					obj: value,
				}
				
				where nrow = index/4
				where ncol = index%4)

			}, [
				add_widget(child),
			]) where col_width = lib.gui.py(150)
			   where row_height = lib.gui.py(200),
			
			set(_selected_deck, initial_selection),
		]
		where initial_selection = find(card_objects, value.halo > 0.0)
		where card_objects = map(sorted_cards,
		    object('deck_avatar', {
				_width: lib.gui.py(130),
				_portrait: avatar_card.portrait or 'acolyte.png',
				_name: if(_name_entry, _name_entry.text, deck_name),
				halo: if(value = deck.avatar, 0.2, 0.0),
				deck: deck,
				click_handler: def(obj deck_avatar avatar) ->commands me.select_avatar(avatar, value),
				mouse_enter_handler: me.deck_mouseover,
				mouse_leave_handler: me.deck_mouseoff,
			})
			where avatar_card = lib.citadel.create_card(value)
		)
		where sorted_cards = unique(sort(deck.cards))
		
		",

		close: "def() ->commands
			remove_object(me);
			if(_name_entry,
			   summary.change_deck_name(_name_entry.text)
			);

			fire_event(summary, 'render')
		",

		_name_entry: { type: "null|obj text_entry" },

		_avatar: { type: "null|obj deck_preview_widget" },
		update_avatar: "def() ->commands
		[
			remove_widget(_avatar),
			set(_avatar, null),

			if(summary.avatar,
				spawn('deck_preview_widget', 0, 0, {
					x: lib.gui.py(24),
					y: lib.gui.py(80),
					zorder: zorder+100,
					deck: deck,
					current_controller: _controller,
					_width: 480,


			}, [
					add_widget(child),
					set(_avatar, child),
				])
				where avatar_card = lib.citadel.create_card(summary.avatar)
			)
		]
		",



		select_avatar: "def(obj deck_avatar avatar, string portrait) ->commands
			set(deck.avatar, portrait);
			lib.sound.play_sound(me, 'interface/card-add');
			set(_selected_deck, avatar);
			set(summary.avatar_override, portrait);
			update_avatar()

		",

	},

	events: {

	},
}
