{
id: "end_turn_button",
is_strict: true,

properties: {
	_text: { type: "string" },
	_phase: { type: "string" },

	_width: { type: "int" },
	_height: { type: "int" },

	text_area: "canvas().text_extents(lib.font.bold_font, px(_font_size), _text)",
	phase_area: "canvas().text_extents(lib.font.bold_font, _phase_font_size, _phase)",

	highlight: { default: false },

	_render_key: "[_text, _phase, _color, _width, _height]",
	_last_render_key: { type: "any" },

	_color: "if(_mouseover or highlight and level.cycle%50 < 25,
	            [1, 0.25, 0.12],
	            [0.65, 0.25, 0.12])",

	_font_size: 20,
	_phase_font_size: 12,

	_mouseover: { default: false,
		set: "[
			set(_data, value),
			set(brightness, if(value, 512, 255)),
		]"
	},

	_controller: { type: "obj citadel_controller" },

	render: "def(int ww, int hh) ->commands [
	set(_last_render_key, _render_key),
	set(animation, {
		id: 'fbo',
		image: 'fbo',
		x: 0, y: 0, w: ww, h: hh,
		scale: 1, frames: 1,
		fbo: query_cache(global_cache(3), _render_key, c.render(ww, hh, [
			c.save(),

			c.translate(0.0, 0.4*hh),
			c.scale(decimal(ww)/frame_dim[0], decimal(hh*0.6)/frame_dim[1]),
			c.paint_image(frame_image),

			c.restore(),

			c.save(),
			c.translate(ww/2 - text_area.width/2, 0.7*hh + text_area.height/2),
			c.set_font(lib.font.bold_font),
			c.set_font_size(px(_font_size)),
			c.text_path(_text),
			c.set_source_rgba(1, 1, 1, 1),
			c.fill(),
			c.restore(),

			c.save(),

			c.translate(ww*0.86 - phase_area.width, hh*0.33),
			c.set_font(lib.font.bold_font),
			c.set_font_size(px(_phase_font_size)),
			c.text_path(_phase),

			c.set_source_rgba(1, 1, 1, 1),
			c.fill(),

			c.restore(),

		]
		where frame_dim = c.image_dim(frame_image)
		where frame_image = 'images/gui/end-turn-button.png'
		) where c = canvas())
	})
	]",

	px: "def(int pixels) ->int int(pixels*(_height/60.0))",
},

on_create: "[
	render(_width, _height),
	set(x, x),
	set(y, y),
]",

on_process: "[
	if(_last_render_key != _render_key, fire_event('create'))
]",

on_mouse_enter: "[set(_mouseover, true), fire_event('create')]",
on_mouse_leave: "[set(_mouseover, false), fire_event('create')]",

on_click: "[
	_controller.cancel_reserved_animation(),
	_controller.end_turn()
]",

on_type_updated: "fire_event('create')",

}
