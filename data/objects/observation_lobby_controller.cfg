{
id: "observation_lobby_controller",
next_animation: "'normal'",
is_human: true,
is_strict: true,
always_active: true,
hidden_in_game: true,


properties: {
	client: { type: "object" },
	_messages_in_flight: 0,

	_time_since_last_request: 0,
	_session_id: { type: "null|int" },

	_games: { type: "[map]", default: [] },

	observe_game: "def(int index) ->commands execute(me, [
		teleport('level1.cfg', '', 'fade',
  	object_playable('citadel_controller', 336, 372, 0, {
			game_server_address: TBS_SERVER_ADDRESS,
			game_server_port: int<- _games[index].port,
			session_id: _session_id asserting _session_id != null,
			game_created: true,
			observer: true,
			return_callback: (def(bool outcome) ->commands teleport('titlescreen.cfg', '', 'fade', object_playable('title_controller', 0, 0, 0)))
	}))
	])",
},

on_create: "[
	tbs_send(client, { type: 'query_status', user: USERNAME }),
	add(_messages_in_flight, 1),
	set_widgets([{
		type: 'label',
		text: 'Waiting for server...',
		id: 'status_label',
		x: level.dimensions[2]/2,
		y: level.dimensions[3]/2,
		size: 48,
		color: 'white'
	}])
]",

on_process: "[
	if(_messages_in_flight = 0,
		if(_time_since_last_request > 250,
		[
			tbs_send(client, { type: 'query_status', user: USERNAME, session_id: _session_id }) asserting _session_id != null,
			set(_time_since_last_request, 0),
			add(_messages_in_flight, 1),
		],
		[
			add(_time_since_last_request, 1)
		])
	),

	tbs_process(client),
]",

on_connection_error: "[
	//TODO: currently we die die die on an error, handle this more nicely.
	debug('connection error') asserting cycle = -1
]",

on_message_received: "[
	add(_messages_in_flight, -1),
	switch(message.type,
	  'server_status', [
	    if(message.session_id is int, set(_session_id, int<- message.session_id)),

		set(_games, [map]<- message.servers),

	  	set_widgets([{
			type: 'grid',
			columns: 2,
			column_alignments: 'center',
			x: level.dimensions[2]/2,
			y: level.dimensions[3]/2,
			children: fold(map([map]<- message.servers,
			[
			{
				type: 'label',
				text: description,
				size: 14,
				color: 'white',
			},
			{
				type: 'button',
				label: {type: 'label', text: 'Observe', size: 14, color: 'white'},
				on_click: 'observe_game(' + index + ')',
			}
			]
				where description = (string<- users[0].user) + ' vs ' + (string<- users[1].user)
				asserting size(users) >= 2
				where users = [map]<- value.users
			), a+b) + if(message.servers = [], [{
				type: 'label',
				text: 'No games currently in progress',
				size: 14,
				color: 'white',
			}], [])
		}])
	  ],

	  [
	  	debug('unknown message: ' + message.type),
	  ])
] where message = map<- arg.message",

}
