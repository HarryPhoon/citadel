{
	id: "campaign_location_encounter_editor",
	is_strict: true,

	properties: {

		width: "int :: lib.gui.py(700)",
		height: "int :: lib.gui.py(760)",

		_selected_encounter: { type: "int", default: 0 },
		_selected: "null|CampaignEncounter :: if(_selected_encounter < size(_loc.encounters), _loc.encounters[_selected_encounter])",

		encounter_pos: "def(CampaignEncounter encounter) ->[int,int]
		[lib.gui.py(encounter.editor_loc.x), lib.gui.py(encounter.editor_loc.y)]
		",

		encounter_pos_src: "def(CampaignEncounter encounter) ->[int,int]
		[loc.x, loc.y - img_dim.y/2 - 6]
		where loc = encounter_pos(encounter)
		",

		encounter_pos_dst: "def(CampaignEncounter encounter) ->[int,int]
		[loc.x, loc.y + img_dim.y/2 + 6]
		where loc = encounter_pos(encounter)
		",

		_loc: { type: "class campaign_location" },

		mouseover_prereq: "def() ->null|{index: int, src: bool}
		if(src != null, { index: index(_loc.encounters, src), src: true },
		   dst != null, { index: index(_loc.encounters, dst), src: false }
		)
			where dst = find(_loc.encounters, dist < lib.gui.py(12)
			   where dist = abs(pos.x - mouse_pos.x) + abs(pos.y - mouse_pos.y)
			   where pos = encounter_pos_dst(value))
			where src = find(_loc.encounters, dist < lib.gui.py(12)
			   where dist = abs(pos.x - mouse_pos.x) + abs(pos.y - mouse_pos.y)
			   where pos = encounter_pos_src(value))
			where mouse_pos = [mouse_pos_raw.x - x, mouse_pos_raw.y - y]
			where mouse_pos_raw = lib.gui.mouse_pos(level)
		",

		_last_mouseover_prereq: { type: "null|{index: int, src: bool}" },

		render: "def() ->commands
		[
		set(_last_mouseover_prereq, prereq),
		set(animation, lib.gui.render_frame(c, width, height, [
			c.set_source_color([0.1,0.1,0.1,1.0]),
			c.rectangle(0,0,width,height),
			c.fill(),

			if(_selected != null,
			[
				c.set_source_color('white'),
				c.set_line_width(2.0),

				c.rectangle(pos.x - img_dim.x/2 - 1, pos.y - img_dim.y/2 - 1, img_dim.x + 2, img_dim.y + 2),

				c.stroke(),

			] where pos = [lib.gui.py(_selected.editor_loc.x), lib.gui.py(_selected.editor_loc.y)]),

			map(_loc.encounters,
			[
				c.set_source_color(if(prereq = {index: index, src: true}, 'yellow', 'white')),

				c.arc(pos.x, pos.y - img_dim.y/2 - 6, lib.gui.py(6), 0.0, 2*3.15),
				c.fill(),

				c.set_source_color(if(prereq = {index: index, src: false}, 'yellow', 'white')),

				c.arc(pos.x, pos.y + img_dim.y/2 + 6, lib.gui.py(6), 0.0, 2*3.15),
				c.fill(),
			] where pos = encounter_pos(value)
			),
		])
		where c = canvas()
		)
		]
		where prereq = mouseover_prereq()
		",

		add_encounter: "def() ->commands
		[
			lib.campaign_encounter.save_campaign_dialog_node(node);
			add(_loc.encounters, [encounter]);
			lib.citadel.write_campaign_locations();

			create_encounters()

		]

			where encounter = {
				uuid: generate_uuid(),
				dialog_node: node.id,
				duplicates: 1,
				prerequisites: [],
				editor_loc: [100,100],
			}
			where node = deep_copy(lib.campaign_encounter.get_campaign_dialog_node('default')) + { id: generate_uuid() }
		",

		edit_encounter: "def() ->commands
		execute(me,
		if(_selected,
			let objects = level.chars;
			[remove_object(c) | c <- objects, not c is obj title_controller];
			spawn('campaign_dialog_editor', {
				x: level.camera_position[2] - lib.gui.py(400),
				y: lib.gui.py(10),
				width: lib.gui.py(400),
				height: lib.gui.py(800),
				nodes: [lib.campaign_encounter.get_campaign_dialog_node(_selected.dialog_node)],
				selected_node_index: 0,
				title_controller: find_or_die(level.chars, value is obj title_controller),

				_return: (def() ->commands
					[remove_object(c) | c <- level.chars, c not in objects];
					[add_object(c) | c <- objects, c not in level.chars, c not in _encounters];
					create_encounters()
				),
			})
		)
		)
		",

		_widgets: { type: "[custom_obj]", default: [] },

		create_widgets: "def() ->commands
		[
			map(_widgets, remove_object(value)),
			set(_widgets, []),

			spawn('button_controller', {
				x: x + lib.gui.py(20),
				y: y2 + lib.gui.py(10),
				text: '+Encounter',
				_font_size: lib.gui.py(16),
				button_width: lib.gui.py(90),
				button_height: lib.gui.py(24),
				on_click: me.add_encounter,
				zorder: zorder+1,
				color_scheme: lib.citadel.library_color_scheme,
			}, [
				add(_widgets, [child]),
			]),

			spawn('button_controller', {
				x: x2 + lib.gui.py(12),
				y: y + lib.gui.py(10),
				text: 'Edit Encounter',
				_font_size: lib.gui.py(16),
				button_width: lib.gui.py(120),
				button_height: lib.gui.py(24),
				on_click: me.edit_encounter,
				zorder: zorder+1,
				color_scheme: lib.citadel.library_color_scheme,
			}, [
				add(_widgets, [child]),
			]),
		]
		",

		end_drag_encounter: "def(obj image_widget w, int n) ->commands
		execute(me, [
			set(_loc.encounters[n].editor_loc, [lib.gui.reverse_py(w.mid_x - x), lib.gui.reverse_py(w.mid_y - y)]);
			lib.citadel.write_campaign_locations();
			render()
		])
		",

		select_encounter: "def(obj image_widget w, int n) ->commands
			set(_selected_encounter, n);
			render()
		",

		_encounters: { type: "[obj image_widget]", default: [] },

		img_dim: "[int,int] :: [lib.gui.py(90), lib.gui.py(60)]",

		create_encounters: "def() ->commands [
			map(_encounters, remove_object(value)),
			set(_encounters, []),

			map(_loc.encounters,
				spawn('image_widget', {
					mid_x: x + lib.gui.py(value.editor_loc.x),
					mid_y: y + lib.gui.py(value.editor_loc.y),
					image: node.image,
					image_area: node.image_area,
					draw_width: img_dim.x,
					draw_height: img_dim.y,
					zorder: zorder+1,

					allow_drag: true,

					drag_end_handler: def(obj image_widget w) ->commands end_drag_encounter(w, index),

					click_handler: def(obj image_widget w) ->commands select_encounter(w, index),

					clip_area: [x, y, img_w, img_h],
					clip_area_absolute: true,
				}, [
					add(_encounters, [child]),
				])
				where node = lib.campaign_encounter.get_campaign_dialog_node(value.dialog_node)
			),
		]
		",
	},

	events: {
		create: "render(); create_widgets(); create_encounters()",
		being_removed: "map(_encounters, remove_object(value)); map(_widgets, remove_object(value))",

		mouse_move: "[
			if(mouseover_prereq() != _last_mouseover_prereq, render())
		]",
	},
}
