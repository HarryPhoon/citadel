{
id: "intro_animation_controller",
is_strict: true,

properties: {
	level_width: "int :: level.dimensions[2]",
	level_height: "int :: level.dimensions[3]",

	_mm: "find_or_die(level.chars, value is obj citadel_controller)",
	_controller: "find_or_die(level.chars, value is obj citadel_controller)",

	exit_dialog: "def() ->commands [
		map(spawned_children, remove_object(value)),

		map(level.chars, if(value.paused, set(value.paused, false))),
		map(level.chars, if(value.y < -5000, add(value.y, 10000))),
		remove_object(me),

		set(_controller.suppress_animations, false),

		_controller.spawn_tip_object(_controller.state),

	//	_controller.spawn_cards_in_hand(),
	//	_controller.spawn_opponent_cards(),
	]",

	say: "def([string] text, string done_event, commands on_complete=null) ->commands [
		spawn('speech_controller', 0, 0, {

			_text: text,
			_avatar: find_or_die(level.chars, value is obj player_avatar and value.player_num = 1),
			_mm: _mm,
			_controller: _controller,
			_on_exit: fire_event(me, done_event),
			_on_complete: on_complete,
			zorder: 30000,
			_blur: false,
		}),
	]",

	show_tip: "def([int,int] loc, string title, string text, [custom_obj] targets, [int,int] offset) ->commands [
	spawn('tip_dialog', 0, 0, {
		zorder: 40000,
		_width: 240,
		_height: 140,
		_has_close: false,
		_title: title,
		alpha: 0,
		_target_offset_x: offset[0],
		_target_offset_y: offset[1],
		_tip: {
			key: 'tip',
			text: text,
			targets: targets,
		},
	}, [
		set(child.mid_x, loc[0]),
		set(child.mid_y, loc[1]),

		animate(child, {
			alpha: 255,
		}, {
			duration: 30,
		}),
	]),
	]",

	show_citadel_facilities: "def() ->commands execute(me, [
		show_tip([level_width/2, level_height/2+80],
		         'Hand',
				 'Your hand holds spells that you can cast. Normally you will have five spells each turn.',
				 [me], [level_width/2, _controller.top_player_area + 100]
				),
		show_tip([level_width/2 + 160, level_height/2-80],
		         'Archives',
				 'Your archives hold spells you want to keep to cast later.',
				 [find_or_die(level.chars, value is obj game_icon and value.icon = 'archive.svg' and value.y > level_height/2)],
				 [0,0]
				),
		show_tip([level_width/2 - 160, level_height/2-80],
		         'Furnace',
				 'Unwanted spells are burned in the Furnace to produce mana. This mana can be used to cast other spells.',
				 [find_or_die(level.chars, value is obj game_icon and value.icon = 'furnace.svg' and value.y > level_height/2)],
				 [0,0]
				),
		show_tip([120, level_height/2+80],
		         'Crypt',
				 'Spells that have been cast end up in the Crypt.',
				 [find_or_die(level.chars, value is obj game_icon and value.icon = 'crypt.svg' and value.y > level_height/2)],
				 [0,0]
				),
		show_tip([level_width-100, level_height/2+80],
		         'Library',
				 'Your Library holds the spells within your Citadel. Each round, you will take five spells from your Library into your hand.',
				 [find_or_die(level.chars, value is obj game_icon and value.icon = 'library.svg' and value.y > level_height/2)],
				 [0,0]
				),
	])",

	show_summoning_locs: "def() ->commands [
		show_tip([level_width/2, level_height-140],
		         'Summoning',
				 'Creatures are summoned outside your Citadel and advance one space North each turn.',
				 filter(level.chars, value is obj tile and value.loc in [[0,1],[1,0],[2,0],[3,0],[4,1]]),
				 [0,0]
				),
	]",

	_begin_show_battlefield: { type: "int", default: 0 },

	show_battlefield: "def() ->commands [
		set(me._begin_show_battlefield, level.cycle),

		[
		 [
		   set(t.paused, false),
		   set(t.alpha, 0),
		   add(t.y, 10000),

		   add(t.x, (t.x - central_tile.x)*40),
		   add(t.y, (t.y - central_tile.y)*40),

		   execute(t, animate(t, {
			alpha: 255,
			mid_x: t.mid_x,
			mid_y: t.mid_y+10000,
		   }, {
			duration: 50 + 1d100,
		   })),
		 ]
		 | t <- level.chars, t is obj tile
	   ] where central_tile = find_or_die(level.chars, value is obj tile and value.loc = [2,2]),

	]",

	_begin_show_enemy_seals: { type: "int", default: 0 },
	_begin_show_friendly_seals: { type: "int", default: 0 },

	show_enemy_seals: "def() ->commands [
		set(_begin_show_enemy_seals, level.cycle),

		[
			[
			set(s.paused, false),
			add(s.y, 10000),
			set(s.alpha, 0),
			execute(s, animate(s, {
				alpha: 255,
			}, {
				duration: 50,
			})),
			]

		| s <- level.chars, s is obj seal, s.player_num = 1
		]
	]",

	show_friendly_seals: "def() ->commands [
		set(_begin_show_friendly_seals, level.cycle),

		[
			[
			set(s.paused, false),
			add(s.y, 10000),
			set(s.alpha, 0),
			execute(s, animate(s, {
				alpha: 255,
			}, {
				duration: 50,
			})),
			]

		| s <- level.chars, s is obj seal, s.player_num = 0
		]

	]",

	_begin_show_villages: { type: "int", default: 0 },

	show_villages: "def() ->commands [
		set(_begin_show_villages, level.cycle),

		[
			[
			set(s.paused, false),
			add(s.y, 10000),
			set(s.alpha, 0),
			execute(s, animate(s, {
				alpha: 255,
			}, {
				duration: 50,
			})),
			]

		| s <- level.chars, s is obj creature
		]
	]",

	_cycle: { default: -1 },

	_save: { type: "[custom_obj]", default: [] },
},

on_create: "[
	set(_save, level.chars),

	[set(c.paused, true) | c <- level.chars, c != me],

	fire_event('animate_avatars'),
]",

on_animate_avatars: "[
	set(avatar_b.highlight, true),
	set(avatar_b.current_desaturation, 0.0),
	set(avatar_b.target_desaturation, 0.0),
	set(avatar_a.paused, false),
	set(avatar_b.paused, false),

	add(avatar_a.mid_y, 10000),
	add(avatar_b.mid_y, 10000),
	add(avatar_a.mid_x, -300),
	add(avatar_b.mid_x, 300),

	animate(avatar_a, {
		mid_x: avatar_a.mid_x,
		mid_y: avatar_a.mid_y+10000,
	}, {
		duration: 80,
	}),

	animate(avatar_b, {
		mid_x: avatar_b.mid_x,
		mid_y: avatar_b.mid_y+10000,
	}, {
		duration: 120,
		on_complete: fire_event(me, 'intro_text'),
	}),
]
  where avatar_a = find_or_die(level.chars, value is obj player_avatar and value.player_num = 0)
  where avatar_b = find_or_die(level.chars, value is obj player_avatar and value.player_num = 1)
",

on_intro_text: "[
	say(['It is good that you have come',
	     'to this inner sanctum, acolyte.',
		 'The ritual performed this',
		 'morning has revealed you to be',
		 'Chosen of Rihn, and thus your',
		 'training must begin at once.'],
		 'intro_text2'),
]",

on_intro_text2: "[
	say(['You must learn to command',
	     'a Citadel, to fight adversaries',
		 'who will command their own',
		 'Citadels. We will take time to',
		 'consider the facilities your',
		 'Citadel offers.'],
		 'introduce_battlefield',
		[
			me.show_citadel_facilities(),
		])
]",

on_introduce_battlefield: "[
	say(['Your Citadel lies to the South,',
	     'mine to the North. Between us',
		 'lies a battlefield that I will',
		 'now conjure so that we can',
		 'battle each other, training',
		 'you to fight.'],
		 'introduce_summoning',
		[
			me.show_battlefield(),
		])
]",

on_introduce_summoning: "[
	schedule(max(1, 300 - (level.cycle - _begin_show_battlefield)),
		say(['You will summon creatures on',
		     'the South edge of the',
			 'battlefield outside your Citadel.',
			 'Each round your creatures will',
			 'move one tile North, toward',
			 'my Citadel.'],
			'introduce_seals',
		   [
		       me.show_summoning_locs()
		   ])
	)
	   	   
]",

on_introduce_seals: "[
	say(['At the entrance to my Citadel',
	     'are five seals. If one of',
		 'your creatures reaches a seal',
		 'it will break it, dealing',
		 'damage to my Citadel.'],
		'introduce_friendly_seals',
		[
			me.show_enemy_seals(),
		])
]",

on_introduce_friendly_seals: "[
	schedule(max(1, 100 - (level.cycle - _begin_show_enemy_seals)),
	  say(['Of course, at the entrance',
	     'to your Citadel are five seals',
		 'as well. If my creatures reach',
		 'these seals your Citadel will',
		 'be damaged.'],
		'summarize',
		[
			me.show_friendly_seals(),
		]))
]",

on_summarize: "[
	
	schedule(max(1, 100 - (level.cycle - _begin_show_friendly_seals)),
	  say(['So you see, Acolyte, the main',
	       'objective in a battle is to reach',
		   'the enemy Citadel with your',
		   'creatures while preventing',
		   'enemy creatures from',
		   'reaching your Citadel.'],
		  'introduce_villages',
		  [
		  ])
	)
]",

on_introduce_villages: "[
	say(['There are three villages on',
	     'the battlefield. If you move',
		 'a creature onto a village, it',
		 'will capture it, making the',
		 'village loyal to your Citadel.'],
		'introduce_villages2',
	   [
	   	me.show_villages()
	   ])
]",

on_introduce_villages2: "[

	schedule(max(1, 100 - (level.cycle - _begin_show_villages)),
	  say(['Each village you control gives',
	       'you extra mana which allows',
		   'you to cast more spells.',
		   'Try to capture villages and',
		   'prevent your opponent from',
		   'having control of them!'],
		  'wrap_up',
		  []))
]",

on_wrap_up: "[
	say(['Let us now battle, Acolyte.',
	     'I am sure you are eager to',
		 'prove your mettle.'],
		'done',
		[])
]",

on_done: "exit_dialog()",

on_process: "[
	_mm.process_matchmaking_connection(),
	//_controller.process_connection(),
]",
}
