{
id: "intro_animation_controller",
is_strict: true,
always_active: true,
hidden_in_game: true,

properties: {
	level_width: "int :: level.dimensions[2]",
	level_height: "int :: level.dimensions[3]",

	_mm: "find_or_die(level.chars, value is obj citadel_controller)",
	_controller: "find_or_die(level.chars, value is obj citadel_controller)",

	sequence_type: { type: "string" },

	exit_dialog: "def() ->commands [
		map(spawned_children, remove_object(value)),

		map(level.chars, if(value.paused, set(value.paused, false))),
		remove_object(me),

		set(_controller.suppress_animations, false),

		_controller.spawn_tip_object(_controller.state),

	//	_controller.spawn_cards_in_hand(),
	//	_controller.spawn_opponent_cards(),
	]",

	say: "def(string text, string done_event, commands on_complete=null) ->commands [
		spawn('speech_controller', 0, 0, {

			_text: text,
			_avatar: find_or_die(level.chars, value is obj player_avatar and value.player_num = 1),
			_mm: _mm,
			_controller: _controller,
			_on_exit: fire_event(me, done_event),
			_on_complete: on_complete,
			zorder: 30000,
			_blur: false,
		}),
	]",

	show_tip: "def([int,int] loc, string title, string text, [custom_obj] targets, [int,int] offset) ->commands [
	spawn('tip_dialog', 0, 0, {
		zorder: 40000,
		_width: 240,
		_height: 140,
		_has_close: false,
		_title: title,
		alpha: 0,
		_target_offset_x: offset[0],
		_target_offset_y: offset[1],
		_tip: {
			key: 'tip',
			text: text,
			targets: targets,
		},
	}, [
		set(child.mid_x, loc[0]),
		set(child.mid_y, loc[1]),

		animate(child, {
			alpha: 255,
		}, {
			duration: 30,
		}),
	]),
	]",

	show_summoning_locs: "def() ->commands [
		show_tip([level_width/2, level_height-140],
		         'Summoning',
				 'Creatures are summoned outside your Citadel and advance one space North each turn.',
				 filter(level.chars, value is obj tile and value.loc in [[0,1],[1,0],[2,0],[3,0],[4,1]]),
				 [0,0]
				),
	]",

	_begin_show_battlefield: { type: "int", default: 0 },

	show_battlefield: "def() ->commands [
		set(me._begin_show_battlefield, level.cycle),

		[
		 [
		   set(t.paused, false),
		 ]
		 | t <- level.chars, t is obj tile
	   ] where central_tile = find_or_die(level.chars, value is obj tile and value.loc = [2,2]),

	]",

	_begin_show_enemy_seals: { type: "int", default: 0 },
	_begin_show_friendly_seals: { type: "int", default: 0 },

	show_enemy_seals: "def() ->commands [
		set(_begin_show_enemy_seals, level.cycle),

		[
			[
			set(s.paused, false),
			]

		| s <- level.chars, s is obj seal, s.player_num = 1
		],

		show_tip([level_width/2 - 160, level_height/2 + 100], 'Seals',
		        q(Each seal holds some of a player's life force. When the seal is broken the player loses that much life.),
				filter(level.chars, value is obj seal and value.player_num = 1), [0,0]),

	]",

	show_friendly_seals: "def() ->commands [
		set(_begin_show_friendly_seals, level.cycle),

		[
			[
			set(s.paused, false),
			]

		| s <- level.chars, s is obj seal, s.player_num = 0
		]

	]",

	_begin_show_villages: { type: "int", default: 0 },

	show_villages: "def() ->commands [
		set(_begin_show_villages, level.cycle),

		[
			[
			set(s.paused, false),
			set(s.alpha, 0),
			execute(s, animate(s, {
				alpha: 255,
			}, {
				duration: 50,
			})),
			]

		| s <- level.chars, s is obj creature
		]
	]",

	_cycle: { default: -1 },

	_save: { type: "[custom_obj]", default: [] },
},

on_create: "[
	set(_save, level.chars),

	[set(c.paused, true) | c <- level.chars, c != me],

	fire_event(sequence_type),
]",

on_animate_avatars: "[
	set(avatar_b.highlight, true),
	set(avatar_b.current_desaturation, 0.0),
	set(avatar_b.target_desaturation, 0.0),
	set(avatar_a.paused, false),
	set(avatar_b.paused, false),

	fire_event(me, 'intro_text'),

]
  where avatar_a = find_or_die(level.chars, value is obj player_avatar and value.player_num = 0)
  where avatar_b = find_or_die(level.chars, value is obj player_avatar and value.player_num = 1)
",

on_intro_text: "[
	say('In the last exercise, we fought on a practice field. This time, we do battle on a full-sized battlefield.',
		 'introduce_summoning',
		[
			me.show_battlefield(),
		])
]",

on_introduce_summoning: "[
	schedule(max(1, 60 - (level.cycle - _begin_show_battlefield)),
		say('You will summon creatures on the South edge of the field, outside your Citadel.  Each round your creatures will move one tile North, toward my Citadel.',
			'introduce_seals',
		   [
		       me.show_summoning_locs()
		   ])
	)
	   	   
]",

on_introduce_seals: "[
	say('At the entrance to my Citadel are five <i>seals</i>. If one of your creatures reaches a seal it will break it, dealing damage to my Citadel.',
		'introduce_friendly_seals',
		[
			me.show_enemy_seals(),
		])
]",

on_introduce_friendly_seals: "[
	schedule(max(1, 100 - (level.cycle - _begin_show_enemy_seals)),
	  say('Of course, at the entrance to your Citadel are five seals as well. If my creatures reach these seals your Citadel will be damaged.',
		'summarize',
		[
			me.show_friendly_seals(),
		]))
]",

on_summarize: "[
	
	schedule(max(1, 100 - (level.cycle - _begin_show_friendly_seals)),
	  say('When a creature reaches the enemy Citadel it breaks any seal it finds, dealing damage. It will also deal damage according to its attack power.',
		  'wrap_up',
		  [
		  ])
	)
]",
/*
on_introduce_villages: "[
	say('There are three villages on the battlefield. If you move a creature onto a village, it will capture it, making the village loyal to your Citadel.',
		'introduce_villages2',
	   [
	   	me.show_villages()
	   ])
]",

on_introduce_villages2: "[

	schedule(max(1, 100 - (level.cycle - _begin_show_villages)),
	  say('Each village you control gives you extra mana which allows you to cast more spells. Try to capture villages and prevent your opponent from having control of them!',
		  'wrap_up',
		  []))
]",
*/
on_wrap_up: "[
	say('Let us now battle, Acolyte. I am sure you are eager to prove your mettle.',
		'done',
		[])
]",

on_begin_scenario2: "[
	say('You have returned for another round of training I see, Acolyte. We will begin by looking at what the different symbols on a card mean.',
		 'inspect_card',
		 [])
]",

on_inspect_card: "[
	exit_dialog(),
	execute(_controller, schedule(10, spawn('inspect_card_dialog', 0, 0, { _mm: _mm, _controller: _controller, _card: card, _display_help: true, _on_done_commands: execute(_controller, [bind_command(_controller.show_intro_sequence, 'card_mix'), schedule(5, if(tutorial is class client_tutorial_intro2, set(tutorial.should_inhibit_end_turn, false)) where tutorial = _controller.get_tutorial)]) })))
] where card = find_or_die(level.chars, value is obj card and value.card_type.name = 'Blessing of Endurance')",

on_card_mix: "[
	say('You have a mix of <b>creatures</b> and <b>spells</b> in your deck. As you cast creatures you will gain <b>levels</b>. This will make your spells less expensive to cast.',
		'let_us_fight',
		[])

//	if(tutorial is class client_tutorial_intro2,
//	   set(tutorial.allow_tips, true)) where tutorial = _controller.get_tutorial
]",

on_let_us_fight: "[
	say('Let us fight now and see what you have learned. Think carefully about what you want to do!',
		'done',
		[]),

	if(tutorial is class client_tutorial_battle,
	   set(tutorial.allow_tips, true)) where tutorial = _controller.get_tutorial
]",

on_begin_scenario_schools: "[
	say(q(So far you have been taught to battle using <img src='images/icons/school-faith.svg'/><b>Aether</b> spells. Wouldn't it be nice to have spells that can <i>hurt</i> things though? In this battle you will have a mix of <img src='images/icons/school-faith.svg'/><b>Aether</b> and <img src='images/icons/school-blood.svg'/><b>Entropia</b> spells.),
	'mixed_schools',
	[])
]",

on_mixed_schools: "[
	say(q(Remember that each <img src='images/icons/school-faith.svg'/><b>Aether</b> creature you have will make <img src='images/icons/school-faith.svg'/><b>Aether</b> spells easier to cast. Each <img src='images/icons/school-blood.svg'/><b>Entropia</b> creature will make <img src='images/icons/school-blood.svg'/><b>Entropia</b> spells easier to cast. Choose your spells wisely!),
	'done',
	[])
]",

on_done: "exit_dialog()",

on_process: "[
	_mm.process_matchmaking_connection(),
	//_controller.process_connection(),
]",
}
