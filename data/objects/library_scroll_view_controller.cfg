{
	id: "library_scroll_view_controller",
	prototype: ["library_view_controller"],

	hidden_in_game: false,

	properties: {

		_pending_elements_last_frame: { type: "int", default: 0 },

		_grid: { type: "null|obj scrollable_pane" },
		grid: "obj scrollable_pane <- _grid",

		_update_display: "def() ->commands
		execute(me,
		[
			remove_object(_grid),
			spawn('scrollable_pane', 0, 0, {
				x: gui_left_edge,
				y: lib.citadel.px(50),
				area_width: lib.citadel.py(880),
				area_height: lib.citadel.py(720),
				elements: [],
				pending_elements: cards + card_labels,
				zorder: 5000,
				use_absolute_screen_coordinates: true,
				focus_override: true,
				step_size: lib.citadel.py(64),
			}, [
				set(me._grid, child),
			])
			where cards = map(flat_visible_cards, {
				xpos: 0 + lib.citadel.py(290)*(index%3),
				ypos: 0 + lib.citadel.py(240)*(index/3),
				height: lib.citadel.py(300),
				create: def()->custom_obj
				  controller.create_card(value.card)
			})
			where card_labels = map(flat_visible_cards, {
				xpos: lib.citadel.py(206) + lib.citadel.py(290)*(index%3),
				ypos: lib.citadel.py(170) + lib.citadel.py(240)*(index/3),
				height: lib.citadel.py(60),
				create: def()->custom_obj
				  object('label', 0, 0, {
					_text: ['x' + str(value.num_copies)],
					_bg_color: [0.04,0.06,0.08,1.0],
					_font_size: lib.citadel.py(24),

					_pad_left: lib.citadel.py(24),
					_pad_right: lib.citadel.py(8),
					_pad_above: lib.citadel.py(6),
					zorder: -1,
				  })
			})
			where flat_visible_cards = fold(map(_visible_cards, value.entries), a+b, [])
		])
		",

		scroll_up: "def() ->commands grid.move_position(-grid.step_size)",
		scroll_down: "def() ->commands grid.move_position(grid.step_size)",
	},

	on_process: "[
		if(_pending_elements_last_frame <= num_pending_elements+1,
			grid.preload_pending_child()
		),
		set(_pending_elements_last_frame, num_pending_elements),
	] where num_pending_elements = size(grid.pending_elements)",

	on_create: "set(alpha, 0)",

	on_being_removed: "map(spawned_children, remove_object(value))",
}
