{
	id: "library_scroll_view_controller",
	prototype: ["library_view_controller"],

	hidden_in_game: false,

	properties: {

		_pending_elements_last_frame: { type: "int", default: 0 },

		_grid: { type: "null|obj scrollable_pane" },
		grid: "obj scrollable_pane <- _grid",

		start_editing_deck: "def() ->commands
		if(_grid,
			[update_card_quantity(c.obj.tag) | c <- _grid.elements, c.obj is obj label, c.obj.tag is string]
		)
		",

		end_editing_deck: "def() ->commands
		if(_grid,
			[update_card_quantity(c.obj.tag) | c <- _grid.elements, c.obj is obj label, c.obj.tag is string]
		)
		",

		update_card_quantity: "def(string card_name) ->commands
		[
		if(lb and entry, (obj label<- lb.obj).set_text(if(ncards = null, ['x' + str(entry.num_copies)], [str(ncards) + '/' + str(entry.num_copies)]) where ncards = controller.num_cards_in_deck(card_name)))
		where lb = find(grid.elements, value.obj is obj label and value.obj.tag = card_name)
		where entry = find(_flat_visible_cards, value.name = card_name)
		]
		",

		_update_display: "def() ->commands
		execute(me,
		[

			remove_object(_grid),

			[
			set(_flat_visible_cards, flat_visible_cards),
			spawn('scrollable_pane', 0, 0, {
				x: gui_left_edge,
				y: lib.citadel.py(50),
				area_width: lib.citadel.py(880),
				area_height: lib.citadel.py(720),
				elements: [],
				pending_elements: cards + card_labels + buy_buttons + cost_labels,
				zorder: 5000,
				use_absolute_screen_coordinates: true,
				focus_override: true,
				step_size: lib.citadel.py(64),
			}, [
				set(me._grid, child),
			])
			]

			where cost_labels = if(controller.showing_shop,
			filter(
			map(flat_visible_cards,
				if(value.num_copies < 3, {
					xpos: lib.gui.py(240) + lib.gui.py(290)*(index%3),
					ypos: lib.gui.py(6) + lib.gui.py(240)*(index/3),
					height: lib.gui.py(60),
					create: def()->custom_obj
					  object('label', {
						_text: [sprintf('%d gold', lib.citadel.card_gold_cost(value.card))],
						_font_size: lib.gui.py(16),
						_color: if(controller.account_gold >= lib.citadel.card_gold_cost(value.card), [1,1,1,1], [1,0,0,1]),
					  }),
				})
			), value != null), [])

			where buy_buttons = if(controller.showing_shop,
			filter(
			map(flat_visible_cards,
				if(value.num_copies < 3, {
					xpos: lib.gui.py(240) + lib.gui.py(290)*(index%3),
					ypos: lib.gui.py(30) + lib.gui.py(240)*(index/3),
					height: lib.gui.py(60),
					create: def()->custom_obj
					  object('button_controller', {
						button_width: lib.gui.py(40),
						button_height: lib.gui.py(20),
						text: 'Buy',
						_font_size: lib.gui.py(18),
						on_click: bind(controller.buy_card, value.name, lib.citadel.card_gold_cost(value.card)),
					  }),
				})
			), value != null), [])

			where cards = map(flat_visible_cards, {
				xpos: 0 + lib.citadel.py(290)*(index%3),
				ypos: 0 + lib.citadel.py(240)*(index/3),
				height: lib.citadel.py(300),
				create: def()->custom_obj
				  controller.create_card(value.card)
			})
			where card_labels = map(flat_visible_cards, {
				xpos: lib.citadel.py(216) + lib.citadel.py(290)*(index%3),
				ypos: lib.citadel.py(170) + lib.citadel.py(240)*(index/3),
				height: lib.citadel.py(60),
				create: def()->custom_obj
				  object('label', 0, 0, {
					_text: if(ncards = null, ['x' + str(value.num_copies)], [str(ncards) + '/' + str(value.num_copies)]) where ncards = controller.num_cards_in_deck(value.name),

					_bg_color: [0.04,0.06,0.08,1.0],
					_font_size: lib.citadel.py(24),

					_pad_left: lib.citadel.py(24),
					_pad_right: lib.citadel.py(8),
					_pad_above: lib.citadel.py(6),
					zorder: -1,

					tag: value.name,
				  })
			})
			where flat_visible_cards = fold(map(_visible_cards, value.entries), a+b, [])
		])
		",

		refresh_display: "def() ->commands
			let pos = if(_grid != null, _grid.current_position, 0);
			_update_display();
			if(_grid != null, _grid.move_position(pos))
		",

		scroll_up: "def() ->commands grid.move_position(-grid.step_size)",
		scroll_down: "def() ->commands grid.move_position(grid.step_size)",

		_flat_visible_cards: { type: "[CardEntry]", default: [] },
	},

	on_process: "[
		if(_pending_elements_last_frame <= num_pending_elements+1,
			grid.preload_pending_child()
		),
		set(_pending_elements_last_frame, num_pending_elements),
	] where num_pending_elements = size(grid.pending_elements)",

	on_create: "set(alpha, 0)",

	on_being_removed: "map(spawned_children, remove_object(value))",
}
