{
	is_strict: true,
	always_active: true,
	"animation": [
		{
			"id": "main",
			"image": "tiles2.png",
			"rect": [1,1,47,29],
			frames: 30,
			frames_per_row: 5,
			duration: 1,
		},
	],
	"id": "tile",

	draw_batch_id: "tile",

	zorder: 0,

	properties: {
		_controller: { type: "obj citadel_controller" },

		loc: { type: "Loc", default: [0,0] },

		mouseover: { type: "bool", default: false },

		do_highlight: { type: "int", default: 0 },

		selectable: { type: "bool", default: false, change: "fire_event('render')" },

		destroy: "def() ->commands [remove_object(me)]",

		game_state: {
		  type: "class game_state",
		  set: "[
		    set(_data, value),
		    fire_event('update_tile')
		  ]"
		},

		_last_render_key: { type: "any" },

		_render_key: "[hex_color, is_odd, selectable]",

		is_odd: "bool :: (loc[0] + loc[1])%2 = 1",

		hex_height: { type: "int" },

		hex_size: "int :: round_to_even(lib.hex.width_from_height(hex_height))",

		hex_indent: "decimal :: 0.25",
		hex_indent_inverse: "decimal :: 0.75",

		_theme: { type: "class theme" },

		hex_color: "_theme.calculate_tile_color(loc)",
		border_color: "_theme.tile_border_color",

		border_width: "decimal :: 0.05",

		render_tile: "def(int w, int h) ->frame

		query_cache(global_cache(2), [hex_height, selectable],
		build_animation(
		{
			fbo: tex,
			id: 'fbo',
			image: 'fbo',
			x: if(selectable, w, 0), y: 0, w: w, h: h,
			frames: 1, scale: 1,
			no_remove_alpha_borders: true,
		})

		where tex = query_cache(global_cache(1), [hex_height, null],
			c.render(w*2, h,
			map(['', '_glow'],
			[
				c.save(),
				c.translate(index*w, 0),
				c.scale(w*1.00/238.0),
				c.paint_image(sprintf('images/tile_base%s.png', value)),
				c.restore(),
			])
			)
			where c = canvas()
		)
		)
		",
	},

	on_type_updated: "[set(_last_render_key, null), fire_event('render')]",

	on_render: "if(_last_render_key != _render_key, [
		set(animation, render_tile(hex_size, hex_height)),
		set(mid_x, mid_x),
		set(mid_y, mid_y),
		set(_last_render_key, _render_key),
	])",

	on_spawned: "[set(me._controller, obj citadel_controller<- spawner), set(time_in_animation_delta, 0), fire_event('render')] where spawner = custom_obj<- arg.spawner",
	on_update_tile: "[fire_event('render')]",

	on_click: "[switch(arg.mouse_button, 1, _controller.tile_clicked(me), 3, _controller.tile_right_clicked(me))]",
	
	on_mouse_enter: "[set(mouseover, true), _controller.mouse_enter_tile(me)]",
	on_mouse_leave: "[set(mouseover, false), _controller.mouse_leave_tile(me)]",

//	on_process: "if(mouseover, set(brightness, 500),
//	                if(selectable, set(brightness, 255 + wave(cycle*12)/10),
//							       set(brightness, 255)))",

	object_type: [
	],
}
