{
	is_strict: true,
	"animation": [
		{
			"id": "main",
			"image": "tiles2.png",
			"rect": [1,1,47,29],
			frames: 30,
			frames_per_row: 5,
			duration: 1,
		},
	],
	"id": "tile",

	properties: {
		_controller: { type: "obj citadel_controller" },

		loc: { type: "Loc", default: [0,0] },

		_mouseover: { type: "bool", default: false },

		do_highlight: { type: "int", default: 0 },

		selectable: { type: "bool", default: false },

		destroy: "def() ->commands [remove_object(me)]",

		game_state: {
		  type: "class game",
		  set: "[
		    set(_data, value),
		    fire_event('update_tile')
		  ]"
		},

		_last_render_key: { type: "any" },

		_render_key: "[if(village, village.owner, null), is_odd]",

		is_odd: "bool :: (loc[0] + loc[1])%2 = 1",

		is_village: "bool :: village != null",
		village: "{owner: int, level: int}|null :: game_state.villages[loc]",

		render_tile: "def(int w, int h) ->map {
			id: 'fbo',
			image: 'fbo',
			fbo: query_cache(global_cache(64), [_render_key, w, h], c.render(w, h, [

				c.rectangle(0, 0, w, h),
				if(village != null,
				   if(village.owner = game_state.nplayer,
				   c.set_source_rgba(0.4, 0.4, 0.7, 1),
				   if(village.owner = -1,
				   c.set_source_rgba(0.5, 0.5, 0.5, 1),
				   c.set_source_rgba(0.7, 0.4, 0.4, 1))),
				   c.set_source_rgba(0, if(is_odd, 0.75, 0.5), 0, 1)),

				c.fill(),

				c.set_line_width(1),
				c.rectangle(0, 0, w, h),
				c.set_source_rgba(0, 0, 0, 1),
				c.stroke(),

			]) where c = canvas()),
			
			x: 0, y: 0, w: w, h: h,
			scale: 1,
			frames: 1,
		}",
	},

	on_render: "if(_last_render_key != _render_key, [
		set(animation, render_tile(100, 100)),
		set(x, x),
		set(y, y),
		set(_last_render_key, _render_key),
	])",

	on_spawned: "[set(me._controller, obj citadel_controller<- spawner), set(time_in_animation_delta, 0), fire_event('render')] where spawner = custom_obj<- arg.spawner",
	on_update_tile: "[set(zorder, loc[0]), fire_event('render')]",

	on_click: "[_controller.tile_clicked(me)]",
	
	on_mouse_enter: "[set(_mouseover, true), _controller.mouse_enter_tile(me)]",
	on_mouse_leave: "[set(_mouseover, false), _controller.mouse_leave_tile(me)]",

	on_process: "if(_mouseover, set(brightness, 500),
	                if(selectable, set(brightness, 255 + wave(cycle*12)/10),
							       set(brightness, 255)))",
	
	object_type: [
	],
	
	shader: {
		program: "tile_shader",
		draw: "if(parent, set(uniforms.do_highlight, parent.do_highlight))",
		create: "[set(uniforms.u_tex_map, 0), set(uniforms.do_highlight,0)]",
	},
}
