{
	is_strict: true,
	always_active: true,
	"animation": [
		{
			"id": "main",
			"image": "tiles2.png",
			"rect": [1,1,47,29],
			frames: 30,
			frames_per_row: 5,
			duration: 1,
		},
	],
	"id": "tile",

	properties: {
		_controller: { type: "obj citadel_controller" },

		loc: { type: "Loc", default: [0,0] },

		mouseover: { type: "bool", default: false },

		do_highlight: { type: "int", default: 0 },

		selectable: { type: "bool", default: false },

		destroy: "def() ->commands [remove_object(me)]",

		game_state: {
		  type: "class game",
		  set: "[
		    set(_data, value),
		    fire_event('update_tile')
		  ]"
		},

		_last_render_key: { type: "any" },

		_render_key: "[hex_color, is_odd]",

		is_odd: "bool :: (loc[0] + loc[1])%2 = 1",

		hex_height: { default: 100 },

		hex_size: "int :: int(hex_height*1.3)",

		hex_indent: "decimal :: (hex_size - hex_height)/decimal(hex_size)",
		hex_indent_inverse: "decimal :: 1.0 - hex_indent",

		_theme: { type: "class theme" },

		hex_color: "_theme.calculate_tile_color(loc)",

		render_tile: "def(int w, int h) ->map {
			id: 'fbo',
			image: 'fbo',
			fbo: query_cache(global_cache(64), [_render_key, w, h], c.render(w, h, [

				c.move_to(w*hex_indent, 0),
				c.line_to(w*hex_indent_inverse, 0),
				c.line_to(w, h*0.5),
				c.line_to(w*hex_indent_inverse, h),
				c.line_to(w*hex_indent, h),
				c.line_to(0, h*0.5),
				c.line_to(w*hex_indent, 0),

				c.set_source_rgba(hex_color[0], hex_color[1], hex_color[2], hex_color[3]),

				c.fill(),

			])where c = canvas()),
			
			x: 0, y: 0, w: w, h: h,
			scale: 1,
			frames: 1,
		}",
	},

	on_render: "if(_last_render_key != _render_key, [
		set(animation, render_tile(hex_size, hex_height)),
		set(x, x),
		set(y, y),
		set(_last_render_key, _render_key),
	])",

	on_spawned: "[set(me._controller, obj citadel_controller<- spawner), set(time_in_animation_delta, 0), fire_event('render')] where spawner = custom_obj<- arg.spawner",
	on_update_tile: "[set(zorder, loc[0]), fire_event('render')]",

	on_click: "[_controller.tile_clicked(me)]",
	
	on_mouse_enter: "[set(mouseover, true), _controller.mouse_enter_tile(me)]",
	on_mouse_leave: "[set(mouseover, false), _controller.mouse_leave_tile(me)]",

//	on_process: "if(mouseover, set(brightness, 500),
//	                if(selectable, set(brightness, 255 + wave(cycle*12)/10),
//							       set(brightness, 255)))",
	
	object_type: [
	],
	
	shader: {
		name: "tile_shader",
		draw: "if(parent, set(uniforms.do_highlight, parent.do_highlight))",
		create: "[set(uniforms.u_tex_map, 0), set(uniforms.do_highlight,0)]",
	},
}
