{
	id: "rival_avatar",
	is_strict: true,

	properties: {
		halo: { type: "decimal", default: 0.0 },
		rival: { type: "class rival" },
		border_size: "int :: lib.citadel.py(10)",
		render: "def() ->commands [
			set(animation, lib.citadel.render_frame(c, ww + border_size*2, hh + border_size*2,
			[
				c.translate(border_size, border_size),
				c.rectangle(0, 0, ww, hh),
				c.clip(),

				c.rectangle(0, 0, ww, hh),
				c.set_source_rgba(0, 0, 0, 1),
				c.fill(),

				c.save(),
				c.rectangle((ww*2)/4, 0, ww/2, hh),
				c.clip(),

				c.translate((ww*3)/4, hh/2),
				c.scale(min([
					  if(card.portrait_focus_width is int, decimal(area_w)/decimal(card.portrait_focus_width/2), 1.0),
					  if(card.portrait_focus_height is int, decimal(area_h)/decimal(card.portrait_focus_height/2), 1.0),
					  1.0,
				])) where area_w = ww/2 where area_h = hh,
				c.paint_image('images/portraits/card-size/' + (card.portrait or 'null'), [-(focus[0]/2), -(focus[1]/2)]),
				c.restore(),

				c.set_linear_pattern((ww*2)/4, 0, (ww*2)/4 + ww*0.15, 0, [
					{ offset: 0, red: 0, green: 0, blue: 0, alpha: 1.0 },
					{ offset: 1, red: 0, green: 0, blue: 0, alpha: 0.0 },
				]),
				c.rectangle((ww*2)/4, 0, ww*0.15, hh),
				c.fill(),

				c.save(),
				c.translate(hh*0.2, hh*0.2),

				c.set_source_rgba(1, 1, 1, 1),

				map(fragments, [
					c.save(),
					value.path,
					c.fill(),
					c.restore(),
				]) where fragments = c.markup_text(q(<font size=') + lib.citadel.py(14) + q('>) + rival.name + q(</font>\n<font size=') + lib.citadel.py(12) + q('>) + rival.title + q(</font>), ww),

				c.restore(),

			]
			)) where focus = card.portrait_focus or [400,400]
			   where card = lib.citadel.create_card(rival.avatar)
			   where ww = _width
			   where hh = _height
			   where c = canvas()
		]",

		mouseover_handler: { type: "null|function(obj rival_avatar) ->commands" },
		mouseoff_handler: { type: "null|function(obj rival_avatar) ->commands" },
		click_handler: { type: "null|function(obj rival_avatar) ->commands" },

		_width: { type: "int", init: "lib.citadel.py(250)" },
		_height: { type: "int", init: "lib.citadel.py(50)" },
	},

	on_create: "
		render()
	",

	on_mouse_enter: "if(mouseover_handler, [
		sound(s, lib.citadel.sound_volume(s)) where s = 'interface/hover.wav',
		mouseover_handler(me)
	])",
	on_mouse_leave: "if(mouseoff_handler, mouseoff_handler(me))",
	on_click: "if(click_handler, [
		sound(s, lib.citadel.sound_volume(s)) where s = 'interface/click.wav',
		click_handler(me)
	])",

	on_type_updated: "render()",

	shader: {
		name: "rival_avatar_render",
		vertex: "
        uniform mat4 u_anura_mvp_matrix;
        attribute vec4 a_anura_vertex;
        attribute vec2 a_anura_texcoord;
        varying vec2 v_texcoord;
        void main()
        {
            v_texcoord = a_anura_texcoord;
            gl_Position = u_anura_mvp_matrix * a_anura_vertex;
		}
		",

		fragment: "
		uniform sampler2D u_anura_tex_map;
		uniform vec4 u_anura_sprite_area;
		uniform float u_alpha;
		uniform float u_halo;
        varying vec2 v_texcoord;
		void main()
		{
			vec4 col = texture2D(u_anura_tex_map, v_texcoord);

			if(col[3] < 0.01) {
				float sprite_area_width = u_anura_sprite_area[2] - u_anura_sprite_area[0];
				float sprite_area_height = u_anura_sprite_area[3] - u_anura_sprite_area[1];
				float dist_x = 5.0*min(v_texcoord[0] - u_anura_sprite_area[0], u_anura_sprite_area[2] - v_texcoord[0])/sprite_area_height;
				float dist_y = min(v_texcoord[1] - u_anura_sprite_area[1], u_anura_sprite_area[3] - v_texcoord[1])/sprite_area_width;

				gl_FragColor = vec4(1, 1, 1, ((min(dist_x,dist_y)-0.10)*u_halo*2.0))*u_alpha;
			} else {
				if(col[3] < 0.1) {
					col[3] = 0.0;
				}
				gl_FragColor = col*u_alpha;
			}
		}
		",

		draw: "[
			set(uniform_commands.u_alpha, parent.alpha/255.0),
			set(uniform_commands.u_halo, parent.halo),
		]",
	},
}
