{
	id: "seal",
	is_strict: true,
	always_active: true,

	properties: {
		size: { default: 48.0 },

		shattering: { type: "bool", default: false },

		player_num: { type: "int" },
		lane_num: { type: "int" },

		left_shard: { type: "null|bool" },
		right_shard: { type: "null|bool" },

		scaling: { type: "decimal", get: "size/512.0", set: "[set(size, 512*value)]", variable: false },

		seal_type: "string :: if(seal_damage >= 15, 'drag', seal_damage >= 10, 'pant', 'wolf')",
		seal_name: "string :: if(seal_damage >= 15, 'Dragon', seal_damage >= 10, 'Panther', 'Wolf')",
		seal_damage: { type: "int" },

		icon: "string :: 'seal__' + seal_type + '_' + if(player_num = 0, 'a', 'b') + '.svg'",

		shatter_animation: "def() ->commands [

			spawn('seal', mid_x, mid_y, {
				zorder: zorder,
				player_num: player_num,
				lane_num: lane_num,
				left_shard: true,
				seal_damage: seal_damage,
			}, [

				animate(child, {
					mid_x: mid_x - 40,
					rotate: rotate - 30,
				}, {
					name: 'anim',
					duration: 50,
				}),

				animate(child, {
					alpha: 0,
				}, {
					name: 'anim',
					duration: 50,
					on_complete: remove_object(child),
				}),

			]),

			spawn('seal', mid_x, mid_y, {
				zorder: zorder,
				player_num: player_num,
				lane_num: lane_num,
				right_shard: true,
				seal_damage: seal_damage,
			}, [

				animate(child, {
					mid_x: mid_x + 40,
					rotate: rotate + 30,
				}, {
					name: 'anim',
					duration: 50,
				}),

				animate(child, {
					alpha: 0,
				}, {
					name: 'anim',
					duration: 50,
					on_complete: remove_object(child),
				}),

			]),
		]",

		_update_canvas: "def() ->commands [

		set(animation, {
			id: 'svg',
			image: 'svg',
			fbo: c.render(int(scaling*512), int(scaling*512),
			[
				if(left_shard or right_shard, [
					//the shard fracture line.
					c.save(),
					c.move_to(scaling*512*0.5, scaling*512*0.1),
					c.line_to(scaling*512*0.5, scaling*512*0.5),
					c.line_to(scaling*512*0.6, scaling*512*0.4),
					c.line_to(scaling*512*0.6, scaling*512*0.9),
					c.set_line_width(1.5),
					c.set_source_rgba(1, 1, 1, 1),
					c.stroke(),
					c.restore(),
				]),

				if(left_shard, [

					c.move_to(scaling*512*0.0, scaling*512*0.0),
					c.line_to(scaling*512*0.5, 0),
					c.line_to(scaling*512*0.5, scaling*512*0.5),
					c.line_to(scaling*512*0.6, scaling*512*0.4),
					c.line_to(scaling*512*0.6, scaling*512*1.0),
					c.line_to(scaling*512*0.0, scaling*512*1.0),
					c.line_to(scaling*512*0.0, scaling*512*0.0),

					c.clip(),
					c.new_path(),
				]),

				if(right_shard, [

					c.move_to(scaling*512*1.0, scaling*512*0.0),
					c.line_to(scaling*512*0.5, 0),
					c.line_to(scaling*512*0.5, scaling*512*0.5),
					c.line_to(scaling*512*0.6, scaling*512*0.4),
					c.line_to(scaling*512*0.6, scaling*512*1.0),
					c.line_to(scaling*512*1.0, scaling*512*1.0),
					c.line_to(scaling*512*1.0, scaling*512*0.0),

					c.clip(),
					c.new_path(),
				]),

				c.save(),

				c.scale(scaling, scaling),

				c.draw_svg('images/icons/' + icon, 512, 512),

				c.restore(),

				c.set_line_width(1.5),
				c.set_source_rgba(1, 1, 1, 1),
				c.stroke(),
			] where shard_break = [
			]
			) where c = canvas(),
			x: 0,
			y: 0,
			w: int(scaling*512),
			h: int(scaling*512),
			scale: 1.0,
			frames: 1,
			duration: -1,
		}),

		set(mid_x, mid_x),
		set(mid_y, mid_y),
		]
		
		",
	},

	on_create: "_update_canvas()",

	on_show_tooltip: "
	  spawn('tip_dialog', min(mid_x + 180, level.dimensions[2] - 140), mid_y, {
	    _title: 'Seal of the ' + seal_name,
		_width: 260,
		_height: 100,
		_has_close: false,
		_delay_widgets: 20,
		alpha: 0,
		_tip: {
			key: 'tip',
			text: 'When this seal is broken, its controller loses ' + str(seal_damage) + ' life.',
			targets: [me],
		},
		zorder: 10000,
	  }, [
	  	ctrl.set_tooltip(child),
		animate(child, {
			alpha: 255,
		}, {
			duration: 20,
		}),
	  ])
		where ctrl = obj citadel_controller <- arg.controller
	",
}
