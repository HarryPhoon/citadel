{
	id: "seal",
	is_strict: true,
	always_active: true,

	properties: {

		width: { type: "int" },
		height: { type: "int" },

		shattering: { type: "bool", default: false },

		player_num: { type: "int" },
		lane_num: { type: "int" },

		left_shard: { type: "null|bool" },
		right_shard: { type: "null|bool" },

		seal_type: "string :: if(seal_damage >= 15, 'drag', seal_damage >= 10, 'pant', 'wolf')",
		seal_name: "string :: if(seal_damage >= 15, 'Dragon', seal_damage >= 10, 'Panther', 'Wolf')",
		seal_damage: { type: "int" },

		icon: "string :: 'seal__' + seal_type + '_' + if(player_num = 0, 'a', 'b') + '.svg'",

		shatter_animation: "def() ->commands [

			spawn('seal', mid_x, mid_y, {
				zorder: zorder,
				player_num: player_num,
				lane_num: lane_num,
				left_shard: true,
				seal_damage: seal_damage,
				width: width,
				height: height,
			}, [

				animate(child, {
					mid_x: mid_x - 40,
					rotate: rotate - 30,
				}, {
					name: 'anim',
					duration: 50,
				}),

				animate(child, {
					alpha: 0,
				}, {
					name: 'anim',
					duration: 50,
					on_complete: remove_object(child),
				}),

			]),

			spawn('seal', mid_x, mid_y, {
				zorder: zorder,
				player_num: player_num,
				lane_num: lane_num,
				right_shard: true,
				seal_damage: seal_damage,
				width: width,
				height: height,
			}, [

				animate(child, {
					mid_x: mid_x + 40,
					rotate: rotate + 30,
				}, {
					name: 'anim',
					duration: 50,
				}),

				animate(child, {
					alpha: 0,
				}, {
					name: 'anim',
					duration: 50,
					on_complete: remove_object(child),
				}),

			]),
		]",

		_update_canvas: "def() ->commands [

		set(animation, {
			id: 'svg',
			image: 'svg',
			fbo: c.render(width, height,
			[
				if(left_shard or right_shard, [
					//the shard fracture line.
					c.save(),
					c.move_to(width*0.5, height*0.1),
					c.line_to(width*0.5, height*0.5),
					c.line_to(width*0.6, height*0.4),
					c.line_to(width*0.6, height*0.9),
					c.set_line_width(1.5),
					c.set_source_rgba(1, 1, 1, 1),
					c.stroke(),
					c.restore(),
				]),

				if(left_shard, [

					c.move_to(width*0.0, height*0.0),
					c.line_to(width*0.5, 0),
					c.line_to(width*0.5, height*0.5),
					c.line_to(width*0.6, height*0.4),
					c.line_to(width*0.6, height*1.0),
					c.line_to(width*0.0, height*1.0),
					c.line_to(width*0.0, height*0.0),

					c.clip(),
					c.new_path(),
				]),

				if(right_shard, [

					c.move_to(width*1.0, height*0.0),
					c.line_to(width*0.5, 0),
					c.line_to(width*0.5, height*0.5),
					c.line_to(width*0.6, height*0.4),
					c.line_to(width*0.6, height*1.0),
					c.line_to(width*1.0, height*1.0),
					c.line_to(width*1.0, height*0.0),

					c.clip(),
					c.new_path(),
				]),


				c.save(),
				c.scale(width/148.0),
				c.paint_image('images/seal_' + if(is_enemy, 'black', 'white') + '_' + if(seal_damage >= 15, '3', seal_damage >= 10, '2', '1') + '.png'),
				c.restore(),

				c.save(),
				c.translate(width/2 - text_extents.width/2, height*if(is_enemy, 0.7, 0.7)),
				c.set_font(lib.font.regular_font),
				c.set_font_size(lib.citadel.py(28)),

				c.set_source_rgba(1, 1, 1, 1),
				c.text_path(str(seal_damage)),
				c.fill(),

				c.restore(),

			] where is_enemy = (controller.state.nplayer != player_num)
			  where text_extents = c.text_extents(lib.font.bold_font, lib.citadel.py(28), str(seal_damage))
			  where controller = find_or_die(level.chars, value is obj citadel_controller)
			) where c = canvas(),
			x: 0,
			y: 0,
			w: width,
			h: height,
			scale: 1.0,
			frames: 1,
			duration: -1,
		}),

		set(mid_x, mid_x),
		set(mid_y, mid_y),
		]
		
		",
	},

	on_type_updated: "fire_event('create')",

	on_create: "[
		_update_canvas()

	] where controller = find_or_die(level.chars, value is obj citadel_controller)",

	on_being_removed: "map(spawned_children, remove_object(value))",

	on_show_tooltip: "
	  spawn('tip_dialog', min(mid_x + 180, level.dimensions[2] - 140), mid_y, {
	    _title: 'Seal of the ' + seal_name,
		_width: 260,
		_height: 100,
		_has_close: false,
		_delay_widgets: 20,
		alpha: 0,
		_tip: {
			key: 'tip',
			text: 'When this seal is broken, its controller loses ' + str(seal_damage) + ' life.',
			targets: [me],
		},
		zorder: 10000,
	  }, [
	  	ctrl.set_tooltip(child),
		animate(child, {
			alpha: 255,
		}, {
			duration: 20,
		}),
	  ])
		where ctrl = obj citadel_controller <- arg.controller
	",

	object_type: [
	]
}
