{
	id: "seal",
	is_strict: true,
	always_active: true,
	

	properties: {

		width: { type: "int" },
		height: { type: "int" },

		shattering: { type: "bool", default: false },

		threatened: {
			type: "bool",
			set: "if(value != _data, [
				set(_data, value),
			])"
		},

		player_num: { type: "int" },
		lane_num: { type: "int" },

		left_shard: { type: "null|bool" },
		right_shard: { type: "null|bool" },

		seal_type: "string :: if(seal_damage >= 15, 'drag', seal_damage >= 10, 'pant', 'wolf')",
		seal_name: "string :: if(seal_damage >= 15, 'Dragon', seal_damage >= 10, 'Panther', 'Wolf')",
		seal_damage: { type: "int" },

		icon: "string :: 'seal__' + seal_type + '_' + if(player_num = 0, 'a', 'b') + '.svg'",

		shatter_animation: "def() ->commands [

			spawn('seal', mid_x, mid_y, {
				threatened: threatened,
				zorder: zorder,
				player_num: player_num,
				lane_num: lane_num,
				left_shard: true,
				seal_damage: seal_damage,
				width: width,
				height: height,
			}, [

				animate(child, {
					mid_x: mid_x - 40,
					rotate: rotate - 30,
				}, {
					name: 'anim',
					duration: 50,
				}),

				animate(child, {
					alpha: 0,
				}, {
					name: 'anim',
					duration: 50,
					on_complete: remove_object(child),
				}),

			]),

			spawn('seal', mid_x, mid_y, {
				threatened: threatened,
				zorder: zorder,
				player_num: player_num,
				lane_num: lane_num,
				right_shard: true,
				seal_damage: seal_damage,
				width: width,
				height: height,
			}, [

				animate(child, {
					mid_x: mid_x + 40,
					rotate: rotate + 30,
				}, {
					name: 'anim',
					duration: 50,
				}),

				animate(child, {
					alpha: 0,
				}, {
					name: 'anim',
					duration: 50,
					on_complete: remove_object(child),
				}),

			]),
		]",

		_update_canvas: "def() ->commands execute(me, [

		set(animation, {
			id: 'svg',
			image: 'svg',
			fbo: c.render(width, height,
			[
				if(left_shard or right_shard, [
					//the shard fracture line.
					c.save(),
					c.move_to(width*0.5, height*0.1),
					c.line_to(width*0.5, height*0.5),
					c.line_to(width*0.6, height*0.4),
					c.line_to(width*0.6, height*0.9),
					c.set_line_width(1.5),
					c.set_source_rgba(1, 1, 1, 1),
					c.stroke(),
					c.restore(),
				]),

				if(left_shard, [

					c.move_to(width*0.0, height*0.0),
					c.line_to(width*0.5, 0),
					c.line_to(width*0.5, height*0.5),
					c.line_to(width*0.6, height*0.4),
					c.line_to(width*0.6, height*1.0),
					c.line_to(width*0.0, height*1.0),
					c.line_to(width*0.0, height*0.0),

					c.clip(),
					c.new_path(),
				]),

				if(right_shard, [

					c.move_to(width*1.0, height*0.0),
					c.line_to(width*0.5, 0),
					c.line_to(width*0.5, height*0.5),
					c.line_to(width*0.6, height*0.4),
					c.line_to(width*0.6, height*1.0),
					c.line_to(width*1.0, height*1.0),
					c.line_to(width*1.0, height*0.0),

					c.clip(),
					c.new_path(),
				]),


				c.save(),
				c.scale(width/148.0),
				c.paint_image('images/seal_' + if(is_enemy, 'black', 'white') + '_' + if(seal_damage >= 15, '3', seal_damage >= 10, '2', '1') + '.png'),
				c.restore(),

			] where is_enemy = (controller.state.nplayer != player_num)
			  where controller = find_or_die(level.chars, value is obj citadel_controller)
			) where c = canvas(),
			x: 0,
			y: 0,
			w: width,
			h: height,
			scale: 1.0,
			frames: 1,
			duration: -1,
		}),

		set(mid_x, mid_x),
		set(mid_y, mid_y),

		; spawn('label', {
			_text: [str(seal_damage)],
			_font_size: int(height*0.5),
			mid_x: mid_x,
			mid_y: mid_y,
			zorder: zorder+20,
		}, [
			set(_label, child),
		]),
		])
		
		",

		_label: {
			type: "obj label|null",
			set: "[
				remove_object(_data),
				set(_data, value),
			]",
		},
	},

	on_type_updated: "fire_event('create')",

	on_create: "[
		_update_canvas();

		map(['front_halo_3', 'front_halo_2', 'front_halo_1'],
			spawn('seal.aura', {
				mid_x: tile.mid_x,
				animation: value,
//				_image: 'images/effects/seal/' + value + '.png',
				_width: width*2,
//				zorder: zorder-6+index,
				_alpha_range: [96,128],
				_alpha_period: 100 + 3d12,
				_invert: is_enemy,
			} +
			if(is_enemy,
				{ y: tile.y - lib.citadel.py(2 + index*11)},
				{ y2: tile.y2 + lib.citadel.py(0 + index*11)}
			)
			)
		),

		map(['back_halo', 'back_rays_1', 'back_rays_2'],

		if(is_enemy,
			spawn('seal.aura', {
				mid_x: mid_x,
				y2: y2 + width - lib.citadel.py(10),
				animation: value,
//				_image: 'images/effects/seal/' + value + '.png',
				_width: width*2,
//				zorder: zorder-12+index,
				_alpha_range: [64,128],
				_alpha_period: 100 + 3d12,
				_invert: true,
			}),

			spawn('seal.aura', {
				mid_x: mid_x,
				y: y - width + lib.citadel.py(8),
				animation: value,
//				_image: 'images/effects/seal/' + value + '.png',
				_width: width*2,
//				zorder: zorder-12+index,
				_alpha_range: [64,128],
				_alpha_period: 100 + 3d12,
			})
		)
		),

		spawn('seal.aura', {
			mid_x: mid_x,
			mid_y: y + lib.citadel.py(8),
			animation: 'halo',
//			_image: 'images/effects/seal/halo.png',
			_width: lib.citadel.py(100),
			_vertical_stretch: 5.0,
//			zorder: zorder-2,
			_alpha_range: [64, 128],
			_alpha_period: 100 + 3d12,
			_invert: is_enemy,
		}),
	]
	where tile = obj tile<- choose(filter(level.chars, value is obj tile and value.loc[0] = lane_num), if(is_enemy, -value.mid_y, value.mid_y))
	where is_enemy = (controller.state.nplayer != player_num)
	where controller = find_or_die(level.chars, value is obj citadel_controller)
	",

	timer_frequency: 30,

	on_timer: "if(1d3 = 1, [
		spawn('seal.aura', {
			mid_x: mid_x + 1d(width) - 1d(width),
			mid_y: y - lib.citadel.py(40)*if(is_enemy,-1,1),
			animation: 'halo',
//			_image: 'images/effects/seal/halo.png',
			_width: lib.citadel.py(25),
//			zorder: zorder-2,
			alpha: 16 + 3d16,
			_ttl: 240,
		}, [
			animate(child, {
				mid_y: child.mid_y + lib.citadel.py(100 + 1d100)*if(is_enemy,-1,1),
				alpha: 64,
			}, {
				duration: 240,
			})
		])
	where is_enemy = (controller.state.nplayer != player_num)
	where controller = find_or_die(level.chars, value is obj citadel_controller)
	])",

	on_being_removed: "map(spawned_children, remove_object(value))",

	on_show_tooltip: "
	  spawn('tip_dialog', min(mid_x + 180, level.dimensions[2] - 140), mid_y, {
	    _title: 'Seal',
		_width: 260,
		_height: 100,
		_has_close: false,
		_delay_widgets: 20,
		alpha: 0,
		_tip: {
			key: 'tip',
			text: 'When this seal is broken, its controller loses ' + str(seal_damage) + ' life.',
			targets: [me],
		},
		zorder: 10000,
	  }, [
	  	ctrl.set_tooltip(child),
		animate(child, {
			alpha: 255,
		}, {
			duration: 20,
		}),
	  ])
		where ctrl = obj citadel_controller <- arg.controller
	",

	shader: {
		name: "seal_render",

		vertex: "
        uniform mat4 u_anura_mvp_matrix;
        attribute vec4 a_anura_vertex;
        attribute vec2 a_anura_texcoord;
        varying vec2 v_texcoord;
        void main()
        {
            v_texcoord = a_anura_texcoord;
            gl_Position = u_anura_mvp_matrix * a_anura_vertex;
        }
		",

		fragment: "
        uniform sampler2D u_anura_tex_map;
		varying vec2 v_texcoord;
		uniform vec4 u_anura_sprite_area;
		uniform float u_danger;
        void main()
        {
			gl_FragColor = texture2D(u_anura_tex_map, v_texcoord);
			if(gl_FragColor[3] > 0.0) {
				gl_FragColor[0] = gl_FragColor[0]/gl_FragColor[3];
				gl_FragColor[1] = gl_FragColor[1]/gl_FragColor[3];
				gl_FragColor[2] = gl_FragColor[2]/gl_FragColor[3];
			}

			gl_FragColor[0] += u_danger*(1.0 - gl_FragColor[0]);

		}
		",

		draw: "[
			set(uniform_commands.u_danger, if(parent.threatened, (1.0+sin(parent.level.cycle*4.0))*0.5, 0.0))
		]",
	},

	object_type: [
	{
		id: "aura",
		is_strict: true,
		always_active: true,

		zorder: -25,

		draw_batch_id: "seal",

		animation: [
		{
			id: "back_halo",
			image: "effects/seal/halo_atlas.png",
			x: 0, y: 0, w: 146, h: 266,
			frames: 1,
			frames_per_row: 1,
			duration: -1,
			no_remove_alpha_borders: true,
			force_no_alpha: true,
			blend: ['one', 'one_minus_src_alpha'],
			scale: 1.0,
		},
		{
			id: "back_rays_1",
			image: "effects/seal/halo_atlas.png",
			x: 149, y: 0, w: 143, h: 304,
			frames: 1,
			frames_per_row: 1,
			duration: -1,
			no_remove_alpha_borders: true,
			force_no_alpha: true,
			blend: ['one', 'one_minus_src_alpha'],
			scale: 1.0,
		},
		{
			id: "back_rays_2",
			image: "effects/seal/halo_atlas.png",
			x: 293, y: 0, w: 112, h: 304,
			frames: 1,
			frames_per_row: 1,
			duration: -1,
			no_remove_alpha_borders: true,
			force_no_alpha: true,
			blend: ['one', 'one_minus_src_alpha'],
			scale: 1.0,
		},
		{
			id: "front_halo_1",
			image: "effects/seal/halo_atlas.png",
			x: 0, y: 272, w: 148, h: 83,
			frames: 1,
			frames_per_row: 1,
			duration: -1,
			no_remove_alpha_borders: true,
			force_no_alpha: true,
			blend: ['one', 'one_minus_src_alpha'],
			scale: 1.0,
		},
		{
			id: "front_halo_2",
			image: "effects/seal/halo_atlas.png",
			x: 0, y: 360, w: 148, h: 71,
			frames: 1,
			frames_per_row: 1,
			duration: -1,
			no_remove_alpha_borders: true,
			force_no_alpha: true,
			blend: ['one', 'one_minus_src_alpha'],
			scale: 1.0,
		},
		{
			id: "front_halo_3",
			image: "effects/seal/halo_atlas.png",
			x: 154, y: 310, w: 148, h: 66,
			frames: 1,
			frames_per_row: 1,
			duration: -1,
			no_remove_alpha_borders: true,
			force_no_alpha: true,
			blend: ['one', 'one_minus_src_alpha'],
			scale: 1.0,
		},
		{
			id: "halo",
			image: "effects/seal/halo_atlas.png",
			x: 308, y: 310, w: 50, h: 63,
			frames: 1,
			frames_per_row: 1,
			duration: -1,
			no_remove_alpha_borders: true,
			force_no_alpha: true,
			blend: ['one', 'one_minus_src_alpha'],
			scale: 1.0,
		},
		],

		properties: {
			_invert: { default: false },
			_ttl: { type: "null|int" },
			_alpha_range: { type: "null|[int,int]" },
			_alpha_period: { default: 10 },
			//_image: { type: "string" },
			_width: { type: "int" },
			_vertical_stretch: { type: "decimal", default: 1.0 },
		},

		on_reset_alpha: "if(_alpha_range != null, [
			set(alpha, _alpha_range[0]),
			set(_alpha_range, [int,int]<- reverse(_alpha_range)),
			animate(me, {
				alpha: _alpha_range[1],
			}, {
				duration: _alpha_period,
				on_complete: fire_event('reset_alpha'),
			}),
		])",

		on_create: "[
			if(_ttl != null, [
				schedule(max(0, _ttl-30), ; animate(me, {
					alpha: 0,
				}, {
					on_complete: remove_object(me),
					duration: 30,
				})),
			]),
			set(scale, decimal(_width)/img_w),
			set(upside_down, if(_invert, 1, -1)),
			fire_event('reset_alpha'),
		]",

		shader: {
			name: "seal_halo_render",

			vertex: "
			uniform mat4 u_anura_mvp_matrix;
			attribute vec4 a_anura_vertex;
			attribute vec2 a_anura_texcoord;
			attribute float a_property_alpha;
			varying vec2 v_texcoord;
			varying float v_alpha;
			void main()
			{
				v_texcoord = a_anura_texcoord;
				gl_Position = u_anura_mvp_matrix * a_anura_vertex;
				v_alpha = a_property_alpha/256.0;
			}
			",

			fragment: "
			uniform sampler2D u_anura_tex_map;
			varying vec2 v_texcoord;
			varying float v_alpha;
			void main()
			{
				gl_FragColor = texture2D(u_anura_tex_map, v_texcoord);
				gl_FragColor.a *= v_alpha;
			}
			",
		},
		}
	]
}
