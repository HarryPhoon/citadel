{
	id: "seal",
	is_strict: true,
	always_active: true,

	properties: {

		width: { type: "int" },
		height: { type: "int" },

		shattering: { type: "bool", default: false },

		player_num: { type: "int" },
		lane_num: { type: "int" },

		left_shard: { type: "null|bool" },
		right_shard: { type: "null|bool" },

		seal_type: "string :: if(seal_damage >= 15, 'drag', seal_damage >= 10, 'pant', 'wolf')",
		seal_name: "string :: if(seal_damage >= 15, 'Dragon', seal_damage >= 10, 'Panther', 'Wolf')",
		seal_damage: { type: "int" },

		icon: "string :: 'seal__' + seal_type + '_' + if(player_num = 0, 'a', 'b') + '.svg'",

		shatter_animation: "def() ->commands [

			spawn('seal', mid_x, mid_y, {
				zorder: zorder,
				player_num: player_num,
				lane_num: lane_num,
				left_shard: true,
				seal_damage: seal_damage,
				width: width,
				height: height,
			}, [

				animate(child, {
					mid_x: mid_x - 40,
					rotate: rotate - 30,
				}, {
					name: 'anim',
					duration: 50,
				}),

				animate(child, {
					alpha: 0,
				}, {
					name: 'anim',
					duration: 50,
					on_complete: remove_object(child),
				}),

			]),

			spawn('seal', mid_x, mid_y, {
				zorder: zorder,
				player_num: player_num,
				lane_num: lane_num,
				right_shard: true,
				seal_damage: seal_damage,
				width: width,
				height: height,
			}, [

				animate(child, {
					mid_x: mid_x + 40,
					rotate: rotate + 30,
				}, {
					name: 'anim',
					duration: 50,
				}),

				animate(child, {
					alpha: 0,
				}, {
					name: 'anim',
					duration: 50,
					on_complete: remove_object(child),
				}),

			]),
		]",

		_update_canvas: "def() ->commands [

		set(animation, {
			id: 'svg',
			image: 'svg',
			fbo: c.render(width, height,
			[
				if(left_shard or right_shard, [
					//the shard fracture line.
					c.save(),
					c.move_to(width*0.5, height*0.1),
					c.line_to(width*0.5, height*0.5),
					c.line_to(width*0.6, height*0.4),
					c.line_to(width*0.6, height*0.9),
					c.set_line_width(1.5),
					c.set_source_rgba(1, 1, 1, 1),
					c.stroke(),
					c.restore(),
				]),

				if(left_shard, [

					c.move_to(width*0.0, height*0.0),
					c.line_to(width*0.5, 0),
					c.line_to(width*0.5, height*0.5),
					c.line_to(width*0.6, height*0.4),
					c.line_to(width*0.6, height*1.0),
					c.line_to(width*0.0, height*1.0),
					c.line_to(width*0.0, height*0.0),

					c.clip(),
					c.new_path(),
				]),

				if(right_shard, [

					c.move_to(width*1.0, height*0.0),
					c.line_to(width*0.5, 0),
					c.line_to(width*0.5, height*0.5),
					c.line_to(width*0.6, height*0.4),
					c.line_to(width*0.6, height*1.0),
					c.line_to(width*1.0, height*1.0),
					c.line_to(width*1.0, height*0.0),

					c.clip(),
					c.new_path(),
				]),


				c.save(),
				c.scale(width/148.0),
				c.paint_image('images/seal_' + if(is_enemy, 'black', 'white') + '_' + if(seal_damage >= 15, '3', seal_damage >= 10, '2', '1') + '.png'),
				c.restore(),

				c.save(),
				c.translate(width/2 - text_extents.width/2, height*if(is_enemy, 0.7, 0.7)),
				c.set_font(lib.font.regular_font),
				c.set_font_size(lib.citadel.py(28)),

				c.set_source_rgba(1, 1, 1, 1),
				c.text_path(str(seal_damage)),
				c.fill(),

				c.restore(),

			] where is_enemy = (controller.state.nplayer != player_num)
			  where text_extents = c.text_extents(lib.font.bold_font, lib.citadel.py(28), str(seal_damage))
			  where controller = find_or_die(level.chars, value is obj citadel_controller)
			) where c = canvas(),
			x: 0,
			y: 0,
			w: width,
			h: height,
			scale: 1.0,
			frames: 1,
			duration: -1,
		}),

		set(mid_x, mid_x),
		set(mid_y, mid_y),
		]
		
		",
	},

	on_type_updated: "fire_event('create')",

	on_create: "[
		_update_canvas();
		map(['back_halo', 'back_rays_1', 'back_rays_2', 'front_halo_1', 'front_halo_2', 'front_halo_3'],
		spawn('seal.aura', {
			mid_x: mid_x,
			y: if(is_enemy, y2 - lib.citadel.py(4), y - width + lib.citadel.py(8)),
			_image: 'images/effects/seal/' + value + '.png',
			_width: width*2,
			zorder: zorder-12+index,
			_alpha_range: [196,255],
			_alpha_period: 100 + 3d12,
			_invert: is_enemy,
		})
		),

		spawn('seal.aura', {
			mid_x: mid_x,
			mid_y: y + lib.citadel.py(8),
			_image: 'images/effects/seal/halo.png',
			_width: lib.citadel.py(100),
			_vertical_stretch: 5.0,
			zorder: zorder-2,
			_alpha_range: [184, 204],
			_alpha_period: 100 + 3d12,
			_invert: is_enemy,
		})
	]
	where is_enemy = (controller.state.nplayer != player_num)
	where controller = find_or_die(level.chars, value is obj citadel_controller)
	",

	timer_frequency: 30,

	on_timer: "if(1d3 = 1, [
		spawn('seal.aura', {
			mid_x: mid_x + 1d(width) - 1d(width),
			mid_y: y - lib.citadel.py(40)*if(is_enemy,-1,1),
			_image: 'images/effects/seal/halo.png',
			_width: lib.citadel.py(25),
			zorder: zorder-2,
			alpha: 128 + 4d40,
			_ttl: 240,
		}, [
			animate(child, {
				mid_y: child.mid_y + lib.citadel.py(100 + 1d100)*if(is_enemy,-1,1),
				alpha: 64,
			}, {
				duration: 240,
			})
		])
	where is_enemy = (controller.state.nplayer != player_num)
	where controller = find_or_die(level.chars, value is obj citadel_controller)
	])",

	on_being_removed: "map(spawned_children, remove_object(value))",

	on_show_tooltip: "
	  spawn('tip_dialog', min(mid_x + 180, level.dimensions[2] - 140), mid_y, {
	    _title: 'Seal of the ' + seal_name,
		_width: 260,
		_height: 100,
		_has_close: false,
		_delay_widgets: 20,
		alpha: 0,
		_tip: {
			key: 'tip',
			text: 'When this seal is broken, its controller loses ' + str(seal_damage) + ' life.',
			targets: [me],
		},
		zorder: 10000,
	  }, [
	  	ctrl.set_tooltip(child),
		animate(child, {
			alpha: 255,
		}, {
			duration: 20,
		}),
	  ])
		where ctrl = obj citadel_controller <- arg.controller
	",

	object_type: [
	{
		id: "aura",
		is_strict: true,
		always_active: true,

		properties: {
			_invert: { default: false },
			_ttl: { type: "null|int" },
			_alpha_range: { type: "null|[int,int]" },
			_alpha_period: { default: 10 },
			_image: { type: "string" },
			_width: { type: "int" },
			_vertical_stretch: { type: "decimal", default: 1.0 },
			render: "def() ->commands

			set(animation,
			lib.citadel.render_frame(c, _width, height,
			[
				if(_invert, [c.translate(0, height), c.scale(1.0, -1.0)]),
				c.scale(decimal(_width)/decimal(dim[0])),
				c.scale(1.0, _vertical_stretch),
				c.paint_image(_image)
			]
			)
			)

			where height = int((decimal(dim[1])/decimal(dim[0]))*_width*_vertical_stretch)

			where dim = c.image_dim(_image)

			where c = canvas()
			",
		},

		on_reset_alpha: "if(_alpha_range != null, [
			set(alpha, _alpha_range[0]),
			set(_alpha_range, [int,int]<- reverse(_alpha_range)),
			animate(me, {
				alpha: _alpha_range[1],
			}, {
				duration: _alpha_period,
				on_complete: fire_event('reset_alpha'),
			}),
		])",

		on_create: "[
			if(_ttl != null, schedule(_ttl, remove_object(me))),
			render(),
			fire_event('reset_alpha'),
		]",
	}
	]
}
