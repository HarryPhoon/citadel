{
id: "mana_bar",
is_strict: true,

properties: {
	_prev_current_mana: { type: "int|null" },
	_prev_max_mana: { type: "int|null" },

	_animation_progress: { type: "decimal|null" },

	current_mana: { type: "int" },
	max_mana: { type: "int" },
	using_mana: { type: "int", default: 0, set: "if(value != _data, [set(_data, value), fire_event('create')])" },

	_font: { type: "string", init: "lib.font.regular_font" },

	_width: { type: "int" },
	_height: { type: "int" },

	_controller: { type: "obj citadel_controller" },
	_is_player: { type: "bool" },

	_mana_mouseover: { type: "int|null" },
	_dirty: { type: "bool", default: false },

	_show_bar: { type: "bool" },

	px: "def(int pixels) ->int int(pixels*(_height/90.0))",

	render: "def(int ww, int hh) ->commands [
	set(animation, {
		id: 'fbo',
		image: 'fbo',
		x: 0, y: 0, w: ww+_h_border_size, h: hh,
		scale: 1, frames: 1,
		fbo: c.render(ww+_h_border_size, hh, [


			c.save(),
			c.translate(ww*0.2, hh - lib.citadel.py(18)),

			c.set_source_rgba(0.0, 0.44, 0.73),
			if(_show_bar,
			map(range(if(_prev_max_mana is int and _animation_progress is decimal, _prev_max_mana, max_mana)),
				[
					c.save(),

					c.translate(col_pos*_bar_width(ww) + (col_pos/(max_mana-1.0)) * 3.0, 0),


					[
						bar_outline,
						c.set_source_rgba(0.082, 0.367, 0.543, 1.0),
						c.set_line_width(1),
						c.stroke(),
					],

					if(value >= current_mana or (_animation_progress != null and _animation_progress <= 0.5) and value >= _prev_current_mana,
					[
					],
					value >= current_mana - using_mana,
					[
						bar_outline,
						c.set_source_rgba(0.91, 0.86, 0.79, 1.0),
						c.fill(),
						c.stroke(),
					],
					[
						bar_outline,
						c.set_source_rgba(0.0, 0.44, 0.73, if(_animation_progress is decimal and value >= _prev_current_mana, (_animation_progress - 0.5)*2.0, 1.0)),
						c.fill(),
						c.stroke(),
					]),

					if(index = _mana_mouseover, [
						bar_outline,
						c.set_source_rgba(1, 1, 1, 0.2),
						c.fill(),
						c.stroke(),
					]),

					if(_is_player and _controller.locked_mana != null and index < _controller.locked_mana, [
						bar_outline,
						c.set_source_rgba(0, 0, 0, 0.4),
						c.fill(),
						c.stroke(),
					]),
							
					c.restore(),
				] where row_pos = 0
				  where col_pos = value
			)
			),

			c.restore(),

			c.save(),
			c.set_source_rgba(0.0, 0.44, 0.73),

			c.move_to(hex_width*0.25, 0),
			c.line_to(hex_width*0.25 + lib.citadel.py(8), 0),
			c.line_to(lib.citadel.py(8), hh*0.5),
			c.line_to(0, hh*0.5),
			c.fill(),

			c.move_to(hex_width*0.25, hh),
			c.line_to(hex_width*0.25 + lib.citadel.py(8), hh),
			c.line_to(lib.citadel.py(8), hh*0.5),
			c.line_to(0, hh*0.5),
			c.fill(),


			c.translate(lib.citadel.py(8), 0),
			c.move_to(hex_width*0.25, 0),
			c.line_to(hex_width*0.75, 0),
			c.line_to(hex_width, hh*0.5),
			c.line_to(hex_width*0.75, hh),
			c.line_to(hex_width*0.25, hh),
			c.line_to(0.0, hh*0.5),

			c.set_source_rgba(0.078, 0.367, 0.398),
			c.fill(),
			c.restore(),

			c.save(),
			c.translate(lib.citadel.py(8), 0),
			c.translate(hex_width*0.5 - c.text_extents(_font, px(24), 'Mana').width/2, hh*0.9),
			c.set_font(_font),
			c.set_font_size(px(24)),
			c.set_source_rgba(1, 1, 1, 1),
			c.text_path('Mana'),
			c.fill(),
			c.restore(),

			c.save(),
			c.translate(lib.citadel.py(8), 0),
			c.translate(hex_width*0.5 - c.text_extents(_font, px(40), mana_str).width/2, hh*0.6),
			c.set_font(lib.font.regular_font),
			c.set_font_size(px(40)),
			c.set_source_rgba(1, 1, 1, 1),
			c.text_path(mana_str),
			c.fill(),
			c.restore(),
		])
		 where hex_width = lib.hex.width_from_height(hh)
		 where mana_str = str(current_mana) + '/' + str(max_mana)
		 where bar_outline = [
		 	c.rectangle(0, 0, _bar_width(ww) - 4.0, lib.citadel.py(18)),
		 ]
		 where c = canvas()
	}),
	]",

	 _bar_width: "def(int ww) -> decimal decimal(ww - _bar_left(ww))/_max_mana_interp",
	 _bar_left: "def(int ww) -> decimal ww*0.2",

	_max_mana_interp: "decimal ::
		 if(_max_progress = null,
		    max_mana,
			max_mana*_max_progress +
			(1.0 - _max_progress)*_prev_max_mana asserting _prev_max_mana is int)
	",

	_max_progress: "decimal|null :: if(_animation_progress = null, null, min(1.0, _animation_progress*2.0))",

	_bar_mouseover: "def(int xpos, int ypos) ->int|null
		if(img_w > 0 and ypos > y2-16 and ypos < y2, if(pos >= 0 and pos < max_mana, pos) where pos = int(xpos - x)/int(_bar_width(img_w-_h_border_size)))
	",

	_h_border_size: "int :: 42",


},

on_create: "[
	if(_prev_max_mana is int, set(_animation_progress, 0.0)),

	fire_event('render'),
	set(x, x),
	set(y, y),
]",

on_render: "[
	render(_width, _height),
	set(_dirty, false),
]",

on_process: "if(_animation_progress is decimal, [
	if(_animation_progress >= 1.0,
	[
	   set(_animation_progress, null),
	   set(_prev_max_mana, null),
	],
	   add(_animation_progress, 0.02)),

	fire_event('render'),
],
    if(_dirty, fire_event('render'))
)",

on_type_updated: "fire_event('create')",

on_mouse_move: "if(_is_player, if(bar != _mana_mouseover, [
	set(_mana_mouseover, bar),
	set(_dirty, true),
])
  where bar = if(bar_num != null and bar_num < current_mana, bar_num)
  where bar_num = _bar_mouseover(mouse_x, mouse_y)
  where mouse_x = int<- arg.mouse_x
  where mouse_y = int<- arg.mouse_y
)",

on_mouse_leave: "[
	set(_mana_mouseover, null),
	if(_mana_mouseover != null, set(_dirty, true))
]",

on_click: "[
	if(_mana_mouseover != null, [
		set(_controller.locked_mana, if(_mana_mouseover+1 = _controller.locked_mana, null, _mana_mouseover+1)),
		set(_dirty, true)
	])
]",


}
