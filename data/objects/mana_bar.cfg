{
id: "mana_bar",
is_strict: true,
always_active: true,

properties: {
	player_num: { type: "int" },

	using_mana: { type: "int", default: 0, set: "if(value != _data, [set(_data, value)])" },

	current_mana: {
		type: "decimal",
		set: "if(value != _data, [
			set(_data, value),
			set(shader.uniform_commands.u_cur_mana, value) asserting shader,
		])",
	},

	max_mana: {
		type: "decimal",
		set: "if(value != _data, [
			set(_data, value),
			set(shader.uniform_commands.u_max_mana, value) asserting shader,
		])",
		default: 4.0,
	},

	update_mana: "def(decimal cur_mana, decimal max_mana) ->commands
	execute(me,
	[
	animate(me, {
		current_mana: decimal(cur_mana),
		max_mana: decimal(max_mana),
	}, {
		duration: 30,
		name: 'update'
	})
	]
	)
	",

	_font: { type: "string", init: "lib.font.regular_font" },

	_width: { type: "int" },
	_height: { type: "int" },

	_controller: { type: "obj citadel_controller" },
	_is_player: { type: "bool" },

	_mana_mouseover: { type: "int|null" },
	py: "def(int pixels) ->int int(pixels*(_height/90.0))",

	rotation: { type: "decimal" },

	render: "def(int ww, int hh) ->commands [
	set(animation, {
		id: 'fbo',
		image: 'fbo',
		x: 0, y: 0, w: ww, h: hh,
		scale: 1, frames: 1,
		fbo: c.render(ww, hh, [
			c.translate(ww*0.5, hh*0.5),
			c.rotate(rotation*deg_to_radians) where deg_to_radians = 0.0174533,
			c.translate(-ww*0.5, -hh*0.5),

			c.scale(decimal(ww)/decimal(frame_dim[0])),
			c.paint_image(frame_image),
		])

		 where frame_dim = c.image_dim(frame_image)
		 where frame_image = sprintf('images/avatar/mana-bar-slot-%s.png', if(_is_player, 'gold', 'silver'))
		 where c = canvas()
	}),
	]",

	angle_begin: { type: "decimal", default: -3.0 },
	angle_end: { type: "decimal", default: 119.0 },
},

on_create: "[
	fire_event('render'),
]",

on_render: "[
	render(_width, _height),
]",

on_type_updated: "fire_event('create')",

shader: {
	name: "mana_bar_render",
	vertex: "
	uniform mat4 u_anura_mvp_matrix;
	uniform vec4 u_anura_sprite_area;
	uniform vec4 u_anura_draw_area;
	attribute vec4 a_anura_vertex;
	attribute vec2 a_anura_texcoord;
	varying vec2 v_texcoord;
	void main()
	{
		gl_Position = u_anura_mvp_matrix * a_anura_vertex;
		v_texcoord = a_anura_texcoord;
	}
	",

	fragment: "
	uniform sampler2D u_anura_tex_map;
	uniform sampler2D u_mana_tex;
	uniform vec4 u_anura_sprite_area;
	uniform float u_mana_glow;
	varying vec2 v_texcoord;
	uniform float u_property_angle_begin;
	uniform float u_property_angle_end;
	uniform float u_rotation;

	uniform float u_max_mana;
	uniform float u_cur_mana;
	uniform float u_using_mana;
	void main()
	{

		float dx = v_texcoord[0] - 0.5;
		float dy = v_texcoord[1] - 0.5;
		float angle = atan(dy,dx)*180.0/3.14 - u_rotation;
		if(angle > 180.0) {
			angle -= 360.0;
		} else if(angle < -180.0) {
			angle += 360.0;
		}

		if(angle < u_property_angle_begin || angle > u_property_angle_end) {
			gl_FragColor.a = 0.0;
		} else {

			gl_FragColor = texture2D(u_anura_tex_map, v_texcoord);
			if(gl_FragColor[3] > 0.99 && gl_FragColor[1] > 0.12 && gl_FragColor[2] > 0.15 && gl_FragColor[0] < 0.1) {

				float dist = sqrt(dx*dx + dy*dy);
				float pos = (angle - u_property_angle_end) / (u_property_angle_begin - u_property_angle_end);
				float num = u_max_mana*pos;
				float trunc = num-floor(num);

				float base_x = 0;
				if(pos > u_cur_mana/u_max_mana) {
					base_x = 0.666666;
				} else if(pos > (u_cur_mana-u_using_mana)/u_max_mana) {
					base_x = 0.333333;
				}

				base_x += trunc*0.33333;

				float a = 0.43;
				float b = 0.47;

				float ypos = (dist - a)/(b-a);

				//gl_FragColor = texture2D(u_mana_tex, vec2(base_x, ypos));

				vec4 col = vec4(0,0,0,0);
				for(float x = -1; x <= 1; x += 1) {
					for(float y = -1; y <= 1; y += 1) {
						col += texture2D(u_mana_tex, vec2(base_x + x/384.0, ypos + y/20.0));
					}
				}

				gl_FragColor = col/9.0;

				if(base_x < 0.666666) {
					gl_FragColor[0] += gl_FragColor[2]*u_mana_glow*0.5;
				}
			}
		}
	}
	",

	create: "[
		set(textures, [tex]),
		set(tex.binding_point, 1),
		set(uniform_commands.u_mana_tex, 1),

		set(uniform_commands.u_rotation, parent.rotation),
		set(uniform_commands.u_max_mana, parent.max_mana),
		set(uniform_commands.u_cur_mana, parent.current_mana),
	] where tex = load_texture('avatar/mana-bar.png')",

	draw: "[
		set(uniform_commands.u_mana_glow, (1.0+sin(parent.cycle*3.0))*0.5),
		set(uniform_commands.u_using_mana, parent.using_mana),
	]
	",
},



}
