{
id: "mana_bar",
is_strict: true,

properties: {
	_prev_current_mana: { type: "int|null" },
	_prev_max_mana: { type: "int|null" },

	_animation_progress: { type: "decimal|null" },

	current_mana: { type: "int" },
	max_mana: { type: "int" },
	using_mana: { type: "int", default: 0, set: "if(value != _data, [set(_data, value), fire_event('create')])" },

	_font: { type: "string", init: "lib.font.regular_font" },
	_font_size: { default: 16 },

	_width: { type: "int" },

	render: "def(int ww, int hh) ->commands [
	set(animation, {
		id: 'fbo',
		image: 'fbo',
		x: 0, y: 0, w: ww+42, h: hh,
		scale: 1, frames: 1,
		fbo: c.render(ww+42, hh, [

			c.translate(0, hh - 16),

			map(range(if(_prev_max_mana is int and _animation_progress is decimal, _prev_max_mana, max_mana)),
				[
					c.save(),

					c.translate(col_pos*bar_width + (col_pos/(max_mana-1.0)) * 3.0, 0),

					bar_outline,

					if(value >= current_mana,
					[
						c.set_source_rgba(0.91, 0.86, 0.79, 1.0),
						c.set_line_width(1),
						c.stroke(),
					],
					value >= current_mana - using_mana,
					[
						c.set_source_rgba(0.91, 0.86, 0.79, 1.0),
						c.fill(),
						c.stroke(),
					],
					[
						c.set_source_rgba(0.53, 0.76, 0.07),
						c.fill(),
						c.stroke(),
					]),
							
					c.restore(),
				] where row_pos = 0
				  where col_pos = value
			),

			c.translate(0, -5),
			c.set_font(_font),
			c.set_font_size(_font_size),
			c.set_source_rgba(1, 1, 1, 1),
			c.text_path('Mana'),
			c.fill(),

			c.translate(ww - c.text_extents(lib.font.regular_font, 26, str(current_mana)).width - 4, 0),
			c.set_font(lib.font.regular_font),
			c.set_font_size(26),
			c.text_path(str(current_mana)),
			c.fill(),
		])
		 where bar_outline = [
		 	c.rectangle(0, 0, bar_width - 4.0, 14),
		 ]
		 where bar_width = dump(decimal(ww)/max_mana_interp)
		 where max_mana_interp = dump(if(_animation_progress = null,
		                            max_mana,
									max_mana*_animation_progress +
									(1.0 - _animation_progress)*_prev_max_mana asserting _prev_max_mana is int))
		 where c = canvas()
	}),
	]",
},

on_create: "[
	if(_prev_max_mana is int, set(_animation_progress, 0.0)),

	fire_event('render'),
	set(x, x),
	set(y2, y2),
]",

on_render: "[
	render(_width, 90)
]",

on_process: "if(_animation_progress is decimal, [
	if(_animation_progress >= 1.0,
	   set(_animation_progress, null),
	   add(_animation_progress, 0.05)),

	fire_event('render'),
])",

on_type_updated: "fire_event('create')",


}
