{
	id: "smoke",

	is_strict: true,

	properties: {
		width: { type: "decimal", default: 128.0, set: "if(value != _data, [set(_data, value); render()])", },
		height: { type: "decimal", default: 128.0, set: "if(value != _data, [set(_data, value); render()])", },
		dissipation: { type: "decimal", default: 1.0 },

		render: "def() ->commands
			set(animation, dump({
				id: 'noise',
				x: 0,
				y: 0,
				w: min(512, int(w_ratio*512)),
				h: min(512, int(h_ratio*512)),
				image: 'perlin-noise.png',
				scale: max_dim/512.0,
			}))
			where w_ratio = dump(decimal(dump(width))/decimal(max_dim))
			where h_ratio = dump(decimal(dump(height))/decimal(max_dim))
			where max_dim = max(width, height)
		",
	},

	events: {
		create: "render()",
	},

	shader: {
		fragment: """
		uniform sampler2D u_anura_tex_map;
		uniform float u_property_cycle;
		uniform float u_property_dissipation;
        varying vec2 v_texcoord;
		
		void main()
		{
			vec2 coord = v_texcoord;

			float color = texture2D(u_anura_tex_map, coord + vec2(u_property_cycle*0.002, 0.0))[0];
			vec2 rot_coord = vec2(coord[1] + 0.21, coord[0] + 0.18);
			float rot_color = texture2D(u_anura_tex_map, rot_coord + vec2(u_property_cycle*0.002, 0.0))[0];

			float diff = abs(color - rot_color);

			float dist_center = sqrt((coord[0] - 0.5)*(coord[0] - 0.5) + (coord[1] - 0.5)*(coord[1] - 0.5));

			float a = 1.0 - dist_center*2;

			gl_FragColor = vec4(1.0, 1.0, 1.0, pow(diff, u_property_dissipation)*a);
		}
		""",
	}
}
