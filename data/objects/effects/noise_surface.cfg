{
	id: "noise_surface",
	is_strict: true,

	properties: {

		width: { type: "int" },
		height: { type: "int" },

		edge_fade: { type: "decimal", default: 0.1 },

		render: "def() ->commands
		set(animation, {
			id: 'noise',
			image: 'perlin-noise.png',
			x: 0, y: 0, w: (512*width)/dim, h: (512*height)/dim,
			frames: 1, scale: decimal(dim)/512.0,
			no_remove_alpha_borders: true,
		})
		where dim = max(width, height)
		",

		direction: { type: "decimal", default: 1.0 },

		color_dark: { type: "[decimal,decimal,decimal]", default: [1.0,1.0,0.0] },
		color_mid: { type: "[decimal,decimal,decimal]", default: [1.0,0.0,0.0] },
		color_mid_point: { type: "decimal", default: 0.8 },
		color_light: { type: "[decimal,decimal,decimal]", default: [1.0,0.0,0.4] },

		coefficient: -1.0,
		color_constant: 1.0,
	},

	events: {
		create: "render()",
	},

	shader: {
		name: "render",

		vertex: """
        uniform mat4 u_anura_mvp_matrix;
		uniform float u_anura_cycle;
        attribute vec4 a_anura_vertex;
        attribute vec2 a_anura_texcoord;
        varying vec2 v_texcoord;
        void main()
        {
            v_texcoord = a_anura_texcoord;
            gl_Position = u_anura_mvp_matrix * a_anura_vertex;
		}
		""",

		fragment: """
        uniform sampler2D u_anura_tex_map;
		uniform vec4 u_anura_sprite_area;
		uniform float u_anura_cycle;
		uniform float u_alpha;
		uniform float u_edge_fade;
		uniform float u_color_constant;
		uniform float u_coefficient;
		uniform float u_direction;
		uniform vec3 u_dark;
		uniform vec3 u_light;
		uniform vec3 u_mid;
		uniform float u_mid_point;
        varying vec2 v_texcoord;

		void main()
		{
			float sprite_area_width = u_anura_sprite_area[2] - u_anura_sprite_area[0];
			float sprite_area_height = u_anura_sprite_area[3] - u_anura_sprite_area[1];
			float dim = max(sprite_area_width,sprite_area_height);
			float dist_x = min(v_texcoord[0] - u_anura_sprite_area[0], u_anura_sprite_area[2] - v_texcoord[0])/dim;
			float dist_y = min(v_texcoord[1] - u_anura_sprite_area[1], u_anura_sprite_area[3] - v_texcoord[1])/dim;

			float dist = clamp(min(dist_x, dist_y), 0.0, u_edge_fade);


       		float gray_a = texture2D(u_anura_tex_map, v_texcoord + u_direction*vec2(u_anura_cycle/2000.0, 0.0))[0];
       		float gray_b = texture2D(u_anura_tex_map, v_texcoord + u_direction*vec2(0.0, u_anura_cycle/1000.0))[0];
			float diff = u_color_constant + u_coefficient*abs(gray_a - gray_b);

			float a = min(gray_a, gray_b)*dist/u_edge_fade;

			float xpos = (v_texcoord[0] - u_anura_sprite_area[0])/sprite_area_width;
			float ypos = (v_texcoord[1] - u_anura_sprite_area[1])/sprite_area_height;

			float wave = 0.5 + 0.08*sin(ypos*5.0+u_anura_cycle*0.03) * ypos;
			float wave_diff = abs(xpos - wave);

			float wave2 = 0.5 + 0.12*sin(ypos*11.7+u_anura_cycle*0.055) * ypos;
			float wave2_diff = abs(xpos - wave2);

			wave_diff = min(wave_diff, wave2_diff);

			a = clamp(a - wave_diff*1.5, 0.0, 1.0);

			vec3 col;
			if(diff < u_mid_point) {
				col = mix(u_dark, u_mid, diff/u_mid_point);
			} else {
				col = mix(u_mid, u_light, (diff - u_mid_point)/(1.0 - u_mid_point));
			}

			gl_FragColor = vec4(col[0], col[1], col[2], a*u_alpha);
		}
		""",

		create: """[
			set(uniform_commands.u_color_constant, parent.color_constant),
			set(uniform_commands.u_coefficient, parent.coefficient),
			set(uniform_commands.u_light, parent.color_light),
			set(uniform_commands.u_dark, parent.color_dark),
			set(uniform_commands.u_mid, parent.color_mid),
			set(uniform_commands.u_mid_point, parent.color_mid_point),

		]""",

		draw: """[
			set(uniform_commands.u_direction, parent.direction),
			set(uniform_commands.u_alpha, parent.alpha/255.0),
			set(uniform_commands.u_edge_fade, parent.edge_fade),
		]"""
	},
}
