{
id: "turn_counter",
is_strict: true,

properties: {
	ticks: { type: "int" },
	ticks_allowed: { type: "int" },

	ticker_active: { default: false },

	ratio: "decimal :: 1.0 - decimal(ticks)/decimal(ticks_allowed)",

	_color: "if(_controller.force_skip_responses, [0.65, 0.46, 0.01], [0.01, 0.65, 0.46])",

	_font_size: 12,

	seconds_left: "int :: (ticks_allowed - ticks)/50",

	text_area: "canvas().text_extents(lib.citadel.sans_font, _font_size, str(seconds_left))",

	_controller: { type: "obj citadel_controller" },

	render: "def(int ww, int hh) ->commands
	set(animation, {
		id: 'fbo',
		image: 'fbo',
		x: 0, y: 0, w: ww, h: hh,
		scale: 1, frames: 1,
		fbo: c.render(ww, hh, [

			c.save(),

			c.arc(0.5*ww, 0.5*hh, 0.4*hh, 0, 2*3.15),
			c.set_source_rgba(1, 0.2, 0.2, 1),
			c.fill(),

			c.arc(0.5*ww, 0.5*hh, 0.4*hh*ratio, 0, 2*3.15),
			c.set_source_rgba(0.2, 1.0, 0.2, ratio),
			c.fill(),

			c.restore(),
/*
			c.save(),
			c.translate(ww/2 - text_area.width/2, hh/2 + text_area.height/2),
			c.set_font(lib.citadel.sans_font),
			c.set_font_size(_font_size),
			c.text_path(str(seconds_left)),
			c.set_source_rgba(1, 1, 1, 1),
			c.fill(),
			c.restore(),
*/
		]) where c = canvas()
	})",
},

on_type_updated: "fire_event('create')",

on_create: "render(80, 60)",

on_process: "if(ticker_active and ticks < ticks_allowed, [
	add(ticks, 1),
	render(80, 60)
])",

on_click: "[
	swallow_mouse_event(),
	set(_controller.force_skip_responses, not _controller.force_skip_responses),
	if(not _controller.force_skip_responses and _controller.state.nplayer = _controller.state.current_player_index, _controller.end_turn()),
	fire_event('create')
]",


}
