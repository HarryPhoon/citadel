{
	is_strict: true,

	id: "campaign_avatar",

	properties: {
		portrait: { type: "string" },
		render: "def() ->commands [
		set(animation, {
			id: 'anim',
			image: 'portraits/' + portrait,
			x: 0,
			y: 0,
			w: 799,
			h: 995,
			scale: 1,
			frames: 1,
		}),
		set(scale, 1.0),
		set(mid_x, mid_x),
		set(mid_y, mid_y),
		]",
	},

	on_create: "[
		render(),
	]",

	on_type_updated: "fire_event('create')",

	shader: {
	name: "campaign_avatar_render",

	vertex: "
	uniform mat4 u_anura_mvp_matrix;
	uniform vec4 u_anura_sprite_area;
	attribute vec4 a_anura_vertex;
	attribute vec2 a_anura_texcoord;
	varying vec2 v_texcoord;
	void main()
	{
		gl_Position = u_anura_mvp_matrix * a_anura_vertex;
		v_texcoord = a_anura_texcoord;
	}
	",

	fragment: "
	uniform sampler2D u_anura_tex_map;
	uniform vec4 u_anura_sprite_area;
	uniform float u_cycle;
	uniform float u_alpha;
	varying vec2 v_texcoord;
	void main()
	{
		vec2 sprite_center = vec2((u_anura_sprite_area[0] + u_anura_sprite_area[2])/2.0, (u_anura_sprite_area[1] + u_anura_sprite_area[3])/2.0);

		float sprite_width = u_anura_sprite_area[2] - u_anura_sprite_area[0];
		float sprite_height = u_anura_sprite_area[3] - u_anura_sprite_area[1];

		vec2 delta = vec2((v_texcoord[0] - sprite_center[0]) / sprite_width,
		                  (v_texcoord[1] - sprite_center[1]) / sprite_height);
		float angle = atan(delta[1], delta[0]);

		float dist_from_center = sqrt(delta[0]*delta[0] + delta[1]*delta[1]);

		gl_FragColor = texture2D(u_anura_tex_map, v_texcoord);

		float threshold = 0.2 + sin(u_cycle/100.0 + angle*10.0)*0.02;

		if(dist_from_center > threshold) {
			gl_FragColor[3] = max(0.0, 1.0 - (dist_from_center - threshold)*4.0);
		}

		gl_FragColor[3] *= u_alpha;
	}
	",

	draw: "[
		set(uniform_commands.u_cycle, parent.cycle),
		set(uniform_commands.u_alpha, parent.alpha/255.0),
	]",

	},
}
