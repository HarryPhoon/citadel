{
	id: "deck_preview_widget",
	is_strict: true,

	properties: {
		title_controller: { type: "obj title_controller" },
		current_controller: { type: "custom_obj" },

		edit_deck_label: { type: "string|null" },

		edit_deck_handler: { type: "function() ->commands" },

		visit_library: "def() ->commands
		title_controller.transition_screen(
			; title_controller.enter_library(current_controller, deck.name)
		)",

		_text: "string ::
				q(<font size='24'>) + deck.name + q(</font>\n) +
				q(<font size='12'>) +
				fold(map(range(1,6), if(quantity > 0, q(<img src='images/icons/school-) + (string<- SCHOOL_NAMES[value]) + q(.svg'></img> ) + str(quantity) + q( ), '') where quantity = count(cards, context.value in value.school_list)), a+b, '') +
				q(\n) +
				fold(map(['creature','spell','land'], if(quantity_type > 0, q(<img src='images/icons/type-) + (string<-value) + q(.svg'></img> ) + str(quantity_type) + q( ), '') 
				where quantity_type = if(value='creature', count(cards, value.type = 'creature' and value.is_land=false),
						value='spell', count(cards, value.type = 'spell'),
						value='land', count(cards, value.type = 'creature' and value.is_land=true),
						0)
				), a+b, '') +
				q(</font>) +
				q(<font size='14'>\n) +
				if(deck.notes, deck.notes, '') +
				q(</font>)
			where cards = map(deck.cards, lib.citadel.create_card(value))
		",

		_edit_button: { type: "obj button_controller|null" },

		deck: { type: "Deck" },
		spawn_objects: "def() ->commands execute(me, [

			if(edit_deck_label,
			spawn('button_controller', 0, 0, {
				x: x + lib.citadel.py(148),
				y: y + lib.citadel.py(6),
				text: edit_deck_label,
				_font_size: lib.citadel.py(10),
				button_width: lib.citadel.py(50),
				button_height: lib.citadel.py(16),
				on_click: me.edit_deck_handler,
				zorder: zorder+200,
			}, [
				set(me._edit_button, child),
				remove_object(child)
			])),

			spawn('label', {
				_text: ['VS'],
				_font_size: lib.citadel.py(28),
				_valign: 'top',
				mid_x: mid_x,
				y: y2 + lib.citadel.py(-6),
				zorder: zorder+10,
			})

		]) 
		   where ww = lib.citadel.py(206)
		",

		render: "def() ->commands
		set(animation, lib.citadel.render_frame(c, ww, hh, [
			c.save(),
			c.scale(decimal(ww)/decimal(image_dim[0])),
			c.paint_image(image_path),
			c.restore(),

			c.rectangle(0, hh - text_height - lib.citadel.py(12), ww, text_height + lib.citadel.py(12)),
			c.set_source_rgba(0.8, 0.8, 0.8, 0.1),
			c.fill(),

			c.save(),
			c.translate(lib.citadel.py(8), hh - text_height - lib.citadel.py(8)),
			map(text_fragments, [
				c.save(),
				c.set_source_color([1,1,1,1]),
				value.path,
				c.fill(),
				c.restore(),
			]),

			c.restore(),

			c.rectangle(0, 0, ww, hh),
			c.set_line_width(lib.citadel.py(1000)/1000.0),
			c.set_source_rgba(0.6,0.6,0.6,1),
			c.stroke(),


		]))
			where text_height = decimal<- max(map(text_fragments, value.y + value.height))
			where text_fragments = c.markup_text(_text, { width: ww - lib.citadel.py(16), scale: lib.citadel.py(1000)/1000.0 })
			where image_dim = c.image_dim(image_path)
			where image_path = 'images/portraits/card-size/' + (string<- lib.citadel.create_card(_avatar).portrait)
			where hh = round_to_even((ww*996)/800)
			where ww = round_to_even(lib.citadel.py(206))
			where c = canvas()
		",

		_avatar: "string :: deck.avatar or if(deck.cards, deck.cards[0], 'Acolyte')",
	},

	on_create: "render(); spawn_objects()",

	on_being_removed: "map(spawned_children, remove_object(value))",
	on_type_updated: "[fire_event('being_removed'), fire_event('create')]",

	on_mouse_enter: "
	if(_edit_button, add_object(_edit_button))
	",

	on_mouse_leave: "
	if(_edit_button, remove_object(_edit_button))
	",
}
