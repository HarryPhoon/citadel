{
	id: "deck_preview_widget",
	is_strict: true,
	hidden_in_game: true,

	properties: {
		title_controller: { type: "obj title_controller" },
		current_controller: { type: "custom_obj" },

		edit_deck_label: { type: "string|null" },

		edit_deck_handler: { type: "function() ->commands" },

		visit_library: "def() ->commands
		title_controller.transition_screen(
			; title_controller.enter_library(current_controller, deck.name)
		)",

		deck: { type: "Deck" },
		spawn_objects: "def() ->commands execute(me, [
			spawn('text_area', 0, 0, {
				x: x + lib.citadel.py(158),
				y: y,
				bg_color: [0.1,0.1,0.1,1],
				text_width: lib.citadel.py(280),
				_text: q(<font size='24'>) + deck.name + q(</font>\n) +
				q(<font size='18'>) +
				fold(map(range(1,6), if(quantity > 0, q(<img src='images/icons/school-) + (string<- SCHOOL_NAMES[value]) + q(.svg'></img> ) + str(quantity) + q( ), '') where quantity = count(cards, context.value in value.school_list)), a+b, '') +
				q(</font>) +
				q(<font size='14'>\n) +
				if(deck.notes, deck.notes, '') +
				q(</font>),
				zorder: zorder,
			}),

			if(edit_deck_label,
			spawn('button_controller', 0, 0, {
				x: x + lib.citadel.py(384),
				y: y + lib.citadel.py(6),
				text: edit_deck_label,
				_font_size: lib.citadel.py(12),
				button_width: lib.citadel.py(56),
				button_height: lib.citadel.py(18),
				on_click: me.edit_deck_handler,
				zorder: zorder,
			})),

			spawn('image_widget', 0, 0, {
				x: x + lib.citadel.py(8),
				y: y + lib.citadel.py(8),
				image: 'portraits/card-size/' + (string<- lib.citadel.create_card(_avatar).portrait),
				image_area: [0, 0, 399, 497],
				draw_width: ww,
				draw_height: (ww*996)/800,
				zorder: zorder,
			}) where ww = lib.citadel.py(140),
		]) where cards = map(deck.cards, lib.citadel.create_card(value))",

		_avatar: "string :: deck.avatar or if(deck.cards, deck.cards[0], 'Acolyte')",
	},

	on_create: "spawn_objects()",

	on_being_removed: "map(spawned_children, remove_object(value))",
	on_type_updated: "[fire_event('being_removed'), fire_event('create')]",
}
