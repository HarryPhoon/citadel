{
id: "label",
is_strict: true,

properties: {

	_text: { type: "[string]" },

	_halign: { type: "string", default: "center" },
	_valign: { type: "string", default: "center" },

	get_text: "def() ->[string] _text",

	_font: { default: "Ubuntu-M.ttf" },
	_font_size: { default: 32 },

	_render_key: "[_font, _font_size, _text]",

	_outline_width: { default: 1.2 },

	text_area: "{
		width: decimal<- max(map(areas, value.width)),
		line_height: line_height,
		height: size(_text)*line_height,
	}
	where line_height = decimal<- max(map(areas, value.height))
	where areas = map(_text, canvas().text_extents(_font, _font_size, value))",
},

on_create: "[
 set(animation, {
	id: 'fbo',
	image: 'fbo',
	x: 0, y: 0, w: canvas_width, h: canvas_height,
	scale: 1, frames: 1,
	fbo: query_cache(global_cache(8), _render_key, c.render(canvas_width, canvas_height,
	
	fold(map(_text, [
		c.translate(0, text_area.line_height),
		c.set_font(_font),
		c.set_font_size(_font_size),
		c.text_path(value),

		c.set_source_rgba(1, 1, 1, 1),
		c.fill(),

		if(_outline_width > 0, [
			c.text_path(value),
			c.set_source_rgba(0, 0, 0, 1),
			c.set_line_width(_outline_width),
			c.stroke(),
		]),
	]), a+b)))
}
	  where canvas_width = int(area.width + 24)
	  where canvas_height = int(area.height + 12)
	  where area = text_area
	  where c = canvas()
	
	),
	switch(_halign,
	  'center', set(mid_x, mid_x),
	  'left', set(x, x),
	  set(x2, x2)
	),


	switch(_valign,
	  'center', set(mid_y, mid_y),
	  'top', set(y, y),
	  set(y2, y2)
	),
]
",

}
