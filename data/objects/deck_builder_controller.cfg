{
	id: "deck_builder_controller",
	next_animation: "'normal'",
	is_human: true,
	is_strict: true,
	always_active: true,
	hidden_in_game: true,

	vars: {
		state: null,
		
		font: 'RobotoCondensed-Regular',
		color: 'antique_white',
	},

	tmp: {
		// card_list is a map of card_name:card_widget_objects
		card_list: null,
		// filtered cards is purely a list of card_widget_objects
		filtered_cards: null,
		// map of <widget>:<count>
		deck: {},
		
		show_blood_cards: true,
		show_faith_cards: true,
		show_food_cards: true,
		show_gold_cards: true,
		show_scrolls_cards: true,
		show_colorless_cards: true,
		
		show_spell_cards: true,
		show_creature_cards: true,
		show_building_cards: true,
		
		filter_text: '',
	},

	properties: {
		level_width: "level.dimensions[2]",
		level_height: "level.dimensions[3]",
		set_info_text: "def(txt) set(me.widgets.info_text.text, txt)",
		draw_cards: "set(get_widget(me, 'card_grid').children, tmp.filtered_cards)",
		
		// Figure out how many copies of the card with name we can put in the deck
		max_copies: "def(card_name) 4",
		
		build_card_widget: "def(ident, cnt) widget(me, {
			type: 'object',
			object: 'card', 
			id: ident,
			handle_process: true,
			commands: q([set(me.card_type, construct('card', get_document('data/cards.cfg')[id])),set(me.zorder, 50)]),
			on_click: '[if(mouse_button = 1,
				if(id in tmp.deck, if(tmp.deck[id] < max_copies(id), add(tmp.deck[id], 1)), set(tmp.deck[id], 1)), 
				if(id in tmp.deck, if(tmp.deck[id] < 2, set(tmp.deck, remove_from_map(tmp.deck, id)), add(tmp.deck[id], -1)))), 
				fire_event(q(redraw_deck))]',
		} + if(cnt > 0, {overlay: {type:'label', size:108, text:str(cnt), font:vars.font, color:'black'}}, {}))",
		
		filter_cards_blood: "def(cards) filter(cards, value.object.card_type.school != 2 or tmp.show_blood_cards)",
		filter_cards_faith: "def(cards) filter(cards, value.object.card_type.school != 5 or tmp.show_faith_cards)",
		filter_cards_food: "def(cards) filter(cards, value.object.card_type.school != 3 or tmp.show_food_cards)",
		filter_cards_gold: "def(cards) filter(cards, value.object.card_type.school != 1 or tmp.show_gold_cards)",
		filter_cards_scrolls: "def(cards) filter(cards, value.object.card_type.school != 4 or tmp.show_scrolls_cards)",
		filter_cards_colorless: "def(cards) filter(cards, value.object.card_type.school != 0 or tmp.show_colorless_cards)",
		
		filter_cards_spells: "def(cards) filter(cards, value.object.card_type.creature or tmp.show_spell_cards)",
		filter_cards_creatures: "def(cards) filter(cards, value.object.card_type.creature = null or value.object.vars.creature.vars.creature_object.is_building or tmp.show_creature_cards)",
		filter_cards_buildings: "def(cards) filter(cards, value.object.card_type.creature = null or not value.object.vars.creature.vars.creature_object.is_building or tmp.show_building_cards)",
		
		// Allow regular expressions
		//filter_by_text: "def(cards) filter(cards, if(tmp.filter_text, regex_match(value.object.card_type.name, tmp.filter_text), true))",
		// Allow simple text filtering -- this is way easier and more intuitive than using a regex
		filter_by_text: "def(cards) filter(cards, if(tmp.filter_text, strstr(lower(value.object.card_type.name), lower(tmp.filter_text)), true))",
		
		filter_cards: "def(cards) filter_cards_blood(
			filter_cards_faith(
				filter_cards_food(
					filter_cards_gold(
						filter_cards_scrolls(
							filter_cards_colorless(
								filter_cards_spells(
									filter_cards_creatures(
										filter_cards_buildings(
											filter_by_text(
												map(cards, value)))))))))))",

		make_card_frame: "def(cards) widget(me, {
			type: 'dialog',
			id: 'cards_dlg',
			rect: [0, 0, 2*level_width/3, 2*level_height/3],
			background_alpha: 255,
			background_frame: 'empty_window',
			cursor: [10, 10],
			children: [{
				type: 'grid',
				columns: 1,
				children: [{
					type: 'label',
					id: 'info_text',
					text: 'Number of cards selected ' + str(size(cards)),
					color: 'green',
					font: vars.font,
					size: 12,
				}]
			}, {
				type: 'grid',
				id: 'card_grid',
				columns: 4,
				column_width: if(cards and size(cards), cards[0].width, 146),
				max_height: 2*level_height/3,
				children: cards,
			}],
		})",
		
		make_selector_frame: "widget(me, {
			type: 'dialog',
			id: 'selection_dlg',
			rect: [2*level_width/3, 0, level_width/3, 2*level_height/3],
			background_alpha: 255,
			background_frame: 'empty_window',
			cursor: [10, 10],
			children: [{
				type: 'grid',
				columns: 3,
				children: [{
					type: 'button',
					label: {
						type: 'image',
						image: 'dialog-icons.png',
						area: [11,0,20,10],
					},
					on_click: q(debug('clicked new')),
				}, {
					type: 'button',
					label: {
						type: 'image',
						image: 'dialog-icons.png',
						area: [21,0,34,10],
					},
					on_click: q(debug('clicked open')),
				}, {
					type: 'button',
					label: {
						type: 'image',
						image: 'dialog-icons.png',
						area: [0,0,10,10],
					},
					on_click: 'set(me.widgets.child, create_file_open_dialog)',
				}]
			}, {
				type: 'grid',
				columns: 2,
				children: [{
					type: 'label',
					font: vars.font,
					color: vars.color,
					size: 16,
					text: 'Search',
				}, {
					type: 'text_editor', 
					id: 'filter_box',
					font_size: 16, 
					//font: vars.font,
					color: vars.color,
					width: 150, 
					height: 30,
					text: tmp.filter_text,
					on_change: 'if(me.tmp.filter_text != text, [set(me.tmp.filter_text, text), fire_event(q(do_redraw))])',
				}],
			}, {
				type: 'grid',
				columns: 1,
				children: [{
					type: 'grid',
					columns: 1,
					children: [{
						type: 'checkbox',
						text: {type:'image', image:'magic-icons.png', area:[20,3,35,18]},
						checked: tmp.show_blood_cards,
						wh: [100, 35],
						on_click: '[set(me.tmp.show_blood_cards, checked), fire_event(q(do_redraw))]',
					}, {
						type: 'checkbox',
						text: {type:'image', image:'magic-icons.png', area:[72,3,88,18]},
						checked: me.tmp.show_faith_cards,					
						wh: [100, 35],
						on_click: '[set(me.tmp.show_faith_cards, checked), fire_event(q(do_redraw))]',
					}, {
						type: 'checkbox',
						text: {type:'image', image:'magic-icons.png', area:[37,3,52,18]},
						checked: tmp.show_food_cards,
						wh: [100, 35],
						on_click: '[set(me.tmp.show_food_cards, checked), fire_event(q(do_redraw))]',
					}, {
						type: 'checkbox',
						text: {type:'image', image:'magic-icons.png', area:[3,3,18,18]},
						checked: tmp.show_gold_cards,
						wh: [100, 35],
						on_click: '[set(me.tmp.show_gold_cards, checked), fire_event(q(do_redraw))]',
					}, {
						type: 'checkbox',
						text: {type:'image', image:'magic-icons.png', area:[54,3,69,18]},
						checked: tmp.show_scrolls_cards,
						wh: [100, 35],
						on_click: '[set(me.tmp.show_scrolls_cards, checked), fire_event(q(do_redraw))]',
					}, {
						type: 'checkbox',
						text: {type: 'label', text:'Mana', font: vars.font, color: vars.color, size: 14},
						//text: {type:'image', image:'magic-icons.png', area:[20,3,35,18]},
						checked: tmp.show_colorless_cards,
						wh: [100, 35],
						on_click: '[set(me.tmp.show_colorless_cards, checked), fire_event(q(do_redraw))]',
					}],
				}, {
					type: 'grid',
					columns: 1,
					children: [{
						type: 'checkbox',
						text: {type: 'label', text:'Show Spells', font: vars.font, color: vars.color, size: 14},
						checked: tmp.show_spell_cards,
						wh: [150, 30],
						on_click: '[set(me.tmp.show_spell_cards, checked), fire_event(q(do_redraw))]',
					}, {
						type: 'checkbox',
						text: {type: 'label', text:'Show Buildings', font: vars.font, color: vars.color, size: 14},
						checked: tmp.show_building_cards,
						wh: [150, 30],
						on_click: '[set(me.tmp.show_building_cards, checked), fire_event(q(do_redraw))]',
					}, {
						type: 'checkbox',
						text: {type: 'label', text:'Show Creatures', font: vars.font, color: vars.color, size: 14},
						checked: tmp.show_creature_cards,
						wh: [150, 30],
						on_click: '[set(me.tmp.show_creature_cards, checked), fire_event(q(do_redraw))]',
					}]
				}],
			}],
		})",
		
		make_deck_frame: "def(deck) widget(me, {
			type: 'dialog',
			id: 'deck_dlg',
			rect: [0, 2*level_height/3, level_width, level_height/3],
			background_alpha: 255,
			background_frame: 'empty_window',
			cursor: [10, 10],
			children: [{
				type:'label',
				id: 'info_text',
				text: 'Cards in deck ' + if(size(deck), str(fold(map(deck, value), a+b)), 0),
				color: 'green',
				font: vars.font,
				size: 12,				
			}, {
				type: 'grid',
				columns: 6,
				column_width: if(deck and size(deck), tmp.card_list[keys(tmp.card_list)[0]].width, 146),
				max_height: level_height/3 - 20,
				children: map(deck, build_card_widget(key, value)),
			}],
		})",
		
		make_card_doc: "flatten(map(tmp.deck, [key.id]*value))",
		
		create_file_open_dialog: "widget(me, {
			type:'file_chooser', 
			zorder:1000, 
			id: 'file_open',
			rect: [level_width*0.2, level_height*0.2, level_width*0.6, level_height*0.6],
			background_frame:'empty_window', 
			filters:[['Deck Files', '*.cfg']], 
			use_relative_paths:true, 
			on_close:'[if(not cancelled, write_document(me.widgets.file_open.relative_file_name, make_card_doc)),set(me.widgets.file_open, null)]'
		})",
		
		draw_interface: "def(cards,deck) set(me.widgets, [make_card_frame(cards), make_selector_frame, make_deck_frame(deck)])",
	},
	
	on_create: "[
		debug('on_create'),
		console_output_to_screen(false), 
		set(tmp.card_list, card_objs),
		set(tmp.filtered_cards, filtered),
		draw_interface(filtered, tmp.deck),
	] where filtered = filter_cards(card_objs) where card_objs = fold(map(get_document('data/cards.cfg'), {(key):build_card_widget(key, 0)}), a+b)",
	
	on_window_resize: "[
		debug('resize'),
		set(level.dimensions, [0,0,new_width,new_height]),
		draw_interface(tmp.filtered_cards, tmp.deck),
	] where new_width = max(width,800)-1
	  where new_height = max(height,480)-1
	",
	
	on_do_redraw: "[
		set(me.widgets.cards_dlg, make_card_frame(filtered)),
		set(tmp.filtered_cards, filtered)
	] where filtered = filter_cards(tmp.card_list)",
	
	on_redraw_deck: "[
		set(me.widgets.deck_dlg, make_deck_frame(tmp.deck)), 
	]",

	on_end_anim: "animation('normal')",
	zorder: 50,
	
	animation: {
		id: "normal",
		image: "effects/particles.png",
		x: 86,
		y: 73,
		w: 28,
		h: 28,
		collide: [0,0,28,28],
		frames: 1,
		duration: 1000,
	},
	
	editor_info: {
		category: "controllers",
		var: [
			{
				name: "x_bound",
				type: "x",
				value: "x-100",
			},
			{
				name: "x2_bound",
				type: "x",
				value: "x+150",
			},
			{
				name: "y_bound",
				type: "y",
				value: "y-100",
			},
			{
				name: "y2_bound",
				type: "y",
				value: "y+150",
			},
		],
	},
}