{
	id: "title_controller",
	prototype: ["matchmaking_base"],
	is_human: true,
	hitpoints: 20,
	editor_info: { category: "player" },
    hidden_in_game: true,

	is_strict: true,

	types: {

	},

	consts: {
		BUTTON_WIDTH: 220,
		BUTTON_HEIGHT: 35,
	},
	
    properties: {

		tt: "def() ->int level_width
		  where aa = 1d6
		  where aq = 1d6
		  where aw = 1d6
		  where ae = 1d6
		  where ar = 1d6
		  where at = 1d6
		  where ay = 1d6
		  where au = 1d6
		  where aj = 1d6
		  where an = 1d6
		  where a1 = 1d6
		  where a2 = 1d6
		  where a3 = 1d6
		  ",

		_background_image: { type: "null|obj dynamic_title_image" },

		_selected_deck: "string <- (lib.citadel.preferences.selected_deck or keys(account_info.decks)[0])",

        _internal_client: { type: "object|null", default: null },
		_concede_client: { type: "object|null" },
		_session_id: { type: "int", default: -1 },

		level_width: "int<- level.dimensions[2]",
		level_height: "int<- level.dimensions[3]",

		_decks: "DeckMap :: account_info.decks",


		game_port: { type: "int|null" },
		game_session: { type: "int|null" },
		game_id: { type: "int|null" },
		num_users: { type: "int|null" },
		num_queued: { type: "int|null" },
		num_games: { type: "int|null" },

		//show a toast about a multiplayer game being available unless
		//we are already in the multiplayer lobby.
		should_notify_multiplayer_queue: "def() ->bool
			if(_screen_controller is obj title_multiplayer_controller, false, true)
		",

		users_online: { type: "[OnlineUser]", default: [] },
		game_servers: { type: "[GameServer]", default: [] },

		_default_section: { type: "int", default: 0 },

		_select_first_item: "def() ->commands
			_menu_item_clicked(_menu_items[_default_section])
		",


		_menu_item_clicked: "def(obj combo_label item) ->commands
		[
		if(nitem != -1, [
			map(_menu_items, set(value.selected, false)),
			set(find_or_die(_menu_items, value.index = nitem).selected, true),
		]),

		if(_screen_controller != null, [
			remove_object(_screen_controller),
			set(_screen_controller, null),
		]),

		_menu_item_selected(nitem),
		set(_selected_menu_item, item),
		] where nitem = item.index",

		_current_menu_item: { type: "int", default: 0 },

		_menu_item_selected: "def(int nitem) ->commands
		[
		set(_current_menu_item, nitem),
		switch(nitem,
			0, spawn('title_lobby_controller', 0, 0, {
				_mm_client_state: _mm_client_state,
				_background_image: _background_image,
			}, [
				set(me._screen_controller, child)
			]),
			1, set_campaign_controller(),

			2, spawn('title_multiplayer_controller', 0, 0, {
				_mm_client_state: _mm_client_state,
			}, [
				set(me._screen_controller, child)
			]),
			3, spawn('library_controller', 0, 0, {
				_mm_client_state: _mm_client_state,
				deck_rules: construct('deck_rules'),
			}, [
				set(me._screen_controller, child)
			])
		)
		]",

		enter_settings: "def() ->commands
		[
		if(_screen_controller != null, [
			remove_object(_screen_controller),
			set(_screen_controller, null),
		]),

		spawn('title_lobby_controller', 0, 0, {
			_mm_client_state: _mm_client_state,
			_display_settings: true,
			_background_image: _background_image,
		}, [
			set(me._screen_controller, child)
		]),
		]
		",

		close_settings: "def() ->commands
		[
		if(_screen_controller != null, [
			remove_object(_screen_controller),
			set(_screen_controller, null),
		]),

		_menu_item_selected(_current_menu_item)
		]
		",

		set_campaign_controller: "def(bool force_clear=false) ->commands [
			set(_campaign_controller, ctrl),
			add_object(ctrl),
			if(ctrl != _screen_controller, [
				set(_screen_controller, ctrl),
			]),

			set(_screen_controller, ctrl),
		] where ctrl = if(_campaign_controller and force_clear = false,
		                  _campaign_controller,
						  object('campaign_controller', 0, 0, {
								 _mm_client_state: _mm_client_state,
						  }))",

		_campaign_controller: { type: "null|obj campaign_controller" },

		_screen_controller: { type: "custom_obj|null" },

		_menu_items: { type: "[obj combo_label]", default: [] },

		_logout_label: { type: "custom_obj|null" },

		_previous_unlocks: { type: "null|[string]" },

		_is_newly_unlocked: "def(string item) ->bool _previous_unlocks != null and (item not in _previous_unlocks) and (item in _mm_client_state.account_info.unlocks)",

		_selected_menu_item: { type: "obj combo_label|null" },

		_selected_menu_item_index: "int ::
		    if(_selected_menu_item, _selected_menu_item.index, -1)",

		sections: "[string] :: ['LOBBY', 'CAMPAIGN', 'MULTIPLAYER', 'LIBRARY']",

		_unlock_text: {
			default: {
				LOBBY: "You have unlocked the lobby! Here you can view your stats and customize your character.",
				LIBRARY: "You have unlocked the Citadel Library! Here you may browse through your spells and create your own decks.",
				MULTIPLAYER: "You have unlocked multiplayer! Here you can play with other players online.",
			}
		},

		show_update_status: "def() ->commands [
			set(me.widgets, [
				{ x: 4, y: level_height - lib.citadel.px(110), type: 'label', id: 'module_update_status', size: lib.citadel.px(12), text: if(auto_update_status().attempt_module, if(auto_update_status().complete_module, 'Citadel up-to-date', if(err is string, 'Error updating Citadel: ' + err, 'Citadel update timed out') where err = auto_update_status().module_error), 'Not auto-updating Citadel'), color: 'white' },
				{ x: 4, y: level_height - lib.citadel.px(96), type: 'label', id: 'anura_update_status', size: lib.citadel.px(12), text: if(auto_update_status().attempt_anura, if(auto_update_status().complete_anura, 'Anura up-to-date', if(err is string, 'Error updating Anura: ' + err, 'Anura update timed out') where err = auto_update_status().anura_error), 'Not auto-updating Anura'), color: 'white' },
			]),
		]",

		_handle_logout: "def(obj combo_label label) ->commands [
			lib.citadel.write_cookie(null),
			teleport('titlescreen.cfg', '', 'instant', object_playable('login_controller', 0, 0, 0)),
		]",

		spawn_menu: "def() ->commands [
			show_update_status(),

			set(draw_primitives, [{
				type: 'rect',
				area: [0, level_height-lib.citadel.px(80), level_width, level_height-lib.citadel.px(79)],
				color: [255,255,255],
			}]),

			if(_logout_label, [
				remove_object(_logout_label),
				set(_logout_label, null),
			]),

			spawn('combo_label', level_width - lib.citadel.px(42), lib.citadel.py(36), {
				_text: 'LOGOUT',
				_font_size: lib.citadel.px(14),
				_halign: 'right',
				grouping: 'logout',
				selected: false,
				index: 0,
				click_handler: me._handle_logout,
				zorder: 20000,
			}, [
				set(_logout_label, child),
			]),

			map(_menu_items, remove_object(value)),
			set(_menu_items, items),

			set(_previous_unlocks, _mm_client_state.account_info.unlocks),

			map(items, [
				set(value.x, (level_width - menu_width)/2 + index*border_size + sum(map(items[:index], value.text_area.width))),
				set(value.y, level_height - value.h - lib.citadel.px(58)),
				add_object(value),

				if(_is_newly_unlocked(item_names[index]), [
					schedule(50, spawn('tip_dialog', level_width - lib.citadel.px(300), level_height/2, {
						zorder: 10000,
						_tip: {
							key: 'unlock' + item_names[index],
							text: string<- _unlock_text[item_names[index]],
							max_shows: 1,
							targets: [value],
						},
						_width: lib.citadel.px(260),
						_height: lib.citadel.px(200),
					}, [
						set(child.x, level_width - lib.citadel.px(200)),
						set(child.mid_y, level_height/2),
					])),

					set(value.alpha, 0),
					animate(value, {
						alpha: 255,
					}, {
						duration: 50,
					})
				]),
			]),

			set(_selected_menu_item, if(_selected_menu_item, find_or_die(items, value.index = _selected_menu_item.index), items[0])),
		]
		  where menu_width = sum(map(items, value.text_area.width)) + (size(items)-1)*border_size
		  where border_size = lib.citadel.px(12)
		  where items =
			map(item_names,
				object('combo_label', 200, lib.citadel.px(200) + index*lib.citadel.px(200), {
					_text: value,
					_font_size: lib.citadel.px(36),
					grouping: 'menu',
					selected: index = _selected_menu_item_index,
					index: index(sections, value),
					click_handler: me._menu_item_clicked,
				})
			)
		   //change this to make unlocks take effect.
		   where item_names = filter(sections, value in _mm_client_state.account_info.unlocks)
		",

		spawn_deck_summaries: "def() ->commands [
			[remove_object(c) | c <- level.chars, c is obj library_deck_summary],

			map(_decks, spawn('library_deck_summary', 0, 0, {selected: index = if(selected_index >= 0, selected_index, 0), zorder: 500, deck_name: key, x2: level_width, y: lib.citadel.py(28 + 72 + 72*index)}))
			    where selected_index = index(keys(_decks), find(keys(_decks), value = lib.citadel.preferences.selected_deck)),
		]",

		grant_cards: "def() ->commands [
			execute(me, tbs_send(object<- mm_client, { type: 'admin_operation', msg: { user: username, type: 'grant', sets: ['*'] } }))
		]",

		update_server: "def() ->commands [
			execute(me, tbs_send(object<- mm_client, { type: 'admin_operation', script: 'update' }))
		]",

		restart_server: "def() ->commands [
			execute(me, tbs_send(object<- mm_client, { type: 'admin_operation', script: 'restart', replace_process: true }))
		]",

		query_server_admin_progress: "def() ->commands [
			execute(me, tbs_send(object<- mm_client, { type: 'admin_operation', get_command_output: true }))
		]",

		delete_account: "def() ->commands [
			execute(me, tbs_send(object<- mm_client, { type: 'delete_account' }))
		]",

		send_global_chat: "def(string msg) ->commands [
			execute(me, tbs_send(object<- mm_client, { type: 'global_chat', message: msg }))
		]",

		send_cancel_matchmaking_request: "def() ->commands [
			tbs_send(object<- mm_client, { type: 'cancel_matchmake', user: _mm_client_state.username, }),
		]",

		send_matchmaking_request: "def(map game_type) ->commands [
			tbs_send(object<- mm_client, { type: 'matchmake', game_info: game_type, user: _mm_client_state.username, }),

		]",

		set_avatar: "def(string avatar) ->commands [
			tbs_send(object<- mm_client, { type: 'set_avatar', avatar: avatar, user: _mm_client_state.username }),
		]",

		set_campaign_location: "def(string campaign_location) ->commands [
			tbs_send(object<- mm_client, { type: 'set_campaign_location', campaign_location: campaign_location, user: _mm_client_state.username }),
		]",

		concede_game: "def(string host, int port, int session_id) ->commands
		execute(me, [
			tbs_send(client, { type: 'concede' }),
			set(_concede_client, client),
			debug(['send concede',host,port,session_id]),
		] where client = tbs_client(host, port, session_id))",

		join_game: "def(string host, int port, int|null session_id_override=null) ->commands execute(me, [
    		teleport('level1.cfg', '', 'fade',
  				object_playable('citadel_controller', 336, 372, 0, {
				game_server_address: host,
				game_server_port: port,
				session_id: if(session_id_override != null, session_id_override, _mm_client_state.session_id),
				selected_deck: me._selected_deck,
				game_created: true,
				_mm_client_state: _mm_client_state,
				return_callback: (def(bool outcome) ->commands teleport('lobby.cfg', '', 'fade', me))
			}))
		])",

		observe_game: "def(GameServer server) -> commands [
			teleport('level1.cfg', '', 'fade',
  				object_playable('citadel_controller', 336, 372, 0, {
				game_server_address: TBS_SERVER_ADDRESS,
				game_server_port: server.port,
				session_id: _mm_client_state.session_id,
				game_created: true,
				observer: true,
				_mm_client_state: _mm_client_state,
				return_callback: (def(bool outcome) ->commands teleport('lobby.cfg', '', 'fade', me))
			}))
		]",
    },
      
    on_create: "[
		set_user_info('user', _mm_client_state.username),
		if(_background_image != null,
		music(
		  switch(_background_image.portrait,
		  'rihns-anointed.png', 'aether.ogg',
		  'acolyte.png', 'sapienza.ogg',
		  'endless-studies.png', 'sapienza.ogg',
		  'entropia.ogg'))),
		set(x, 0),
		set(y, 0),

		fire_event('window_resize', {width: level.camera_position[2], height: level.camera_position[3]}),

		if(MODULE_OPTIONS.campaign = null,
		   bind_command(me._select_first_item),
		   bind_command(me.set_campaign_controller)
		),


	] where user_decks = account_info.decks",

	on_spawn_objects: "[
//		spawn_deck_summaries(),
		spawn_menu(),
	]",
	
	on_window_resize: "[
		lib.citadel.set_screen_dim(width, height),

		set(level.dimensions, [0,0,width,height]),
		fire_event('spawn_objects'),
		if(_screen_controller, fire_event(_screen_controller, 'window_resize', {height: height, width: width})),
	]
	  where width = int :: arg.width, height = int :: arg.height",
	
	on_type_updated: "fire_event('spawn_objects')",
	
	on_process: "[
		if(me._internal_client, tbs_process(me._internal_client)),
		if(_concede_client, [tbs_process(_concede_client), if(_concede_client.in_flight = 0, set(_concede_client, null))])
	]",

    on_connection_error: "teleport('titlescreen.cfg', '', 'instant', object_playable('login_controller', 0, 0, 0))",
    
	on_connection_success: "null",

	on_matchmake_message_received: "[
	matchmaking_handle_message(message),
	switch(message.type,
		'matchmaking_queued', [
			debug('queued matchmaking'),
		],

		'match_made', join_game(if(message.host, string<- message.host, TBS_SERVER_ADDRESS), if(message.port, int<- message.port, TBS_SERVER_PORT)),

		'heartbeat', [
			set(game_port, int|null<- message.game_port),
			set(game_session, int|null<- message.game_session),
			set(game_id, int|null<- message.game_id),
			set(num_users, int<- message.users),
			set(num_queued, int<- message.users_queued),
			set(num_games, int<- message.games),
			set(users_online, [OnlineUser]<- message.user_list),
			set(game_servers, [GameServer]<- message.servers),

			if(message.chat_messages != null,
			  if(mp_controller,
				[
					mp_controller.receive_chat_messages([{message: string, nick: string}]<- message.chat_messages)
				]
			  ) where mp_controller = find(level.chars, value is obj title_multiplayer_controller)
			)
		],

		'admin_busy', [
			if(_screen_controller is obj title_lobby_controller,
			   _screen_controller.set_server_text(['Server busy'])),
		],
		'admin_message', [
			if(_screen_controller is obj title_lobby_controller,
			   _screen_controller.admin_message(string<- message.message, null|bool<- message.complete))
		],
	)
	] where message = map<- arg.message",
	
	on_message_received: "[
	 debug('message: ' + str(message.type)),
	switch(message.type,
		'game_created', 
		[
		set(playable.selected_deck, me._selected_deck),
		teleport('level1.cfg', '', 'fade', playable)
		]
		   where playable = object_playable('citadel_controller', 336, 372, 0,
		   {
			_mm_client_state: _mm_client_state,
			game_server_address: '',
			game_server_port: 23456,
			session_id: me._session_id,
			game_created: true,
			selected_deck: string<- lib.citadel.preferences.selected_deck,
			return_callback: (def(bool result)->commands teleport('titlescreen.cfg', '', 'fade', me))
			}
		   ),
		'server_info',
		[],
		'heartbeat', [
		],

		debug('UNKNOWN MESSAGE RECIEVED: ' + str(message.type))
	) asserting message.type != 'error']
	  where message = map<- arg.message",
	
	on_do_deckbuilder: "teleport('deck-builder.cfg', '', 'fade', playable) 
		where playable = object_playable('library_controller', 0, 0, 0,{
			_mm_client_state: _mm_client_state,
			deck_rules: construct('deck_rules'),
		})
	",

	on_do_observe: "teleport('observation_lobby.cfg', '', 'fade', playable)
	    where playable = object_playable('observation_lobby_controller', 0, 0, 0, { client: tbs_client(TBS_SERVER_ADDRESS, TBS_SERVER_PORT) })",
	
	on_do_mp_lobby: "teleport('matchmaking_lobby.cfg', '', 'fade', playable)
		where playable = object_playable('matchmaking_lobby_controller', 0, 0, 0, { _mm_client_state: _mm_client_state, selected_deck: _selected_deck })
	",
	
	on_enter_level: "[
		if(_selected_menu_item,
		  _menu_item_clicked(_selected_menu_item)),
		fire_event('window_resize', {width: level.camera_position[2], height: level.camera_position[3]}),
	] where user_decks = account_info.decks",

}
