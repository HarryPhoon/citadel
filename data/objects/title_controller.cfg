{
	id: "title_controller",
	prototype: ["matchmaking_base"],
	is_human: true,
	hitpoints: 20,
	editor_info: { category: "player" },
    hidden_in_game: true,

	is_strict: true,

	types: {

	},

	consts: {
		BUTTON_WIDTH: 220,
		BUTTON_HEIGHT: 35,
	},
	
    properties: {

		_selected_deck: "string <- (lib.citadel.preferences.selected_deck or keys(lib.citadel.get_decks())[0])",

        _internal_client: { type: "object|null", default: null },
		_session_id: { type: "int", default: -1 },

		level_width: "int<- level.dimensions[2]",
		level_height: "int<- level.dimensions[3]",

		_decks: "DeckMap :: lib.citadel.get_decks()",

		num_users: { type: "int|null" },
		num_games: { type: "int|null" },

		game_servers: { type: "[GameServer]", default: [] },

		_menu_item_clicked: "def(obj combo_label item) ->commands
		[
		if(nitem != -1, [
			map(_menu_items, set(value.selected, false)),
			set(_menu_items[nitem].selected, true),
		]),

		if(_screen_controller != null, [
			remove_object(_screen_controller),
			set(_screen_controller, null),
		]),

		_menu_item_selected(nitem),
		set(_selected_menu_item, item),
		] where nitem = index(_menu_items, item)",

		_menu_item_selected: "def(int nitem) ->commands
		switch(nitem,
			0, spawn('title_lobby_controller', 0, 0, {
				_mm_client_state: _mm_client_state,
			}, [
				set(me._screen_controller, child)
			]),
			1, set_campaign_controller(),

			2, spawn('title_multiplayer_controller', 0, 0, {
				_mm_client_state: _mm_client_state,
			}, [
				set(me._screen_controller, child)
			]),
			3, spawn('library_controller', 0, 0, {
				_mm_client_state: _mm_client_state,
			}, [
				set(me._screen_controller, child)
			])
		)",

		set_campaign_controller: "def() ->commands [
			set(_campaign_controller, ctrl),
			add_object(ctrl),
			if(ctrl != _screen_controller, [
				set(_screen_controller, ctrl),
			]),

			set(_screen_controller, ctrl),
		] where ctrl = if(_campaign_controller,
		                  _campaign_controller,
						  object('campaign_controller', 0, 0, {
								 _mm_client_state: _mm_client_state,
						  }))",

		_campaign_controller: { type: "null|obj campaign_controller" },

		_screen_controller: { type: "custom_obj|null" },

		_menu_items: { type: "[obj combo_label]", default: [] },

		_selected_menu_item: { type: "obj combo_label|null" },

		_selected_menu_item_index: "int :: if(val = -1, 0, val) where val = index(_menu_items, _selected_menu_item)",

		spawn_menu: "def() ->commands [
			set(draw_primitives, [{
				type: 'rect',
				area: [0, level_height-80, level_width, level_height-79],
				color: [255,255,255],
			}]),

			map(_menu_items, remove_object(value)),
			set(_menu_items, items),

			map(items, [
				set(value.x, (level_width - menu_width)/2 + index*border_size + sum(map(items[:index], value.text_area.width))),
				set(value.y, level_height - value.h - 58),
				add_object(value),
			]),

			set(_selected_menu_item, items[_selected_menu_item_index]),
		]
		  where menu_width = sum(map(items, value.text_area.width)) + (size(items)-1)*border_size
		  where border_size = 12
		  where items =
			map(['LOBBY', 'CAMPAIGN', 'MULTIPLAYER', 'LIBRARY'],
				object('combo_label', 200, 200 + index*200, {
					_text: value,
					_font_size: 36,
					grouping: 'menu',
					selected: index = _selected_menu_item_index,
					index: index,
					click_handler: me._menu_item_clicked,
				})
			),
		",

		spawn_deck_summaries: "def() ->commands [
			[remove_object(c) | c <- level.chars, c is obj library_deck_summary],

			map(_decks, spawn('library_deck_summary', 0, 0, {selected: index = if(selected_index >= 0, selected_index, 0), zorder: 500, deck_name: key, x2: level_width, y: 28 + 72 + 72*index}))
			    where selected_index = index(keys(_decks), find(keys(_decks), value = lib.citadel.preferences.selected_deck)),
		]",

		send_cancel_matchmaking_request: "def() ->commands [
			tbs_send(object<- mm_client, { type: 'cancel_matchmake', user: _mm_client_state.username, }),
		]",

		send_matchmaking_request: "def() ->commands [
			tbs_send(object<- mm_client, { type: 'matchmake', user: _mm_client_state.username, }),

		]",

		observe_game: "def(GameServer server) -> commands [
			teleport('level1.cfg', '', 'fade',
  				object_playable('citadel_controller', 336, 372, 0, {
				game_server_address: TBS_SERVER_ADDRESS,
				game_server_port: server.port,
				session_id: _mm_client_state.session_id,
				game_created: true,
				observer: true,
				_mm_client_state: _mm_client_state,
				return_callback: (def(bool outcome) ->commands teleport('lobby.cfg', '', 'fade', me))
			}))
		]",
    },
      
    on_create: "[
		set(x, 0),
		set(y, 0),

		//construct all cards so we will error if there are any problems.
		map(['blood', 'colorless', 'food', 'scrolls', 'faith', 'gold'],
		  map(keys(lib.json.get_document_map(fname)),
		    edit_and_continue(lib.citadel.create_card(string<- value), fname)
		     ) where fname = 'data/cards-' + value + '.cfg') and null,

		fire_event('window_resize', {width: level.camera_position[2], height: level.camera_position[3]}),

		_menu_item_selected(0),
	] where user_decks = lib.citadel.get_decks()",

	on_spawn_objects: "[
//		spawn_deck_summaries(),
		spawn_menu(),
	]",
	
	on_window_resize: "[
		set(level.dimensions, [0,0,width,height]),
		fire_event('spawn_objects'),
		if(_screen_controller, fire_event(_screen_controller, 'window_resize', {height: height, width: width})),
	]
	  where width = int :: arg.width, height = int :: arg.height",
	
	on_type_updated: "fire_event('spawn_objects')",
	
	on_process: "[
		if(me._internal_client, tbs_process(me._internal_client))
	]",

    on_connection_error: "teleport('titlescreen.cfg', '', 'instant', object_playable('login_controller', 0, 0, 0))",
    
	on_connection_success: "null",

	on_matchmake_message_received: "[
	debug('ZZZ: RECEIVE ' + message.type),
	matchmaking_handle_message(message),
	switch(message.type,
		'matchmaking_queued', [
			debug('queued matchmaking'),
		],

		'match_made', [
    		teleport('level1.cfg', '', 'fade',
  				object_playable('citadel_controller', 336, 372, 0, {
				game_server_address: if(message.host, string<- message.host, TBS_SERVER_ADDRESS),
				game_server_port: if(message.port, int<- message.port, TBS_SERVER_PORT),
				session_id: _mm_client_state.session_id,
				selected_deck: me._selected_deck,
				game_created: true,
				_mm_client_state: _mm_client_state,
				return_callback: (def(bool outcome) ->commands teleport('lobby.cfg', '', 'fade', me))
			}))
			
		],

		'heartbeat', [
			set(num_users, int<- message.users),
			set(num_games, int<- message.games),
			set(game_servers, [GameServer]<- message.servers),
		],
	)
	] where message = map<- arg.message",
	
	on_message_received: "[
	 debug('message: ' + message.type),
	switch(message.type,
		'game_created', 
		[
		debug('SETTING DECK: ' + me._selected_deck),
		set(playable.selected_deck, me._selected_deck),
		teleport('level1.cfg', '', 'fade', playable)
		]
		   where playable = object_playable('citadel_controller', 336, 372, 0,
		   {
			_mm_client_state: _mm_client_state,
			game_server_address: '',
			game_server_port: 23456,
			session_id: me._session_id,
			game_created: true,
			selected_deck: string<- lib.citadel.preferences.selected_deck,
			return_callback: (def(bool result)->commands teleport('titlescreen.cfg', '', 'fade', me))
			}
		   ),
		'server_info',
		[],
		'heartbeat', [
		],
		debug('UNKNOWN MESSAGE RECIEVED: ' + message.type)
	) asserting message.type != 'error']
	  where message = map<- arg.message",
	
	on_do_deckbuilder: "teleport('deck-builder.cfg', '', 'fade', playable) 
		where playable = object_playable('library_controller', 0, 0, 0,{
			_mm_client_state: _mm_client_state,
		})
	",

	on_do_observe: "teleport('observation_lobby.cfg', '', 'fade', playable)
	    where playable = object_playable('observation_lobby_controller', 0, 0, 0, { client: tbs_client(TBS_SERVER_ADDRESS, TBS_SERVER_PORT) })",
	
	on_do_mp_lobby: "teleport('matchmaking_lobby.cfg', '', 'fade', playable)
		where playable = object_playable('matchmaking_lobby_controller', 0, 0, 0, { _mm_client_state: _mm_client_state, selected_deck: _selected_deck })
	",
	
	on_do_campaign_game: "teleport('campaign.cfg', '', 'fade', playable)
		where playable = object_playable('campaign_controller', 0, 0, 0, {_mm_client_state: _mm_client_state})
	",
	
	on_enter_level: "[
		if(_selected_menu_item,
		  _menu_item_clicked(_selected_menu_item)),
		fire_event('window_resize', {width: level.camera_position[2], height: level.camera_position[3]}),
	] where user_decks = lib.citadel.get_decks()",

}
