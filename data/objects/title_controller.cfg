{
	id: "title_controller",
	is_human: true,
	hitpoints: 20,
	editor_info: { category: "player" },
    hidden_in_level: true,
    use_absolute_screen_coordinates: true,

    vars: {
		client: null,
		session_id: -1,
		bot_types: [],
		
		state: null,
		
		font: 'RobotoCondensed-Regular',
		font_color: 'antique_white',
		
		bot1: null,
		bot2: null,
    },
    tmp: {
        username: "@eval USERNAME",
		bvb_menu_shown: false,
		bvb_match: false,
		bvb_button_enabled: false,
		bot1_session_id: -1,
		bot2_session_id: -1,
    },

    consts: {
		button_width: 220,
		button_height: 35,
    },
	
	is_strict: true,
	
    properties: {
		get_server_info: "[tbs_send(cl, {type: 'get_server_info'}), set(vars.client, cl)] where cl = tbs_client('localhost', 23456, -1)",
		
		// We need to schedule removal of the bot vs. bot menu due to a nasty internal bug with processing and iterator invalidation.
		remove_bot_vs_bot_menu: "[
			set(tmp.bvb_menu_shown, false),
			set(me.widgets.bvb_dlg, null)
		]",
		
		do_fast_play_send: "def(sid, cl) [
			set(vars.session_id, sid),
			set(tmp.bvb_match, false),
			tbs_send(cl, {type: 'create_game', game_type: 'citadel', users: [{user: 'a', session_id: sid}, {user: 'b', bot_type: 'goblins', bot: true, session_id: 1d30000}]})
		]",
		
		do_fast_play: "if(vars.client, 
			do_fast_play_send(1d30000, cl), 
			[set(vars.client, cl), do_fast_play_send(1d30000, cl)] where cl = tbs_client('localhost', 23456))
		",
		
		error_text: "def(txt) set(me.widgets.error_text.text, txt)",
		
		do_bot_vs_bot: "def(wwidth, hheight)
			set(me.widgets.child, {				
				type: 'dialog',
				id: 'bvb_dlg',
				background_alpha: 255,
				background_frame: 'empty_window',
				zorder: 1100,
				rect:[wwidth/4, hheight/4, wwidth/2, hheight/2],
				cursor: [20, 20],
				children:[
					{
						type: 'grid',
						columns: 2,
						column_alignments: 'center',
						column_widths: wwidth/4 - 40,
						children: [
							{
								type: 'grid',
								columns: 1,
								column_widths: wwidth/4 - 40,
								row_height: 30,
								allow_selection: true,
								//must_select: true,
								//swallow_clicks: true,
								max_height: hheight/2-100,
								allow_draw_highlight: true,
								column_alignments: 'centre',
								children: map(vars.bot_types, {type: 'label', size: 16, text: value, font: vars.font, color: vars.font_color}),
								on_select: 'if(selection >= 0, [set(vars.bot1, vars.bot_types[selection]), debug(q(bot1 = ), vars.bot_types[selection])])',
							},
							{
								type: 'grid',
								columns: 1,
								column_widths: wwidth/4 - 40,
								row_height: 30,
								allow_selection: true,
								//must_select: true,
								//swallow_clicks: true,
								max_height: hheight/2-100,
								allow_draw_highlight: true,
								column_alignments: 'centre',
								children: map(vars.bot_types, {type: 'label', size: 16, text: value, font: vars.font, color: vars.font_color}),
								on_select: 'if(selection >= 0, [set(vars.bot2, vars.bot_types[selection]), debug(q(bot2 = ), vars.bot_types[selection])])',
							},							
						],
					},
					{
						type: 'grid',
						columns: 2,
						column_alignments: 'center',
						column_widths: wwidth/4 - 40,
						children: [
							{
								type: 'button', 
								label:{type: 'label', size: 16, text: 'Cancel', font: vars.font, color: vars.font_color}, 
								wh:[150, consts.button_height], 
								on_click: 'schedule(1, remove_bot_vs_bot_menu)' 
							},
							{
								type: 'button', 
								label:{type: 'label', size: 16, text: 'Go!', font: vars.font, color: vars.font_color}, 
								wh:[150, consts.button_height], 
								on_click: '[schedule(1, remove_bot_vs_bot_menu), do_play_bots]' 
							},
						],
					},
				],
			})
		",
		
		do_play_bots_send: "def(cl) [
			tbs_send(cl, {
				type: 'create_game', 
				game_type: 'citadel', 
				users: [
					{ user: 'FightBot-A', bot: true, bot_type: vars.bot1, session_id: b1id }, 
					{ user: 'FightBot-B', bot: true, bot_type: vars.bot2, session_id: b2id }
				]
			}),
			set(tmp.bvb_match, true),
			set(tmp.bot1_session_id, b1id),
			set(tmp.bot2_session_id, b2id),
		] where b1id = 1d30000, b2id = 1d30000",
		
		do_play_bots: "if(vars.bot1 and vars.bot2, 
			if(vars.client, 
				do_play_bots_send(vars.client), 
				[set(vars.client, cl), do_play_bots_send(cl)] where cl = tbs_client('localhost', 23456)),
			error_text('Need to choose what bots to use')
		)",
		
		draw_menu: "def(wwidth, hheight) set(me.widgets, {
			type: 'dialog',
			id: 'background_dlg',
			background_alpha: 255,
			rect: [0, 0, wwidth, hheight],
			children: [
				{ type: 'image', image: 'title2.png', image_width: calc_w, image_height:350, x: (wwidth-calc_w)/2, y: 20 },
				{
					type: 'dialog',
					id: 'dlg',
					background_frame: 'empty_window',
					background_alpha: 20,
					rect: [wwidth/16, hheight/2+40, 14*wwidth/16, hheight/2-50],
					cursor: [35, 20],
					children: [
						{
							type: 'grid',
							columns: 2,
							column_widths: 6*wwidth/16,
							column_alignments: 'center',
							children: [
								{
									type: 'grid',
									columns: 1,
									column_widths: 6*wwidth/16,
									column_alignments: 'center',
									children: [
										{type: 'button', id:'campaign_button', label:{type: 'label', size: 16, text: 'Play Campaign (single player)', font: vars.font, color: vars.font_color}, enabled: false, wh:[consts.button_width, consts.button_height], on_click: 'debug(q(clicked play campaign))' },
										{type: 'button', id:'puzzle_button', label:{type: 'label', size: 16, text: 'Play Puzzle (single player)', font: vars.font, color: vars.font_color}, enabled: false, wh:[consts.button_width, consts.button_height], on_click: 'debug(q(clicked play puzzle))' },
										{type: 'button', id:'mplobby_button', label:{type: 'label', size: 16, text: 'Play Multiplayer Game', font: vars.font, color: vars.font_color}, wh:[consts.button_width, consts.button_height], on_click: 'debug(q(clicked mp game))' },
										{type: 'button', id:'fastplay_button', label:{type: 'label', size: 16, text: 'Fast Play (single player)', font: vars.font, color: vars.font_color}, wh:[consts.button_width, consts.button_height], on_click: 'do_fast_play' },
									],
								},
								{
									type: 'grid',
									columns: 1,
									column_widths: 6*wwidth/16,
									column_alignments: 'center',
									children: [
										{type: 'button', id:'deckbuilder_button', label:{type: 'label', size: 16, text: 'Deck Builder', font: vars.font, color: vars.font_color}, enabled: false, wh:[consts.button_width, consts.button_height], on_click: 'debug(q(clicked deck builder))' },
										{type: 'button', id:'botvsbot_button', label:{type: 'label', size: 16, text: 'Bot vs. Bot', font: vars.font, color: vars.font_color}, enabled: tmp.bvb_button_enabled, wh:[consts.button_width, consts.button_height], on_click: '[do_bot_vs_bot(SCREEN_WIDTH, SCREEN_HEIGHT), set(tmp.bvb_menu_shown, true)]' },
										{type: 'label', text:''},
										{type: 'label', text:''},
									],
								},
							],
						},
						{
							type: 'grid', 
							columns: 1,
							row_height: 20,
							column_widths: 12*wwidth/16,
							column_alignments: 'left',
							children: [
								{type: 'label', id: 'error_text', size:20, text: '', font: 'RobotoCondensed-Bold', color: 'red'},
							],
						},
					],
				},
			],            
		}) where calc_w = if(wwidth > 750, 750, wwidth)",
    },
      
    on_create: "[draw_menu(SCREEN_WIDTH, SCREEN_HEIGHT), schedule(5, [get_server_info])]",
	on_window_resize: "[draw_menu(width, height), if(tmp.bvb_menu_shown, do_bot_vs_bot(width, height))]",
	
	on_process: "if(vars.client, tbs_process(vars.client))",
    
    on_connection_error: "error_text('CONNECTION ERROR: ' + error)",
    
	on_connection_success: "error_text(null)",
	
	on_message_received: "switch(message.type,
		'game_created', 
		if(tmp.bvb_match, 
			tbs_send(cl, {'start_game'}) where cl = tbs_client('localhost', 23456, tmp.bot1_session_id),
			teleport('level1.cfg', '', 'iris', playable) where playable = object_playable('citadel_controller', 224, 288, 0, {session_id: vars.session_id, game_created: true})
		),
		'server_info',
		[if(message.bot_types, set(vars.bot_types, message.bot_types)), set(me.widgets.botvsbot_button.enable, true), set(tmp.bvb_button_enabled, true)],
		error_text('UNKNOWN MESSAGE RECIEVED: ' + message.type)
	)",
	
	animation: {
		id: "normal",
		image: "effects/particles.png",
		x: 86,
		y: 73,
		w: 28,
		h: 28,
		collide: [0,0,28,28],
		frames: 1,
		duration: 1000,
	},
}
