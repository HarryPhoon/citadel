{
	id: "rival_pane",
	is_strict: true,

	properties: {

		title_controller: { type: "obj title_controller" },

		_mouse_enter_rival: "def(obj rival_avatar avatar) ->commands
			if(avatar != _selected_rival, animate(avatar, {halo: 2.0}, {duration: 10}))
		",
		_mouse_leave_rival: "def(obj rival_avatar avatar) ->commands
			if(avatar != _selected_rival, animate(avatar, {halo: 0.0}, {duration: 10}))
		",
		_mouse_click_rival: "def(obj rival_avatar avatar) ->commands
			set(_selected_rival, avatar)
		",

		_rivals: { type: "[obj rival_avatar]", default: [] },

		get_scenario: "def() ->Scenario
			if(_current_scenario, _current_scenario,
			   _selected_rival.rival.choose_scenario(title_controller.account_info, get_difficulty()) asserting _selected_rival != null)
		",

		_current_scenario: { type: "null|Scenario",
		set: "if(value != _data, [
			set(_data, value),

			if(value != null,
			   title_controller.display_choose_deck_controller(value.player_deck = null and value.tutorial = null)
			),
		])"},

		_selected_rival: {
			type: "null|obj rival_avatar",
			set: "if(value != _data,
				[

					set(_data, value),
					if(value,
						_create_difficulty_combo(value);
						[
						animate(value, {halo: 5.0}, {duration: 10}),
						set(lib.citadel.preferences, lib.citadel.preferences + {selected_rival: value.rival.name}),
						set(_current_scenario, value.rival.choose_scenario(title_controller.account_info, get_difficulty())),
						_create_preview(value),

					]),
					if(_data, animate(_data, {halo: 0.0}, {duration: 10})),
				]
			)"
		},

		_preview_avatar: { type: "null|obj rival_avatar" },

		_create_preview: "def(obj rival_avatar a) ->commands
		[
			remove_object(_preview_avatar),
			spawn('rival_avatar', {
				x: x2 - lib.citadel.py(10),
				y: y2 - lib.citadel.py(94),
				rival: a.rival,
				zorder: zorder+500,

				mouseover_handler: (def(obj rival_avatar rival) ->commands null),
				mouseoff_handler: (def(obj rival_avatar rival) ->commands null),
				click_handler: (def(obj rival_avatar rival) ->commands null),

				_width: lib.citadel.py(206),
				_height: lib.citadel.py(42),
			}, [
				set(me._preview_avatar, child),
			]),
		]
		",

		//0 = tutorials, 1 = rivals, 2 = puzzles
		_rival_type: {
			type: "int",
			variable: false,
			get: "if(pref is int, pref, 0) where pref = lib.citadel.preferences.rival_tab",
			set: "[
				set(lib.citadel.preferences.rival_tab, value),
				if(_combo, set(_combo.selected_index, value))
			]",
		},

		get_combo: "def()->obj combo_label_controller
			_combo asserting _combo != null",

		_combo: { type: "null|obj combo_label_controller"  },

		_width: "int :: lib.citadel.py(290)",
		_pane_width: "int :: _width - lib.citadel.py(20)",

		set_tab: "def(int tab) ->commands
			set(_rival_type, tab);
			render();
			create_rivals()
		",

		get_rivals: "def() ->[class rival]
		[lib.citadel.tutorials, lib.citadel.rivals, lib.citadel.puzzles][_rival_type]
		",

		_create_difficulty_combo: "def(obj rival_avatar avatar) ->commands [
			remove_object(_difficulty_combo),
			set(_difficulty_combo, null),

			if(avatar.rival.difficulty_names,
				spawn('combo_controller', {
					x: x2 - lib.citadel.py(90),
					y: y + lib.citadel.py(10),
					items: avatar.rival.difficulty_names,
					selected_index: min(size(avatar.rival.difficulty_names)-1, difficulty_pref) where difficulty_pref = if(lib.citadel.preferences.ai_difficulty is int, int<- lib.citadel.preferences.ai_difficulty, 0),
					on_change: (def(int index)->commands
					if(_selected_rival != null,
						set(me._current_scenario, _selected_rival.rival.choose_scenario(title_controller.account_info, get_difficulty()))
					);
					
					 lib.citadel.add_preferences({ ai_difficulty: index })),
					_width: lib.citadel.py(60),
					_height: lib.citadel.py(16),
					zorder: zorder+1000,
					_font_size: lib.citadel.py(12),
					color_scheme: lib.citadel.library_color_scheme,
				}, [
					set(_difficulty_combo, child),
				])
			)
		]
		",

		_difficulty_combo: { type: "null|obj combo_controller" },

		get_difficulty: "def() ->string
			if(_difficulty_combo = null, '',
			   _difficulty_combo.items[_difficulty_combo.selected_index]
			)
		",

		create_rivals: "def() ->commands execute(me, [
			map(_rivals, animate(value, { alpha: 0 }, { duration: 20, on_complete: remove_object(value)})),
			set(_rivals, []),

			map(get_rivals(), schedule(index, spawn('rival_avatar', {
				x: x,
				y: y + lib.citadel.py(28) + index*lib.citadel.py(52) + if(value.name = 'Multiplayer Challenge', lib.citadel.py(26), 0),
				rival: value,
				complete: (value.name in title_controller.account_info.puzzles_completed),
				zorder: zorder+100,
				alpha: 0,

				mouseover_handler: me._mouse_enter_rival,
				mouseoff_handler: me._mouse_leave_rival,
				click_handler: me._mouse_click_rival,
			}, [
				add(_rivals, [child]),
				animate(child, {
					alpha: 255,
				}, {
					duration: 20,
				}),
			])));

			schedule(size(get_rivals())+1,
				; set(_selected_rival, find(_rivals, value.rival.name = lib.citadel.preferences.selected_rival) or _rivals[0])
			)
		])",

		create_objects: "def() ->commands [
			spawn('combo_label_controller', {
				xpos: x + _pane_width/2,
				ypos: y2 - lib.citadel.py(14),
				items: ['Tutorials', 'Rivals', 'Puzzles'],
				_font_size: lib.citadel.py(14),
				click_handler: me.set_tab,
				zorder: zorder+10,
				selected_index: _rival_type,
			}, [
				set(_combo, child),
			]),

		]",

		render: "def() ->commands
		set(animation, lib.citadel.render_frame(c, ww, hh,
		[
			c.set_operator('SOURCE'),
			outline_path,
			c.set_source_rgba(0.1,0.1,0.1,0.5),
			c.fill(),

			c.set_operator('OVER'),
			outline_path,
			c.set_source_rgba(0.22,0.25,0.29,1),
			c.set_line_width(lib.citadel.py(100)/100.0),
			c.stroke(),

			c.set_source_rgba(1, 1, 1, 1),

			c.save(),
			c.translate(lib.citadel.py(6), lib.citadel.py(12)),

			map(fragments, [
				c.save(),
				value.path,
				c.fill(),
				c.restore(),
			]) where fragments = c.markup_text(q(<font size='12'>) + get_title() + q(</font>), {width: lib.citadel.py(1000), scale: lib.citadel.py(1000)/1000.0}),
			c.restore(),

			if(_rival_type = 1, [
				c.save(),
				c.translate(lib.citadel.py(6), hh - lib.citadel.py(114)),

				map(fragments, [
					c.save(),
					value.path,
					c.fill(),
					c.restore(),
				]) where fragments = c.markup_text(q(<font size='12'>Multiplayer Rivals</font>), {width: lib.citadel.py(1000), scale: lib.citadel.py(1000)/1000.0}),
				c.restore(),
			])

		] where outline_path = [
			c.move_to(left_edge,0),
			c.line_to(right_edge,0),
			c.line_to(right_edge,hh-lib.citadel.py(82)),
			c.line_to(right_edge + lib.citadel.py(12), hh-lib.citadel.py(62)),
			c.line_to(right_edge,hh-lib.citadel.py(42)),
			c.line_to(right_edge,hh),
			c.line_to(left_edge,hh),
			c.line_to(left_edge,0),
		] where left_edge = lib.citadel.py(0)
		  where right_edge = ww - lib.citadel.py(20)
		))
		where ww = _width
		where hh = get_height()
		where c = canvas()
		",

		get_title: "def() ->string
			['Tutorials', 'Single Player Rivals', 'Puzzles'][_rival_type]
		",

		get_height: "def() ->int
			lib.citadel.py(74 + if(_rival_type = 1, 26, 0)) + size(get_rivals())*lib.citadel.py(52)
		",
	},

	on_create: "render(); create_objects(); create_rivals()",

	on_type_updated: "fire_event('create')"
}
