{
	id: "button_controller",
	is_strict: true,
	zorder: 500,
	use_absolute_screen_coordinates: true,

	properties: {
		_mouseover: { type: "bool", default: false },

		tooltip: { type: "string|null" },
		tooltip_color: { type: "[decimal,decimal,decimal]", default: [1,1,1] },
		text: { type: "string" },
		on_click: { type: "function() ->commands" },
		button_width: { type: "int", init: "lib.citadel.py(160)" },
		button_height: { type: "int", init: "lib.citadel.py(35)" },
		_font_size: { type: "int", init: "lib.citadel.px(20)" },

		color_scheme: { type: "{string -> Color}", init: "lib.citadel.button_color_scheme" },
		user_info: { type: "null|any" },

		render: "def() ->commands [
		set(animation, lib.citadel.render_frame(c, ww, hh,
		[
			c.rectangle(0,0,ww,hh),
			c.set_source_color(map([int,int,int]<- color_scheme[if(_mouseover, 'focus', 'normal')], value/255.0)),
			c.fill(),

			[
				c.set_source_color(map([int,int,int]<- color_scheme[if(_mouseover, 'text_focus', 'text_normal')], value/255.0)),
				
				c.translate((button_width-text_width)/2, (button_height - text_height)/2),
				map(fragments, [
					c.save(),
					value.path,
					c.fill(),
					c.restore(),
				]),
			]
			where text_height = decimal<- (max(map(fragments, value.height)) or button_height)
			where text_width = sum(map(fragments, value.x_advance))
			where fragments = c.markup_text(q(<font size=') + str(_font_size) + q('>) + text + q(</font>), { width: button_width })
		])  where c = canvas()
			where ww = round_to_even(button_width)
			where hh = round_to_even(button_height)
		)
		]",
	},

	on_mouse_enter: "set(_mouseover, true); if(not paused, render())",
	on_mouse_leave: "set(_mouseover, false); if(not paused, render())",

	on_paused: "render()",

	on_click: "if(not paused, [swallow_mouse_event(), on_click()])",

	on_create: "[
		render();

		(
			if(mouse_in != _mouseover,
				set(_mouseover, mouse_in); render()
			)
			where mouse_in = mouse_x is int and mouse_y is int and mouse_x > x and mouse_y > x and mouse_x < x2 and mouse_y < y2
		)
	] where mouse_x = lib.citadel.mouse_pos(level)[0]
	  where mouse_y = lib.citadel.mouse_pos(level)[1]
	",
}
