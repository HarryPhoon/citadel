{
	id: "game_menu_controller",
	is_strict: true,
	zorder: 10000,
	hidden_in_game: true,

	properties: {
		level_width: "level.dimensions[2]",
		level_height: "level.dimensions[3]",

		buttons: { type: "[{pad: int|null, text: string, callback: function()->commands}]" },

		text_width: { type: "int", init: "lib.citadel.py(260)" },

		_blur: { type: "bool", default: true },

		_text_area: { type: "null|obj text_area" },
		_blur_controller: { type: "null|obj blur_controller" },
		_buttons: { type: "[obj button_controller]", default: [] },

		_exclude_from_pause: { type: "[custom_obj]", default: [] },
		_paused: { type: "[custom_obj]", default: [] },

		show_dialog: "def() ->commands
		execute(me,
		[
			[remove_object(c) | c <- spawned_children],

			[
				set(_paused, need_pause),
				map(need_pause, set(value.paused, true)),
			] where need_pause = filter(level.chars, value.paused = false and (value not in _exclude_from_pause)),
			add_object(me),
			spawn('text_area', 0, 0, {
				mid_x: level_width/2,
				mid_y: level_height/2,
				bg_color: [0.3, 0.3, 0.3, 1.0],
				border: lib.citadel.py(10),
				border_bot: size(buttons)*lib.citadel.py(60),
				_text: q(<font size='32' align='center'>Game Menu</font>),
				text_width: text_width,
				zorder: zorder,
			}, [
				set(_text_area, child),
			]);

			if(_blur,
				spawn('blur_controller', 0, 0, {
					blur_amount: 0.0,
					end_zorder: me.zorder-10,
				}, [
					set(me._blur_controller, child),
					animate(child, {
						blur_amount: 4.0,
					}, {
						duration: 10,
					}),
				])
			);

			if(_text_area != null, [
				map(buttons,
					spawn('button_controller', 0, 0, {
						mid_x: level_width/2 - lib.citadel.py(70),
						mid_y: level_height/2 + lib.citadel.py(30) - size(buttons)*lib.citadel.py(60)/2 + index*lib.citadel.py(60),
						button_width: lib.citadel.py(140),
						zorder: zorder+10,
						text: value.text,
						on_click: (def()->commands [remove_object(me); value.callback()]),
					}, [
						add(_buttons, [child]),
					])
				)
				where left_side = level_width/2 - text_width/4
				where button_spacing = (text_width/2)/(max(1, size(buttons)-1))
			])
		]
		)
		",
	},

	on_create: "show_dialog()",

	on_being_removed: "[
		map(_paused, set(value.paused, false)),
		map(_buttons, remove_object(value)),
		remove_object(_text_area),
		if(_blur_controller, execute(_blur_controller,
		animate(_blur_controller, {
			blur_amount: 0.0,
		}, {
			duration: 10,
			on_complete: remove_object(_blur_controller)
		})))
	]",
	
	on_type_updated: "show_dialog()",
}
