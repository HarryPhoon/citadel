{
	id: "select_deck_controller",
	is_human: false,
    hidden_in_level: true,
	is_strict: true,
	zorder: 1000,

    vars: {
		font: 'RobotoCondensed-Regular',
		color: 'antique_white',
	},
	
    tmp: {
		parent: null,

		// Map of <deck_name>:{name:<deck_name>, cards:[(list of cards], schools:[(list of schools)]}
		user_decks: {},
		// List of <deck_name> that correspond to the selections in the deck_grid widget.
		deck_list: [],
		selected_deck: '',
	},
	
    properties: {
		level_width: "level.dimensions[2]",
		level_height: "level.dimensions[3]",
		
		make_deck_list: "map(tmp.user_decks, widget(me, {
			type: 'grid', 
			columns: 2,
			column_alignments: ['left', 'right'],
			column_widths: level_width/4,
			children: [{
				type:'label', 
				font:vars.font, 
				size:16, 
				color:vars.color, 
				text:value.name
			}, {
				type: 'grid',
				columns: size(value.schools),				
				children: map(value.schools, school, make_school_icon(school)),
			}],
		}))",

		make_school_icon: "def(school) switch(school, 
			// Colorless -- mana only
			0, widget(me, {type: 'label', text:'Mana', font: vars.font, color: vars.color, size: 14}),
			// gold
			1, widget(me, {type:'image', image:'magic-icons.png', area:[3,3,18,18]}),
			// blood
			2, widget(me, {type:'image', image:'magic-icons.png', area:[20,3,35,18]}),
			// food
			3, widget(me, {type:'image', image:'magic-icons.png', area:[37,3,52,18]}),
			// scrolls
			4, widget(me, {type:'image', image:'magic-icons.png', area:[54,3,69,18]}),
			// faith
			5, widget(me, {type:'image', image:'magic-icons.png', area:[71,3,86,18]})) 
			asserting school >= 0 and school <= 5",
			
		make_deck_grid: "widget(me, {
			type: 'grid', 
			allow_selection: true,
			draw_selection_highlighted: true,
			id: 'deck_grid',
			columns: 1,
			column_widths: level_width/2,
			max_height: level_height-200,
			default_select: if(size(tmp.user_decks), 0, -1),
			children: make_deck_list,
			on_select: def(selection) if(selection >= 0 and tmp.user_decks, set(tmp.selected_deck, tmp.deck_list[selection])),
		})",
		
		create_selector_dialog: "[set(me.widgets.child, widget(me, {
			type: 'dialog',
			background_alpha: 255,			
			background_frame: 'empty_window',
			upscale_frame: false,
			rect: [0, 0, level_width, level_height],
			cursor: [20, 40],
			zorder: 2000,
			on_close: def(cancelled) [remove_object(me), fire_event(tmp.parent, 'join_game_user_cancel')],
			children: [{
				type: 'grid',
				columns: 1,
				column_widths: level_width,
				column_alignments: 'center',
				xy: [0, 120],
				children: [{
					type: 'image', 
					image: 'backgrounds/loading_screen.png',
					image_width: 240,
					image_height: 160,
				}],
			}, deck_grid_widget, {
				type: 'button', 
				id: 'cancel_button',
				padding: [25, 10],
				xy: [10, level_height-50],
				enabled: true,
				label: {
					type: 'label', 
					text: 'Cancel', 
					size: 16, 
					color: vars.color, 
					font: vars.font
				},
				on_click: def() [remove_object(me), fire_event(tmp.parent, 'join_game_user_cancel')],
			}, {
				type: 'button', 
				id: 'create_button',
				padding: [25, 10],
				align_h: 'right',
				xy: [level_width, level_height-50],
				enabled: true,
				label: {
					type: 'label', 
					text: 'Join', 
					size: 16, 
					color: vars.color, 
					font: vars.font
				},
				on_click: def() [if(tmp.parent, fire_event(tmp.parent, 'do_join_game', {params:{selected_deck: tmp.selected_deck}})), remove_object(me)],
			}],		
		})), set(deck_grid_widget.x, level_width/4)] where calc_w = if(level_width > 750, 750, level_width), deck_grid_widget = make_deck_grid",
	},
	
	animation: {
		id: "normal",
		image: "effects/particles.png",
		x: 86,
		y: 73,
		w: 28,
		h: 28,
		collide: [0,0,28,28],
		frames: 1,
		duration: 1000,
	},
	
	on_spawned: "[
		set(x, 0), set(y, 0),
		set(tmp.parent, spawner),
		if(user_decks, [set(tmp.user_decks, user_decks), set(tmp.deck_list, keys(user_decks)), set(tmp.selected_deck, keys(user_decks)[0])]),
		fire_event('redraw_interface'),
	] where user_decks = get_document('user-decks.cfg',['null_on_failure','user_preferences_dir'])",

	on_redraw_interface: "create_selector_dialog",
	
	editor_info: {
		category: "controllers",
		var: [
			{
				name: "x_bound",
				type: "x",
				value: "x-100",
			},
			{
				name: "x2_bound",
				type: "x",
				value: "x+150",
			},
			{
				name: "y_bound",
				type: "y",
				value: "y-100",
			},
			{
				name: "y2_bound",
				type: "y",
				value: "y+150",
			},
		],
	},
}