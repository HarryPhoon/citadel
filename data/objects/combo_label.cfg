{
	id: "combo_label",

	is_strict: true,

	properties: {
		_font: { type: "string", init: "lib.font.regular_font" },
		_font_size: { default: 36 },

		_text: { type: "string" },

		_render_key: "[_font, _font_size, bolded, _text]",

		_halign: { type: "string", default: "left" },

		mouseover: { default: false },
		selected: { default: false, set: "if(value != _data, [set(_data, value), fire_event('create')])" },

		bolded: "bool :: grouping != null and (mouseover or selected)",

		grouping: { type: "string|null" },
		index: { type: "int" },

		text_area: "{width: round_to_even(extents.width + 10), height: round_to_even(extents.height + 6)}
		  where extents = canvas().text_extents(_font, _font_size, _text)",

		click_handler: { type: "function(obj combo_label) ->commands" },

		render_label: "def() ->commands
		[
		set(animation, {
			id: 'fbo',
			image: 'fbo',
			x: 0, y: 0, w: area.width, h: area.height,
			blend: ['one', 'one_minus_src_alpha'],
			scale: 1, frames: 1,
			force_no_alpha: true,
			fbo: query_cache(global_cache(32), _render_key, c.render(area.width, area.height,
				fold(map(if(bolded, [[0,0],[-1,0],[1,0],[0,1],[0,-1]], [[0,0]]),
				[
					c.save(),
					c.translate(value[0], area.height + value[1] - 2),
					c.set_font(_font),
					c.set_font_size(_font_size),
					c.text_path(_text),
					c.set_source_rgba(1, 1, 1, 1),
					c.fill(),
					c.restore(),
				]), a+b)
			)),
		} where c = canvas()),
		] where area = text_area",
	},

	on_click: "[
		debug('clicked'),
		swallow_mouse_event(),
		click_handler(me),
	]",

	on_mouse_enter: "[set(mouseover, true), fire_event('create')]",

	on_mouse_leave: "[set(mouseover, false), fire_event('create')]",

	on_create: "[
		render_label(),

		if(_halign = 'left',
			set(x, x),
		   _halign = 'right',
			set(x2, x2),
			set(mid_x, mid_x)
		),
		set(y, y),
	]",

	on_type_updated: "render_label()",
}
