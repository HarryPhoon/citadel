{
	id: "scrolling_text",
	is_strict: true,

	properties: {
		text: { type: "string" },
		width: { type: "int" },
		height: { type: "int" },
		font_size: { type: "int" },
		border_width: { type: "int" },

		fragments: { type: "[cairo_text_fragment]", default: [] },
		starting_fragment: { type: "int", default: 0 },
		active_fragments: "[cairo_text_fragment] :: fragments[starting_fragment:]",

		displayed_fragments: "

		if(n = -1, frags, frags[:n])

		where n = index(frags, find(frags, value.y + value.height - frags[0].y > height - border_width*2))
		where frags = active_fragments
		",

		recalculate_text: "def() ->commands
			set(fragments, canvas().markup_text(sprintf(q(<font size='%d'>%s</font>), font_size, text), { scale: lib.gui.dpy(1.0), width: width - border_width*2 }))
		",

		num_chars: "int :: sum(map(displayed_fragments, size(value.text)))",
		visible_char_index: { type: "int", default: 0, change: "render()" },

		render: "def() ->commands
		set(animation, {
			id: 'fbo',
			image: 'fbo',
			x: 0, y: 0, w: width, h: height,
			scale: 1, frames: 1,
			fbo: c.render(width, height, [
				c.translate(border_width, border_width),

				map(frags, if(visible_char_index > starting_index, [
					c.save(),
					c.translate(0, -frags[0].y),
					c.set_source_rgba(1,1,1,1),
					value.get_slice(0, num_chars).path,
					c.fill(),
					c.restore(),
				] where num_chars = min(size(value.text), visible_char_index - starting_index)
				)
				where starting_index = sum(map(frags[:index], size(value.text)))
				)
				where frags = displayed_fragments,
			])

			where c = canvas(),
		})
		",

		process_arrow: "def() ->commands
		if(_arrow = null and needs_arrow, create_arrow(),
		   _arrow != null and needs_arrow = false, remove_object(_arrow); set(_arrow, null))
		",

		needs_arrow: "bool :: visible_char_index >= num_chars and back(displayed_fragments) != back(fragments)",

		_arrow: { type: "null|obj scrolling_text.arrow" },

		create_arrow: "def() ->commands [
			remove_object(_arrow),

			spawn('scrolling_text.arrow', {
				x2: x2,
				y2: y2,
				width: lib.gui.py(20),
				height: lib.gui.py(12),
				zorder: zorder+1,
			}, [
				set(_arrow, child),
			])
		]
		",

		button_pressed: "bool :: find(level.player.ctrl_keys, value not in level.player.ctrl_prev_keys) != null",
	},

	events: {
		create: "
			recalculate_text();
			render()
		",

		process: "[
			process_arrow(),

			if(visible_char_index < num_chars, add(visible_char_index, 1)),

			if(button_pressed,
				if(visible_char_index < num_chars,
				   set(visible_char_index, num_chars),
				   back(displayed_fragments) != back(fragments),
				   [
				   	   add(starting_fragment, size(displayed_fragments)),
					   set(visible_char_index, 0),
				   ]
				)
			),
		]",

		being_removed: "remove_object(_arrow)",
	},

	object_type: [{
		id: 'arrow',
		is_strict: true,

		timer_frequency: 30,

		properties: {
			width: { type: "int" },
			height: { type: "int" },

			render: "def() ->commands
			set(animation, {
				id: 'fbo',
				image: 'fbo',
				x: 0, y: 0, w: width, h: height,
				scale: 1, frames: 1,
				fbo: c.render(width, height, [
					c.set_source_rgba(1,1,1,1),
					c.move_to(0,0),
					c.line_to(width,0),
					c.line_to(width/2,height),
					c.line_to(0,0),
					c.fill(),
				])
			})
			where c = canvas()
			",
		},

		events: {
			create: "render()",
			timer: "set(alpha, if(alpha = 0, 255, 0))",
		},
	}],
}
