{
	id: "scrolling_text",
	is_strict: true,

	properties: {
		text: { type: "string" },
		width: { type: "int", get: "int :: round_to_even(_data)" },
		height: { type: "int" },
		font_size: { type: "int" },
		border_width: { type: "int" },

		//The color of the text.
		text_color: { type: "[decimal,decimal,decimal,decimal]", default: [1.0,1.0,1.0,1.0] },

		//The color of text which is a special lore link
		lore_text_color: { type: "[decimal,decimal,decimal,decimal]", default: [1.0,0.7,1.0,1.0] },

		highlight_lore_text_color: { type: "[decimal,decimal,decimal,decimal]", default: [1.0,0.6,0.8,1.0] },

		//The color the text appears when entering. It fades to the text color.
		//Note the alpha value can be set to 0 to make the text fade in.
		entry_color: { type: "[decimal,decimal,decimal,decimal]", default: [1.0,1.0,0.0,1.0] },

		//How long the fade should take when text appears (in frames)
		animation_effect_time: "int :: 10",

		fragment_color: "def(cairo_text_fragment fragment) ->[decimal,decimal,decimal,decimal]
		if(find(fragment.tag, regex_match(value, '.*:lore:.*')) != null, if(_mouseover_fragment = fragment, highlight_lore_text_color, lore_text_color), text_color)
		",

		//This is the code that controls any effects to show on a character when it first appears.
		//We can apply any cairo transformations we want. ratio will be 0.0 when the character first appears and 1.0
		//when the character is fully displayed.
		animate_char_entry: "def(cairo_callable c, cairo_text_fragment fragment, decimal ratio) ->[cairo_op]
		[
			c.set_source_color([decimal,decimal,decimal,decimal]<- map(fragment_color(fragment), mix(entry_color[index], value, ratio)))
		]
		",

		//how many frames for each new character we show. Increasing this number makes the text scrolling slower, decreasing
		//it makes it faster.
		frames_per_character: 2,

		fragments: { type: "[cairo_text_fragment]", default: [] },
		starting_fragment: { type: "int", default: 0 },
		active_fragments: "[cairo_text_fragment] :: fragments[starting_fragment:]",

		displayed_fragments: "

		if(n = -1, frags, frags[:n])

		where n = index(frags, find(frags, value.y + value.height - frags[0].y > height - border_width*2))
		where frags = active_fragments
		",

		recalculate_text: "def() ->commands
			set(fragments, canvas().markup_text(sprintf(q(<font size='%d'>%s</font>), font_size, text), { scale: lib.gui.dpy(1.0), width: width - border_width*2 }))
		",

		num_chars: "int :: sum(map(displayed_fragments, value.num_chars))",
		visible_char_index: { type: "int", default: 0, change: "render()" },

		_translate_y: { type: "int", default: 0 },

		render: "def() ->commands
		set(animation, {
			id: 'fbo',
			image: 'fbo',
			x: 0, y: 0, w: width, h: height,
			scale: 1, frames: 1,
			force_no_alpha: true,
			fbo: c.render(width, height, [
				c.translate(border_width, border_width - _translate_y),

				[
				if(frags, c.translate(0, -frags[0].y)),
				map(frags, if(visible_char_index > starting_index, [

				c.set_source_color(fragment_color(value)),

				if(starting_index + value.num_chars > visible_char_index - animation_effect_time,
				map(range(num_chars),
				[
					c.save(),
					c.translate(slice.translate_x, slice.translate_y),
					if(ratio < 1.0,
						animate_char_entry(c, slice, ratio),
					),
					slice.path_no_translate,
					c.fill(),
					c.restore(),
				]
				where ratio = decimal(visible_char_index - (starting_index + index))/decimal(animation_effect_time)
				where slice = context.value.get_slice(index, index+1)),
				
				[
					c.save(),
					value.get_slice(0, num_chars).path,
					c.fill(),
					c.restore(),
				])
				 where num_chars = min(value.num_chars, visible_char_index - starting_index)
				])
				where starting_index = sum(map(frags[:index], value.num_chars))
				)
				]
				where frags = displayed_fragments,
			])

			where c = canvas(),
		})
		",

		process_arrow: "def() ->commands
		if(_arrow = null and needs_arrow, create_arrow(),
		   _arrow != null and needs_arrow = false, remove_object(_arrow); set(_arrow, null))
		",

		needs_arrow: "bool :: visible_char_index >= num_chars + animation_effect_time and back(displayed_fragments) != back(fragments)",

		has_finished: "visible_char_index >= num_chars + animation_effect_time and back(displayed_fragments) = back(fragments)",

		_arrow: { type: "null|obj scrolling_text.arrow" },

		create_arrow: "def() ->commands [
			remove_object(_arrow),

			spawn('scrolling_text.arrow', {
				x2: x2,
				y2: y2,
				width: lib.gui.py(20),
				height: lib.gui.py(12),
				zorder: zorder+1,
			}, [
				set(_arrow, child),
			])
		]
		",

		_last_mouse_buttons: { type: "[string]", default: [] },

		button_pressed: "bool :: find(level.player.ctrl_keys, value not in level.player.ctrl_prev_keys) != null or find(level.player.ctrl_mice[0], value is string and value not in _last_mouse_buttons) != null",

		_tip: { type: "null|obj tip_dialog", change: "render()" },

		_mouseover_fragment: {
			type: "null|cairo_text_fragment",
			set: "if(value != _data, [
				remove_object(_tip),
				set(_tip, null),

				if(value != null,
					if(tip is string,
						spawn('tip_dialog', {
							x: fragment_pos.x + lib.gui.py(50),
							y2: fragment_pos.y - lib.gui.py(20),
							_title: value.text,
							zorder: zorder+1000,

							_width: lib.gui.py(400),
							_height: lib.gui.py(200),
							_has_close: false,

							_target_offset_x: -int(offset.x),
							_target_offset_y: -int(offset.y),

							_grow_window_height: true,

							_tip: {
								key: 'tip',
								text: tip,
								targets: [me],
							},

						}, [
							set(_tip, child),
						])
					)

					where offset = [mid_x - fragment_pos.x, mid_y - fragment_pos.y]
					where fragment_pos = [x + border_width + value.x + value.width/2, int(-displayed_fragments[0].y) + y + border_width + value.y + value.height/2]
					where tip = if(tip_text is [string], lib.json.get_document_map('data/lore-glossary.cfg')[tip_text[0]])
					where tip_text = if(tip_info, regex_match(tip_info, 'obj:lore:(.*)'))
					where tip_info = find(value.tag, regex_match(value, 'obj:lore:.*'))
				),

				set(_data, value),
			])",
		},
	},

	events: {
		create: "
			recalculate_text();
			render()
		",

		process: "[
			process_arrow(),

			if(cycle%frames_per_character = 0 and visible_char_index < num_chars + animation_effect_time, add(visible_char_index, 1)),

			if(button_pressed,
				if(_translate_y != 0, null,
				   visible_char_index < num_chars + animation_effect_time,
				   set(visible_char_index, num_chars + animation_effect_time),
				   back(displayed_fragments) != back(fragments),

				   animate(me, {
					 _translate_y: height,
				   }, {
					 duration: 20,
					 on_process: ; render(),
				     on_complete: [
					   	   set(_translate_y, 0),
					   	   add(starting_fragment, size(displayed_fragments)),
						   set(visible_char_index, 0),
					   ];

					   if(active_fragments and regex_match(active_fragments[0].text, '\\s+'), add(starting_fragment, 1))
				   })
				)
			),

			set(_last_mouse_buttons, filter(level.player.ctrl_mice[0], value is string)),
		]",

		being_removed: "set(_mouseover_fragment, null); remove_object(_arrow)",

		mouse_leave: "set(_mouseover_fragment, null)",

		mouse_move: "
		set(_mouseover_fragment, fragment)

		where fragment = find(active_fragments,
			pos.x > value.x and pos.y > value.y and pos.x < value.x+value.width and pos.y < value.y+value.height
		)
		where pos = [raw_pos.x - x - border_width, displayed_fragments[0].y + raw_pos.y - y - border_width]
		where raw_pos = lib.gui.mouse_pos(level)",
	},

	//The cute little arrow object which flashes to show us we can press a key
	//It blinks every half second and is drawn as a simple triangle right now.
	object_type: [{
		id: 'arrow',
		is_strict: true,

		timer_frequency: 30,

		properties: {
			width: { type: "int" },
			height: { type: "int" },

			render: "def() ->commands
			set(animation, {
				id: 'fbo',
				image: 'fbo',
				x: 0, y: 0, w: width, h: height,
				scale: 1, frames: 1,
				fbo: c.render(width, height, [
					c.set_source_rgba(1,1,1,1),
					c.move_to(0,0),
					c.line_to(width,0),
					c.line_to(width/2,height),
					c.line_to(0,0),
					c.fill(),
				])
			})
			where c = canvas()
			",
		},

		events: {
			create: "render()",
			timer: "set(alpha, if(alpha = 0, 255, 0))",

		},
	}],
}
