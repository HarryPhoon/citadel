{
	id: "library_book_view_controller",
	prototype: ["library_view_controller"],

	properties: {
		_num_rows: "int :: 3",
		_num_cols: "int :: 3",
		_max_per_page: "int :: _num_rows*_num_cols",

		_pages: { type: "[CardGroup]", default: [] },
		_current_page: { type: "int", default: -1 },

		_divide_into_pages: "def([CardGroup] groups) ->[CardGroup]
		if(groups = [], [],
			if(first_page.entries, [first_page], []) + _divide_into_pages(new_groups)
			where new_groups = if(size(groups[0].entries) > _max_per_page,
			                      [{name: groups[0].name, icon: groups[0].icon, icon_color: groups[0].icon_color, entries: groups[0].entries[_max_per_page:]}], []) + groups[1:]
			where first_page = {name: groups[0].name, icon: groups[0].icon, icon_color: groups[0].icon_color, entries: groups[0].entries[:_max_per_page]}
		)
		",

		_cards_displayed: { type: "[obj card]", default: [] },

		_page_label: { type: "null|obj label" },

		_quantity_labels: { type: "[{label: obj label, card_name: string}]", default: [] },
		_buy_buttons: { type: "[{button: obj button_controller, card_name: string}]", default: [] },
		_gold_cost_labels: { type: "[{label: obj label, card_name: string}]", default: [] },

		_queued_goto_page: { type: "int|null" },
		_anim_ends_at: { type: "int|null" },

		_scroll_widget_pos: "int :: lib.citadel.py(110)",

		_school_name_label: { type: "obj label|null" },
		_school_icon: { type: "obj game_icon|null" },

		start_editing_deck: "def() ->commands
		if(_current_page >= 0 and _current_page < size(_pages), ; map(_pages[_current_page].entries, update_card_quantity(value.name)))
		",

		end_editing_deck: "def() ->commands
		if(_current_page >= 0 and _current_page < size(_pages), ; map(_pages[_current_page].entries, update_card_quantity(value.name)))
		",

		update_card_quantity: "def(string card_name) ->commands
		[
		if(entry and lb, lb.label.set_text(if(ncards = null, ['x' + str(entry.num_copies)], [str(ncards) + '/' + str(entry.num_copies)]) where ncards = controller.num_cards_in_deck(card_name)))
		]
			where lb = find(_quantity_labels, value.card_name = card_name)
			where entry = if(_current_page >= 0, find(_pages[_current_page].entries, value.name = card_name))
		",

		_goto_page: "def(int npage, bool animate_flip=true) ->commands
		execute(me,
			if(_anim_ends_at is int and _anim_ends_at > level.cycle, [
				set(_queued_goto_page, npage),
			], npage < size(_pages) and npage >= 0,
			[
				remove_object(_school_name_label),
				spawn('label', 0, 0, {
					mid_x: (gui_left_edge + view_right_edge)/2,
					mid_y: lib.citadel.py(30),
					_halign: 'center',
					_font_size: lib.citadel.py(32),
					_text: [_pages[npage].name],
				}, [
					set(_school_name_label, child),
				]),

				remove_object(_school_icon),
				if(_pages[npage].icon,
				[
					spawn('game_icon', 0, 0, {
						icon: string<- _pages[npage].icon,
						draw_color: [0.0,0.0,0.0,1.0],
						additional_icons: ['school-hex.svg'],
						additional_colors: [[decimal,decimal,decimal]<- _pages[npage].icon_color],
						size: lib.citadel.py(38),
						mid_x: (gui_left_edge + view_right_edge)/2 - lib.citadel.py(85),
						mid_y: lib.citadel.py(30),
					}, [
						set(_school_icon, child),
					]),
				]
				),

				set(_queued_goto_page, null),
				remove_object(_page_label),
				spawn('label', 0, 0, {
					mid_x: gui_left_edge + lib.citadel.py(628) + _scroll_widget_pos,
					mid_y: lib.citadel.py(872),
					_halign: 'center',
					_font_size: lib.citadel.py(16),
					_text: ['Page ' + str(npage+1) + '/' + str(size(_pages))],
				}, [
					set(_page_label, child)
				]),

				if(animate_flip, set(_anim_ends_at, level.cycle + 12)),

				set(_current_page, npage),

				if(animate_flip,
					map(_cards_displayed, animate(value, {
						x: value.x + lib.citadel.py(200)*if(_current_page > npage, 1, -1),
						alpha: 0,
					}, {
						duration: 10,
						on_complete: remove_object(value),
					})),

					map(_cards_displayed, remove_object(value))
				),

				map(_buy_buttons, remove_object(value.button)),
				set(_buy_buttons, []),

				map(_gold_cost_labels, remove_object(value.label)),
				set(_gold_cost_labels, []),

				map(_quantity_labels, remove_object(value.label)),
				set(_quantity_labels, []),

				map(cards, [
					set(value.x, gui_left_edge + lib.citadel.py(290)*(index%3)),
					set(value.y, lib.citadel.py(60) + lib.citadel.py(240)*(index/3)),
					set(value.clip_area, null),

					if(entry.num_copies = 0, set(value.image_grayscale, 1.0),
					   entry.num_copies > 0 and value.image_grayscale > 0.0,
					   animate(value, {
						image_grayscale: 0.0,
					   }, {
						duration: 10,
					   })
					),

					add_object(value),

					if(animate_flip,
					   [set(value.alpha, 0); animate(value, { alpha: 255 }, { duration: 10 })],
					   set(value.alpha, 255)
					),

					if(controller.showing_shop and entry.num_copies < 3, [
						if(controller.account_gold >= lib.citadel.card_gold_cost(entry.card),
						spawn('button_controller', {
							x: gui_left_edge + lib.citadel.py(290)*(index%3) + lib.citadel.py(240),
							y: lib.citadel.py(250) + lib.citadel.py(240)*(index/3) - lib.citadel.py(160),

							button_width: lib.citadel.py(40),
							button_height: lib.citadel.py(20),
							text: 'Buy',
							_font_size: lib.citadel.py(18),
							on_click: bind(controller.buy_card,value.card_type.name, lib.citadel.card_gold_cost(entry.card)),
						}, [
							add(_buy_buttons, [{button: child, card_name: value.card_type.name}]),
						])
						),

						spawn('label', 0, 0, {
							x2: gui_left_edge + lib.citadel.py(290)*(index%3) + lib.citadel.py(280),
							y: lib.citadel.py(220) + lib.citadel.py(240)*(index/3) - lib.citadel.py(170),
							_text: [str(lib.citadel.card_gold_cost(entry.card)) + ' gold'],
							_font_size: lib.citadel.py(16),
	
							zorder: -1,

							_color: if(controller.account_gold >= lib.citadel.card_gold_cost(entry.card), [1,1,1,1], [1,0,0,1]),
						}, [
							add(_gold_cost_labels, [{label: child, card_name: entry.name}]),
						]),
					]),

					spawn('label', 0, 0, {
						x2: gui_left_edge + lib.citadel.py(290)*(index%3) + lib.citadel.py(270),
						y: lib.citadel.py(220) + lib.citadel.py(240)*(index/3),
						_text: if(ncards = null, ['x' + str(entry.num_copies)], [str(ncards) + '/' + str(entry.num_copies)]) where ncards = controller.num_cards_in_deck(entry.name),
						_bg_color: [0.04,0.06,0.09,1.0],
						_font_size: lib.citadel.py(24),

						_pad_left: lib.citadel.py(24),
						_pad_right: lib.citadel.py(8),
						_pad_above: lib.citadel.py(6),
						zorder: -1,
					}, [
						add(_quantity_labels, [{label: child, card_name: entry.name}]),
					])

				]
				where entry = entries[index]),

				set(_cards_displayed, cards);
				controller.set_card_preloads(fold(map(_pages[npage+1:], map(value.entries, value.card)), a+b, []))
			]
				where cards = map(entries, controller.create_card(value.card))
				where entries = _pages[npage].entries
			)
		)
		",

		refresh_display: "def() ->commands
			_goto_page(_current_page, false)
		",

		_update_display: "def() ->commands
		[
			set(_pages, _divide_into_pages(_visible_cards));
			_goto_page(0, false)
		]",

		scroll_right: "def() ->commands _goto_page(_current_page+1)",
		scroll_left: "def() ->commands _goto_page(_current_page-1)",
	},

	on_process: "if(_queued_goto_page is int and (_anim_ends_at = null or level.cycle >= _anim_ends_at), _goto_page(_queued_goto_page))",

	on_create: "[
		spawn('game_icon', 0, 0, {
			icon: 'library-arrow.svg',
			size: lib.citadel.py(38),
			facing: -1,
			force_no_alpha: true,
			mid_x: gui_left_edge + lib.citadel.py(568) + _scroll_widget_pos,
			mid_y: lib.citadel.py(870),
			click_handler: def(obj game_icon icon) ->commands _goto_page(_current_page-1),
			mouse_enter_handler: def(obj game_icon icon) ->commands set(icon.brightness, 512),
			mouse_leave_handler: def(obj game_icon icon) ->commands set(icon.brightness, 255),
		}),
		spawn('game_icon', 0, 0, {
			icon: 'library-arrow.svg',
			size: lib.citadel.py(38),
			facing: 1,
			force_no_alpha: true,
			mid_x: gui_left_edge + lib.citadel.py(688) + _scroll_widget_pos,
			mid_y: lib.citadel.py(870),
			click_handler: def(obj game_icon icon) ->commands _goto_page(_current_page+1),
			mouse_enter_handler: def(obj game_icon icon) ->commands set(icon.brightness, 512),
			mouse_leave_handler: def(obj game_icon icon) ->commands set(icon.brightness, 255),
		}),
	]",

	on_being_removed: "[
		map(spawned_children, remove_object(value))
	]",

	on_type_updated: "fire_event('being_removed'); fire_event('create')",
}
