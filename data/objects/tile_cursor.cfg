{
	id: "tile_cursor",
	is_strict: true,

	properties: {
		tile: { type: "obj tile" },

		hex_height: { default: 100 },

		hex_size: "int :: int(lib.hex.width_from_height(hex_height))",

		hex_indent: "decimal :: 0.25",
		hex_indent_inverse: "decimal :: 0.75",

		border_size: "int :: 8",

		_mouseover: { default: false },

		render_cursor: "def(int w, int h) ->map {
			id: 'fbo',
			image: 'fbo',
			fbo: c.render(w + border_size*2, h + border_size*2, [
				c.translate(border_size, border_size),

				c.move_to(w*hex_indent, 0),
				c.line_to(w*hex_indent_inverse, 0),
				c.line_to(w, h*0.5),
				c.line_to(w*hex_indent_inverse, h),
				c.line_to(w*hex_indent, h),
				c.line_to(0, h*0.5),
				c.line_to(w*hex_indent, 0),
			] +

			if(tile.selectable,
			[
				c.set_line_width(if(_mouseover, 4, 2)),
				if(_mouseover, c.set_source_rgba(1, 1, 1, 1), c.set_source_rgba(1, 1, 1, 1)),
				c.stroke(),
			],
			[
				c.set_source_rgba(0, 0, 0, 0.5),
				c.fill(),
			])) where c = canvas(),

			x: 0, y: 0, w: w + border_size*2, h: h + border_size*2,
			scale: 1,
			frames: 1,
		}",
	},

	on_process: "[
	if(_mouseover != tile.mouseover, [
		set(_mouseover, tile.mouseover),
		fire_event('render'),
	]),

	if(tile.selectable, set(alpha, 196 + (63*wave(cycle*15))/1000)),
	]",

	on_render: "[
		set(animation, query_cache(global_cache(4), [hex_size, hex_height, tile.selectable], build_animation(render_cursor(round_to_even(hex_size), round_to_even(hex_height))))),
	]",

	on_create: "[
		set(zorder, tile.zorder + 10),
		fire_event('render'),
		set(mid_x, tile.mid_x),
		set(y, tile.y),
		set(alpha, 0),
		animate(me, {
			alpha: 255
		}, {
			duration: 20,
		}),
	]",
}
