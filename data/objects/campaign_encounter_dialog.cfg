{
    id: "campaign_encounter_dialog",
    is_strict: true,

    zorder: 500,

    properties: {
        controller: { type: "obj title_controller" },

        encounter: { type: "class campaign_encounter" },

        typed_text_index: { type: "int", default: 0, change: "render(lib.gui.py(900), lib.gui.py(500))" },

		format_text: "string ::
			fold(map(encounter.text, sprintf(q(%s%s<font%s>%s</font>),
			                                if(previous_char = ' ', '<nobr>', ''),
											if(value = ' ' or index = size(encounter.text)-1, '</nobr>', ''),
											if(index > typed_text_index, q( tag='hidden'), sprintf(q( info='%d'), typed_text_index - index)),
											value
									 )
			  where previous_char = if(index = 0, ' ', encounter.text[index-1])
			), a+b, '')
		",

		render: "def(int ww, int hh) ->commands
		set(animation, {
			id: 'fbo',
			image: 'fbo',
			x: 0, y: 0, w: ww, h: hh,
			scale: 1, frames: 1,
			fbo: c.render(ww, hh, [
				//here go the cairo instructions to render the dialog.
				c.save(),
				c.scale(decimal(ww)/decimal(image_dim.x)),
				c.translate(0, hh/4 - image_dim.y/2),
				c.paint_image('images/' + encounter.image),
				c.restore(),
				c.save(),
				c.translate(0, decimal((hh/3)*1.82)),
				c.scale(decimal(ww)/decimal(textbox_dim.x),decimal(hh/2.5)/decimal(textbox_dim.y)),
				c.paint_image('images/dialog-background.png'),
				c.restore(),
				c.translate(50, 0),
				map(fragments, if('hidden' not in value.tag,
				[
    				c.save(),

    				c.translate(0, (hh/3)*2),
    				c.set_source_rgba(1, 1, 1, 1),

					if(value.info is int and value.info < 10, [
						c.translate(value.x, value.y),
						c.translate(0, -(value.ascent+value.descent)*(1.0-r)*0.5),
						c.scale(mix(0.01, 1.0, r), mix(2.0, 1.0, r)),
						c.translate(-value.x, -value.y),
					] where r = value.info/10.0),

    				value.path,
    				c.fill(),
    				c.restore(),
				])
				)

					where fragments = dump(['FORMAT::', format_text], c.markup_text(sprintf(q(<font size='32'>%s</font>), format_text), { width: ww*0.9 }))
			])
			where textbox_dim = c.image_dim('images/dialog-background.png')
			where image_dim = c.image_dim('images/' + encounter.image)
			 where c = canvas(),
		})
		",
	},

	events: {
		create: "[
			render(lib.gui.py(900), lib.gui.py(500));
			set(mid_xy, [lib.gui.py(1000), lib.gui.py(350)]);
			animate(me, {
				typed_text_index: size(encounter.text)+10,
			}, {
				duration: size(encounter.text)*2,
			})
		]",

		type_updated: "render(lib.gui.py(900), lib.gui.py(500))",
	},
}

