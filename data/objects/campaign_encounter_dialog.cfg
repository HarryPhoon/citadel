{
    id: "campaign_encounter_dialog",
    is_strict: true,

    zorder: 500,

    properties: {
        controller: { type: "obj title_controller" },

        encounter: { type: "class campaign_encounter" },

        _buttons: { type: "[obj button_controller]", default: [] },

        _text: { type: "null|obj scrolling_text" },

         create_buttons: "def() ->commands
			map(encounter.options,
    		spawn('button_controller', {
        		zorder: zorder+2,
        		x: if(size(encounter.options) = 1, 920,
            		    size(encounter.options) = 2, 780 + index*270,
                		size(encounter.options) = 3, 700 + index*220,
                		size(encounter.options) = 4, 630 + index*200,
                		x //this should never happen but do it to stop an error from happening!
         					)asserting size(encounter.options) <= 4,
      			   y: 625,
        		 text: value,
        		 on_click: def() ->commands button_pressed(value),
}, [
    add(_buttons, [child])
]
))
    ",

        _have_created_buttons: { type: "bool", default: false },

		render: "def(int ww, int hh) ->commands
		set(animation, {
			id: 'fbo',
			image: 'fbo',
			x: 0, y: 0, w: ww, h: hh,
			scale: 1, frames: 1,
			fbo: c.render(ww, hh, [
				//here go the cairo instructions to render the dialog.
				c.save(),
				c.scale(decimal(ww)/decimal(image_dim.x)),
				c.translate(0, hh/4 - image_dim.y/2),
				c.paint_image('images/' + encounter.image),
				c.restore(),
				c.save(),
				c.translate(0, decimal((hh/3)*1.82)),
				c.scale(decimal(ww)/decimal(textbox_dim.x),decimal(hh/2.5)/decimal(textbox_dim.y)),
				c.paint_image('images/dialog-background.png'),
				c.restore(),
				c.translate(50, 0),
			])
			where textbox_dim = c.image_dim('images/dialog-background.png')
			where image_dim = c.image_dim('images/' + encounter.image)
			 where c = canvas(),
		})
		",
	},

	events: {
		create: "[
			render(lib.gui.py(900), lib.gui.py(500));
			set(mid_xy, [lib.gui.py(1000), lib.gui.py(350)]);
			spawn('scrolling_text', {
			zorder: zorder+1,
			x: 590,
			y: 420,
			width: 835,
			height: 160,
			font_size: 28,
			border_width: lib.gui.py(10),
				text: encounter.text,
	},[
    set(_text, child)
])
		]",

		button_pressed: "def(string option_name) ->commands
		encounter.choose_option(option_name);  //choose the option. The ; is very important here since it makes sure this is all done before continuing.
[
    set(_have_created_buttons, false),   //reset back to not having created buttons
    fire_event(me, 'being_removed'),     //manually make the 'being_removed' event happen. This will clear out all the buttons/the text/etc.
    fire_event(me, 'create'),                      //manually fire the create event which will rebuild everything as new.
]
",

		process: "if(_text != null and _text.has_finished and _have_created_buttons = false, [
    set(_have_created_buttons, true),
    create_buttons(),
])",

		being_removed: "[
    remove_object(_text),
   set(_text, null),
   map(_buttons, remove_object(value)),
   set(_buttons, []),
]"


	},
}
