{
    id: "campaign_encounter_dialog",
    is_strict: true,

    zorder: -100,

    properties: {
        controller: { type: "obj title_controller" },

        encounter: { type: "class campaign_encounter" },

        _buttons: { type: "[obj button_controller]", default: [] },

        _text: { type: "null|obj scrolling_text" },

        button_pressed: "def(string option_name) ->commands
		map(_tips, remove_object(value));
		set(_tips, []);
		encounter.choose_option(controller, option_name);  //choose the option. The ; is very important here since it makes sure this is all done before continuing.
[
    set(_have_created_buttons, false),   //reset back to not having created buttons
    clear_children(),
    if(encounter.finished, leave_encounter(),
	encounter.scenario,
	set(controller.return_from_game_override, me.return_from_game);
    controller.play_single_player_game(encounter.scenario),
    show(),
),
]
",
	
		return_from_game: "def(bool result, null|class game_state state)->commands
			map(_starting_objects, if(value not in level.chars, add_object(value)));
			set(encounter.scenario, null);
			add_object(me);
			clear_children();
			update_campaign_quest_progress(false);
			if(result, encounter.win_battle(controller), encounter.lose_battle(controller));
			show();
			create_widgets()
		",

		leave_encounter: "def() ->commands
		[
			lib.sound.play_sound(me, 'interface/leave-library'),
			controller.transition_screen(
			; [
				remove_object(me),
				remove_object(controller),
				add_object(controller);
				controller.show_ui()
			],
			false)
		]
		",


         create_buttons: "def() ->commands
			map(encounter.options,
    		spawn('button_controller', {
        		zorder: zorder+2,
        		x: if(size(encounter.options) = 1, 920,
            		    size(encounter.options) = 2, 780 + index*270,
                		size(encounter.options) = 3, 700 + index*220,
                		size(encounter.options) = 4, 630 + index*200,
                		x //this should never happen but do it to stop an error from happening!
         					)asserting size(encounter.options) <= 4,
      			   y: 625,
        		 text: value,
        		 on_click: def() ->commands button_pressed(value),
}, [
    add(_buttons, [child])
]
))
    ",

        _have_created_buttons: { type: "bool", default: false },

		render: "def(int ww, int hh) ->commands
		set(animation, {
			id: 'fbo',
			image: 'fbo',
			x: 0, y: 0, w: ww, h: hh,
			scale: 1, frames: 1,
			fbo: c.render(ww, hh, [
				//here go the cairo instructions to render the dialog.
				c.save(),
				c.scale(decimal(ww)/decimal(image_dim.x)),
				c.translate(0, hh/4 - image_dim.y/2),
				c.paint_image('images/' + encounter.image),
				c.restore(),
				c.save(),
				c.translate(0, decimal((hh/3)*1.82)),
				c.scale(decimal(ww)/decimal(textbox_dim.x),decimal(hh/2.5)/decimal(textbox_dim.y)),
				c.paint_image('images/dialog-background.png'),
				c.restore(),
				c.translate(50, 0),
			])
			where textbox_dim = c.image_dim('images/dialog-background.png')
			where image_dim = c.image_dim('images/' + encounter.image)
			 where c = canvas(),
		})
		",

		show: "def() ->commands
		[
			render(lib.gui.py(900), lib.gui.py(500));
			set(mid_xy, [lib.gui.py(1000), lib.gui.py(350)]);
			spawn('scrolling_text', {
				zorder: zorder+1,
				x: 590,
				y: 420,
				width: 835,
				height: 160,
				font_size: 28,
				border_width: lib.gui.py(10),
				text: encounter.text,
			}, [
				set(_text, child),
			])

		]
		",

		clear_children: "def() ->commands [
			remove_object(_text),
			set(_text, null),
			map(_buttons, remove_object(value)),
			set(_buttons, []),
		]
		",

		create_widgets: "def() ->commands [
			remove_widgets(),

			spawn('choose_deck_controller', { 
				title_controller: controller,
				current_controller: me,
				_preview_x: 0,
				_preview_y: 0,
				_collapsed: true,

				x: lib.gui.py(500),
				y: lib.gui.py(200),

				_show_vs: false,
			}, [
				add(_widgets, [child]),
			])
		]",

		remove_widgets: "def() ->commands [
			map(_widgets, remove_object(value)),
			set(_widgets, []),
		]
		",

		_widgets: { type: "[custom_obj]", default: [] },

		_quest_display: { type: "[obj campaign_quest_display]", default: [] },

		_tips: { type: "[obj tip_dialog]", default: [] },

		update_campaign_quest_progress: "def(bool show_new=true) ->commands
		[
			map(_quest_display, remove_object(value)),
			set(_quest_display, []),

			map(lib.citadel.campaign_quest_progress,
			[
				set(quest.progress, progress);

				if(existing, [
					animate(existing, {
						y: lib.gui.py(400 + index*50),
					}, {
						duration: 20,
					})
				], [
					spawn('campaign_quest_display', {
						x: lib.gui.py(8),
						y: lib.gui.py(400 + index*50),
						quest: quest,
						alpha: if(show_new, 0, 255),
					}, [
						add(_quest_display, [child]),

						if(show_new, [
							animate(child, {
								alpha: 255,
							}, {
								duration: 10,
							}),

							spawn('tip_dialog', {
								zorder: 25000,
								_width: lib.gui.py(260),
								_height: lib.gui.py(160),
								x: child.x + lib.gui.py(300),
								y: child.y - lib.gui.py(100),
								_title: 'Quest Unlocked',
								_tip: {
									key: 'campaign_quest_tip_temporary',
									text: sprintf(q(You have unlocked <i>%s</i>!), quest.display_name),
									targets: [child],
								},
							}, [
								add(_tips, [child])
							])
						])
					]),
				])
			]
			where existing = find(level.chars, value is obj campaign_quest_display and value.quest = quest)
			where progress = value
			where quest = lib.citadel.get_campaign_quest(key))
		];

		if(_progressing_quest != null, progress_campaign_quest(_progressing_quest, _progressing_quest_amount))
		",

		_progressing_quest: { type: "null|string" },
		_progressing_quest_amount: { type: "int", default: 0 },

		progress_campaign_quest: "def(string quest_id, int amount) ->commands
		if(quest_display = null, [
			set(_progressing_quest, quest_id),
			set(_progressing_quest_amount, amount),
		], [
			set(_progressing_quest, null),

			set(quest_display.quest_progress_anim, decimal(final_amount - amount));
			animate(quest_display, {
				quest_progress_anim: decimal(final_amount),
			}, {
				duration: max(amount, 20),
			})
		])
		
		where quest_display = find(level.chars, value is obj campaign_quest_display and value.quest.id = quest_id)
		where final_amount = (lib.citadel.campaign_quest_progress[quest_id] or 0)",

		complete_campaign_quest: "def(string quest_id) ->commands

		if(quest_display != null, [
			animate(quest_display, {
				alpha: 0,
			}, {
				duration: 20,
				on_complete: remove_object(quest_display),
			})
		])
			
		where quest_display = find(level.chars, value is obj campaign_quest_display and value.quest.id = quest_id);

		update_campaign_quest_progress(false)
		",

		_starting_objects: { type: "[custom_obj]", default: [] },
	},

	events: {
		create: "[
			set(_starting_objects, filter(level.chars, value != me)),

			lib.campaign_generator.record_enter_encounter(encounter),
			show(),
			create_widgets(),
			update_campaign_quest_progress(false)
		]",


		process: "if(_text != null and _text.has_finished and _have_created_buttons = false, [
			set(_have_created_buttons, true),
			create_buttons(),
		])",

		being_removed: "[clear_children(), remove_widgets()]",


	},
}
