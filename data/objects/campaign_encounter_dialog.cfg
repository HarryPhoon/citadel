{
    id: "campaign_encounter_dialog",
    is_strict: true,

    zorder: 500,

    properties: {
        controller: { type: "obj title_controller" },

        encounter: { type: "class campaign_encounter" },

        typed_text_index: { type: "int", default: 50, change: "render(lib.gui.py(900), lib.gui.py(500))" },

        shown_encounter_text: "string :: encounter.text[:typed_text_index]",
	hidden_encounter_text: "string :: encounter.text[typed_text_index:]",

		render: "def(int ww, int hh) ->commands
		set(animation, {
			id: 'fbo',
			image: 'fbo',
			x: 0, y: 0, w: ww, h: hh,
			scale: 1, frames: 1,
			fbo: c.render(ww, hh, [
				//here go the cairo instructions to render the dialog.
				c.save(),
				c.scale(decimal(ww)/decimal(image_dim.x)),
				c.translate(0, hh/4 - image_dim.y/2),
				c.paint_image('images/' + encounter.image),
				c.restore(),
				c.save(),
				c.translate(0, decimal((hh/3)*1.82)),
				c.scale(decimal(ww)/decimal(textbox_dim.x),decimal(hh/2.5)/decimal(textbox_dim.y)),
				c.paint_image('images/dialog-background.png'),
				c.restore(),
				c.translate(50, 0),
				map(fragments, if(percent_shown > begin_percent, //only draw if at least part of this fragment is visible
				[
    				c.save(),
    				c.translate(0, (hh/3)*2),
    				c.set_source_rgba(1, 1, 1, 1),
					if(percent_shown < end_percent,
					//this means only SOME of this fragment should show, so we want to clip the rest.
					[
						//use the ratio to make a rectangle which contains the area we want to draw.
						//Everything else will be clipped out.
						c.rectangle(value.x, value.y, value.width*ratio, value.height),
						c.clip(),
					]
						//this is the percentage of this fragment we should draw
						where ratio = (percent_shown - begin_percent)/(end_percent - begin_percent)
					),
    				value.path,
    				c.fill(),
    				c.restore(),
				])
					//Of all the text being drawn, this tells us the begin/end percent of the text
					//that this fragment represents. e.g. 0.3/0.7 would mean that this fragment
					//represents the text from 30-70% of the total.
					where end_percent = min(1.0, begin_percent + value.width/total_width)
					where begin_percent = sum(map(fragments[:index], value.width))/total_width
				)
					//what percent of the text should we display?
					where percent_shown = decimal(typed_text_index)/size(encounter.text)

					//the total width, in pixels of the text
					where total_width = sum(map(fragments, value.width))
					where fragments = c.markup_text(sprintf(q(<font size='32'>%s</font>),encounter.text), { width: ww*0.9 }) 
			])
			where textbox_dim = c.image_dim('images/dialog-background.png')
			where image_dim = c.image_dim('images/' + encounter.image)
			 where c = canvas(),
		})
		",
	},

	events: {
		create: "[
			render(lib.gui.py(900), lib.gui.py(500));
			set(mid_xy, [lib.gui.py(1000), lib.gui.py(350)])
		]",
	},
}

