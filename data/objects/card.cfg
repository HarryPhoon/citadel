{
	is_strict: true,
	"animation": [

		{
			"id": "main",
			"image": "card-silver.png",
			"rect": [0,0,145,203],
			scale: 1
		},

		{
			"id": "big",
			"image": "card-silver.png",
			"rect": [0,0,145,203],
			scale: 1
		},

		{
			"id": "back",
			"image": "card-back.png",
			"rect": [0,0,147,261],
			scale: 1
		},


	],
	"id": "card",

	always_active: true,

	on_mouse_enter: "if(in_victory and find(animated_movements, value = 'victory_card_move') = null, [
		animate(me, {
			mid_x: mid_x,
			mid_y: (mid_y + level.dimensions[3]/2)/2,
			card_size: card_size*2,
			zorder: zorder+10,
		}, {
			duration: 10,
			name: 'card_move',
			replace_existing: true,
		}),

		set(_starting_state, {mid_x: mid_x, mid_y: mid_y, card_size: card_size, zorder: zorder})
	])",

	on_mouse_leave: "if(in_victory and _starting_state != null, [
		animate(me, {
			mid_x: _starting_state.mid_x,
			mid_y: _starting_state.mid_y,
			card_size: _starting_state.card_size,
			zorder: _starting_state.zorder,
		}, {
			duration: 10,
			name: 'victory_card_move',
			replace_existing: true,
		}),

		set(_starting_state, null)
	])",

	on_drag_start: "[
		debug('start drag...'),
		swallow_mouse_event(),
		if(allow_drag, set(drag_pos, [mouse_x, mouse_y])),
		controller.mouse_drag_card_start(me),
	]
	 where mouse_x = int<- arg.mouse_x
	 where mouse_y = int<- arg.mouse_y",

	on_drag: "[
	  swallow_mouse_event(),
	  if(drag_pos and allow_drag, [
		set(drag_pos, [mouse_x, mouse_y]),
		add(x, dx),
		add(y, dy),
		map(draw_primitives, set(value.points,
		       [[points[0][0] + dx, points[0][1] + dy]] +
			   points[1:] where points = [[int]]<- value.points)),

		controller.mouse_drag_card(me),
	] where dx = mouse_x - drag_pos[0]
	  where dy = mouse_y - drag_pos[1])
	]
	  where mouse_x = int<- arg.mouse_x
	  where mouse_y = int<- arg.mouse_y",

	on_drag_end: "[
	  set(drag_pos, null),
	  controller.mouse_drag_card_end(me),
	]",

	on_click: "if(controller.paused = false or is_choice, [
		debug('click card: ' + hand_index),
		swallow_mouse_event(),
		if(is_choice,
	       controller.option_clicked(choice_value),
	[
	 switch(mouse_button,
	  1, controller.card_clicked(me),
	  3, controller.card_right_clicked(me))
	])
	]) where mouse_button = int<- arg.mouse_button",

	on_animate_draw: "if(hand_index != null, animate_draw(hand_index*10))",

	on_type_updated: "if(not show_back, fire_event('render'))",

	on_process: "[
	  fire_event('check_needs_render'),
	  set(brightness, if(highlight and level.cycle%50 < 25, 512, 255)),

	 ]",
	
	on_check_needs_render: "if(card_needs_rerender, fire_event('render'))",

	properties: {

		_card_tips: { type: "[obj tip_dialog]", default: [] },

		_starting_state: { type: "null|{mid_x: int, mid_y: int, card_size: decimal, zorder: int}" },


		show_card_tips: "def() ->commands execute(me, [
			clear_card_tips(),

			map([{title: string, text: string }] :: card_type.rules_tips,
				spawn('tip_dialog', positions[index][0], positions[index][1], {
					zorder: zorder+1,
					_tip: {
						key: 'tip',
						text: info.text,
						targets: [me],
					},
					_title: info.title,
					_has_close: false,
					_width: 220,
					_height: 120,
				}, [
					add(me._card_tips, [child]),
				])
				where info = {title: string, text: string} <- value
			)
		]) where positions = [
			[x2 + 180, y + 60],
			[x2 + 180, mid_y],
			[x2 + 180, y2 - 60],
			[x - 180, y + 60],
			[x - 180, mid_y],
			[x - 180, y2 - 60],
		]",

		clear_card_tips: "def() ->commands [
			map(_card_tips, remove_object(value)),
			set(me._card_tips, []),
		]",

		is_burning: { type: "bool", default: false, set: "if(_data != value, [set(me._data, value), fire_event('check_needs_render')])" },

		highlight: { default: false },

		play_sound: "def(string|null fname) ->commands
			if(fname != null, sound(fname, lib.citadel.sound_volume(fname)))",

		//State to let us know if anything about the way the card would be
		//drawn has changed and the card needs re-rendering.
		_calculate_render_key: "{resources: int, card_size: decimal, is_burning: bool} :: {resources: _actual_cost, card_size: card_size, is_burning: is_burning}",
		_last_render_key: { type: "{resources: int, card_size: decimal, is_burning: bool}|null" },
		card_needs_rerender: "show_back = false and _calculate_render_key != _last_render_key",

		show_back: { type: "bool", default: false },


		tooltips: { type: "[class tooltip_area]", default: [] },

		noise_texture: { type: "null|object" },

		stack_id: { type: "null|int" },
		stack_info: { type: "null|class message.play_card_base" },

		being_dragged: "bool :: drag_pos != null",
		drag_pos: { type: "null|Loc" },
		choice_value: { type: "null|int|string" },
		is_choice: { default: false },
		allow_drag: { default: false },

		in_victory: { default: false },
		in_hand: { default: false },
		in_graveyard: { default: false },
		in_opponent_hand: { default: false, set: "[set(_data, value), set(animation, 'back')]" },
		hand_index: { type: "null|int" },

		controller: { type: "obj citadel_controller_base" },

		player: { type: "null|class player" },

		clear_widget_tooltips: "def() -> commands set(tooltips, [])",

		add_widget_tooltip: "def(widget w, int x, int y) -> commands [
			if(w.tooltip != null, add(tooltips, [construct('tooltip_area', { area: map([(int<- x) + (int<- (widget<- w).x), y + w.y, w.w, w.h], int(value*size_ratio)), tooltip: w.tooltip})])),
			map(w.children, add_widget_tooltip(value, x + w.x, y + w.y)),
		] where size_ratio = card_size/2.0",

		create_tooltip_widget: "def(class tooltip_area tip) ->object
		widget(me, {
			type: 'dialog',
			id: 'ability_tooltip',
			alpha: 175,
			clear_backround_alpha: 120,
			padding: 0,
			frame_padding: [10,10],
			zorder: 2000,
			cursor:[10, 10],
			x: tip.area[0],
			y: tip.area[1] - 40,
			background_frame: 'empty_window',
			children: [
				{
					type: 'label',
					font: 'Ubuntu-L',
					alpha: 255,
					size: 16,
					color: 'light_gray',
					text: tip.tooltip,
				}
			],
		})",

		start_fizzle_animation: "def() ->commands
		[
			play_sound(card_type.sound_fizzle),
			set(shader.uniform_commands.fizzle_cycle, {value: 1, increment: true}) asserting shader
		]",

		start_resolve_animation: "def([custom_obj] targets) ->commands
		if(card_type.resolve_effect = 'fire',
		   start_fire_resolve(targets),
		
			execute(me, [
				play_sound(card_type.sound_resolve),
				schedule(5, [set(shader.uniform_commands.resolve_cycle, {value: 1, increment: true}), set(me.effects[1].enabled, false)]),
				schedule(5, [set(effects[0].uniform_commands.resolve_cycle, {value: 1, increment: true})]),
				set(me.effects[1].enabled, true),
				schedule(50, remove_object(me)),
			]) asserting shader
		)",

		start_fire_resolve: "def([custom_obj] targets) ->commands execute(me, [
			controller.reserve_card_resolve_time(170),
			controller.reserve_animation_time('card_fire_resolve', 50),
			spawn('card_particle_effect', 0, 0, { _card: me, zorder: zorder+10 }),
			map(range(101), schedule(value, [set(height_reduction_proportion, 1.0 - value/100.0), fire_event('render'), set(y, y)])),

			map(targets,
				spawn('fireball_effect', mid_x, mid_y, { zorder: zorder+10, _target: value })
				),
		])",

		show_halo: "def() ->commands if(not halo_shown, [
			set(me.effects[1].enabled, true),
			set(shader_enabled_at, cycle),
			set(me.halo_shown, true),
		])",
		hide_halo: "def() ->commands if(halo_shown, [
			set(me.effects[1].enabled, is_castable),
			set(me.halo_shown, false),
		])",

		halo_shown: { default: false, type: "bool" },

		shader_enabled_at: { default: -1 },

		is_castable: {
			type: "bool",
			default: false,
			set: "[
				set(_data, value),
				set(me.effects[1].enabled, value or halo_shown),
			]",
		},

		keep: { default: false },

		render_scale: { type: "int", default: 2, variable: true },
		card_size: { type: "decimal", default: 2.0, variable: true },


		destroy: "def() ->commands [remove_object(me)]",
		animate_draw: "def(int nstagger) ->commands execute(me, [
			set(me.x, -1000), //hack hack! Take it off screen until schedule starts
			set(me.y, -1000),
			schedule(nstagger, play_sound('interface/card-draw'+1d8+'.wav')),
			map(range(26), schedule(nstagger + value, [
				set(me.x, x + index*(nstagger/10 - 2)),
				set(me.y, y - index*10),
				set(me.alpha, min(255, value*20)),
			] where index = 25 - value)),
		])",

		animate_movement: "def({stagger: int|null, cycles: int|null, scale: [decimal,decimal]|null, mid_x: [int,int], mid_y: [int,int], rotate: [decimal,decimal]|null, at_end: commands|null} anim) ->commands [

			schedule(nstagger, animate(me, {
				mid_x: anim.mid_x[1],
				mid_y: anim.mid_y[1],
				scale: nscale[1],
				rotate: rotate[1],
			}, {
				duration: ncycles
			}))

			where cmd = 
			map(range(ncycles+1), schedule(value + nstagger, [
				set(me.mid_x, int(interp(anim.mid_x))),
				set(me.mid_y, int(interp(anim.mid_y))),
				set(me.scale, interp(nscale)),
				set(me.rotate, interp(nrotate)),
				if(index = ncycles, anim.at_end),
			]) where interp = def([decimal,decimal] a) ->decimal
			       a[0]*neg_ratio + a[1]*ratio
			    where neg_ratio = 1.0 - ratio
			    where ratio = decimal(index)/decimal(ncycles))
			
		] where ncycles = if(anim.cycles = null, 10, anim.cycles)
		  where nrotate = if(anim.rotate = null, [rotate,rotate], anim.rotate)
		  where nstagger = if(anim.stagger = null, 0, anim.stagger)
		  where nscale = if(anim.scale = null, [scale,scale], anim.scale)",
		
		animate_from: "def(obj card start, int ncycles) ->commands [
			set(scale, start.scale),
			set(mid_x, start.mid_x),
			set(mid_y, start.mid_y),
			set(rotate, start.rotate),
			animate(me, {scale: scale, mid_x: mid_x, mid_y: mid_y, rotate: me.rotate}, {duration: ncycles}),
			
		]",

		//card_type property which can be a card OR an activated_ability.
		card_type: {
		  type: "class card_base",
		  get: "_data", set: "execute(me, [

				set(_data, value), 
				fire_event('init')
			  ]) asserting value != null"
		},

		_has_dynamic_image: "bool :: card_type.animation_sequence != []",
		_dynamic_image: { type: "null|obj dynamic_card_image" },

		_actual_cost: "int :: card_type.cost + max(0, card_type.loyalty_cost - sum(map(card_type.school_list, if(player = null, card_type.loyalty_cost, player.resource_level[value]))))",

		render_size: "def(decimal size) ->[int,int] [int(size*0.8*209), int(size*0.8*373)]",

		_native_render_sizes: "[[int,int]] :: map(lib.citadel.native_card_sizes, render_size(value))",

		texture_width: { default: 128 },
		texture_height: { default: 128 },

		height_reduction_proportion: { type: "decimal", default: 1.0 },

		render_card: "def(int requested_width, int requested_height) ->map {
			id: 'fbo',
			image: 'fbo',
			force_no_alpha: true,
			fbo:  query_cache(global_cache(1024), [card_type.internal_id, w, h, _actual_cost, is_burning],
			 c.render(w+4, h+4, [

			  c.translate(2, 2),
			  c.rectangle(0, 0, w, h),
			  c.clip(),
			  c.new_path(),

			  c.set_font(lib.font.regular_font),

			  c.save(),

			  if(_has_dynamic_image = false, [

			  c.set_radial_pattern(100*scaling, 0*scaling, 120*scaling, 100*scaling, 300*scaling, 120*scaling, [
			  { offset: 0 } + card_type.background_color_top,
			  { offset: 1 } + card_type.background_color_bot,
			  ]),
			  c.rectangle(0, h*0.0, w, h*0.7),
			  c.fill(),
			  ]), //end _has_dynamic_image = false
			  
			  c.set_source_rgba(1, 1, 1, 1),
			  c.rectangle(0, h*0.7, w, h*0.3),
			  c.fill(),

			  c.set_source_rgba(0, 0, 0, 1),
			  c.set_font_size(12),
			  c.translate(0.04*w, 0.75*h),
			  //c.scale(scaling),
			  //c.scale(w/240.0),
			  c.show_rich_text_multiline(lib.citadel.process_markup(card_type.rules_text), 0.92*210.0, 0.3*h, {scaling: scaling, svg_scale: 0.025*h/512.0, svg_width: (10.0*h)/512.0}),
			  c.restore(),

			  ] +

			  if(card_type.flavor_text != null, [
				c.save(),
				c.new_path(),
				c.set_source_rgba(0, 0, 0, 1),
				c.set_font_size(10*scaling),
				c.set_font(lib.font.italic_font),
				c.translate(0.04*w, h - flavor_area.height),
				c.text_path(flavor),
				c.set_source_rgba(0, 0, 0, 1),
				c.fill(),
				c.restore(),
			  ] where flavor_area = c.text_extents(lib.font.italic_font, 10*scaling, flavor)
			    where flavor = c.parse_special_chars(card_type.flavor_text), [
			  ]) +

			  //the portrait
			  if(card_type.portrait != null and _has_dynamic_image = false,
			  if(dim[0] = 800, 
			  //new style portrait.
			  [
			  c.save(),
			  c.move_to(0, h*0.0),
			  c.line_to(w, h*0.0),
			  c.line_to(w, h*0.7),
			  c.line_to(0, h*0.7),
			  c.clip(),

			  c.new_path(),

			  c.translate(0, 0),
			  c.scale(decimal(w)/dim[0]),
			  c.paint_image('images/portraits/' + card_type.portrait),
			  c.restore(),
			  ],
					  
			  [
			  c.save(),
			  c.translate((w - (dim[0]*(h*0.7)/dim[1]))/2.0, h*0.05),
			  c.scale((h*0.65)/dim[1]),
			  c.paint_image('images/portraits/' + card_type.portrait),
			  c.restore(),

			  ]) where dim = c.image_dim('images/portraits/' + card_type.portrait), []) +

			  if(card_type.creature_object = null or card_type.creature_object.is_construct, [], [


				c.set_source_rgba(1, 1, 1, 1),
				c.set_line_width(h*0.002),
				map([[0.75 + 0.24*0.25, 0.62 + 0.04*0.5],
				     [0.75 + 0.24*0.75, 0.65 + 0.04*0.5]],
				[
					c.move_to(center_x - hex_width/2.0, center_y),
					c.line_to(center_x - (hex_width/2.0)*0.5, center_y - hex_height/2),
					c.line_to(center_x + (hex_width/2.0)*0.5, center_y - hex_height/2),
					c.line_to(center_x + hex_width/2.0, center_y),
					c.line_to(center_x + (hex_width/2.0)*0.5, center_y + hex_height/2),
					c.line_to(center_x - (hex_width/2.0)*0.5, center_y + hex_height/2),
					c.line_to(center_x - hex_width/2.0, center_y),

					c.set_line_width(h*0.002),

					c.stroke(),

				] where hex_height = hex_width*0.75
				  where hex_width = 0.07*h
				  where center_x = value[0]*w
				  where center_y = value[1]*h),
				


				c.save(),

				c.translate(w*0.760, h*0.610),
				c.set_font(lib.font.bold_font),
				c.set_font_size(9*scaling),
				c.text_path_in_bounds('atk', w*0.1, ['center']),
				c.fill(),

				c.translate(w*0.120, h*0.03),
				c.text_path_in_bounds('life', w*0.1, ['center']),
				c.fill(),

				c.restore(),

				c.save(),

				c.translate(w*0.756, h*0.655),
				c.set_font(lib.font.bold_font),
				c.set_font_size(18*scaling),
				c.text_path_in_bounds(str(card_type.creature_object.attack), w*0.1, ['center']),
				c.fill(),

				c.translate(w*0.120, h*0.032),
				c.text_path_in_bounds(str(card_type.creature_object.life), w*0.1, ['center']),
				c.fill(),

				c.restore(),
			  ]) +

			  //the title area.
			  [
			  
			  c.set_source_rgba(school_info.red, school_info.green, school_info.blue, 1.0),

			  c.rectangle(0, h*0.05, w, h*0.005),
			  c.fill(),

			  //Name of the card
			  c.save(),

			  c.translate(w*0.03, h*0.04),

			  c.set_source_rgba(1, 1, 1, 1),
			  c.set_font_size(16*scaling),
			  c.text_path_in_bounds(card_type.name, w*0.94, ['right']),
			  c.fill(),
			  c.close_path(),

			  c.restore(),

			  //Type of the card
			  c.save(),

			  c.set_source_rgba(1, 1, 1, 1),
			  c.translate(w*0.03, h*0.085),
			  c.set_font_size(14*scaling),
			  c.text_path_in_bounds(_type_text, w*0.94, ['right']),
			  c.fill(),

			  c.restore(),
				

			  ] +

			  [

			  c.set_source_rgba(1, 1, 1, 1),

			  c.set_font(lib.font.bold_font),

			  c.save(),
			  c.translate(0.77*w, 0.1*h),
			  c.scale(0.12*h/512.0),
			  c.draw_svg('images/icons/' + icon_name) where icon_name = lib.citadel.school_info[card_type.first_school].icon,

			  c.restore(),


			] +

			[
			  //The cost of the card.

			  c.save(),

			  c.set_source_rgba(1, 1, 1, 1),
			  c.set_font_size(36*scaling),
			  c.translate(if(_actual_cost >= 10, 0.78, 0.83)*w, 0.195*h),
			  c.text_path(str(_actual_cost)), 
			  c.fill(),

			  c.restore(),

			  if(_actual_cost > card_type.cost, [

			  c.save(),

			  c.set_source_rgba(1, 0, 0, 1),
			  c.set_line_width(1.0*scaling),
			  c.set_font_size(36*scaling),
			  c.translate(if(_actual_cost >= 10, 0.78, 0.83)*w, 0.195*h),
			  c.text_path(str(_actual_cost)), 
			  c.stroke(),

			  c.restore(),
			  ]),


			  map(range(card_type.loyalty_cost),
			  [
			  c.save(),
			  c.translate(0.88*w, (0.21 + 0.06*value)*h),
			  c.scale(0.06*h/512.0),

			  c.push_group(),
			  c.draw_svg('images/icons/' + icon_name) where icon_name = lib.citadel.school_info[card_type.first_school].icon,
			  c.pop_group_to_source(),
			  if(player != null and player.resource_level[card_type.first_school] > card_type.loyalty_cost - value - 1,

				c.paint_with_alpha(0.5),
			  
			    c.paint()),


			  c.restore(),
			  ]
			  )


			  ]

			  )) where scaling = h/373.0,
			x: 0, y: 0, w: w+4, h: int((h+4)*height_reduction_proportion),
			scale: requested_width/decimal(w),
			frames: 1,
		} 
		  where c = canvas()
		  where renderable_attr = _renderable_attributes()
		  where w = actual_size[0]
		  where h = actual_size[1]
		  where school_info = lib.citadel.school_info[card_type.first_school]
		  where actual_size = find_or_die(_native_render_sizes, value[0] >= requested_width and value[1] >= requested_height or index = size(_native_render_sizes)-1)",

		_renderable_attributes: "def() -> [{icon: string, scaling: decimal, text: string, value: int|null, center_x: decimal, center_y: decimal}]
		  map([{icon: string, scaling: decimal, text: string, value: int|null}] <- attributes, value + {
			center_x: if(index < 3, 0.825, 0.64),
			center_y: 0.725 + 0.097*(index%3),
		  })
			where attributes = if(cr = null, [],
			if(cr.range >= 1,
			[{
				text: 'RANGE',
				value: cr.range,
				icon: 'range.svg',
				scaling: 1.2,
			}], []) +
			if(cr.move > 1,
			[{
				text: 'MOVE',
				value: cr.move,
				icon: 'walking-boot.svg',
				scaling: 1.2,
			}], []) +
			if(cr.resistance != 0,
			[{
				text: 'ARMOR',
				value: cr.resistance,
				icon: 'resistance.svg',
				scaling: 1.2,
			}], []) +
		
		[{
			text: ability.text,
			icon: ability.icon,
			scaling: ability.scaling,
		  }
		  asserting ability != null
		  where ability = lib.citadel.ability_info[a] |
		  a <- cr.abilities, a in lib.citadel.ability_info
		])
		where cr = card_type.creature_object
		",

		_type_text: "string ::
		  if(card_type.creature_object != null,
			if(card_type.hero, 'Hero', card_type.creature_object.is_construct, 'Land', card_type.creature_object.is_building, 'Fortification', 'Creature') +
			if(tags, canvas().emdash + tags, '') +

			if(card_type.is_response, canvas().emdash + 'Response', '')
			  where tags = fold(card_type.creature_object.tags, a + ' ' + b, ''),
			if(card_type._class = 'card', 'Invocation', 'Ability') + if(card_type.is_response, canvas().emdash + 'Response', '')
		  )
		  ",

	},

	on_game_updated: "if(card_needs_rerender, fire_event('init'))",

	on_init: "[

		if(not show_back, fire_event('render'))
	]",

	on_draw: "if(attached_objects, [
		//set any dynamic image present
		fire_event(attached_objects[0], 'check_needs_render'),
		set(attached_objects[0].xy, xy),
		set(attached_objects[0].xy, xy),
		set(attached_objects[0].zorder, zorder-1)
	])",

	on_render: "[
		set(animation, tex),
		set(texture_width, int<- tex.w),
		set(texture_height, int<- tex.h),
		set(_last_render_key, _calculate_render_key),
	] where tex = render_card(render_size(card_size)[0], render_size(card_size)[1])",

	on_being_added: "[
		if(_has_dynamic_image and card_type.portrait != null, [
		   set(attached_objects, [image_obj]),
		   fire_event(image_obj, 'create'),
		  ] where image_obj =object('dynamic_card_image', 0, 0, {card: me})
		  ),
	]",

	/*
	on_being_removed: "[
	if(_dynamic_image != null, [
		remove_object(_dynamic_image),
		set(_dynamic_image, null),
	]),
	map(spawned_children, remove_object(value)),
	]",
	*/

	shader: {
		name: "card_render",
		vertex: "
        uniform mat4 u_anura_mvp_matrix;
        attribute vec4 a_anura_vertex;
        attribute vec2 a_anura_texcoord;
		uniform int resolve_cycle;
		uniform int fizzle_cycle;
        varying vec2 v_texcoord;
        void main()
        {
            v_texcoord = a_anura_texcoord;
            gl_Position = u_anura_mvp_matrix * a_anura_vertex;
			if(resolve_cycle > 0) {
				if(v_texcoord[0] > 0.05) {
					gl_Position[0] += float(resolve_cycle)/400.0;
				} else {
					gl_Position[0] -= float(resolve_cycle)/400.0;
				}

				if(v_texcoord[1] > 0.05) {
					gl_Position[1] -= float(resolve_cycle)/200.0;
				} else {
					gl_Position[1] += float(resolve_cycle)/200.0;
				}
			}
        }
		",

		fragment: "
        uniform sampler2D u_anura_tex_map;
        uniform sampler2D u_tex_noise;
		uniform vec4 u_color;
		varying vec2 v_texcoord;
		uniform int resolve_cycle;
		uniform int fizzle_cycle;
		uniform vec4 u_anura_sprite_area;
		uniform float u_texture_width;
		uniform float u_texture_height;
		uniform float u_sin_rotate;
		uniform float u_cos_rotate;
        void main()
        {
			float sprite_area_width = u_anura_sprite_area[2] - u_anura_sprite_area[0];
			float sprite_area_height = u_anura_sprite_area[3] - u_anura_sprite_area[1];
			vec4 col = u_color;
			if(resolve_cycle > 0) {
				col[3] = 1.0;
            	gl_FragColor = texture2D(u_anura_tex_map, v_texcoord)*col;
				if(resolve_cycle < 10) {
					float ratio = sin(float(resolve_cycle)*3.14/10.0)*0.5;
					gl_FragColor[0] += (1.0 - gl_FragColor[0])*ratio;
					gl_FragColor[1] += (1.0 - gl_FragColor[1])*ratio;
					gl_FragColor[2] += (1.0 - gl_FragColor[2])*ratio;
				}

				gl_FragColor[3] = 1.0 - float(resolve_cycle)/50.0;
			} else if(fizzle_cycle > 0) {
            	gl_FragColor = texture2D(u_anura_tex_map, v_texcoord) * col;

				if(float(fizzle_cycle)/25.0 > texture2D(u_tex_noise, v_texcoord)[0]) {
					gl_FragColor[3] = 0.0;
				}
			} else {
				gl_FragColor = vec4(0, 0, 0, 0);
				float count = 0.0;
				for(float ypos = -3.0; ypos <= 3.0; ypos += 1.0) {
					for(float xpos = -3.0; xpos <= 3.0; xpos += 1.0) {
						float x = xpos*u_cos_rotate - ypos*u_sin_rotate;
						float y = xpos*u_sin_rotate + ypos*u_cos_rotate;
            			gl_FragColor += texture2D(u_anura_tex_map, v_texcoord + vec2(0.16*x*sprite_area_width/u_texture_width, 0.16*y*sprite_area_height/u_texture_height)) * col;
						count += 1.0;
					}
				}

				gl_FragColor = gl_FragColor/count;
			//} else {
			//	gl_FragColor = texture2D(u_anura_tex_map, v_texcoord) * col;
			}
		}
		",

		create: "[
			set(uniform_commands.u_tex_noise, 1),
			set(uniform_commands.fizzle_cycle, 0),
			set(uniform_commands.resolve_cycle, 0),
			set(parent.noise_texture, load_texture('images/noise.png')),
		]",

		draw: "[
			set(uniform_commands.u_color, color),
			set(uniform_commands.u_texture_width, parent.texture_width),
			set(uniform_commands.u_texture_height, parent.texture_height),
			set(uniform_commands.u_sin_rotate, sin(-parent.rotate)),
			set(uniform_commands.u_cos_rotate, cos(-parent.rotate)),

			bind_texture(current_texture, 0),
			bind_texture(parent.noise_texture.id, 1),
		]",
	},

	effects: [
	
	{
		name: "card_shadow",
		create: "[
			set(uniform_commands.resolve_cycle, 0),
			set(enabled, true),
			set(attribute_commands.a_texcoord, float_array([
			   0.0, 0.0,
			   1.0, 0.0,
			   0.0, 1.0,
			   1.0, 1.0,
			], 2)),
		]",

		vertex: "
			uniform mat4 u_mvp_matrix;
			uniform vec4 u_parent_pos;
			attribute vec2 a_position;
			attribute vec2 a_texcoord;
			varying vec2 v_texcoord;
			void main()
			{
				v_texcoord = a_texcoord;
				vec4 v = vec4(a_position.x, a_position.y, 0.0, 1.0);
				gl_Position = u_mvp_matrix * v;
			}",

		fragment: "
			uniform int resolve_cycle;
			varying vec2 v_texcoord;
			void main()
			{
				gl_FragColor[0] = 0.0;
				gl_FragColor[1] = 0.0;
				gl_FragColor[2] = 0.0;
				gl_FragColor[3] = 0.5 - float(resolve_cycle)/100.0;

				float edge = 0.1;

				if(v_texcoord[0] < edge) {
					float ratio = v_texcoord[0]/edge;
					gl_FragColor[3] = gl_FragColor[3]*ratio;
				} else if(v_texcoord[0] > 1.0 - edge) {
					float ratio = (1.0 - v_texcoord[0])/edge;
					gl_FragColor[3] = gl_FragColor[3]*ratio;
				}

				if(v_texcoord[1] < edge) {
					float ratio = v_texcoord[1]/edge;
					gl_FragColor[3] = gl_FragColor[3]*ratio;
				} else if(v_texcoord[1] > 1.0 - edge) {
					float ratio = (1.0 - v_texcoord[1])/edge;
					gl_FragColor[3] = gl_FragColor[3]*ratio;
				}
			}
		",

		"uniforms": {
			"mvp_matrix": "u_mvp_matrix",
		},
		
		draw: "[
			set(attribute_commands.a_position, float_array(
			rotate_rect(parent.mid_x, parent.mid_y, parent.rotate,
			[
				x1, y1, x2, y1, x1, y2, x2, y2
			]), 2))
			   where x1 = parent.mid_x - img_w*0.4
			   where x2 = parent.mid_x + img_w*0.6
			   where y1 = parent.mid_y - img_h*0.4
			   where y2 = parent.mid_y + img_h*0.6
			   where img_w = parent.img_w*parent.scale
			   where img_h = parent.img_h*parent.scale,
			   draw_arrays('triangle_strip', 0, 4),
		]",
	},

	{
		name: "card_halo",
		create: "[
			set(enabled, false),
			set(attribute_commands.a_texcoord, float_array([
			   0.0, 0.0,
			   1.0, 0.0,
			   0.0, 1.0,
			   1.0, 1.0,
			], 2)),
		]",

		vertex: "
			uniform mat4 u_mvp_matrix;
			uniform vec4 u_parent_pos;
			attribute vec2 a_position;
			attribute vec2 a_texcoord;
			varying vec2 v_texcoord;
			void main()
			{
				v_texcoord = a_texcoord;
				vec4 v = vec4(a_position.x, a_position.y, 0.0, 1.0);
				gl_Position = u_mvp_matrix * v;
			}",

		fragment: "
			varying vec2 v_texcoord;
			uniform float u_edge;
			void main()
			{
				gl_FragColor[0] = 1.0;
				gl_FragColor[1] = 1.0;
				gl_FragColor[2] = 1.0;
				gl_FragColor[3] = 1.0;

				if(v_texcoord[0] < u_edge) {
					float ratio = v_texcoord[0]/u_edge;
					gl_FragColor[3] = gl_FragColor[3]*ratio;
				} else if(v_texcoord[0] > 1.0 - u_edge) {
					float ratio = (1.0 - v_texcoord[0])/u_edge;
					gl_FragColor[3] = gl_FragColor[3]*ratio;
				}

				if(v_texcoord[1] < u_edge) {
					float ratio = v_texcoord[1]/u_edge;
					gl_FragColor[3] = gl_FragColor[3]*ratio;
					} else if(v_texcoord[1] > 1.0 - u_edge) {
					float ratio = (1.0 - v_texcoord[1])/u_edge;
					gl_FragColor[3] = gl_FragColor[3]*ratio;
				}
			}
		",

		"uniforms": {
			"mvp_matrix": "u_mvp_matrix",
		},
		
		//TODO: There seems to be a one-frame lag between when the
		//a_position is updated and when it takes effect. Work out
		//why this is instead of using shader_enabled_at to delay
		//drawing by a frame.
		draw: "[
			set(uniform_commands.u_edge, if(parent.halo_shown, 0.1, 0.02)),

			set(attribute_commands.a_position, float_array(
			rotate_rect(
			parent.mid_x, parent.mid_y, parent.rotate,
			[
			   parent.x-border_size, parent.y-border_size,
			   parent.x2+border_size, parent.y-border_size,
			   parent.x-border_size, parent.y2+border_size,
			   parent.x2+border_size, parent.y2+border_size,
			]), 2)) where border_size = if(parent.halo_shown, parent.img_w/10.0, parent.img_w/50.0),
			if(parent.cycle > parent.shader_enabled_at,
			   draw_arrays('triangle_strip', 0, 4)),
		]",
	},

	],
}
