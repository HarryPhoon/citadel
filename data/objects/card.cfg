{
	is_strict: true,
	"animation": [

		{
			"id": "main",
			"image": "card-silver.png",
			"rect": [0,0,145,203],
			scale: 1
		},

		{
			"id": "big",
			"image": "card-silver.png",
			"rect": [0,0,145,203],
			scale: 2
		},

	],
	"id": "card",

	always_active: true,

	vars: {
		_card_type: null,
		player: null,
		controller: null,
		creature: null,
		discarded: false,
		sent_discard_msg: false,
		in_hand: false,
		is_choice: false,
		choice_value: null,
		hand_index: null,
		allow_drag: false,
		drag_pos: null,
		stack_id: null,
	},

	on_spawned: "[set(vars.controller,
	   if(spawner.type = 'citadel_controller', spawner,
		  find(level.chars, value.type = 'citadel_controller')))
	] where school = get_document('data/schools.cfg')[card_type.school]",

	on_drag_start: "[swallow_mouse_event(), if(vars.allow_drag, set(vars.drag_pos, [mouse_x, mouse_y])), debug('on drag start: ' + vars.allow_drag)]",
	on_drag: "[swallow_mouse_event(),
	  if(vars.drag_pos and vars.allow_drag, [
		set(vars.drag_pos, [mouse_x, mouse_y]),
		add(x, dx),
		add(y, dy),
		map(draw_primitives, set(value.points,
		       [[value.points[0][0] + dx, value.points[0][1] + dy]] +
			   value.points[1:])),
	] where dx = mouse_x - vars.drag_pos[0]
	  where dy = mouse_y - vars.drag_pos[1])]",
	on_drag_end: "[swallow_mouse_event(), if(vars.allow_drag, set(vars.drag_pos, null))]",

	on_click: "[
		swallow_mouse_event(),
		if(vars.is_choice,
	       vars.controller.option_clicked(vars.choice_value),
	[
	 switch(mouse_button,
	  1, vars.controller.card_clicked(me),
	  3, vars.controller.card_right_clicked(me))
	])
	]",

	//mouseover_delay: 20,
	on_mouse_enter: "vars.controller.mouse_enter_card(me)",
	on_mouse_leave: "vars.controller.mouse_leave_card(me)",

	properties: {
		render_scale: "if(animation = 'big', 2, 1)",

		destroy: "def() [if(vars.creature, vars.creature.destroy()), remove_object(me)]",
		animate_draw: "def(nstagger) execute(me, [
			set(me.x, -1000), //hack hack! Take it off screen until schedule starts
			set(me.y, -1000),
			fire_event('update_pos'),
			map(range(26), schedule(nstagger + value, [
				set(me.x, x + index*(nstagger/10 - 2)),
				set(me.y, y - index*10),
				set(me.alpha, min(255, value*20)),
				fire_event('update_pos')
			] where index = 25 - value)),
		])",

		set_discarded: "def(val) if(val,
		  execute(me, [set(vars.discarded, true), set(alpha, 64)]),
		  execute(me, [set(vars.discarded, false), set(alpha, 255)]))",


		//card_type property which can be a creature OR an activated_ability.
		card_type: { get: "vars._card_type", set: "execute(me, [
			if(creature_obj, [
					set(vars.creature, child), 
					set(child.zorder, zorder+5), 
					set(child.creature_object, creature_obj),
				]
				where child = object('creature', if(creature_obj.sprite_sheet = 'creature_large', 180, 80)*render_scale, 52*render_scale, 1)
				) where creature_obj = if(value.type != 'activated_ability', value.creature_object),
				set(vars._card_type, value), 
				fire_event('init')
			  ]) asserting value != null" },
	},

	on_update_pos: "if(vars.creature, execute(me, [
		set(vars.creature.mid_x, x + if(vars.creature.creature_object.sprite_sheet = 'creature_large', 180, 80)*render_scale),
		set(vars.creature.mid_y, y + 52*render_scale),
		set(vars.creature.alpha, alpha),
		set(me.card_type, vars._card_type),
	]))",

	on_init: "[
		[
			set(red, 127 + 127*school.red),
			set(green, 127 + 127*school.green),
			set(blue, 127 + 127*school.blue),
		] where school = get_document('data/schools.cfg')[card_type.school],
		set_widgets([{
			type: 'rich_text_label',
			width: 120*render_scale,
			x: 14*render_scale,
			y: 126*render_scale,
			children: card_type.rules_text_widgets(render_scale) asserting card_type.rules_text_widgets | [card_type.rules_text_widgets, card_type.type, card_type],
			zorder: 11
		},
	  {
		 type: 'rich_text_label',
		 width: 132*render_scale,
		 align: 'right',
		 x: 0*render_scale,
		 y: 6*render_scale,
	     zorder: 10,
		 children:
	   map(range(card_type.loyalty_cost),
	       singleton('gui_widgets').resource_image(card_type.school, 14*render_scale) + {alpha: if(vars.player and vars.player.resource_level[card_type.school] > index, 96, 255)}) +
		   [
		   	  {
				  type: 'label',
				  color: 'black',
				  size: render_scale*14,
				  font: card_type.card_font,
				  text: '' + card_type.cost,
			  }
		   ]
		
	  }] +

	  if(vars.creature, [{
		type: 'object',
		object: vars.creature,
	  }], [])
	  
	  ),

	 if(render_scale in [1,2],

	  [textv(me, {text: card_type.name, align: 'left', color: 'black', size: if(render_scale = 1, 12, 18), rect: [18*render_scale, 8*render_scale, 120*render_scale, 20*render_scale], font:'RobotoCondensed-Light'},

		   if(creature_object != null,
				   {text: if(card_type.hero, 'Hero -- ', 'Creature -- ') + fold(card_type.creature_object.tags, a + ' ' + b, ''), align: 'left', color: 'black', size: if(render_scale = 1, 10, 14), rect: [15*render_scale, 112*render_scale, 180*render_scale, 130*render_scale], font:'RobotoCondensed-LightItalic'},
				   {text: if(card_type.type = 'card', 'Spell', 'Ability') + if(card_type.is_response, ' -- Response', ''), align: 'left', color: 'black', size: if(render_scale = 1, 10, 14), rect: [15*render_scale, 112*render_scale, 180*render_scale, 130*render_scale], font:'RobotoCondensed-LightItalic'},
				   ),
			if(creature_object != null,
		   {text: card_type.creature_object.attack + '/' + card_type.creature_object.life, align: 'left', color: 'black', size: if(render_scale = 1, 14, 18), rect: [110*render_scale, 178*render_scale, 40*render_scale, 30*render_scale], font:'RobotoCondensed-LightItalic'}))],
	
	  //otherwise render_scale = 2
	  [textv(me, {text: card_type.name, align: 'left', color: 'black', size: 18, rect: [-48, -80, 300, 20], font:'RobotoCondensed-Regular'},
		   if(creature_object != null,
				   {text: if(card_type.hero, 'Hero -- ', 'Creature -- ') + fold(card_type.creature_object.tags, a + ' ' + b, ''), align: 'left', color: 'black', size: 14, rect: [-46, 128, 300, 180], font:'RobotoCondensed-Italic'},
				   {text: 'Spell' + if(card_type.is_response, ' -- Response', ''), align: 'left', color: 'black', size: 14, rect: [-46, 130, 300, 180], font:'RobotoCondensed-Italic'},
				   ),
			if(creature_object != null,
		   {text: card_type.creature_object.attack + '/' + card_type.creature_object.life, align: 'left', color: 'black', size: 18, rect: [156, 262, 40, 30], font:'RobotoCondensed-Italic'}))]
	)] where creature_object = if(card_type.type != 'activated_ability', card_type.creature_object)"
}
