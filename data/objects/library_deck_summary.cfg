{
	id: "library_deck_summary",
	is_strict: true,

	properties: {
		_font: { default: "Ubuntu-L.ttf" },
		_font_size: { default: 14 },

		area: "{width: 190, height: 72}",

		deck_name: { type: "string" },

		original_deck_name: { type: "null|string" },

		cards: "[string] :: if(_controller.editing_deck,
		  fold(map(_controller.deck, [value.card.name]*value.count), a+b, []),
		  if(deck, deck.cards, [])
		  where deck = null|Deck :: lib.citadel.get_decks()[deck_name]
		)",

		_last_cards: { type: "null|[string]" },

		_controller: "obj library_controller :: find_or_die(level.chars, value is obj library_controller)",

		highlighted: {
			type: "bool",
			default: false,
			set: "[
				set(_data, value),
				bind_command(render),
			]",
		},

		render: "def(bool show_name=true) ->commands [
		set(animation, {
			id: 'fbo',
			image: 'fbo',
			x: 0, y: 0, w: area.width, h: area.height,
			scale: 1, frames: 1,
			fbo: c.render(area.width, area.height, [
				c.rectangle(0, 0, area.width, area.height),
				c.set_source_rgba(1, 1, 1, if(highlighted, 0.6, 0.3)),
				c.fill(),

				c.move_to(0,0),
				c.line_to(area.width, 0),
				c.set_line_width(2.0),
				c.set_source_rgba(1, 1, 1, 1),
				c.stroke(),

				c.move_to(0,area.height),
				c.line_to(area.width, area.height),
				c.set_line_width(2.0),
				c.set_source_rgba(1, 1, 1, 1),
				c.stroke(),

				c.save(),
				c.translate(4, 4),
				c.set_font(_font),
				c.set_font_size(_font_size*2),
				c.text_path_in_bounds(if(show_name, deck_name, ''), area.width, ['left', 'top']),
				c.fill(),
				c.restore(),

				c.save(),
				c.translate(4, 32),
				c.set_font(_font),
				c.set_font_size(_font_size),
				c.text_path_in_bounds(str(size(deck)) + '/30 cards', area.width, ['left', 'top']),
				c.fill(),
				c.restore(),

				[
				c.save(),
				c.translate(4, 52),
				c.set_font(_font),
				c.set_font_size(_font_size),
				c.text_path_in_bounds(txt, area.width, ['left', 'top']),
				c.fill(),
				c.restore(),
				]
				where txt = fold([
				  if(num_creatures, str(num_creatures) + ' creatures', ''),
				  if(num_buildings, str(num_buildings) + ' forts', ''),
				  if(num_spells, str(num_spells) + ' spells', ''),
				  if(num_lands, str(num_lands) + ' lands', ''),
				], if(a and b, a + ', ' + b, a + b))
				where num_creatures = count(deck_cards, value.creature_object and value.creature_object.is_construct = false and value.creature_object.is_building = false)
				where num_buildings = count(deck_cards, value.creature_object and value.creature_object.is_construct = false and value.creature_object.is_building)
				where num_spells = count(deck_cards, value.creature_object = null)
				where num_lands = count(deck_cards, value.creature_object and value.creature_object.is_construct)

/*
				c.save(),
				c.translate(-4, 4),
				c.set_font(_font),
				c.set_font_size(_font_size),
				c.text_path_in_bounds(str(sum(map(entries, value.count))) + '/30 cards', area.width, ['right', 'top']),
				c.set_source_rgba(1, 1, 1, 1),
				c.fill(),
				c.restore(),
				*/
			]),
		} where deck_cards = map(deck, lib.citadel.create_card(value))
		  where deck = cards
		  where c = canvas()
		  where entries = filter(level.chars, value is obj library_deck_entry)),
	set(_last_cards, cards),
	]",
	},

	on_process: "if(_controller.editing_deck and cards != _last_cards, [
		fire_event('render')
	])",

	on_click: "[
	  swallow_mouse_event(),
	  if(_controller.editing_deck = false,
	  _controller.deck_summary_clicked(me),
	  if(mouse_x < x + title_area.width+8 and mouse_y < y + title_area.height + 8,
	  [
		set_widgets([{
			type: 'text_editor',
			id: 'name_edit_box',
			font_size: 18,
			focus: true,
			width: 200,
			height: 30,
			text: deck_name,
			enabled: true,
			select_all: true,
			on_change_focus: q(fire_event('finish_editing_name')),
			on_enter: q(fire_event('finish_editing_name')),
		}]),
		render(false),
	  ]
	  )
	  where title_area = canvas().text_extents(_font, _font_size*2, deck_name)
	  where mouse_x = int <- head_or_die(_controller.ctrl_mice)[0]
	  where mouse_y = int <- head_or_die(_controller.ctrl_mice)[1]
	)
	]",

	on_mouse_enter: "[
		if(_controller.editing_deck = false, [
		   _controller.enter_deck_summary(me),
		   set(highlighted, true),
		])
	]",

	on_mouse_leave: "[
		if(_controller.editing_deck = false, [
		   _controller.leave_deck_summary(me),
		   set(highlighted, false),
		])
	]",

	on_finish_editing_name: "[
		if(new_name and regex_match(new_name, '.*[a-zA-Z].*'), [
			if(original_deck_name = null, set(original_deck_name, deck_name)),
			set(deck_name, new_name),
		]) where new_name = regex_replace(string<- (text_editor_widget<- widgets.name_edit_box).text, '[^0-9A-Za-z_-]', ''),
		set_widgets([]),
		bind_command(render),
	]",

	on_create: "[fire_event('render'), set(x2, x2), set(y, y)]",
	on_render: "render()",
}
