{
	id: "login_controller",
	is_human: true,
	hitpoints: 20,
	editor_info: { category: "player" },
    hidden_in_game: true,
	zorder: -1,

	is_strict: true,

	consts: {
		BUTTON_WIDTH: 220,
		BUTTON_HEIGHT: 35,
	},
	
    properties: {

		bottom_logo: "int :: (level_height*2)/3",
		top_widget: "int :: bottom_logo - 12",

		_client: { type: "object|null", default: null },

		_logo: { type: "null|obj game_icon" },

		font: "string<- 'RobotoCondensed-Regular'",
		font_color: "string<- 'antique_white'",

		level_width: "int<- level.dimensions[2]",
		level_height: "int<- level.dimensions[3]",

		_error_message: { default: "" },

		_progress_controller: { type: "obj progress_controller|null" },

		get_server_info: "commands<- [tbs_send(cl, {type: 'get_server_info'}), set(me._client, cl)] where cl = tbs_client(TBS_SERVER_ADDRESS, TBS_SERVER_PORT, -1)",

		register_account: "def() ->commands [
			set(_input_state, 'register'),
			fire_event('refresh'),
		]",

		starting_screen: "def() ->commands [
			set(_input_state, ''),
			fire_event('refresh'),
		]",

		play_offline: "def() ->commands [
			teleport('lobby.cfg', '', 'instant', playable)
		] where playable = object_playable('title_controller', 0, 0, 1, {
			_mm_client_state: construct('mm_client_state', {
				client: null,
				username: 'Player',
				session_id: -1,
			})
		})",

		login_account: "def() ->commands [
			set(_input_state, 'login'),
			fire_event('refresh'),
		]",

		do_auto_login: "def(string cookie) ->commands [
			set(_input_state, 'logging_in'),
			set(_client, cl),
			execute(me, tbs_send(cl, {
				type: 'auto_login',
				cookie: cookie,
			})),
		] where cl = tbs_client(TBS_SERVER_ADDRESS, TBS_SERVER_PORT)",

		do_login: "def() ->commands [
			set(_client, cl),
			execute(me, tbs_send(cl, {
				type: 'login',
				user: _username_entry.text,
				passwd: md5(_passwd_entry.text),
				remember: bool<- (object<- me.widgets.remember_me_checkbox).checked,
			})),
		] where cl = tbs_client(TBS_SERVER_ADDRESS, TBS_SERVER_PORT)",

		do_register: "def() ->commands
		if(_passwd_entry.text != _confirm_passwd_entry.text,
		[
			set(_error_message, 'Passwords do not match'),
			register_account(),
		],
		[
			debug(_username_entry.text, _passwd_entry.text),
			set(_client, cl),
			execute(me, tbs_send(cl, {
				type: 'register',
				user: _username_entry.text,
				passwd: md5(_passwd_entry.text),
				remember: bool<- (object<- me.widgets.remember_me_checkbox).checked,
			})),
		] where cl = tbs_client(TBS_SERVER_ADDRESS, TBS_SERVER_PORT))",

		complete_login: "def(int session_id, string username, string|null cookie) ->commands [
			debug(['ZZZ: COMPLETE LOGIN', username]),
			write_document('citadel_cookie', if(cookie = null, null, {cookie: cookie})),
			schedule(if(level.cycle > 40, 40, 80 - level.cycle),
			animate(_logo, {
				scale: 10.0,
				//mid_x: _logo.mid_x,
				x: _logo.x + 1024,
				y: _logo.y - 2200,
				alpha: 0,
			}, {
				duration: 20,
				on_complete: teleport('lobby.cfg', '', 'instant', playable),
			})) asserting _logo != null,
		] where playable = object_playable('title_controller', 0, 0, 1, {
			_mm_client_state: construct('mm_client_state', {
				client: tbs_client(TBS_SERVER_ADDRESS, TBS_SERVER_PORT, {
					session: session_id,
					id: 'matchmake'
				}),
				username: username,
				session_id: session_id,
			})
		})",

		_username_entry: "text_editor_widget<- widgets.username_entry",
		_passwd_entry: "text_editor_widget<- widgets.passwd_entry",
		_confirm_passwd_entry: "text_editor_widget<- widgets.confirm_passwd_entry",

		_input_state: { default: "" },

		display_widgets: "[map] ::
		switch(_input_state,

		'logging_in', [
			{type: 'label', id: 'log_in_label', font: font, size: 24, color: 'white', text: 'Logging in...'},
		],

		'login', [{
			type: 'grid',
			columns: 1,
			column_widths: 200,
			column_alignments: 'center',
			x: level_width/2 - 112,
			y: top_widget,
			vertical_padding: 4,
			horizontal_padding: 0,
			children: [
			{
				type: 'text_editor',
				id: 'username_entry',
				width: 256,
				font_size: 24,
				bg_color: [2, 166, 118],
				no_border: true,
				focus: true,
				on_tab: q([set(me._username_entry.has_focus, false), set(me._passwd_entry.has_focus, true)]),
				on_enter: q(me.do_login()),
			},

			{
				type: 'text_editor',
				id: 'passwd_entry',
				password: true,
				width: 256,
				font_size: 24,
				bg_color: [2, 166, 118],
				no_border: true,
				on_enter: q(me.do_login()),
			},

			{
				type: 'checkbox',
				id: 'remember_me_checkbox',
				x: level_width/2 - 150,
				y: 180,
				width: 238,
				height: 34,
				checked: true,
				label: {type: 'label', font: font, size: 14, color: 'white', text: 'Remember me'},
				hpad: 30,
				on_click: q(null),
				color_scheme: lib.citadel.button_color_scheme,
			},
		
			{type: 'label', font: font, size: 18, color: 'red', text: _error_message},

			{
				type: 'button',
				color_scheme: lib.citadel.button_color_scheme,
				on_click: bind(me.do_login),
				x: level_width/2 - 150,
				y: 190,
				label: {type: 'label', font: font, size: 14, color: 'white', text: 'Login'},
				height: 32,
				width: 238,
			},
		
			]
		},
		],

		'register', [{
			type: 'grid',
			columns: 1,
			column_widths: 200,
			column_alignments: 'center',
			x: level_width/2 - 112,
			y: top_widget,
			vertical_padding: 4,
			horizontal_padding: 0,
			children: [
			{
				type: 'text_editor',
				id: 'username_entry',
				width: 256,
				font_size: 24,
				bg_color: [2, 166, 118],
				no_border: true,
				on_tab: q([set(me._username_entry.has_focus, false), set(me._passwd_entry.has_focus, true)]),
				text: 'Username',
				clear_on_focus: true,
			},

			{
				type: 'text_editor',
				id: 'passwd_entry',
				password: true,
				width: 256,
				font_size: 24,
				bg_color: [2, 166, 118],
				no_border: true,
				text: 'Password',
				clear_on_focus: true,
				on_tab: q([set(me._passwd_entry.has_focus, false), set(me._confirm_passwd_entry.has_focus, true)])
			},

			{
				type: 'text_editor',
				id: 'confirm_passwd_entry',
				password: true,
				width: 256,
				font_size: 24,
				bg_color: [2, 166, 118],
				no_border: true,
				text: 'Confirm Pass',
				clear_on_focus: true,
			},

			{
				type: 'checkbox',
				id: 'remember_me_checkbox',
				x: level_width/2 - 150,
				y: 180,
				width: 238,
				height: 34,
				checked: true,
				label: {type: 'label', font: font, size: 14, color: 'white', text: 'Remember me'},
				hpad: 30,
				on_click: q(null),
				color_scheme: lib.citadel.button_color_scheme,
			},

			{type: 'label', font: font, size: 18, color: 'red', text: _error_message},

			{
				type: 'button',
				color_scheme: lib.citadel.button_color_scheme,
				on_click: bind(me.do_register),
				label: {type: 'label', font: font, size: 22, color: 'white', text: 'Create Account'},
				height: 32,
				width: 238,
			},
		

			]
		},


		],

		[{
			type: 'grid',
			columns: 1,
			column_widths: 300,
			column_alignments: 'center',
			x: level_width/2 - 140,
			y: top_widget,
			vertical_padding: 10,
			horizontal_padding: 0,
			children: [{
				type: 'button',
				color_scheme: lib.citadel.button_color_scheme,
				label: {type: 'label', font: font, size: 28, color: 'white', text: 'Create Account'},
				on_click: bind(me.register_account),
				height: 50,
				width: 256,
			},

			{
				type: 'button',
				color_scheme: lib.citadel.button_color_scheme,
				on_click: bind(me.login_account),
				label: {type: 'label', font: font, size: 28, color: 'white', text: 'Login'},
				height: 50,
				width: 256,
			},

			{
				type: 'button',
				color_scheme: lib.citadel.button_color_scheme,
				on_click: bind(me.play_offline),
				label: {type: 'label', font: font, size: 28, color: 'white', text: 'Play Offline'},
				height: 50,
				width: 256,
			},
			],
		}]
		)
		",
	},

    on_create: "[
		if(cookie!= null, do_auto_login(string<- cookie['cookie'])) where cookie = get_document('citadel_cookie', ['null_on_failure', 'user_preferences_dir']),
		fire_event('window_resize', {width: level.camera_position[2], height: level.camera_position[3]}),
	]",

	on_window_resize: "[
		set(level.dimensions, [0,0,arg.width,arg.height]),
		fire_event('refresh')
	]",
	
	on_refresh: "[
//		draw_menu(width, height), 

		set(draw_primitives, [
		{
			type: 'rect',
			area: [0,0,level_width,level_height],
			color: [0, 115, 105],
		}]),

		if(_logo = null, add_object(logo)),
		set(_logo, logo),


		animate(logo, {
			size: 512,
			mid_x: level_width/2,
			mid_y: bottom_logo - 256,
		}, {
			duration: if(_logo = null, 40, 1),
			name: 'zoom',
		}),

		set_widgets(display_widgets),
	] where logo = if(_logo, _logo,
		object('game_icon', level_width/2, bottom_logo - 2, {
			icon: 'logo-faith.svg',
			size: 4,
		}))
	",
	
	on_process: "[
		if(me._client, tbs_process(me._client)),

		if(_progress_controller and need_progress = false, [
			set(_progress_controller, null),
			remove_object(_progress_controller),
		],

		if(_progress_controller = null and need_progress, [
		//	add_object(ctrl),
		//	set(_progress_controller, ctrl)
		] where ctrl = object('progress_controller', 0, 0, 1)))
		  where need_progress = (_input_state = 'logging_in')

	]",
    
    on_connection_error: "if(_input_state = 'logging_in',
	                         [
							 	schedule(50, fire_event('create')),
								set((label<- widgets.log_in_label).text, 'Trouble connecting to server. Retrying...'),
							 ],
	                         starting_screen())",
    
	on_connection_success: "debug('connected okay')",

	on_message_received: "[debug(message.type, message), switch(message.type,
		'login_fail', [
			set(_error_message, string<- message.message),
			login_account(),
		],
		'registration_fail', [
			set(_error_message, string<- message.message),
			register_account(),
		],
		'auto_login_fail', starting_screen(),
		'login_success', complete_login(int<- message.session_id, string<- message.username, string|null<- message.cookie, AccountDetails<- message.info),
		'registration_success', complete_login(int<- message.session_id, string<- message.username, string|null<- message.cookie),
		debug('UNKNOWN MESSAGE RECIEVED: ' + message.type)
	)] where message = map<- arg.message",
	
	on_enter_level: "[
//		draw_menu(SCREEN_WIDTH, SCREEN_HEIGHT), 
	]",
}
