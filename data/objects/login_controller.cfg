{
	id: "login_controller",
	is_human: true,
	hitpoints: 20,
	editor_info: { category: "player" },
    hidden_in_game: true,
	zorder: -1,

	is_strict: true,

	consts: {
		BUTTON_WIDTH: 220,
		BUTTON_HEIGHT: 35,
	},
	
    properties: {
	_debug_label_mouse_loc: { type: "bool", default: false },
	_debug_mouse_loc: { type: "null|obj label" },
	_debug_show_mouse_loc: "def() ->commands [
		remove_object(_debug_mouse_loc),
		spawn('label', 0, 0, {
			x: 10,
			y: 10,
			zorder: 20000,
			_font_size: 16,
			_text: ['(' + str(mouse_x) + ',' + str(mouse_y) + ')']
		}, [
			set(_debug_mouse_loc, child)
		]),
	]",

	mouse_x: "int<- ctrl_mice[0][0]",
	mouse_y: "int<- ctrl_mice[0][1]",


		bottom_logo: "int :: (level_height*2)/3",
		top_widget: "int :: bottom_logo - lib.citadel.py(88)",

		_client: { type: "object|null", default: null },

		_logo: { type: "null|obj game_icon" },
		_title: { type: "null|obj label" },

		font: "string:: lib.font.regular_font",
		font_color: "string<- 'antique_white'",

		level_width: "int<- level.dimensions[2]",
		level_height: "int<- level.dimensions[3]",

		_error_message: { default: "" },
		_status_message: { default: "" },

		_progress_controller: { type: "obj progress_controller|null" },

		_registering_guest: { type: "bool", default: false },

		get_server_info: "commands<- [tbs_send(cl, {type: 'get_server_info'}), set(me._client, cl)] where cl = tbs_client(TBS_SERVER_ADDRESS, TBS_SERVER_PORT, { retry_on_timeout: false })",

		register_account: "def() ->commands [
			set(_input_state, 'register'),
			fire_event('refresh'),
		]",

		do_cancel_create: "def() ->commands
		[
			set(_error_message, ''),
			set(_input_state, ''),
			fire_event('refresh'),
		]",

		do_login_help: "def() ->commands
		[
			set(_error_message, ''),
			set(_input_state, 'login_help'),
			fire_event('refresh'),
		]",

		starting_screen: "def() ->commands [
			set(_error_message, ''),
			set(_input_state, ''),
			fire_event('refresh'),
		]",

		show_terms: "def() ->commands [
			spawn('terms_and_conditions', 0, 0, {
			}),
		]",

		login_account: "def() ->commands [
			set(_input_state, 'login'),
			fire_event('refresh'),
		]",

		register_guest_account: "def() ->commands [
			set(_registering_guest, true),
			set(_client, cl),
			execute(me, tbs_send(cl, {
				type: 'register',
				user: 'Guest' + str(1d9999),
				passwd: md5(str(1d1000000)),
				remember: true,
			})),
			set(_input_state, 'logging_in'),
			fire_event('refresh'),
		] where cl = tbs_client(TBS_SERVER_ADDRESS, TBS_SERVER_PORT, { retry_on_timeout: false })",

		do_reset_password: "def() ->commands [
			set(_client, cl),
			execute(me, tbs_send(cl, {
				type: 'recover_account',
				user: _username_entry.text,
			})),
			
		] where cl = tbs_client(TBS_SERVER_ADDRESS, TBS_SERVER_PORT, { retry_on_timeout: false })",

		do_auto_login: "def(string cookie) ->commands [
			set(_input_state, 'logging_in'),
			set(_client, cl),
			execute(me, tbs_send(cl, {
				type: 'auto_login',
				cookie: cookie,
			})),
		] where cl = tbs_client(TBS_SERVER_ADDRESS, TBS_SERVER_PORT, { retry_on_timeout: false })",

		impersonate: "def(string username, string pass) ->commands [
			set(_client, cl),
			execute(me, tbs_send(cl, {
				type: 'login',
				user: username,
				passwd: md5('blah'),
				remember: false,
				impersonate: pass,
			})),

			set(_input_state, 'logging_in'),
			fire_event('refresh'),
		
		] where cl = tbs_client(TBS_SERVER_ADDRESS, TBS_SERVER_PORT, { retry_on_timeout: false })",

		do_login: "def() ->commands [
			set(_client, cl),
			execute(me, tbs_send(cl, {
				type: 'login',
				user: _username_entry.text,
				passwd: md5(_passwd_entry.text),
				remember: bool<- (object<- me.widgets.remember_me_checkbox).checked,
			})),

			set(_input_state, 'logging_in'),
			fire_event('refresh'),
		] where cl = tbs_client(TBS_SERVER_ADDRESS, TBS_SERVER_PORT, { retry_on_timeout: false })",

		do_register: "def() ->commands
		if(_passwd_entry.text != _confirm_passwd_entry.text,
		[
			set(_error_message, 'Passwords do not match'),
			register_account(),
		],
		regex_match(_beta_key_entry.text, '^[A-Za-z0-9]{5}$') = null,
		[
			set(_error_message, 'Must provide a 5-digit beta key'),
			register_account(),
		],

		regex_match(_email_entry.text, '^.+\@.+$') = null and
		_email_entry.text not in ['', 'email (optional)'],
		[
			set(_error_message, 'Invalid email address'),
			register_account(),
		],

		[
			set(_client, cl),
			execute(me, tbs_send(cl, {
				type: 'register',
				user: _username_entry.text,
				passwd: md5(_passwd_entry.text),
				beta_key: _beta_key_entry.text,
				email: if(regex_match(_email_entry.text, '^.+\@.+$') != null, _email_entry.text),
				remember: bool<- (object<- me.widgets.remember_me_checkbox).checked,
			})),
			set(_input_state, 'logging_in'),
			fire_event('refresh'),
		] where cl = tbs_client(TBS_SERVER_ADDRESS, TBS_SERVER_PORT, { retry_on_timeout: false }))",

		complete_login: "def(int session_id, string username, string|null cookie, AccountDetails info, int info_version, int timestamp) ->commands [
			set(lib.citadel.server_time_delta, timestamp - time().unix),
			lib.citadel.write_cookie(cookie),

			[remove_object(c) | c <- level.chars, c not in [_logo,_title]],

			add_object(playable),

		] where playable = object_playable('title_controller', 0, 0, 1, {
			game_logo: _logo,
			game_title: _title,
			_mm_client_state: construct('mm_client_state', {
				client: tbs_client(TBS_SERVER_ADDRESS, TBS_SERVER_PORT, {
					session: session_id,
					id: 'matchmake',
				}),
				username: username,
				session_id: session_id,
				account_info_version: info_version,
				account_info: info,
				quests: if(info.quests is [Quest], map(info.quests, lib.quest.create(value)), []),
			})
		})",

		_username_entry: "text_editor_widget<- widgets.username_entry",
		_passwd_entry: "text_editor_widget<- widgets.passwd_entry",
		_confirm_passwd_entry: "text_editor_widget<- widgets.confirm_passwd_entry",
		_beta_key_entry: "text_editor_widget<- widgets.beta_key_entry",
		_email_entry: "text_editor_widget<- widgets.email_entry",

		_input_state: { default: "" },

		display_widgets: "[map] ::
		switch(_input_state,

		'logging_in', [
			{type: 'label', id: 'log_in_label', font: font, size: lib.citadel.py(20), color: 'white', text: 'Logging in...'},
		],

		'login', [{
			type: 'grid',
			columns: 1,
			column_widths: 200,
			column_alignments: 'center',
			x: level_width/2 - lib.citadel.py(112),
			y: top_widget,
			vertical_padding: 4,
			horizontal_padding: 0,
			children: [
			{
				type: 'text_editor',
				id: 'username_entry',
				width: lib.citadel.py(256),
				font_size: lib.citadel.py(20),
				bg_color: [2, 166, 118],
				no_border: true,
				focus: true,
				on_tab: q([set(me._username_entry.has_focus, false), set(me._passwd_entry.has_focus, true)]),
				on_enter: q(me.do_login()),
			},

			{
				type: 'text_editor',
				id: 'passwd_entry',
				password: true,
				width: lib.citadel.py(256),
				font_size: lib.citadel.py(20),
				bg_color: [2, 166, 118],
				no_border: true,
				on_enter: q(me.do_login()),
			},

			{
				type: 'checkbox',
				id: 'remember_me_checkbox',
				x: level_width/2 - lib.citadel.py(150),
				y: lib.citadel.py(180),
				width: lib.citadel.py(238),
				height: lib.citadel.py(34),
				checked: true,
				label: {type: 'label', font: font, size: lib.citadel.py(14), color: 'white', text: 'Remember me'},
				hpad: lib.citadel.py(30),
				on_click: q(null),
				color_scheme: lib.citadel.button_color_scheme,
			},
		
			{type: 'label', font: font, size: 18, color: 'red', text: _error_message},

			{
				type: 'button',
				color_scheme: lib.citadel.button_color_scheme,
				on_click: bind(me.do_login),
				x: level_width/2 - lib.citadel.py(150),
				y: lib.citadel.py(190),
				label: {type: 'label', font: font, size: lib.citadel.py(14), color: 'white', text: 'Login'},
				height: lib.citadel.py(32),
				width: lib.citadel.py(238),
			},
	
			{
				type: 'button',
				color_scheme: lib.citadel.button_color_scheme,
				on_click: bind(me.do_cancel_create),
				x: level_width/2 - lib.citadel.py(150),
				y: lib.citadel.py(190),
				label: {type: 'label', font: font, size: lib.citadel.py(14), color: 'white', text: 'Cancel'},
				height: lib.citadel.py(32),
				width: lib.citadel.py(238),
			},
			] +

			if(_error_message,
			[	
			{
				type: 'button',
				color_scheme: lib.citadel.button_color_scheme,
				on_click: bind(me.do_login_help),
				x: level_width/2 - lib.citadel.py(150),
				y: lib.citadel.py(190),
				label: {type: 'label', font: font, size: lib.citadel.py(14), color: 'white', text: 'Help logging in'},
				height: lib.citadel.py(32),
				width: lib.citadel.py(238),
			},
			], []
			)
		
		},
		] + terms_and_conditions_widgets,

		'login_help', [{
			type: 'grid',
			columns: 1,
			column_widths: 200,
			column_alignments: 'center',
			x: level_width/2 - lib.citadel.py(112),
			y: top_widget,
			vertical_padding: 4,
			horizontal_padding: 0,
			children: [
			{
				type: 'text_editor',
				id: 'username_entry',
				width: lib.citadel.py(256),
				font_size: lib.citadel.py(20),
				bg_color: [2, 166, 118],
				no_border: true,
				text: 'Enter Username',
				clear_on_focus: true,
				focus: false,
				on_tab: q([set(me._username_entry.has_focus, false), set(me._passwd_entry.has_focus, true)]),
				on_enter: q(me.do_reset_password()),
			},

			{type: 'label', font: font, size: 18, color: 'red', text: _error_message},
			{type: 'label', font: font, size: 18, color: 'white', text: _status_message},

			{
				type: 'button',
				color_scheme: lib.citadel.button_color_scheme,
				on_click: bind(me.do_reset_password),
				x: level_width/2 - lib.citadel.py(150),
				y: lib.citadel.py(190),
				label: {type: 'label', font: font, size: lib.citadel.py(14), color: 'white', text: 'Reset password'},
				height: lib.citadel.py(32),
				width: lib.citadel.py(238),
			},
	
			{
				type: 'button',
				color_scheme: lib.citadel.button_color_scheme,
				on_click: bind(me.do_cancel_create),
				x: level_width/2 - lib.citadel.py(150),
				y: lib.citadel.py(190),
				label: {type: 'label', font: font, size: lib.citadel.py(14), color: 'white', text: 'Cancel'},
				height: lib.citadel.py(32),
				width: lib.citadel.py(238),
			},
			]
		},
		] + terms_and_conditions_widgets,

		'register', [{
			type: 'grid',
			columns: 1,
			column_widths: lib.citadel.py(200),
			column_alignments: 'center',
			x: level_width/2 - lib.citadel.py(112),
			y: top_widget,
			vertical_padding: lib.citadel.py(4),
			horizontal_padding: 0,
			children: [
			{
				type: 'text_editor',
				id: 'username_entry',
				width: lib.citadel.py(256),
				font_size: lib.citadel.py(20),
				bg_color: [2, 166, 118],
				no_border: true,
				on_tab: q([set(me._username_entry.has_focus, false), set(me._passwd_entry.has_focus, true)]),
				text: 'Username',
				clear_on_focus: true,
				on_change: q(if(me.widgets.username_entry, set(me._username_entry.text_stable, me._username_entry.text_stable[:16]))),
			},

			{
				type: 'text_editor',
				id: 'passwd_entry',
				password: true,
				width: lib.citadel.py(256),
				font_size: lib.citadel.py(20),
				bg_color: [2, 166, 118],
				no_border: true,
				text: 'Password',
				clear_on_focus: true,
				on_tab: q([set(me._passwd_entry.has_focus, false), set(me._confirm_passwd_entry.has_focus, true)])
			},

			{
				type: 'text_editor',
				id: 'confirm_passwd_entry',
				password: true,
				width: lib.citadel.py(256),
				font_size: lib.citadel.py(20),
				bg_color: [2, 166, 118],
				no_border: true,
				text: 'Confirm Pass',
				clear_on_focus: true,
				on_tab: q([set(me._confirm_passwd_entry.has_focus, false), set(me._beta_key_entry.has_focus, true)])
			},

			{
				type: 'text_editor',
				id: 'beta_key_entry',
				width: lib.citadel.py(256),
				font_size: lib.citadel.py(20),
				bg_color: [2, 166, 118],
				no_border: true,
				text: 'Beta Key',
				clear_on_focus: true,
				on_tab: q([set(me._beta_key_entry.has_focus, false), set(me._email_entry.has_focus, true)]),
				on_enter: q(me.do_register()),
			},

			{
				type: 'text_editor',
				id: 'email_entry',
				width: lib.citadel.py(256),
				font_size: lib.citadel.py(20),
				bg_color: [2, 166, 118],
				no_border: true,
				text: 'email (optional)',
				clear_on_focus: true,
				on_enter: q(me.do_register()),
			},

			{
				type: 'checkbox',
				id: 'remember_me_checkbox',
				x: level_width/2 - lib.citadel.py(150),
				y: lib.citadel.py(180),
				width: lib.citadel.py(238),
				height: lib.citadel.py(34),
				checked: true,
				label: {type: 'label', font: font, size: lib.citadel.py(14), color: 'white', text: 'Remember me'},
				hpad: lib.citadel.py(30),
				on_click: q(null),
				color_scheme: lib.citadel.button_color_scheme,
			},

			{type: 'label', font: font, size: 18, color: 'red', text: _error_message},

			{
				type: 'button',
				color_scheme: lib.citadel.button_color_scheme,
				on_click: bind(me.do_register),
				label: {type: 'label', font: font, size: lib.citadel.py(22), color: 'white', text: 'Create Account'},
				height: lib.citadel.py(32),
				width: lib.citadel.py(238),
			},
	
			{
				type: 'button',
				color_scheme: lib.citadel.button_color_scheme,
				on_click: bind(me.do_cancel_create),
				label: {type: 'label', font: font, size: lib.citadel.py(22), color: 'white', text: 'Cancel'},
				height: lib.citadel.py(32),
				width: lib.citadel.py(238),
			},

			]
		},


		] + terms_and_conditions_widgets,

		[{
			type: 'grid',
			columns: 1,
			column_widths: lib.citadel.py(300),
			column_alignments: 'center',
			x: level_width/2 - lib.citadel.py(140),
			y: top_widget,
			vertical_padding: lib.citadel.py(10),
			horizontal_padding: 0,
			children: [{
				type: 'button',
				color_scheme: lib.citadel.button_color_scheme,
				label: {type: 'label', font: font, size: lib.citadel.py(28), color: 'white', text: 'Create Account'},
				on_click: bind(me.register_account),
				height: lib.citadel.py(50),
				width: lib.citadel.py(256),
			},

			{
				type: 'button',
				color_scheme: lib.citadel.button_color_scheme,
				on_click: bind(me.login_account),
				label: {type: 'label', font: font, size: lib.citadel.py(28), color: 'white', text: 'Login'},
				height: lib.citadel.py(50),
				width: lib.citadel.py(256),
			},
/*
			{
				type: 'button',
				color_scheme: lib.citadel.button_color_scheme,
				on_click: bind(me.register_guest_account),
				label: {type: 'label', font: font, size: lib.citadel.py(28), color: 'white', text: 'Login as Guest'},
				height: lib.citadel.py(50),
				width: lib.citadel.py(256),
			},
*/
			],
		}] + terms_and_conditions_widgets
		)
		",

		terms_and_conditions_widgets: "[map] ::
		[
		{
			type: 'button',
			color_scheme: lib.citadel.button_color_scheme,
			on_click: bind(me.show_terms),
			label: {type: 'label', font: font, size: 14, color: 'white', text: 'Terms & Conditions'},
			x: level.dimensions[2] - lib.citadel.py(202),
			y: level.dimensions[3] - lib.citadel.py(36),
			height: lib.citadel.py(30),
			width: lib.citadel.py(196),
		}
		]
		"
	},

    on_create: "[
		seed_rng(),

		lib.citadel.add_main_background_shader(level),

		//construct all cards so we will error if there are any problems.
		map(keys(lib.json.get_document_map('data/cards.cfg')),
		   lib.citadel.create_card(string<- value)
		) and null,

		set(x, 0),
		set(y, 0),
		console_output_to_screen(false),
		fire_event('auto_login'),
		fire_event('window_resize_custom', {width: level.camera_position[2], height: level.camera_position[3]}),
	]",

	on_auto_login: "
		if(cookie!= null, do_auto_login(cookie)) where cookie = lib.citadel.read_cookie(),
	",

	on_window_resize_custom: "[
		set(level.dimensions, [0,0,int<-arg.width,int<-arg.height]),

		fire_event('refresh')
	]",
	
	on_refresh: "[
//		draw_menu(width, height), 

		if(_logo = null, add_object(logo)),
		if(_title = null, add_object(title)),
		set(_logo, logo),
		set(_title, title),

		set_widgets(display_widgets),
	] where logo = if(_logo, _logo,
		object('game_icon', level_width/2, lib.citadel.py(190), {
			icon: 'logo-faith.svg',
			size: lib.citadel.py(300),
		}))
	  where title = if(_title, _title,
	    object('label', level_width/2, lib.citadel.py(300), {
			_text: ['Argentum Age'],
			_font_size: lib.citadel.px(96),
			_halign: 'center',
		}))
	",
	
	on_process: "[
		if(_debug_label_mouse_loc, _debug_show_mouse_loc()),

		if(me._client, tbs_process(me._client)),

		if(_progress_controller and need_progress = false, [
			set(_progress_controller, null),
			remove_object(_progress_controller),
		],

		if(_progress_controller = null and need_progress, [
			add_object(ctrl),
			set(_progress_controller, ctrl)
		] where ctrl = object('progress_controller', 0, 0, 1)))
		  where need_progress = (_input_state = 'logging_in')

	]",
    
    on_connection_error: "if(_input_state = 'logging_in',
	                         [
							 	schedule(50, fire_event('auto_login')),
								set((label<- widgets.log_in_label).text, 'Trouble connecting to server. Retrying...'),
							 ],
	                         starting_screen())",
    
	on_connection_success: "debug('connected okay')",

	on_message_received: "[debug(message.type, message), switch(message.type,
		'login_fail', [
			set(_error_message, string<- message.message),
			login_account(),
		],
		'message', if(_input_state = 'login_help', [
			set(_status_message, string<- message.message),
			fire_event('refresh'),
		]),
		'error', if(_input_state = 'login_help', [
			set(_error_message, string<- message.message),
			fire_event('refresh'),
		], _registering_guest, [
			register_guest_account(),
		], [
			set(_error_message, string<- message.message),
			register_account(),
		]),
		'auto_login_fail', starting_screen(),
		'login_success', complete_login(int<- message.session_id, string<- message.username, string|null<- message.cookie, AccountDetails<- message.info, int<- message.info_version, int<- message.timestamp),
		'registration_success', complete_login(int<- message.session_id, string<- message.username, string|null<- message.cookie, AccountDetails<- message.info, int<- message.info_version, int<- message.timestamp),
		debug('UNKNOWN MESSAGE RECIEVED: ' + str(message.type))
	)] where message = map<- arg.message",
	
	on_enter_level: "[
//		draw_menu(SCREEN_WIDTH, SCREEN_HEIGHT), 
	]",

	on_settings_menu: "
	[
		set(level.show_builtin_settings_dialog, false),

		spawn('game_menu_controller', {
			buttons: [
			{
				text: 'Resume',
				callback: (def()->commands null),
			},
			{
				text: 'Quit',
				callback: (def()->commands quit_to_desktop()),
			}
			]
		})
	]
	",
}
