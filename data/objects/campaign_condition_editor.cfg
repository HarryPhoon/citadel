{
	id: "campaign_condition_editor",
	is_strict: true,
	hidden_in_game: true,

	properties: {

		condition: { type: "CampaignCondition" },

		save_fn: { type: "function()->commands" },

		_read_int: "def(null|obj text_entry entry) ->null|int
			if(entry != null and regex_match(entry.text, '-?[0-9]+'), int(entry.text))
		",

		change_cond_type: "def(int noption, int n) ->commands
			if(n = 0,
			   set(condition.conditions, condition.conditions[:noption] + condition.conditions[noption+1:]),
			   if(noption < size(condition.conditions),
				  set(condition.conditions, condition.conditions[:noption] + [new_item] + condition.conditions[noption+1:]),
				  add(condition.conditions, [new_item])
			    )

				where new_item = switch(vartype,
				  'gold', {
					variable: vartype,
					cmp: '>',
					constant: 100,
				  },
				  '1d100', {
					variable: vartype,
					cmp: '>',
					constant: 50,
				  },
				  'has flag',
				  {
					variable: vartype,
					cmp: '=',
					constant: '',
				  },
				  {
					variable: vartype,
					cmp: '>',
					constant: 1,
				  }
				)
				where vartype = variable_types[n-1]
			);

			spawn_controls();

			save_fn()
		",

		change_cmp_type: "def(int noption, int n) ->commands
			set(condition.conditions[noption].cmp, cmp_types[n]);

			spawn_controls();

			save_fn()
		",

		change_value: "def(int noption) ->commands

		if(condition.conditions[noption].variable = 'has flag',
		   set(condition.conditions[noption].constant, txt),
		   n != null,
		   set(condition.conditions[noption].constant, n)
		)

		where n = _read_int(_values[noption])
		where txt = _values[noption].text;

		save_fn()
		",

		variable_types: "[string] :: ['gold', '1d100', 'has flag', 'level', 'devotion:aether', 'devotion:gaea', 'devotion:entropia', 'devotion:materia', 'devotion:minerva']",
		cmp_types: "[string] :: ['=', '!=', '<', '<=', '>', '>=']",

		_controls: { type: "[custom_obj]", default: [] },
		_values: { type: "[obj text_entry]", default: [] },

		spawn_controls: "def() ->commands
		execute(me,
		[
			map(_controls, remove_object(value)),
			set(_controls, []),
			set(_values, []),

			map(condition.conditions,
			[
				spawn('combo_controller', {
					x: x,
					y: y + lib.gui.py(40)*index,
					_font_size: lib.gui.py(18),
					selected_index: index(variable_types, cond.variable) + 1,
					on_change: def(int n) ->commands me.change_cond_type(index, n),
					_width: lib.gui.py(200),
					_height: lib.gui.py(30),
					zorder: zorder+10 - index,
					color_scheme: lib.citadel.library_color_scheme,
					items: ['(none)'] + variable_types,
				}, [
					add(_controls, [child]),
				]),

				if(value.variable != 'has flag',
					spawn('combo_controller', {
						x: x + lib.gui.py(220),
						y: y + lib.gui.py(40)*index,
						_font_size: lib.gui.py(22),
						selected_index: index(cmp_types, cond.cmp),
						on_change: def(int n) ->commands me.change_cmp_type(index, n),
						_width: lib.gui.py(54),
						_height: lib.gui.py(30),
						zorder: zorder+10 - index,
						color_scheme: lib.citadel.library_color_scheme,
						items: cmp_types,

					}, [
						add(_controls, [child]),
					])
				),

				spawn('text_entry', {
					x: x + if(value.variable = 'has flag', lib.gui.py(220), lib.gui.py(300)),
					y: y + lib.gui.py(40)*index,
					_width: lib.gui.py(if(value.variable = 'has flag', 200, 80)),
					text: str(value.constant),
					default_text: if(value.variable = 'has flag', 'Enter flag name', 'Value'),
					_on_change: def()->commands me.change_value(index),
				}, [
					add(_controls, [child]),
					add(_values, [child]),
				]),
			]
			where cond = value
			) + [
				spawn('combo_controller', {
					x: x,
					y: y + lib.gui.py(40)*size(condition.conditions),
					_font_size: lib.gui.py(18),
					selected_index: 0,
					on_change: def(int n) ->commands me.change_cond_type(size(condition.conditions), n),
					_width: lib.gui.py(200),
					_height: lib.gui.py(30),
					zorder: zorder+10 - size(condition.conditions),
					color_scheme: lib.citadel.library_color_scheme,
					items: ['(none)'] + variable_types,
				}, [
					add(_controls, [child]),
				])
			]
		]
		)
		",

	},

	events: {
		create: "
			spawn_controls()
		",

		being_removed: "map(_controls, remove_object(value)); set(_controls, [])",
	},
}
