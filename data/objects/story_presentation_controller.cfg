{
	id: "story_presentation_controller",
	is_strict: true,
	use_absolute_screen_coordinates: true,
	zorder: 10000,

	properties: {
		screen_width: "int :: level.dimensions[2] - level.dimensions[0]",
		screen_height: "int :: level.dimensions[3] - level.dimensions[1]",

		_prev_ctrl_keys: { type: "null|[string]" },

		_sequence: { type: "[class story_sequence]" },
		_index: { default: 0 },
		_current: "class story_sequence :: _sequence[_index]",

		_image: { type: "null|obj image_widget" },

		_size: { type: "decimal", default: 1.0 },
		_inv_size: "decimal :: 1.0 - _size",

		fade_distance: "decimal :: _size*_size",
		alpha_blend: "decimal :: 1.0 - (1.0 - _size)*0.5",

		text_portion: "decimal :: 0.73 - (1.0 - _size)*0.5",

		next_sequence: "def() ->commands
		if(not shown_text, [
			set(shown_text, true),
		], _options = [], [
			set(shown_text, false) ;
			if(_index+1 >= size(_sequence),
			   remove_object(me),
			[
				show_sequence(_sequence[_index+1]),
				add(_index, 1),
			])
		])",

		goto_sequence: "def(string|null goto) ->commands
		if(goto = null, remove_object(me),
		   goto = 'next', next_sequence(),
		[
			set(_index, index(_sequence, next_seq)),
			set(shown_text, false) ;
			show_sequence(next_seq),
		]
		where next_seq = find_or_die(_sequence, value.name = goto)
		)
		",

		_transition: "def(null|obj image_widget old, obj image_widget new, class story_sequence seq) ->commands execute(me,

		switch(seq.transition,
		  'keep', [
		  	set(_image_widget, old),
			remove_object(new),
		  ],

		  'fade', [

		  	set(new.alpha, 0),
			animate(new, {
				alpha: 255,
			}, {
				name: 'transition',
				duration: 50,
				on_complete: remove_object(old),
				replace_existing: false,
			}),


			if(old != null,
			[
				schedule(50, remove_object(old)),
				add(old.zorder, -1),
			]
			)
		  ], // end fade.

		  'wave', [

		  	set(new.alpha, 0),
			set(new.wave, { intensity: 0.3, period: 10.0, offset: 0.0 }),
			animate(new, {
				alpha: 255,
				wave: { intensity: 0.0, period: 10.0, offset: 5.0 }
			}, {
				name: 'transition',
				duration: 50,
				on_complete: remove_object(old),
				replace_existing: false,
			}),

			if(old != null,
			[
				schedule(50, remove_object(old)),
				add(old.zorder, -1),
				set(old.wave, { intensity: 0.0, period: 10.0, offset: 0.0 }),
				animate(old, {
					wave: { intensity: 0.3, period: 10.0, offset: 5.0 }
				}, {
					duration: 50,
				}),
			]
			)
		  ],

		  //default case, just remove the old one.
		  remove_object(old)
		)
		)",

		_image_widget: { type: "null|obj image_widget" },

		show_sequence: "def(class story_sequence seq) ->commands execute(me, [
			[remove_object(c) | c <- spawned_children, c != _image_widget],

			show_text(seq),
			spawn('image_widget', 0, 0, {
				x: int(_inv_size*screen_width)/2, y: int(_inv_size*screen_height)/2,
				image: seq.image,
				image_area: if(seq.image_area != null,
				               seq.image_area,
							   [0,0,dim[0],dim[1]]
							   where dim = c.image_dim('images/' + seq.image)
							   where c = canvas()
							),
				draw_width: int(screen_width*_size),
				draw_height: int(screen_height*(text_portion*1.01)*_size),
				zorder: zorder-100,
				use_absolute_screen_coordinates: true,
			}, [
				set(me._image_widget, child),

				_transition(_image_widget, child, seq),

				if(seq.image_area_animate_to != null,
				[
					animate(child, {
						image_area_animated: seq.image_area_animate_to,
					}, {
						duration: seq.animate_duration,
						easing: seq.animate_easing,
						name: 'move',
						replace_existing: false,
					})
				]
				)
			]),
			
			if(seq.options = [],
				spawn('button_controller', 0, 0, {
					x: int(screen_width*(_size + _inv_size/2) - lib.citadel.px(220)),
					y: int(screen_height*(_size + _inv_size/2) - lib.citadel.px(140)),
					zorder: zorder+10,
					text: 'Continue >>',
					on_click: def()->commands if(not me.shown_text, set(me.shown_text, true), [me.goto_sequence(seq.goto), if(seq.select, seq.select())]),
					button_width: lib.citadel.px(int(140*_size)),
					button_height: lib.citadel.px(int(60*_size)),
					_font_size: lib.citadel.px(int(22*_size)),
					use_absolute_screen_coordinates: true,
				}, [
				])
			),
		])",

		shown_text: { type: "bool", default: false },

		_options: { type: "[obj text_area]", default: [] },

		show_text: "def(class story_sequence seq, int progress=0) ->commands execute(me, [
			set(animation, lib.citadel.render_frame(c, int(screen_width*_size), int(screen_height*(1.0-text_portion)*_size), [
				c.rectangle(0, 0, int(screen_width*_size), int(screen_height*(1.0-text_portion)*_size)),
				c.set_source_rgba(0, 0, 0, 1),
				c.fill(),
				c.set_source_rgba(1, 1, 1, 1),
				c.translate(int(screen_width*0.15*_size), int(screen_height*0.01*_size)),
				map(fragments, if(percent_shown > begin_percent, [
					c.save(),

					if(percent_shown < end_percent,
					[
						c.rectangle(value.x, value.y, value.width*ratio, value.height),
						c.clip(),
					] where ratio = (percent_shown - begin_percent)/(end_percent - begin_percent)),
					value.path,
					c.fill(),
					c.restore(),
				])
				where end_percent = min(1.0, begin_percent + value.width/total_width)
				where begin_percent = sum(map(fragments[:index], value.width))/total_width
				
				
				)
			])),

			set(x, int(_inv_size*screen_width)/2),
			set(y, int((_size+_inv_size*0.5)*screen_height) - int(screen_height*(1.0-text_portion)*_size)),

			if(percent_shown < 1.0,
				schedule(1, bind_command(show_text, seq, if(shown_text, int(total_width)+1, progress + lib.citadel.px(6)))),
				set(shown_text, true))
		];
		
		  if(percent_shown >= 1.0 and _options = [],
			map(seq.options,
				;
				spawn('text_area', 0, 0, {
					_text: q(<font size=') + str(lib.citadel.px(int(22*_size))) + q(' color='#ffffff'>) + value.text + q(</font>),
					text_width: int(screen_width*0.7*_size),
					x: int(_inv_size*screen_width*0.5 + screen_width*0.15*_size),
					y:  sum(map(_options, value.img_h)) + int(screen_height*_inv_size*0.5) + int(screen_height*_size*text_portion) + int(decimal<- max(map(fragments, value.y + value.height))) + int(12*_size),
					zorder: me.zorder+10,
					use_absolute_screen_coordinates: true,
					brightness: 128,
				}, [
					add(me._options, [child]),
					set(child.on_mouse_enter, def()->commands set(child.brightness, 255)),
					set(child.on_mouse_leave, def()->commands set(child.brightness, 128)),
					set(child.on_click, def()->commands [
						set(_options, []),
						if(value.select, value.select()),
						goto_sequence(value.goto),
					]),
				])
			)
		  ))
		  where percent_shown = decimal(progress)/decimal(total_width)
		  where total_width = sum(map(fragments, value.width))
		  where fragments = c.markup_text(q(<font size=') + str(_font_size) + q('>) + text + q(</font>), int(screen_width*0.7*_size))
		  where c = canvas()
		  where text = string :: seq.text",

		_font_size: "int :: lib.citadel.px(20)",
	},

	on_create: "[
		[set(c.paused, true) | c <- level.chars, c != me],
		show_sequence(_sequence[_index]),

		add(level.frame_buffer_shaders, [{
			label: 'story_blur',
			begin_zorder: -10000000,
			end_zorder: 9000,
			shader_info: 'citadel_background_blur_hor',
		}, {
			label: 'story_blur',
			begin_zorder: -10000000,
			end_zorder: 9000,
			shader_info: 'citadel_background_blur_ver',
		}, {
			label: 'story_blur',
			begin_zorder: 9500,
			end_zorder: 19000,
			shader_info: 'citadel_storyline_fade',
		}]),
		
	]",
	on_being_removed: "[
		map(spawned_children, remove_object(value)),
		[set(c.paused, false) | c <- level.chars, c != me],

		set(level.frame_buffer_shaders, filter(level.frame_buffer_shaders, value.label != 'story_blur')),
	]",

	on_process: "[
		if(_prev_ctrl_keys != null and size(_prev_ctrl_keys) < size(level.player.ctrl_keys),
		  if(not shown_text,
			 set(shown_text, true),
		     button != null,
			 button.on_click()
		  ) where button = find(level.chars, value is obj button_controller),
		),
		set(me._prev_ctrl_keys, level.player.ctrl_keys),
	]",
}
