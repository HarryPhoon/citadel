{
id: "text_area",
is_strict: true,
always_active: true,

properties: {
	_text: { type: "string" },

	text_width: { type: "int" },	

	_get_text_width: "int ::
	int(
	(decimal<- max(map(fragments, value.x + value.width))) - (decimal<- min(map(fragments, value.x)))) + 1

		where fragments = c.markup_text(_text, { width: text_width, scale: lib.citadel.py(1000)/1000.0 })
		where c = canvas()
	",

	_get_height: "int ::
		int(max(map(fragments, value.y + value.height)) or 8)
		where fragments = c.markup_text(_text, { width: text_width, scale: lib.citadel.py(1000)/1000.0 })
		where c = canvas()
	",

	border_bot: { default: 0 },
	border: { default: 0 },
	bg_color: { type: "null|[decimal,decimal,decimal,decimal]" },
	bg_image: { type: "null|string" },

	on_click: { type: "null|function()->commands" },
	on_mouse_enter: { type: "null|function()->commands" },
	on_mouse_leave: { type: "null|function()->commands" },

	render: "def() ->commands
	[
	set(animation, {
		id: 'fbo',
		image: 'fbo',
		x: 0, y: 0, w: ww, h: hh,
		scale: 1,
		frames: 1,
		blend: if(bg_color = null and bg_image = null, ['one', 'one_minus_src_alpha']),
		force_no_alpha: true,

		fbo: create_fbo(ww, hh)

	} where ww = _get_text_width + border*2
	  where hh = _get_height + border*2 + border_bot)
	]",

	save_to_file: "def(string fname) ->commands
	create_fbo(ww, hh).save(fname)
	  where ww = _get_text_width + border*2
	  where hh = _get_height + border*2 + border_bot
	",

	create_fbo: "def(int ww, int hh) ->texture_object
		c.render(ww, hh,
		[
			if(bg_color, [
				c.save(),
				c.rectangle(0,0,ww+1,hh+1),
				c.set_source_rgba(bg_color[0], bg_color[1], bg_color[2], bg_color[3]),
				c.fill(),
				c.restore(),
			]),

			if(bg_image, [
				c.save(),
				c.scale(decimal(ww)/decimal(dim[0]), decimal(hh)/decimal(dim[1])),
				c.paint_image(bg_image),
				c.restore(),
			] where dim = c.image_dim(bg_image)),

			c.translate(border+0, border+2),
			map(fragments, [
				c.save(),
				c.set_source_color(value.color),
			    value.path,
				c.fill(),
				c.restore(),
			]),

		]) where fragments = c.markup_text(_text, { width: text_width, scale: lib.citadel.py(1000)/1000.0 })
		   where c = canvas()
	",
},

on_create: "[
	render(),
]",

on_click: "if(on_click, on_click())",
on_mouse_enter: "if(on_mouse_enter, on_mouse_enter())",
on_mouse_leave: "if(on_mouse_leave, on_mouse_leave())",


}
