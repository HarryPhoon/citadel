{
id: "text_area",
is_strict: true,
always_active: true,

properties: {
	_text: { type: "string" },

	text_width: { type: "int" },	

	_get_height: "int ::
		int(max(map(fragments, value.y + value.height)) or 8)
		where fragments = c.markup_text(_text, text_width)
		where c = canvas()
	",

	on_click: { type: "null|function()->commands" },
	on_mouse_enter: { type: "null|function()->commands" },
	on_mouse_leave: { type: "null|function()->commands" },

	render: "def() ->commands
	[
	set(animation, {
		id: 'fbo',
		image: 'fbo',
		x: 0, y: 0, w: ww, h: hh,
		scale: 1,
		frames: 1,
		blend: ['one', 'one_minus_src_alpha'],
		force_no_alpha: true,
		fbo: c.render(ww, hh,
		[
			map(fragments, [
				c.save(),
				c.set_source_color(value.color),
			    value.path,
				c.fill(),
				c.restore(),
			]),

		]) where fragments = c.markup_text(_text, text_width),
	} where c = canvas()
	  where ww = text_width
	  where hh = _get_height)
	]",
},

on_create: "[
	render(),
	set(x, x),
	set(y, y),
]",

on_click: "if(on_click, on_click())",
on_mouse_enter: "if(on_mouse_enter, on_mouse_enter())",
on_mouse_leave: "if(on_mouse_leave, on_mouse_leave())",


}
