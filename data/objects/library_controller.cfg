{
	id: "library_controller",
	prototype: ["citadel_controller_base"],
	is_human: true,
	is_strict: true,
	always_active: true,
	hidden_in_game: true,

	types: {
		Deck: "class deck",
		DeckMap: "{string -> Deck}",
		CardEntry: "{
			name: string,
			card: class card,
			obj: null|obj card
		}",
	},

	properties: {
		font: "'Ubuntu-L'",

		level_width: "int :: level.dimensions[2]",
		level_height: "int :: level.dimensions[3]",

		blur_area: "
		if(editing_deck,
		  [level_width-190, 28, level_width, (int<- max([28+72] + map(filter(level.chars, value is obj library_deck_entry), value.y2)))],
		  [level_width-190, 28, level_width, (int<- max([0] + map(summaries, value.y2)))] where summaries = filter(level.chars, value is obj library_deck_summary))",

		layout_labels: "def([obj library_label] labels) ->commands [
			map(labels, set(value.mid_x, xpos) where xpos = left_edge + sum(widths[:index]) + border_width*index + widths[index]/2),

			map(labels, add_object(value)),
			debug(widths),
		]	

			where left_edge = level_width/2 - total_width/2
			where total_width = sum(widths) + border_width*(size(labels)-1)
			where widths = map(labels, value.text_area.width)
			where border_width = 10
		",

		_decks: {
			type: "DeckMap",
			init: "lib.citadel.get_decks()",
			set: "[
				write_document('user-decks.cfg', value),
				set(_data, value),
			]",
		},

		editing_deck: { default: false },

		_all_cards: { type: "[CardEntry]", init: "map(filter(get_document('data/cards.cfg'), value is map and value['set'] != null), { name: card_name, card: lib.citadel.create_card(card_name)} where card_name = string<- key)" },
		_visible_cards: { type: "[CardEntry]", default: [] },

		_filter_card: "def(class card card) ->bool
			find(card.school_list, value in _selected_schools) != null and (
				(0 in _selected_card_types) and card.type = 'creature' and card.creature_object != null and card.creature_object.is_construct = false or
				(1 in _selected_card_types) and card.type = 'spell' or
				(2 in _selected_card_types) and card.type = 'creature' and card.creature_object != null and card.creature_object.is_construct = true
			)
		",

		_backed_up_cursor_card_name: { type: "null|string" },

		_prev_cursor: { default: 0 },
		_cursor: { default: 0, set: "[set(_data, value), set(_prev_cursor, int<- _data)]" },
		_cursor_target: { type: "null|int" },
		_anim_speed: { default: 1 },

		_selected_schools: { type: "[int]", default: [1] },
		_selected_school: "int :: if(_selected_schools = [], 1, _selected_schools[0])",

		_selected_card_types: { type: "[int]", default: [1] },

		_calculate_filters: "def() ->commands [
			set(_selected_schools, [label.index | label <- level.chars, label is obj library_label, label.grouping = 'school', label.selected]),
			set(_selected_card_types, [label.index | label <- level.chars, label is obj library_label, label.grouping = 'card_type', label.selected]),
		]",

		_calculate_visible_cards: "def(string|null card_name=null) ->commands [
			set(_visible_cards, new_visible),
			if(_cursor >= 0 and _cursor < size(_visible_cards), [
				set(_cursor, new_index)
			] where new_index = max(index(new_visible, find(new_visible, value.name > if(card_name != null, card_name, _visible_cards[_cursor].name))) - 1, 0))
		] where new_visible = filter(_all_cards, _filter_card(value.card))
		",

		_reserve_animation_time: "def(int ncycles) ->commands
			set(_anim_end_time, max(_anim_end_time, cycle) + ncycles+1)",

		_anim_end_time: { default: 0 },
		_animating: "bool :: cycle < _anim_end_time",

		_card_transition: { type: "null|string" },

		_update_card_objects: "def() ->commands [
			set(_card_transition, null),

			map(level.chars, if(value is obj card and find(_visible_cards, value.obj = context.value) = null,
			
			switch(_card_transition,

			  'move_down', [animate(value, {
				alpha: 0,
				y: value.y + 200,
			  }, {
			    duration: 15,
				on_complete: [remove_object(value), set(value.alpha, 255)]
			  })],

			  'move_up', [animate(value, {
				alpha: 0,
				y: value.y - 200,
			  }, {
			    duration: 15,
				on_complete: [remove_object(value), set(value.alpha, 255)]
			  })],

			  remove_object(value)))),

			[
			[
				set(entry.obj, obj),
				set(obj.zorder, 100 - abs(pos)),
				add_object(obj),

				if(entry.obj and find(level.chars, value = entry.obj) != null, [
					map(range(25/_anim_speed),
						schedule(max(0, _anim_end_time - cycle) + value, [
							set(entry.obj.mid_x, level_width/2 + int(sign(v)*sqrt(abs(v))*320)),
							set(entry.obj.mid_y, level_height/2),
							set(entry.obj.card_size, 1.5 - abs(v)*0.2),
						] where v = mix(prev_pos, pos, easing_fn(value / decimal(25/_anim_speed - 1)))
						  where easing_fn = if(_cursor = _cursor_target or _cursor_target = null, def(decimal v) ->decimal if(v = 0.0, 0.0, v = 1.0, 1.0, 0.5*(1 - cos(v*180.0))), def(decimal v) ->decimal v))),

					set(_anim_end_time, max(_anim_end_time, cycle) + 25/_anim_speed),
				], [
					set(obj.mid_x, level_width/2 + int(sign(pos)*sqrt(abs(pos))*320)),
					set(obj.mid_y, level_height/2),
					set(obj.card_size, 1.5 - abs(pos)*0.2),

					if(_card_transition = 'move_up', [
						add(obj.mid_y, 200),
						set(obj.alpha, 0),
						animate(obj, {
							mid_y: level_height/2,
							alpha: 255,
						}, {
							duration: 15,
						})
					]),

					if(_card_transition = 'move_down', [
						add(obj.mid_y, -200),
						set(obj.alpha, 0),
						animate(obj, {
							mid_y: level_height/2,
							alpha: 255,
						}, {
							duration: 15,
						})
					]),

				]),
			]
			where obj = if(entry.obj, entry.obj, object('card', 0, 0, {
				card_type: entry.card,
				controller: me,
				in_hand: false,
				allow_drag: false,
				card_size: 1.5 - abs(pos)*0.2,
			}))
			where entry = _visible_cards[index]
			where prev_pos = index - _prev_cursor
			where pos = index - _cursor
			| index <- map(range(13), _cursor+value-6), index >= 0 and index < size(_visible_cards)]
		]",

		create_labels: "def() ->commands [
			[remove_object(label) | label <- level.chars, label is obj library_label],

			layout_labels(
			map(['MATERIA','|','ENTROPIA','|','GAEA','|','SAPIENZA','|','AETHER'],
				object('library_label', 0, level.dimensions[3]-120, {
					_text: value,
					grouping: if(value != '|', 'school'),
					selected: ((index+1)/2+1) in _selected_schools,
					index: (index+1)/2 + 1,
				}),
			)),

			layout_labels(
			map(['CREATURE','|','SPELL','|','LAND'],
				object('library_label', 0, level.dimensions[3]-60, {
					_text: value,
					grouping: if(value != '|', 'card_type'),
					selected: index = 0,
					index: (index+1)/2,
				}),
			)),

			bind_command(_calculate_filters),
			bind_command(_calculate_visible_cards),
			bind_command(_update_card_objects),
		]",

		label_clicked: "def(obj library_label label) ->commands [
			debug('click ' + str(cycle)),
			if(label.grouping = 'school' and label.selected = false,
				set(_card_transition,if(label.index < _selected_school, 'move_up', 'move_down'))
			),
			if(label.grouping in ['school', 'card_type'],
				if(ctrl_mod_key%4 != 0,
					set(label.selected, not label.selected),
					[set(c.selected, c = label) | c <- level.chars, c is obj library_label, c.grouping = label.grouping]
				)
			),

			bind_command(_calculate_filters),
			bind_command(_calculate_visible_cards),
			bind_command(_update_card_objects),
		]",

		_mouse_x: "int <- head_or_die(ctrl_mice)[0]",
		_mouse_y: "int <- head_or_die(ctrl_mice)[1]",

		_mouseover_deck_item: "int ::
			index(_deck, find(_deck, _mouse_x >= value.x and _mouse_y >= value.y and _mouse_y <= value.y2))
		",

		_last_mouseover_deck_item: { default: -1 },

		_deck: { type: "[obj library_deck_entry]", default: [] },

		exit_to_titlescreen: "def() ->commands [
			if(editing_deck, done_editing_deck()),
			teleport('titlescreen.cfg', '', 'fade', playable)
			  where playable = object_playable('title_controller', 0, 0, 0, {
					 _mm_client_state: _mm_client_state,
				})
		]",

		card_clicked: "def(obj card card) ->commands
		[
		if(editing_deck,
		[
			if(pos != -1, if(pos = _cursor, [
				debug(['card clicked: ', str(pos), 'index: ', insert_index]),
				if(obj != existing, [
					add_object(obj),

					set(_deck, _deck[:insert_index] + [obj] + _deck[insert_index:]),

					map(_deck, if(index >= insert_index,
						animate(value, {
							y: 100 + 36*(index+1),
						}, {
							duration: 20,
						}))
					),

					animate(_done_editing_deck_button, {
						y: _done_editing_deck_button.y + 36,
					}, {
						duration: 20,
					}) asserting _done_editing_deck_button != null,
				], [
					add(obj.count, 1),
					bind_command(obj.render_entry),
				]),

				obj.pulse(),
			]
		where obj = if(existing, existing, object('library_deck_entry', 0, 0, { x2: level_width, y: if(insert_pos, insert_pos.y, 100 + 36*insert_index), card: card.card_type }))
		where existing = find(_deck, value.card.name = card.card_type.name)
		where insert_index = if(insert_pos, index(_deck, insert_pos), size(_deck))
		where insert_pos = find(_deck, value.card.name >= card.card_type.name),

		))
		]),
		
			//move card to the front
			set(_cursor_target, pos),
			set(_anim_speed, max(1, abs(pos - _cursor))),
			debug('SPEED: ' + str(cycle)),
		] where pos = index(_visible_cards, find(_visible_cards, value.obj = card))
		",

		remove_deck: "def(obj library_deck_summary summary) ->commands
		[
			if(_delete_item_button != null, [
				remove_object(_delete_item_button),
				set(_delete_item_button, null),
			]),
			remove_object(summary),
			[animate(s, {
				y: s.y - s.area.height,
			}, {
				duration: 20,
			}) | s <- level.chars, s is obj library_deck_summary, s.y > summary.y],
			set(_decks, remove_from_map(_decks, summary.deck_name)),

			_reserve_animation_time(20),
		]
		",

		enter_deck_summary: "def(obj library_deck_summary summary) ->commands
		[
			if(_delete_item_button, remove_object(_delete_item_button)),
			spawn('svg_button', 0, 0, {
				icon: 'cancel.svg',
				zorder: 1000,
				mid_x: summary.x2 - 12,
				mid_y: summary.y + 12,
				mouseover_color: [255, 0, 0],
				mouseoff_color: [196, 0, 0],
				click_handler: (def()->commands remove_deck(summary)),
				user_info: summary,
			}, [
				set(_delete_item_button, child),
			]),
		]",

		leave_deck_summary: "def(obj library_deck_summary summary) ->commands
		[
			if(_delete_item_button != null and _delete_item_button.user_info = summary, [
				remove_object(_delete_item_button),
				set(_delete_item_button, null)
			])
		]",

		create_new_deck: "def() ->commands [
			set(_create_new_deck_button, null),
			remove_object(_create_new_deck_button),

			set(editing_deck, true),
			[ remove_object(s) | s <- level.chars, s is obj library_deck_summary ],
			 spawn('library_deck_summary', 0, 0, {zorder: 500, deck_name: find_or_die(map(range(100), 'New Deck ' + str(value+1)), _decks[value] = null), x2: level_width, y: 28}),
			set(_deck, []),

			spawn('button_controller', 0, 0, {
				text: 'Done',
				on_click: me.done_editing_deck,
				x2: level_width - 124,
				y: 100
			}, [set(_done_editing_deck_button, child)]),
		]",

		deck_summary_clicked: "def(obj library_deck_summary summary) ->commands
		if(editing_deck = false,
		[
			set(editing_deck, true),
			[ remove_object(s) |
			  s <- level.chars, s is obj library_deck_summary, s != summary ],

			if(_create_new_deck_button != null, [
				set(_create_new_deck_button, null),
				remove_object(_create_new_deck_button),
			]),

			 set(summary.highlighted, false),
			 animate(summary, {
				y: 28
			 }, {
				duration: 25,
			 }),

			 set(_deck, []),

			 map(card_names, spawn('library_deck_entry', 0, 0, {
			  x2: level_width,
			  y: 100 +36*index,
			  card: lib.citadel.create_card(value),
			  count: count(deck.cards, value = context.value),
			 }, [
			 	add(_deck, [child]),
			 	child.pulse(),
			 ])),

			 spawn('button_controller', 0, 0, {
				text: 'Done',
				on_click: me.done_editing_deck,
				x2: level_width - 124,
				y: 100 + 36*size(card_names)
			 }, [set(_done_editing_deck_button, child)]),

		] where card_names = unique(sort(deck.cards))
		  where deck = Deck <- _decks[summary.deck_name])",
		
		done_editing_deck: "def() ->commands execute(me, [
			remove_object(_done_editing_deck_button),
			set(_done_editing_deck_button, null),
			set(_deck, []),
			[remove_object(entry) |
			 entry <- level.chars, entry is obj library_deck_entry],
			set(editing_deck, false),

			[
				set(_decks, if(new_deck.cards, old_decks + {(new_deck.name): new_deck}, remove_from_map(old_decks, new_deck.name))),
				if(new_deck.cards = [], map(level.chars, if(value is obj library_deck_summary, remove_object(value)))),
			]
			  where new_deck = construct('deck', {
					name: summary.deck_name,
					schools: [],
					cards: fold(map(filter(level.chars, value is obj library_deck_entry), [value.card.name]*value.count), a+b) or [],
				})
			  where old_decks = remove_from_map(lib.citadel.get_decks(), summary.original_deck_name or summary.deck_name),

			fire_event('create'),
		]) where summary = find_or_die(level.chars, value is obj library_deck_summary)
		",

		remove_deck_item: "def() ->commands execute(me, [
			remove_object(_delete_item_button),
			set(_delete_item_button, null),

			remove_object(_deck[_last_mouseover_deck_item]),

			set(_deck, _deck[:_last_mouseover_deck_item] + _deck[_last_mouseover_deck_item+1:]),

			set(_last_mouseover_deck_item, -1),

			map(_deck, if(index > _last_mouseover_deck_item,
				animate(value, {
					y: 100 + 36*(index-1),
				}, {
					duration: 20,
				}))
			),

			animate(_done_editing_deck_button, {
				y: _done_editing_deck_button.y - 36,
			}, {
				duration: 20,
			}) asserting _done_editing_deck_button != null,

			set(_anim_end_time, max(_anim_end_time, cycle) + 21),
		]) asserting _last_mouseover_deck_item != -1",

		_done_editing_deck_button: { type: "obj button_controller|null" },
		_create_new_deck_button: { type: "obj button_controller|null" },
		_done_button: { type: "obj button_controller|null" },
		_delete_item_button: { type: "obj svg_button|null" },
	},

	on_construct: "[set(lib.citadel.native_card_sizes, [1.1, 1.3, 1.5])]",

	on_process: "[
		//do something when cards in deck are moused over.
		//currently disabled.
		if(_animating = false and editing_deck,
		[
			set(_last_mouseover_deck_item, mouseover_deck_item),
			if(mouseover_deck_item != _last_mouseover_deck_item,
			[
				if(_delete_item_button, [
					remove_object(_delete_item_button),
					set(_delete_item_button, null),
				]),

				if(mouseover_deck_item != -1, [
					spawn('svg_button', 0, 0, {
						icon: 'cancel.svg',
						zorder: 1000,
						mid_x: _deck[mouseover_deck_item].x2 - 12,
						mid_y: _deck[mouseover_deck_item].y + 12,
						mouseover_color: [255, 0, 0],
						mouseoff_color: [196, 0, 0],
						click_handler: remove_deck_item,
					}, [
						set(_delete_item_button, child),
					]),
				]),

			/*
				if(_last_mouseover_deck_item = -1,
				[
					//save the name of the current card the cursor is at
					//so we can restore it.
					if(_cursor >= 0 and _cursor < size(_visible_cards), set(_backed_up_cursor_card_name, _visible_cards[_cursor].name)),

					//set the visible cards to our chosen deck
					set(_visible_cards, map(_deck, {name: value.card.name, card: lib.citadel.create_card(value.card.name)})),
					set(_cursor, mouseover_deck_item),
					set(_cursor_target, null),
					set(_card_transition, 'move_up'),
					set(_anim_end_time, max(_anim_end_time, cycle) + 16),
					bind_command(_update_card_objects),
				], mouseover_deck_item != -1, [
					set(_cursor_target, mouseover_deck_item),
					set(_anim_speed, 2),
				]),

				if(mouseover_deck_item = -1, [
					//mouse has left the deck area, show cards from
					//our collection.
					bind_command(_calculate_visible_cards, _backed_up_cursor_card_name),
					set(_card_transition, 'move_down'),
					set(_anim_end_time, max(_anim_end_time, cycle) + 16),
					bind_command(_update_card_objects),
				]),
				*/
			])
		]) where mouseover_deck_item = _mouseover_deck_item,

		if(_cursor = _cursor_target, [set(_cursor_target, null), set(_anim_speed, 1)]),
		if((ctrl_left and _cursor_target = null or _cursor_target != null and _cursor_target < _cursor) and _animating = false and _cursor > 0,
		   [add(_cursor, -1), bind_command(_update_card_objects)]),

		if((ctrl_right and _cursor_target = null or _cursor_target != null and _cursor_target > _cursor) and _animating = false and _cursor < size(_visible_cards)-1,
		   [add(_cursor, 1), bind_command(_update_card_objects)]),

		if(ctrl_up and _animating = false, [
		set(_anim_end_time, max(_anim_end_time, cycle) + 16),
		set(_card_transition, 'move_up'),
		set(_selected_schools, if(_selected_schools = [], [1], [if(_selected_schools[0] <= 1, 5, _selected_schools[0]-1)])),
		bind_command(create_labels),
		]),
		if(ctrl_down and _animating = false, [
		set(_anim_end_time, max(_anim_end_time, cycle) + 16),
		set(_card_transition, 'move_down'),
		set(_selected_schools, if(_selected_schools = [], [1], [if(_selected_schools[0] >= 5, 1, _selected_schools[0]+1)])),
		bind_command(create_labels),
		]),
	]",


	on_create: "[
		if(find(level.frame_buffer_shaders, value.shader_info = 'citadel_area_blur') = null,
			add(level.frame_buffer_shaders, [{
				begin_zorder: -1000000,
				end_zorder: 200,
				shader_info: 'citadel_area_blur',
			}])
		),
		map(_decks,
		  if(existing != null,
			 animate(existing, { y: 28 + 72 + 72*index }, { duration: 25 }),
			 spawn('library_deck_summary', 0, 0, {zorder: 500, deck_name: key, x2: level_width, y: 28 + 72 + 72*index}))
			 where existing = find(level.chars, value is obj library_deck_summary and value.deck_name = context.key)),

		 spawn('button_controller', 0, 0, {
			text: 'New Deck',
			on_click: me.create_new_deck,
			x2: level_width - 124,
			y: 100 + 72*size(_decks)
		 }, [set(_create_new_deck_button, child)]),

		 spawn('button_controller', 0, 0, {
			text: 'Exit',
			on_click: me.exit_to_titlescreen,
		 }, [set(_done_button, child)]),

		fire_event('window_resize', {width: level.camera_position[2], height: level.camera_position[3]}),
	]",

	on_window_resize: "[
		set(level.dimensions, [0,0,new_width,new_height]),
		fire_event('dimensions_updated'),
	] where new_width = max(int<- arg.width,1024)-1
	  where new_height = max(int<- arg.height, 768)-1",
	
	on_dimensions_updated: "[
		create_labels(),
		[set(summary.x2, level_width) |
		 summary <- level.chars, summary is obj library_deck_summary],

		if(_create_new_deck_button, [
			set(_create_new_deck_button.x2, level_width - 124),
		]),

		if(_done_button, [
			set(_done_button.x2, level_width - 110),
			set(_done_button.y2, level_height),
		]),
	]",
	
	on_type_updated: "fire_event('create')",
}
