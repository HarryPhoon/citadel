{
	id: "library_controller",
	prototype: ["citadel_controller_base"],
	is_human: true,
	is_strict: true,
	always_active: true,
	hidden_in_game: true,

	types: {
		CardEntry: "{
			name: string,
			card: class card,
			num_copies: int,
			obj: null|obj card
		}",
	},

	properties: {
		font: "lib.font.regular_font",

		//the dimensions we use for our display. Don't use the bottom
		//80 pixels of the screen.
		level_width: "int :: level.dimensions[2]",
		level_height: "int :: level.dimensions[3] - 80",

		px: "def(int pixels) ->int lib.citadel.px(pixels)",
		py: "def(int pixels) ->int lib.citadel.py(pixels)",

		deck_rules: { type: "class deck_rules" },

		blur_area: "
		if(editing_deck,
		  [level_width-px(240), py(28), level_width, py(int<- max([28+72] + map(filter(level.chars, value is obj library_deck_entry), value.y2)))],
		  [level_width-px(240), py(28), level_width, py(int<- max([0] + map(summaries, value.y2)))] where summaries = filter(level.chars, value is obj library_deck_summary))",

		layout_labels: "def([obj library_label] labels) ->commands [
			map(labels, value.render_label());
			map(labels, set(value.mid_x, xpos) where xpos = left_edge + sum(widths[:index]) + border_width*index + widths[index]/2);

			map(labels, add_object(value)),
		]	

			where left_edge = level_width/2 - total_width/2
			where total_width = sum(widths) + border_width*(size(labels)-1)
			where widths = map(labels, value.text_area.width)
			where border_width = lib.citadel.px(10)
		",

		specified_deck: { type: "null|[string]" },
		specified_collection: { type: "null|[string]" },

		get_collection: "def() -> [string]
		if(specified_collection != null,
		   specified_collection,
		   map(_mm_client_state.account_info.collection, value.name)
		  )",

		_decks: {
			variable: false,
			type: "DeckMap",
			get: "DeckMap :: account_info.decks",
			set: "[
				set(_mm_client_state.account_info.decks, value),
				tbs_send(object<- mm_client, { type: 'set_decks', decks: value, user: _mm_client_state.username }),
			]",
		},

		editing_deck: { default: false },

		_all_cards: { type: "[CardEntry]", default: [] },
		_visible_cards: { type: "[CardEntry]", default: [] },
		_current_card_entry: "CardEntry|null :: if(_cursor >= 0 and _cursor < size(_visible_cards), _visible_cards[_cursor])",

		_filter_card: "def(class card card) ->bool
			(_artist_label = null or _artist_label.selected = false or _current_artist = card.artist) and
			find(card.school_list, value in (_selected_schools + [COLORLESS])) != null and (
				(0 in _selected_card_types) and card.type = 'creature' and card.creature_object != null and card.creature_object.is_construct = false or
				(1 in _selected_card_types) and card.type = 'invocation' or
				(2 in _selected_card_types) and card.type = 'creature' and card.creature_object != null and card.creature_object.is_construct = true
			)
		",

		_backed_up_cursor_card_name: { type: "null|string" },

		_prev_cursor: { default: 0 },
		_cursor: { default: 0, set: "[set(_data, value), set(_prev_cursor, int<- _data)]" },
		_cursor_target: { type: "null|int" },
		_anim_speed: { default: 1 },

		_selected_schools: { type: "[int]", default: [1] },
		_selected_school: "int :: if(_selected_schools = [], 1, _selected_schools[0])",

		_selected_card_types: { type: "[int]", default: [1] },

		_calculate_filters: "def() ->commands [
			set(_selected_schools, [label.index | label <- level.chars, label is obj library_label, label.grouping = 'school', label.selected]),
			set(_selected_card_types, [label.index | label <- level.chars, label is obj library_label, label.grouping = 'card_type', label.selected]),
		]",

		_calculate_visible_cards: "def(string|null card_name=null) ->commands [
			set(_visible_cards, new_visible),
			if(_cursor >= 0 and _cursor < size(_visible_cards), [
				set(_cursor, new_index)
			] where new_index = max(index(new_visible, find(new_visible, value.name > if(card_name != null, card_name, _visible_cards[_cursor].name))) - 1, 0))
		] where new_visible = filter(_all_cards, _filter_card(value.card))
		",

		_reserve_animation_time: "def(int ncycles) ->commands
			set(_anim_end_time, max(_anim_end_time, cycle) + ncycles+1)",

		_anim_end_time: { default: 0 },
		_animating: "bool :: cycle < _anim_end_time",

		_card_transition: { type: "null|string" },

		_card_y_pos: "int :: (level_height*2)/5",

		_animation_src: { type: "int|null" },
		_animation_ticks: { type: "decimal", default: 1.0 },

		animation_tick: "def() ->commands if(_animation_ticks < 1.0 and _animation_src != null, [
			set(_animation_ticks, ticks),
			map(_visible_cards,
			if(card != null,
			[
				set(card.mid_x, level_width/2 + int(sign(v)*sqrt(abs(v))*px(320))),
				set(card.mid_y, _card_y_pos),
				set(card.card_size, 1.5 - abs(v)*0.2),
			])
			where v = mix(prev_pos, pos, easing_fn(ticks))
			where prev_pos = index - _animation_src
			where pos = index - _cursor
			where card = value.obj)
			where easing_fn = if(_cursor = _cursor_target or _cursor_target = null, def(decimal v) ->decimal if(v = 0.0, 0.0, v = 1.0, 1.0, 0.5*(1 - cos(v*180.0))), def(decimal v) ->decimal v)
		] where ticks = min(1.0, _animation_ticks + _anim_speed/25.0))",

		_check_show_tips: "def(obj card card) ->commands [
			if(card.zorder = 100 and find(level.chars, value = card) != null, [
				card.show_card_tips()
			])
		]",

		_update_card_objects: "def() ->commands [
			set(_card_transition, null),

			map(level.chars, if(value is obj card and find(_visible_cards, value.obj = context.value) = null,
			
			switch(_card_transition,

			  'move_down', [animate(value, {
				alpha: 0,
				y: value.y + 200,
			  }, {
			    duration: 15,
				on_complete: [remove_object(value), set(value.alpha, 255)]
			  })],

			  'move_up', [animate(value, {
				alpha: 0,
				y: value.y - 200,
			  }, {
			    duration: 15,
				on_complete: [remove_object(value), set(value.alpha, 255)]
			  })],

			  remove_object(value)))),

			[
			[
				if(entry.obj and find(level.chars, value = entry.obj) != null, [
					entry.obj.clear_card_tips(),
					if(pos = 0, schedule(50, bind_command(me._check_show_tips, entry.obj))),
					set(entry.obj.zorder, 100 - abs(pos)),
					set(_animation_src, _prev_cursor),
					set(_animation_ticks, 0.0),
					set(_anim_end_time, max(_anim_end_time, cycle) + 25/_anim_speed),
				], [
					obj.clear_card_tips(),
					if(pos = 0, schedule(50, bind_command(me._check_show_tips, obj))),
					set(entry.obj, obj),
					set(obj.zorder, 100 - abs(pos)),
					add_object(obj),
					set(obj.mid_x, level_width/2 + int(sign(pos)*sqrt(abs(pos))*px(320))),
					set(obj.mid_y, _card_y_pos),
					set(obj.card_size, 1.5 - abs(pos)*0.2),

					if(_card_transition = 'move_up', [
						add(obj.mid_y, 200),
						set(obj.alpha, 0),
						animate(obj, {
							mid_y: _card_y_pos,
							alpha: 255,
						}, {
							duration: 15,
						})
					]),

					if(_card_transition = 'move_down', [
						add(obj.mid_y, -200),
						set(obj.alpha, 0),
						animate(obj, {
							mid_y: _card_y_pos,
							alpha: 255,
						}, {
							duration: 15,
						})
					]),

				]

				where obj = if(entry.obj, entry.obj, object('card', 0, 0, {
					card_type: entry.card,
					controller: me,
					in_hand: false,
					allow_drag: false,
					card_size: 1.5 - abs(pos)*0.2,
				}))
				),
			]
			where entry = _visible_cards[index]
			where prev_pos = index - _prev_cursor
			where pos = index - _cursor
			| index <- map(range(13), _cursor+value-6), index >= 0 and index < size(_visible_cards)]
		]",

		_card_label: { type: "null|obj label" },

		_display_text: {
			type: "string",
			default: "",
			set: "if(value != _data, [
				set(_data, value),
				if(_card_label, remove_object(_card_label)),
				spawn('label', 0, 0, {
					_text: [value],
					mid_x: level_width/2,
					mid_y: _card_y_pos + px_vert(300),
				}, [
					set(_card_label, child),
				]),
			])",
		},

		px_vert: "def(int pixels) ->int if(res%2 = 1, res+1, res) where res = int((decimal(pixels)*decimal(level_height))/900.0)",

		_calculate_label_text: "def() ->string
		if(_animating = false and editing_deck and _current_card_entry != null,
		  if(entry = null, '0/' + str(_current_card_entry.num_copies) + ' in deck',
		     str(entry.count) + '/' + str(_current_card_entry.num_copies) + ' in deck') where entry = find(deck, value.card.name = lib.citadel.base_card_name(_current_card_entry.name)),
			if(_animating = false and _current_card_entry != null, str(_current_card_entry.num_copies) + ' copies', '')
		)",

		create_artist_label: "def() ->commands if(text != current_text, [
			remove_object(_artist_label),
			set(_artist_label, null),
			set(_current_artist, null),
			if(text != null, [
				set(_current_artist, if(_current_card_entry != null, _current_card_entry.card.artist)),
				spawn('library_label', 0, 0, {
					_font_size: lib.citadel.px(24),
					_text: text,
					grouping: 'artist',
					selected: _artist_selected,
					index: 1,
				}, [
					child.render_label();
					set(child.x, level_width - lib.citadel.px(16) - child.text_area.width);
					set(child.y2, level_height - lib.citadel.py(16)),
					set(me._artist_label, child),
				])
			]
			),
		])
		where text = _calculate_artist_text()
		where current_text = if(_artist_label, _artist_label.get_text)",

		_calculate_artist_text: "def() ->string|null
			if(_current_card_entry != null and _current_card_entry.card.get_artist != null,
				'Artist: ' + _current_card_entry.card.get_artist.name
			)
		",

		_artist_label: { type: "null|obj library_label" },
		_current_artist: { type: "null|string" },
		_artist_selected: { type: "bool", default: false, get: "_data and _current_artist != null" },

		_move_artist: "def(int dir) ->commands [
			set(_current_artist, artists[new_index])
		] where new_index = if(n+dir < 0, size(artists)-1, (n+dir)%size(artists))
		  where n = index(artists, _current_artist)
		  where artists = [string]<- keys(map<- get_document('data/artists.cfg'))
		  asserting _current_artist is string",

		create_labels: "def() ->commands [

			[remove_object(label) | label <- level.chars, label is obj library_label],

			layout_labels(
			map(['MATERIA','|','ENTROPIA','|','GAEA','|','SAPIENZA','|','AETHER'],
				object('library_label', 0, level_height-lib.citadel.py(120), {
					_text: value,
					grouping: if(value != '|', 'school'),
					selected: ((index+1)/2+1) in _selected_schools,
					index: (index+1)/2 + 1,
				}),
			)),

			layout_labels(
			map(['CREATURE','|','INVOCATION','|','LAND'],
				object('library_label', 0, level_height-lib.citadel.py(60), {
					_text: value,
					grouping: if(value != '|', 'card_type'),
					selected: if(_artist_selected, true, index = 0),
					index: (index+1)/2,
				}),
			)),

			bind_command(_calculate_filters),
			bind_command(_calculate_visible_cards),
			bind_command(_update_card_objects),
		]",

		label_clicked: "def(obj library_label label) ->commands execute(me, [
			debug('click ' + str(cycle)),
			if(label.grouping = 'school' and label.selected = false,
			[
				set(_card_transition,if(label.index < _selected_school, 'move_up', 'move_down'))
			]
			),
			if(label.grouping in ['school', 'card_type'],
				if(level.player.ctrl_mod_key%4 != 0,
					set(label.selected, not label.selected),
					[set(c.selected, c = label) | c <- level.chars, c is obj library_label, c.grouping = label.grouping]
				)
			),

			if(label.grouping = 'artist', [
				//selecting the artist selects all items so we can view
				//all items by that artist.
				[set(item.selected, true) | item <- level.chars, item is obj library_label],
				set(_artist_selected, true),
			], [
				if(_artist_label != null, set(_artist_label.selected, false)),
				set(_artist_selected, false),
			]),

			sound(fname, lib.citadel.sound_volume(fname)) where fname = 'interface/card-page-flip${1d4}.wav',

			bind_command(_calculate_filters),
			bind_command(_calculate_visible_cards),
			bind_command(_update_card_objects),
		])",

		_mouse_x: "int <- head_or_die(level.player.ctrl_mice)[0]",
		_mouse_y: "int <- head_or_die(level.player.ctrl_mice)[1]",

		_mouseover_deck_item: "int ::
			index(deck, find(deck, _mouse_x >= value.x and _mouse_y >= value.y and _mouse_y <= value.y2 and (value in level.chars)))
		",

		_last_mouseover_deck_item: { default: -1 },

		_keys_down: { type: "[string]", default: [] },

		deck_widget: { type: "obj scrollable_pane|null" },
		cards_widget: { type: "obj scrollable_pane|null" },

		deck: "[obj library_deck_entry] <- if(cards_widget = null, [], map(cards_widget.elements, value.obj))",

		exit_to_titlescreen: "def() ->commands [
			if(editing_deck, done_editing_deck()),
			teleport('titlescreen.cfg', '', 'fade', playable)
			  where playable = object_playable('title_controller', 0, 0, 0, {
					 _mm_client_state: _mm_client_state,
				})
		]",

		_dragging: { default: false },
		_drag_anchor: { type: "null|[int,int]" },
		_drag_anchor_cursor: { type: "null|int" },

		drag_process: "def() ->commands if(_dragging and _drag_anchor != null and _drag_anchor_cursor != null,
		[
			if(button = false, [
			  set(_dragging, false),
			  set(_cursor, round(desired_pos)),
			  _reserve_animation_time(10),
			  

				map(_visible_cards,
				if(card != null, [
				if(v = 0, schedule(50, bind_command(me._check_show_tips, card))),
				animate(card, {

					mid_x: level_width/2 + int(sign(v)*sqrt(abs(v))*px(320)),
					mid_y: _card_y_pos,
					card_size: 1.5 - abs(v)*0.2,
				}, {
					duration: 10,
				}),
					set(card.zorder, 100 - abs(int(index - round(desired_pos)))),
				])
				where v = index - round(desired_pos)
				where card = value.obj ),
			],

			map(_visible_cards,
			if(card != null,
			[
				set(card.mid_x, level_width/2 + int(sign(v)*sqrt(abs(v))*px(320))),
				set(card.mid_y, _card_y_pos),
				set(card.card_size, 1.5 - abs(v)*0.2),
				set(card.zorder, 100 - abs(int(index - floor(desired_pos)))),
			])
			where v = index - desired_pos
			where card = value.obj )
			), //end if button = false


			debug(['drag', _mouse_x, _mouse_y]),
		]
		where desired_pos = clamp(_drag_anchor_cursor + (_drag_anchor[0] - _mouse_x)*0.005, 0, size(_visible_cards))
		where button = find(head_or_die(level.player.ctrl_mice), value = 'left') != null
		)",

		mouse_drag_card_start: "def(obj card card) ->commands if(_animating = false, [
			set(_dragging, true),
			set(_drag_anchor, [_mouse_x, _mouse_y]),
			set(_drag_anchor_cursor, _cursor),
			[card.clear_card_tips() | card <- level.chars, card is obj card],
		])",

		_play_card_add_sound: "def() ->commands
			sound(fname, lib.citadel.sound_volume(fname)) where fname = 'Interface/card-add${1d4}.wav',
		",

		card_right_clicked: "def(obj card card) ->commands
		[
			remove_card_from_deck(card.card_type.name)
		]",

		card_clicked: "def(obj card card) ->commands
		[
		if(editing_deck and pos != -1 and pos = _cursor,
		[
			add_deck_item(class card<- card.card_type),

		]),
		
			//move card to the front
			set(_cursor_target, pos),
			set(_anim_speed, max(1, abs(pos - _cursor))),
			debug('SPEED: ' + str(cycle)),
		] where pos = index(_visible_cards, find(_visible_cards, value.obj = card))
		",

		remove_deck: "def(obj library_deck_summary summary) ->commands
		[
			if(_delete_item_button != null, [
				remove_object(_delete_item_button),
				set(_delete_item_button, null),
			]),
			remove_object(summary),

			if(deck_widget != null,
					
			let old_elements = map(deck_widget.elements, {obj: value.obj, ypos: value.ypos});
			[
			[
			 add(s.ypos, - (obj library_deck_summary<- s.obj).area.height)
			 | s <- deck_widget.elements, s.ypos > item.ypos
			],

			set(deck_widget.elements, filter(deck_widget.elements, value.obj != summary))
			
			] where item = find_or_die(deck_widget.elements, value.obj = summary);
			deck_widget.recalculate();
			deck_widget.animate_element_movement_from_previous_position(old_elements, 20)
			),

			set(_decks, remove_from_map(_decks, summary.deck_name)),

			_reserve_animation_time(20),
		]
		",

		enter_deck_summary: "def(obj library_deck_summary summary) ->commands
		[
			if(_delete_item_button, remove_object(_delete_item_button)),
			spawn('svg_button', 0, 0, {
				icon: 'cancel.svg',
				zorder: 1000,
				mid_x: summary.x2 - px(12),
				mid_y: summary.y + px(12),
				mouseover_color: [255, 0, 0],
				mouseoff_color: [196, 0, 0],
				size: px(24),
				click_handler: (def()->commands remove_deck(summary)),
				user_info: summary,
				clip_area: summary.clip_area,
			}, [
				set(_delete_item_button, child),
			]),
		]",

		leave_deck_summary: "def(obj library_deck_summary summary) ->commands
		[
			if(_delete_item_button != null and _delete_item_button.user_info = summary, [
				remove_object(_delete_item_button),
				set(_delete_item_button, null)
			])
		]",

		create_specified_deck: "def([string] cards) ->commands execute(me, [
			set(_create_new_deck_button, null),
			remove_object(_create_new_deck_button),
			set(editing_deck, true),
			remove_object(deck_widget),
			set(deck_widget, null),

			spawn('scrollable_pane', 0, 0, {
			  x: level_width - px(300),
			  y: px(28 + 90),
			  area_width: px(290),
			  area_height: py(500),
			  left_align: false,
			  step_size: py(72),

			   elements: map(card_names, {
			    ypos: px(36) * index,
			    obj: object('library_deck_entry', 0, 0, {
			      card: lib.citadel.create_card(value),
			      count: count(cards, value = context.value),
			    }
			    )})
		           where card_names = unique(sort(cards))
			}, [
			  set(me.cards_widget, child)
			]);
			map(me.deck, value.pulse()),
		])",

		create_new_deck: "def() ->commands execute(me, [
			set(_create_new_deck_button, null),
			remove_object(_create_new_deck_button),

			set(editing_deck, true),
			sound(fname, lib.citadel.sound_volume(fname)) where fname = 'Interface/deck-open.wav',
			remove_object(deck_widget),
			set(deck_widget, null),

			spawn('scrollable_pane', 0, 0, {
			  x: level_width - px(300),
			  y: px(28 + 90),
			  area_width: px(290),
			  area_height: py(500),
			  left_align: false,
			  step_size: py(72),

			   elements: [],
			}, [
			  set(me.cards_widget, child)
			]),

			 spawn('library_deck_summary', 0, 0, {zorder: 500, deck_name: find_or_die(map(range(100), 'New Deck ' + str(value+1)), _decks[value] = null), x2: level_width, y: py(28)}),

			spawn('button_controller', level_width - px(184), py(650), {
				text: 'Done',
				on_click: me.done_editing_deck,
			}, [set(_done_editing_deck_button, child)]),

		])",

		deck_summary_clicked: "def(obj library_deck_summary summary) ->commands
		if(editing_deck = false,
		[
			remove_object(_delete_item_button),
			set(_delete_item_button, null),

			sound(fname, lib.citadel.sound_volume(fname)) where fname = 'Interface/deck-open.wav',
			set(editing_deck, true),
			remove_object(deck_widget),
			set(deck_widget, null),

			add_object(summary),
			set(summary.clip_area, null),

			if(_create_new_deck_button != null, [
				set(_create_new_deck_button, null),
				remove_object(_create_new_deck_button),
			]),

			 set(summary.highlighted, false),
			 animate(summary, {
				x: level_width - px(260),
				y: py(28)
			 }, {
				duration: 25,
			 }),

			 remove_object(cards_widget),

			spawn('scrollable_pane', 0, 0, {
			  x: level_width - px(300),
			  y: px(28 + 90),
			  area_width: px(290),
			  area_height: py(500),
			  left_align: false,
			  step_size: py(72),

			   elements: map(card_names, {
			    ypos: px(36) * index,
			    obj: object('library_deck_entry', 0, 0, {
			      card: lib.citadel.create_card(value),
			      count: count(deck.cards, value = context.value),
			    }
			    )}),
			}, [
			  set(me.cards_widget, child)
			]);

			map(me.deck, value.pulse()),

			 execute(me, spawn('button_controller', level_width - px(184), py(650), {
				text: 'Done',
				on_click: me.done_editing_deck,
			 }, [set(_done_editing_deck_button, child)])),

		] where card_names = unique(sort(deck.cards))
		  where deck = Deck <- _decks[summary.deck_name])",
		
		done_editing_deck: "def() ->commands execute(me, [
			remove_object(_prev_window_deck_button),
			set(_prev_window_deck_button, null),

			remove_object(_next_window_deck_button),
			set(_next_window_deck_button, null),

			remove_object(_done_editing_deck_button),
			set(_done_editing_deck_button, null),
			[remove_object(entry) |
			 entry <- level.chars, entry is obj library_deck_entry],
			set(editing_deck, false),
			sound(fname, lib.citadel.sound_volume(fname)) where fname = 'Interface/deck-close.wav',
			remove_object(summary),

			set(_decks, if(new_deck.cards, old_decks + {(new_deck.name): new_deck}, remove_from_map(old_decks, new_deck.name)))
			  where new_deck = {
					name: summary.deck_name,
					schools: [],
					cards: fold(map(deck, [value.card.name]*value.count), a+b) or [],
				}
			  where old_decks = remove_from_map(account_info.decks, summary.original_deck_name or summary.deck_name),

			fire_event('create'),
		]) where summary = find_or_die(level.chars, value is obj library_deck_summary)
		",

		add_deck_item: "def(class card card) -> commands
		[
				if(obj != existing, ([
					_play_card_add_sound(),

					set(cards_widget.elements, map(elements, {ypos: index*py(36), obj: value.obj}));

					cards_widget.recalculate()
				] where elements = cards_widget.elements[:insert_index] + [{ypos: 0, obj: obj}] + cards_widget.elements[insert_index:])
				  asserting cards_widget != null,
				
				if(obj.count < deck_rules.max_duplicates and obj.count < find_or_die(_all_cards, value.name = card.name).num_copies, [
					_play_card_add_sound(),
					add(obj.count, 1),
					bind_command(obj.render_entry),
				])),

				obj.pulse(),

				[fire_event(summary, 'render') | summary <- level.chars, summary is obj library_deck_summary],
		]
		where obj = if(existing, existing, object('library_deck_entry', 0, 0, { card: card }))
		where existing = find(deck, value.card.name = card.name)
		where insert_index = if(insert_pos, index(deck, insert_pos), size(deck))
		where insert_pos = find(deck, value.card.name >= card.name)
		asserting cards_widget != null
		",

		remove_card_from_deck: "def(string card_name) ->commands
		execute(me,
		if(entry != null,
			if(entry.count > 1, [
				sound(fname, lib.citadel.sound_volume(fname)) where fname = 'interface/card-remove${1d3}.wav',
				add(entry.count, -1),
				bind_command(entry.render_entry),
			], [
				remove_deck_item_index(index(deck, entry))
			])
		)
		)
		where entry = find(deck, value.card.name = card_name)",

		remove_deck_item_index: "def(int item_index) ->commands
		execute(me, [

			remove_object(_delete_item_button),
			set(_delete_item_button, null),

			sound(fname, lib.citadel.sound_volume(fname)) where fname = 'interface/card-remove${1d3}.wav',

			remove_object(deck[item_index]),

			set(_last_mouseover_deck_item, -1),

			if(cards_widget != null,
					
			let old_elements = map(cards_widget.elements, {obj: value.obj, ypos: value.ypos});
			[
			[
			 add(s.ypos, - (obj library_deck_entry<- s.obj).area.height)
			 | s <- cards_widget.elements, s.ypos > item.ypos
			],

			set(cards_widget.elements, filter(cards_widget.elements, index != item_index))
			
			] where item = cards_widget.elements[item_index];
			cards_widget.recalculate();
			cards_widget.animate_element_movement_from_previous_position(old_elements, 20)
			),

			set(_anim_end_time, max(_anim_end_time, cycle) + 21),

			[fire_event(entry, 'render')
			 | entry <- level.chars, entry is obj library_deck_entry],
		])
		",

		remove_deck_item: "def() ->commands if(_delete_item_button != null,
		  remove_deck_item_index(_last_mouseover_deck_item)
		    asserting _last_mouseover_deck_item != -1)",

		_next_window_deck_button: { type: "obj button_controller|null" },
		_prev_window_deck_button: { type: "obj button_controller|null" },

		_done_editing_deck_button: { type: "obj button_controller|null" },
		_create_new_deck_button: { type: "obj button_controller|null" },
		_delete_item_button: { type: "obj svg_button|null" },

		_search_string: { type: "string", default: "" },
		_search_string_updated: { type: "int", default: -1 },

		_key_pressed: "def(string k) ->commands if(_visible_cards, [
			set(_search_string, s),
			set(_search_string_updated, cycle),
			set(_cursor, index); _update_card_objects(); _update_card_objects()
		] where index = index(_visible_cards, target_entry)
		  where target_entry = find_or_die(_visible_cards, lower(value.name[:size(s)]) >= s or index = size(_visible_cards)-1)
		  where s = if(cycle < _search_string_updated + 25, _search_string + k, k)
		)",
	},

	on_construct: "[set(lib.citadel.native_card_sizes, [1.1, 1.3, 1.5])]",

	on_process: "[
		[ _key_pressed(k) | k <- level.player.ctrl_keys, k not in _keys_down, k >= 'a', k <= 'z'],
		set(_keys_down, level.player.ctrl_keys),

		animation_tick(),
		drag_process(),

		create_artist_label(),

		set(_display_text, _calculate_label_text()),
		//do something when cards in deck are moused over.
		//currently disabled.
		if(_animating = false and editing_deck,
		[
			set(_last_mouseover_deck_item, mouseover_deck_item),
			if(mouseover_deck_item != _last_mouseover_deck_item,
			[
				if(_delete_item_button, [
					remove_object(_delete_item_button),
					set(_delete_item_button, null),
				]),

				if(mouseover_deck_item != -1, [
					spawn('svg_button', 0, 0, {
						icon: 'cancel.svg',
						zorder: 1000,
						mid_x: deck[mouseover_deck_item].x2 - 12,
						mid_y: deck[mouseover_deck_item].y + 12,
						mouseover_color: [255, 0, 0],
						mouseoff_color: [196, 0, 0],
						click_handler: remove_deck_item,
					}, [
						set(_delete_item_button, child),
					]),
				]),

			])
		]) where mouseover_deck_item = _mouseover_deck_item,

		if(_cursor = _cursor_target, [set(_cursor_target, null), set(_anim_speed, 1)]),
		if((level.player.ctrl_left and _cursor_target = null or _cursor_target != null and _cursor_target < _cursor) and _animating = false and _cursor > 0,
		   [add(_cursor, -1), bind_command(_update_card_objects)]),

		if((level.player.ctrl_right and _cursor_target = null or _cursor_target != null and _cursor_target > _cursor) and _animating = false and _cursor < size(_visible_cards)-1,
		   [add(_cursor, 1), bind_command(_update_card_objects)]),

		if(level.player.ctrl_up and _animating = false, [
			set(_anim_end_time, max(_anim_end_time, cycle) + 16),
			set(_card_transition, 'move_up'),
			sound(fname, lib.citadel.sound_volume(fname)) where fname = 'interface/card-page-flip${1d4}.wav',

			if(_artist_selected,
			   _move_artist(-1),
			   set(_selected_schools, if(_selected_schools = [], [1], [if(_selected_schools[0] <= 1, 5, _selected_schools[0]-1)]))
			),
			bind_command(create_labels),
		]),
		if(level.player.ctrl_down and _animating = false, [
			set(_anim_end_time, max(_anim_end_time, cycle) + 16),
			set(_card_transition, 'move_down'),
			sound(fname, lib.citadel.sound_volume(fname)) where fname = 'interface/card-page-flip${1d4}.wav',

			if(_artist_selected,
			   _move_artist(1),
			   set(_selected_schools, if(_selected_schools = [], [1], [if(_selected_schools[0] >= 5, 1, _selected_schools[0]+1)])),
			),
			bind_command(create_labels),
		]),
	]",


	on_create: "[
		set(_all_cards,
		    map(unique(sort(owned_cards)),
				{
					name: value,
					card: lib.citadel.create_card(value),
					num_copies: count(owned_cards, value = context.value),
				}
			   )
		)
		 where owned_cards = map(filter(get_collection(), lib.citadel.card_exists(value)), lib.citadel.actual_card_name(value)),

		if(find(level.frame_buffer_shaders, value.shader_info = 'citadel_area_blur') = null,
			add(level.frame_buffer_shaders, [{
				begin_zorder: -1000000,
				end_zorder: 200,
				shader_info: 'citadel_area_blur',
			}])
		),

		remove_object(cards_widget),
		set(cards_widget, null),

		if(specified_deck != null, [
			create_specified_deck(specified_deck),
		], [

			remove_object(deck_widget),

			spawn('scrollable_pane', 0, 0, {
				x: level_width - px(300),
				y: px(28 + 72),
				area_width: px(290),
				area_height: py(500),
				left_align: false,
				step_size: py(72),
				elements: map(_decks, {ypos: py(72*index), obj: object('library_deck_summary', 0, 0, {selected: false, deck_name: key})}),
			}, [
				set(me.deck_widget, child)
			]),

			 spawn('button_controller', level_width - px(184), py(650), {
				text: 'New Deck',
				on_click: me.create_new_deck,
				button_width: px(144),
			 }, [set(_create_new_deck_button, child)]),
		]),

		fire_event('window_resize', {width: level.camera_position[2], height: level.camera_position[3]}),
	]",

	on_window_resize: "[
		set(level.dimensions, [0,0,new_width,new_height]),
		fire_event('dimensions_updated'),
	] where new_width = max(int<- arg.width,800)-1
	  where new_height = max(int<- arg.height, 600)-1",
	
	on_dimensions_updated: "[
		create_labels(),

		if(_create_new_deck_button, [
			set(_create_new_deck_button.mid_x, level_width - px(184)),
		]),
	]",
	
	on_type_updated: "fire_event('create')",

	on_being_removed: "[
		remove_object(deck_widget),
		remove_object(cards_widget),
		map(spawned_children, remove_object(value)),
		[remove_object(c) | c <- level.chars, c is obj library_deck_entry|obj library_deck_summary],
		set(level.frame_buffer_shaders, filter(level.frame_buffer_shaders, value.shader_info != 'citadel_area_blur')),
	]",
}
