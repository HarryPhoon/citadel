{
	id: "campaign_reward_editor",
	is_strict: true,
	hidden_in_game: true,

	properties: {
		title_controller: { type: "obj title_controller" },
		controller: { type: "obj campaign_dialog_editor" },

		encounter: { type: "CampaignDialogNode" },
		reward: { type: "CampaignRewardInfo" },

		save_fn: { type: "function()->commands" },

		_read_int: "def(null|obj text_entry entry) ->null|int
			if(entry != null and regex_match(entry.text, '-?[0-9]+'), int(entry.text))
		",

		update: "def() ->commands
			if(_read_int(_gold) != null, set(reward.gold, int<- _read_int(_gold)));
			if(_read_int(_packs) != null, set(reward.packs, int<- _read_int(_packs)));

			map(_devotion,
				if(_read_int(value) != null, set(reward.devotion[index+1], int<- _read_int(value)))
			);
			
			set(reward.flags, flags)
			  where flags =
			   if(_flags,
				  filter(
				  map(split(regex_replace(_flags.text, ' *, *', ',')),
				      regex_replace(regex_replace(value, '^ +', ''), ' +$', '')
				  ),
				  value
				  ),
				  []
			   );
			save_fn()
		",

		_gold: { type: "null|obj text_entry" },
		_packs: { type: "null|obj text_entry" },
		_flags: { type: "null|obj text_entry" },

		_devotion: { type: "[obj text_entry]", default: [] },

		_location: { type: "null|obj combo_controller" },

		change_location: "def(int n) ->commands
			set(reward.location, if(n > 0, lib.citadel.campaign_locations[n-1].name));
			save_fn()
		",

		_all_cards: { type: "null|obj scrollable_pane" },

		_cards: { type: "null|obj scrollable_pane" },
		_cards_label: { type: "null|obj label" },

		add_card: "def(class card card) ->commands
			add(reward.cards, [card.name]);
			save_fn();
			spawn_cards()
		",

		remove_card: "def(int n) ->commands
			set(reward.cards, reward.cards[:n] + reward.cards[n+1:]);
			save_fn();
			spawn_cards()
		",

		spawn_cards: "def() ->commands
		[
			remove_object(_cards_label),
			spawn('label', {
				x: lib.gui.py(400),
				y: lib.gui.py(10),
				_text: ['Cards'],
				_font_size: lib.gui.py(30),
				_halign: 'left',
			}, [
				set(_cards_label, child),
			]),

			remove_object(_cards),

			spawn('scrollable_pane', {
				x: lib.gui.py(300),
				y: lib.gui.py(60),
				area_width: lib.gui.py(400),
				area_height: lib.gui.py(500),
				focus_on_mouseover: true,
				elements: [],
				
				pending_elements: map(card_objs,
				{
					xpos: 0,
					ypos: nrow*lib.gui.py(400),
					height: lib.gui.py(340),
					create: def()->custom_obj object('card', {
						card_type: value,
						in_hand: false,
						allow_drag: false,
						card_size: 2.0,
						show_shadow: false,
						//mouse_enter_handler: bind(me.mouseover_card, value),
						//mouse_leave_handler: bind(me.mouseoff_card, value),
						click_handler: bind(me.remove_card, index),
					}),
				}
				where nrow = index
				where ncol = 0
				),
			}, [
				set(_cards, child)
			]) where card_objs = map(reward.cards, lib.citadel.create_card(value)),

		]
		",

		spawn_controls: "def() ->commands
		[

			spawn('label', {
				x: lib.gui.py(20),
				y: lib.gui.py(20),
				_text: ['Gold:'],
				_font_size: lib.gui.py(20),
				_halign: 'left',
			}),

			spawn('text_entry', {
				x: lib.gui.py(100),
				y: lib.gui.py(34),
				_width: lib.gui.py(80),
				text: str(reward.gold),
				default_text: 'Gold reward',
				_on_change: me.update,
			}, [
				set(_gold, child),
			]),

			spawn('label', {
				x: lib.gui.py(20),
				y: lib.gui.py(50),
				_text: ['Packs:'],
				_font_size: lib.gui.py(20),
				_halign: 'left',
			}),

			spawn('text_entry', {
				x: lib.gui.py(100),
				y: lib.gui.py(64),
				_width: lib.gui.py(80),
				text: str(reward.packs),
				default_text: 'Packs reward',
				_on_change: me.update,
			}, [
				set(_packs, child),
			]),

			spawn('label', {
				x: lib.gui.py(20),
				y: lib.gui.py(80),
				_text: ['DEVOTION'],
				_font_size: lib.gui.py(20),
				_halign: 'left',
			}),

			map(lib.citadel.school_info[1:], [
				spawn('label', {
					x: lib.gui.py(20),
					y: lib.gui.py(110) + lib.gui.py(40)*index,
					_text: [value.name + ':'],
					_font_size: lib.gui.py(20),
					_halign: 'left',
				}),

				spawn('text_entry', {
					x: lib.gui.py(100),
					y: lib.gui.py(124) + lib.gui.py(40)*index,
					_width: lib.gui.py(80),
					text: str(reward.devotion[index+1] or 0),
					default_text: 'Devotion reward',
					_on_change: me.update,
				}, [
					add(_devotion, [child]),
				]),
			]),

			spawn('label', {
				x: lib.gui.py(20),
				y: lib.gui.py(400),
				_text: ['Flags:'],
				_font_size: lib.gui.py(20),
				_halign: 'left',
			}),

			spawn('text_entry', {
				x: lib.gui.py(100),
				y: lib.gui.py(414),
				_width: lib.gui.py(240),
				text: fold(reward.flags, a + ', ' + b, ''),
				default_text: 'Enter flags to set (comma-separated)',
				_on_change: me.update,
			}, [
				set(_flags, child),
			]),

			spawn('label', {
				x: lib.gui.py(20),
				y: lib.gui.py(440),
				_text: ['Location:'],
				_font_size: lib.gui.py(20),
				_halign: 'left',
			}),

			spawn('combo_controller', {
				x: lib.gui.py(100),
				y: lib.gui.py(460),

				items: ['(none)'] + map(lib.citadel.campaign_locations, value.get_display_name()),

				selected_index: 1 + index(lib.citadel.campaign_locations, find(lib.citadel.campaign_locations, value.name = reward.location)),

				on_change: me.change_location,

				_width: lib.gui.py(120),
				_height: lib.gui.py(16),
				_font_size: lib.gui.py(14),
				color_scheme: lib.citadel.library_color_scheme,

				tooltip: 'Location to transport the player to',
			}, [
				set(_location, child),
			]),

			spawn('scrollable_pane', {
				x: lib.gui.py(800),
				y: lib.gui.py(20),
				area_width: lib.gui.py(300),
				area_height: lib.gui.py(500),
				focus_on_mouseover: true,
				elements: [],
				
				pending_elements: map(card_objs,
				{
					xpos: ncol*lib.gui.py(90),
					ypos: nrow*lib.gui.py(90),
					height: lib.gui.py(120),
					create: def()->custom_obj object('card', {
						card_type: value,
						in_hand: false,
						allow_drag: false,
						card_size: 0.5,
						show_shadow: false,
						//mouse_enter_handler: bind(me.mouseover_card, value),
						//mouse_leave_handler: bind(me.mouseoff_card, value),
						click_handler: bind(me.add_card, value),
					}),
				}
				where nrow = index/3
				where ncol = index%3
				),
			}, [
				set(_all_cards, child)
			]) where card_objs = map(lib.citadel.get_cards_in_set('core'), lib.citadel.create_card(value)),

			spawn_cards()
		]
		",

	},

	events: {
		create: "
			spawn_controls()
		",

		being_removed: "map(spawned_children, remove_object(value))",
	},
}
