{
	id: "campaign_tile_editable",
	is_strict: true,

	always_active: true,
	use_absolute_screen_coordinates: true,

	properties: {
		tile_type: { type: "string" },
		color: { type: "[decimal,decimal,decimal]" },
		hex_width: "int :: round_to_even(hex_height*1.3)",
		hex_height: "int :: lib.citadel.px(78)",
		hex_indent: "int :: hex_width - hex_height",
		hex_reverse_indent: "int :: hex_width - hex_indent",

		controller: { type: "obj campaign_map_editor" },

		selected: { type: "bool", default: false },

		render_tile: "def() ->frame
			query_cache(global_cache(16), [color,selected], lib.citadel.render_frame(c, hex_width, hex_height, [
				c.set_source_rgba(color[0], color[1], color[2], 1.0),

				outline,

				c.fill(),

				if(selected, [
					c.set_line_width(2),
					c.set_source_rgba(1,1,1,1),
					outline,
					c.stroke(),
				])
			] where outline = [
				c.move_to(hex_indent, 0),
				c.line_to(hex_reverse_indent, 0),
				c.line_to(hex_width, hex_height/2),
				c.line_to(hex_reverse_indent, hex_height),
				c.line_to(hex_indent, hex_height),
				c.line_to(0, hex_height/2),
				c.line_to(hex_indent, 0),
			]) where c = canvas()
			)
		",
	},

	on_create: "set(animation, render_tile())",

	on_mouse_enter: "
	[
	]",
	
	
	on_mouse_leave: "
	[
	]
	",
	
	on_click: "
	[
		swallow_mouse_event(),
		[set(c.selected, c = me) | c <- level.chars, c is obj campaign_tile_editable];

		[set(c.animation, c.render_tile()) | c <- level.chars, c is obj campaign_tile_editable]
	]
	",
}
