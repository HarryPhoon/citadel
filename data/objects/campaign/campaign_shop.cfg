{
	id: "campaign_shop",
	is_strict: true,
	zorder: 50000,

	always_active: true,
	hidden_in_game: true,

	properties: {
		_controller: { type: "obj story_campaign_controller" },
		_cards: { type: "[{ type: string, quantity: int, price: int }]" },

		_grid: { type: "null|obj scrollable_pane" },
		grid: "obj scrollable_pane <- _grid",

		level_width: "int :: _controller.level_width",
		level_height: "int :: _controller.level_height",

		buy_item: "def(string type) ->commands execute(me, [
			if(response != null and dialog, [
				set(dialog.flavor_text_override, response),
				fire_event(dialog, 'create'),
			]) where dialog = find(level.chars, value is obj campaign_location_dialog),
			add(item.quantity, -1),
			add(_controller.player_collection, [type]),
			add(_controller.player_gold, -item.price),
			bind_command(find_or_die(level.chars, value is obj campaign_status_dialog).update_gold),
			fire_event('create'),
		]) where response = _controller.get_shop_response_purchase(type)
		   where item = find_or_die(_cards, value.type = type)",
	},

	on_create: "[
		if(_grid = null,
			spawn('scrollable_pane', 0, 0, {
				x: _controller.sidebar_left/2 - (col_width*3)/2,
				y: lib.citadel.px(70),
				area_width: col_width*3 + lib.citadel.px(4),
				area_height: level_height - lib.citadel.px(90),
				elements: cards,
				zorder: 5000,
				use_absolute_screen_coordinates: true,
			}, [
				set(_grid, child)
			]),

			[
				map(_grid.elements, remove_object(value.obj)),
				set(_grid.elements, cards),
				bind_command(_grid.recalculate),
			]
		)

	] where cards = fold(map(_cards, [{
			xpos: col_width*ncol,
			ypos: nrow*row_height,
			obj: object('card', 0, 0, {
				card_type: lib.citadel.create_card(value.type),
				controller: _controller,
				in_hand: false,
				allow_drag: false,
				card_size: 1.6,
				show_shadow: false,
				use_absolute_screen_coordinates: true,
			})
		}] + if(can_afford, [{
			xpos: col_width*ncol + lib.citadel.px(50),
			ypos: (nrow+1)*row_height - lib.citadel.py(80),
			obj: object('button_controller', 0, 0, {
				text: 'Buy',
				on_click: def()->commands bind_command(me.buy_item, value.type),
				button_width: lib.citadel.px(120),
				button_height: lib.citadel.py(30),
				_font_size: lib.citadel.px(18),
				use_absolute_screen_coordinates: true,
			})
		}], []) + [{
			xpos: col_width*ncol + lib.citadel.px(40),
			ypos: (nrow+1)*row_height - lib.citadel.py(90),
			obj: object('label', 0, 0, {
				_color: if(can_afford, [1,1,1,1], [1,0,0,1]),
				_text: [str(value.price) + ' Gold',
				        'Available: ' + str(value.quantity) + ' Owned: ' + str(count(_controller.player_collection, value = context.value.type))],
				_font_size: lib.citadel.px(20),
				use_absolute_screen_coordinates: true,
			})
		}]
		where can_afford = value.price <= _controller.player_gold and value.quantity > 0
		where nrow = index/3
		where ncol = index%3), a+b, [])
	  where col_width = lib.citadel.py(280)
	  where row_height = lib.citadel.py(580)
	
	",
}
