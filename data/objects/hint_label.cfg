{
id: "hint_label",
is_strict: true,

properties: {

	subject: { type: "null|custom_obj" },

	_delay: { default: 0 },
	_text: { type: "[string]" },

	_font: { type: "string", init: "lib.font.regular_font" },
	_font_size: { default: 32 },

	_render_key: "[_font, _font_size, _text]",

	_fade_duration: { default: 20 },

	text_area: "{
		width: decimal<- max(map(areas, value.width)),
		line_height: line_height,
		height: size(_text)*line_height,
	}
	where line_height = decimal<- max(map(areas, value.height))
	where areas = map(_text, canvas().text_extents(_font, _font_size, value))",

	_destroyed: { default: false },

	destroy: "def() ->commands [
	animate(me,
	{
		alpha: 0,
	},
	{
		duration: 20,
		on_complete: remove_object(me)
	}
	),
	
	set(_destroyed, true),
	]",
},

on_process: "if(subject != null and _destroyed = false, [set(mid_y, subject.y - h - 40), set(mid_x, subject.mid_x)])",

on_create: "[
 log('hint label'),
 set(animation, {
	id: 'fbo',
	image: 'fbo',
	x: 0, y: 0, w: canvas_width, h: canvas_height,
	scale: 1, frames: 1,
	fbo: query_cache(global_cache(8), _render_key, c.render(canvas_width, canvas_height,
	
	fold(map(_text, [
		c.translate(0, text_area.line_height),
		c.set_font(_font),
		c.set_font_size(_font_size),
		c.text_path(value),

		c.set_source_rgba(1, 1, 1, 1),
		c.fill(),
	]), a+b)))
}
	  where canvas_width = round_to_even(area.width + 24)
	  where canvas_height = round_to_even(area.height + 12)
	  where area = text_area
	  where c = canvas()
	
	),
	set(mid_x, mid_x),
	set(mid_y, mid_y),

	if(_fade_duration > 0, [
		set(alpha, 0),
		animate(me, {
			alpha: 0,
		}, {
			name: 'fade',
			duration: _delay,
		}),
		animate(me, {
			alpha: 255,
		}, {
			name: 'fade',
			duration: _fade_duration,
		})
	]),
]
",

}
