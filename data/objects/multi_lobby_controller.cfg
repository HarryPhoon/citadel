{
	id: "multi_lobby_controller",
	is_human: true,
	hidden_in_game: true,
	is_strict: true,

	properties: {
		title_controller: { type: "obj title_controller" },
		return_controller: { type: "custom_obj" },

		level_width: "int<- level.dimensions[2]",
		level_height: "int<- level.dimensions[3]",

		//the left/right side of the 'usable' area -- i.e. cutting off edges
		//to make for a 4:3 display.
		gui_left_edge: "int :: (level_width - (level_height*4)/3)/2",
		gui_right_edge: "int :: level_width - gui_left_edge",

		pane_left_edge: "int :: gui_right_edge - 445",

		_chat_area: { type: "null|obj chat_area" },

		receive_chat_messages: "def([{nick: string, message: string}] messages) ->commands
		[
			if(_chat_area,
				map(messages, _chat_area.message_received(value.nick, value.message))
			)
		]",

		_in_queue: { default: false },
		play_game: "def() ->commands execute(me, [
			title_controller.send_matchmaking_request({ type: 'pvp' }),
			set(_in_queue, true); _spawn_play_button()
		])",

		cancel_play_game: "def() ->commands execute(me, [
			title_controller.send_cancel_matchmaking_request(),
			set(_in_queue, false); _spawn_play_button()
		])",

		_play_button: { type: "null|obj button_controller" },
		_queued_label: { type: "null|obj label" },

		_spawn_play_button: "def() ->commands execute(me, [
			remove_object(_play_button),
			remove_object(_queued_label),
			set(_play_button, null),
			set(_queued_label, null),

			if(_in_queue, [
				spawn('label', 0, 0, {
					x: pane_left_edge + lib.citadel.py(20),
					y: lib.citadel.py(556),
					_text: ['Queued'],
					_halign: 'left',
					_font_size: lib.citadel.py(26),
					zorder: me.zorder+10,
				}, [
					set(_queued_label, child),
				]),
				spawn('button_controller', 0, 0, {
					x: pane_left_edge + lib.citadel.py(197),
					y: lib.citadel.py(536),
					text: 'cancel',
					_font_size: lib.citadel.py(32),
					button_width: (gui_right_edge - pane_left_edge)/2,
					button_height: lib.citadel.py(40),
					on_click: me.cancel_play_game,
					zorder: me.zorder+10,
				}, [
					set(_play_button, child),
				]),
			], [
				spawn('button_controller', 0, 0, {
					x: pane_left_edge - lib.citadel.py(26),
					y: lib.citadel.py(536),
					text: 'play this deck',
					_font_size: lib.citadel.py(32),
					button_width: gui_right_edge - pane_left_edge,
					button_height: lib.citadel.py(40),
					on_click: me.play_game,
					zorder: me.zorder+10,
				}, [
					set(_play_button, child),
				]),
			]),
		])",

		create_objects: "def() ->commands execute(me, [
			_spawn_play_button(),

			spawn('choose_deck_controller', 0, 0, {
				title_controller: title_controller,
				return_controller: return_controller,
				current_controller: me,
				_preview_x: pane_left_edge,
				_preview_y: lib.citadel.py(370),
			}),

			remove_object(_chat_area),
			spawn('chat_area', 0, 0, {
				x: pane_left_edge,
				y: lib.citadel.py(630),
				zorder: me.zorder+10,
				chat_width: gui_right_edge - pane_left_edge - lib.citadel.py(10),
				chat_height: lib.citadel.py(190),
				rect_color: [51,51,51,255],

				edit_bg_color: [26,26,26,255],
				edit_text_color: [128,128,128,255],
				edit_no_border: true,
				_message_send_handler: title_controller.send_global_chat,
			}, [
				set(me._chat_area, child),
			]),

			set(draw_primitives, [
			{
				type: 'rect',
				color: [0.1, 0.1, 0.1, 1.0],
				area: [pane_left_edge, lib.citadel.py(30), gui_right_edge, lib.citadel.py(350)],
			},

			{
				type: 'rect',
				color: [0.14, 0.14, 0.14, 1.0],
				area: [pane_left_edge + lib.citadel.py(14), lib.citadel.py(130), gui_right_edge - lib.citadel.py(14), lib.citadel.py(350-14)],
			},

			{
				type: 'rect',
				color: [0.1, 0.1, 0.1, 1.0],
				area: [pane_left_edge, lib.citadel.py(365), gui_right_edge, lib.citadel.py(602)],
			},
			]),
		])",

		_user_label: { type: "null|obj label" },
		_status_text_label: { type: "null|obj label" },
		_user_widget: { type: "null|obj scrollable_pane" },

		_user_list: {
			type: "[{user: string, status: string, user_label: obj label, status_label: obj label, server: GameServer|null, observe_button: null|obj button_controller}]",
			default: [],
		},

		_calculate_servers: "def() ->{string -> GameServer}
		fold(
			map(title_controller.game_servers,
				fold(map(value.users, {(value.user): context.value}), a+b, {})
			),
		a+b, {}
		)
		",

		observe_game: "def(GameServer server) ->commands
			title_controller.observe_game(server)
		",

		_calculate_user_list: "def() ->commands
		(
			set(_user_list, filter(_user_list, find(users, value.id = context.value) != null));

			map(_user_list, value.status_label.set_text([new_status.status]) where new_status = find_or_die(users, value.id = context.value));

			add(_user_list,
				map(new_users, {
					user: value.id,
					status: value.status,
					user_label: object('label', 0, 0, {
						x: 0, y: 0,
						_text: [value.id],
						_font_size: lib.citadel.py(19),
						zorder: zorder+10,
					}),
					status_label: object('label', 0, 0, {
						x: 0, y: 0,
						_text: [value.status],
						_font_size: lib.citadel.py(18),
						zorder: zorder+10,
					}),
				})
			);

			map(_user_list, if(server != value.server, [
				set(value.server, server),
				set(value.observe_button, if(server,
					object('button_controller', 0, 0, {
						x: 0,
						y: 0,
						text: 'Observe',
						_font_size: lib.citadel.py(8),
						button_width: lib.citadel.py(40),
						button_height: lib.citadel.py(16),
						on_click: (def()->commands me.observe_game(server)),
						zorder: me.zorder+10,
					})
				)),
			]) where server = server_map[value.user]);

			set(_user_list, sort(_user_list, a.user < b.user))

		)
		where new_users = filter(users, find(_user_list, value.user = context.value.id) = null)
		where users = title_controller.users_online
		where server_map = _calculate_servers()
		",

		_current_user_list: { type: "[OnlineUser]", default: [] },

		refresh_user_list: "def() ->commands
		if(_current_user_list != title_controller.users_online, [
			set(_current_user_list, title_controller.users_online),
			_calculate_user_list();
			[
				if(_user_widget = null,
				[
				   spawn('label', 0, 0, {
					x: pane_left_edge + lib.citadel.py(10),
					y: lib.citadel.py(124),
					_text: ['User'],
					_font_size: lib.citadel.py(18),
					zorder: zorder+10,
				   }, [
				   	set(me._user_label, child),
				   ]),

				   spawn('label', 0, 0, {
					x: pane_left_edge + lib.citadel.py(216),
					y: lib.citadel.py(124),
					_text: ['Status'],
					_font_size: lib.citadel.py(18),
					zorder: zorder+10,
				   }, [
				   	set(me._status_text_label, child),
				   ]),

				   spawn('scrollable_pane', 0, 0, {
					x: pane_left_edge + lib.citadel.py(20),
					y: lib.citadel.py(164),
					area_width: lib.citadel.py(400),
					area_height: lib.citadel.py(170),
					elements: entries,
					zorder: zorder+10,
				   }, [
				   	set(me._user_widget, child)
				   ])
				 ],

				   map(_user_widget.elements, remove_object(value.obj));
				   set(_user_widget.elements, entries); _user_widget.recalculate()
				)
			] where entries = map(_user_list, { obj: value.user_label, xpos: 0, ypos: lib.citadel.py(20)*index }) +
			                  map(_user_list, { obj: value.status_label, xpos: lib.citadel.py(200), ypos: lib.citadel.py(20)*index }) +
							  filter(map(_user_list, if(value.observe_button, { obj: value.observe_button, xpos: lib.citadel.py(320), ypos: lib.citadel.py(20)*index - lib.citadel.py(26) })), value != null)
		])
		",

		_status_label: { type: "null|obj text_area" },

		refresh_server_status_label: "def() ->commands
			if(text != _displayed_status, [
				set(_displayed_status, text),
				remove_object(_status_label),

				spawn('text_area', 0, 0, {
					x: pane_left_edge + lib.citadel.py(20),
					y: lib.citadel.py(38),
					_text: q(<font size=') + str(lib.citadel.py(24)) + q('>) + text + q(</font>),
					text_width: 400,
					zorder: zorder+10,
				}, [
					set(_status_label, child),
				]),
			])
			where text = _calculate_server_status_label()
		",

		_calculate_server_status_label: "def() ->string
			if(title_controller.num_users = null, q(Getting server status...),
				str(title_controller.num_users) + q( players online\n) +
				str(title_controller.num_queued) + q( players queued to play\n) +
				str(title_controller.num_games) + q( games being played)
			)
		",

		_displayed_status: { type: "null|string" },
	},

	on_process: "[
		refresh_server_status_label(),
		refresh_user_list(),
		if(_queued_label != null and cycle%10 = 0,
		   _queued_label.set_text(['Queued' + fold(map(range((cycle/10)%4), '.'), a+b, '')])
		)
	]",

	on_being_added: "
	[
		set(_user_label, null),
		set(_status_text_label, null),
		set(_user_widget, null),
		set(_user_list, []),
		set(_current_user_list, []),
		set(_in_queue, false),
	];
		create_objects();
	[
		if(_user_widget != null and (_user_widget not in level.chars), add_object(_user_widget)),
		if(_user_label != null and (_user_label not in level.chars), add_object(_user_label)),
		if(_status_text_label != null and (_status_text_label not in level.chars), add_object(_status_text_label)),
		if(_status_label != null and (_status_label not in level.chars), add_object(_status_label)),
		if(_user_widget != null and (_user_widget not in level.chars), [add_object(_user_widget), _user_widget.recalculate()]),
	]",
	on_type_updated: "[map(spawned_children, remove_object(value)); fire_event('being_added')]",
}
