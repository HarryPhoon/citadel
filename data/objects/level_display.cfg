{
id: "level_display",
is_strict: true,

properties: {
	lvl: { type: "int" },
	xp: { type: "int" },
	xp_needed: { type: "int" },

	school: { type: "int" },

	player_num: { type: "int" },

	order: { default: -1 },

	_animation: { type: "decimal|null" },

	update_object: "def(int new_xp, int new_xp_needed, int new_lvl) ->commands
	if([new_xp,new_xp_needed,new_lvl] != [xp,xp_needed,lvl], [
		set(_animation, 0.0),
		animate(me, {
			_animation: 1.0,
		}, {
			duration: 50,
			on_process: fire_event(me, 'update'),
			on_complete: [
				set(me._animation, null),
				set(me.lvl, new_lvl),
				set(me.xp, new_xp),
				set(me.xp_needed, new_xp_needed),
				fire_event(me, 'update'),
			]
		}),
	], [
		fire_event(me, 'update'),
	])
	",

	_font_size: 14,

	_bg_color: "[decimal,decimal,decimal] :: [[0,0,0], [0.85,0.56,0.14], [0.71,0.32,0.28],[0.49,0.65,0.55],[0.40,0.24,0.30],[0.08,0.37,0.40]][school]",

	render: "def(int ww, int hh) ->commands [
	set(animation, {
		id: 'fbo',
		image: 'fbo',
		x: 0, y: 0, w: ww, h: hh,
		scale: 1, frames: 1,
		fbo: c.render(ww, hh, [
			c.save(),
			c.scale(ww, hh),
			c.move_to(0.2, 0.5),
			c.line_to(0.2 + 0.25*0.8, 0),
			c.line_to(0.2 + 0.75*0.8, 0),
			c.line_to(1, 0.5),
			c.line_to(0.2 + 0.75*0.8, 1),
			c.line_to(0.2 + 0.25*0.8, 1),

			c.set_source_rgba(_bg_color[0], _bg_color[1], _bg_color[2], 1),
			c.fill(),

			c.restore(),

			c.save(),

			c.set_font(lib.font.regular_font),
			c.set_font_size(_font_size),
			c.translate(52, 12),
			c.text_path('LVL' + str(lvl)), 
			c.set_source_rgba(1, 1, 1, 1),
			c.fill(),

			c.restore(),

			c.save(),

			c.translate(52, 16),
			c.scale(0.06),
			c.draw_svg('images/icons/school-' + SCHOOL_NAMES[school] + '.svg'),

			c.restore(),

			c.save(),

			] +

			(fold(map(range(xp_needed), [
				c.new_path(),
				pathing(),

				c.set_source_rgba(1, 1, 1, 1),
				c.set_line_width(1),
				c.stroke(),
			] + if(xp > index or xp = index and _animation, [
				pathing(if(xp > index or _animation = null, 1.0, _animation)),
				c.set_source_rgba(1, 1, 1, 1),
				c.fill(),
			], [])
				where pathing = def(decimal anim=1.0) ->[cairo_op] [

				c.move_to(center_x - ww*0.04, center_y - hh*0.08),
				c.line_to(center_x + ww*0.04, center_y + hh*0.08),

				c.line_to(center_x + ww*0.04 + ww*0.07*anim, center_y + hh*0.08),
				c.line_to(center_x - ww*0.04 + ww*0.07*anim, center_y - hh*0.08),
				c.line_to(center_x - ww*0.04, center_y - hh*0.08),
				]
				where center_y = 0.8*hh
				where center_x = ww*0.35 + index*ww*0.1
				where radius = if(xp_needed <= 3, 0.05, 0.05*(3.0/xp_needed))
			), a + b)
			  where left = ww*0.3
			  where right = ww*0.9
			) + [

			c.restore(),
		]) where c = canvas(),
	}),
	]",
},

on_update: "[render(110, 66)]",
on_type_updated: "fire_event('update')",

on_show_tooltip: "
	  spawn('tip_dialog', min(mid_x + 180, level.dimensions[2] - 140), mid_y, {
	    _title: lib.citadel.school_info[school].name,
		_width: 260,
		_height: 100,
		_has_close: false,
		_delay_widgets: 20,
		alpha: 0,
		_tip: {
			key: 'tip',
			text: 'Level ' + str(lvl) + ': ' + lib.citadel.school_info[school].name + ' spells you cast cost ' + str(lvl) + ' less.',
			targets: [me],
		},
		zorder: 10000,
	  }, [
	  	ctrl.set_tooltip(child),
		animate(child, {
			alpha: 255,
		}, {
			duration: 20,
		}),
	  ])
		where ctrl = obj citadel_controller <- arg.controller
",
}
