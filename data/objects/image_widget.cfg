{
	id: "image_widget",
	is_strict: true,
	always_active: true,

	properties: {
		image: { type: "string" },
		image_area: { type: "[int,int,int,int]" },

		draw_width: { type: "int" },
		draw_height: { type: "int" },

		_calculate_image_area: "def() ->[int,int,int,int]
		  if(src_ratio = dst_ratio,
				image_area,
		     src_ratio < dst_ratio,
			   //e.g. converting 4:3 to 16:10. Cut some off the top
			   //and bottom.
			   [image_area[0], image_area[1] + height_diff/2, image_area[2], image_area[3] - height_diff/2]
			 where height_diff = src_height - desired_src_height
			 where desired_src_height = int(src_width / dst_ratio),

			  //e.g. converting 16:10 to 4:3. Cut off some of the sides.
              [image_area[0] + width_diff/2, image_area[1], image_area[2] - width_diff/2, image_area[3]]
			 where width_diff = src_width - desired_src_width
			 where desired_src_width = int(src_height * dst_ratio)

		  )
			where dst_ratio = decimal(draw_width)/decimal(draw_height),
			where src_ratio = decimal(src_width)/decimal(src_height)
			where src_width = image_area[2] - image_area[0]
			where src_height = image_area[3] - image_area[1]
		",

		set_dirty: "def() ->commands set(_dirty, true)",
		_dirty: { type: "bool", default: true },
	},

	on_draw: "
		if(_dirty, [
			set(animation, {
				id: 'image',
				force_no_alpha: true,
				image: image,
				x: img_area[0],
				y: img_area[1],
				w: img_area[2] - img_area[0],
				h: img_area[3] - img_area[1],
				scale: decimal(draw_width) / decimal(img_area[2] - img_area[0]),
				frames: 1,
			} where img_area = _calculate_image_area()),

			set(x, x),
			set(y, y),
		])
	",
}
