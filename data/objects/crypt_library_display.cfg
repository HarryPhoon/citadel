{
id: "crypt_library_display",
is_strict: true,
hidden_in_game: true,

properties: {
	_text: { type: "string" },
	items: { type: "[string]" },
	num_items: "int :: size(items)",
	_width: { type: "int" },
	_height: { type: "int" },

	is_crypt: { type: "bool" },
	player_index: { type: "int" },

	_font: { type: "string", init: "lib.font.regular_font" },
	_font_size: { default: 18 },

	highlight: { default: false, set: "if(_data != value, [set(_data, value), fire_event('create')])" },

	_card: { type: "null|obj card" },

	px: "def(int pixels) ->int int(pixels*(_height/28.0))",

	controller: "obj citadel_controller<- find(level.chars, value is obj citadel_controller)",
},

on_create: "[
	set(x, x),
	set(y, y),

	spawn('card', 0, 0, {
		mid_x: mid_x,
		mid_y: mid_y,
		card_type: lib.citadel.create_card('Acolyte'),
		show_back: true,
		card_size: 1.0,
		zorder: me.zorder,
		controller: controller,
		mouse_enter_handler: def() ->commands controller.mouse_enter_crypt_library_display(me),
		mouse_leave_handler: def() ->commands controller.mouse_leave_crypt_library_display(me),
	}, [
		set(_card, child),
	]),
]",

on_being_removed: "map(spawned_children, remove_object(value))",

on_mouse_enter: "[
	if(ctrl, ctrl.mouse_enter_crypt_library_display(me))
] where ctrl = find(level.chars, value is obj citadel_controller)",

on_mouse_leave: "[
	if(ctrl, ctrl.mouse_leave_crypt_library_display(me))
] where ctrl = find(level.chars, value is obj citadel_controller)",

}
