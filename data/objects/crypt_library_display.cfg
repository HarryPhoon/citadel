{
id: "crypt_library_display",
is_strict: true,
hidden_in_game: false,
always_active: true,

properties: {
	_text: { type: "string" },
	items: { type: "[class card]" },
	num_items: "int :: size(items)",
	_width: { type: "int" },
	_height: { type: "int" },

	controller: { type: "obj citadel_controller" },

	item_objects: { type: "[obj card]", default: [] },

	create_card_objects: "def([class card] items, [obj card] objects) ->commands
		if(items = [], ; set(item_objects, filter(item_objects, value not in objects)),
			if(obj != null,
			   create_card_objects(items[1:], filter(objects, value != obj)),

			   [
			   add(item_objects, [
				   object('card', 0, 0, {
					card_type: item,
					controller: controller,
					in_hand: false,
					card_size: 1.0,
				   })
			   ]),

				create_card_objects(items[1:], objects),
			   ]
			)
			where obj = find(objects, value.card_type = item)
			where item = items[0]
		)
	",

	is_crypt: { type: "bool" },
	player_index: { type: "int" },

	is_enemy: "bool :: player_index != controller.state.nplayer",

	_font: { type: "string", init: "lib.font.regular_font" },
	_font_size: { default: 24 },
	_left_align: { default: true, type: "bool" },

	highlight: { default: false, set: "if(_data != value, [set(_data, value); render()])" },

	px: "def(int pixels) ->int int(pixels*(_height/28.0))",

	shadow_deck: "bool :: is_crypt = false and items != [] and items[0].shadow",

	render: "def() ->commands
	[
	set(animation,
		lib.citadel.render_frame(c, _width, _height, [
			c.save(),
			c.scale(_width/decimal(frame_dim[0])),
			c.paint_image(frame_image),
			c.restore(),

			if(num_items > 0, [
				c.save(),
				c.translate((1.0 - icon_scale)*0.5*_width, (1.0 - icon_scale)*0.5*_height),
				c.scale(icon_scale*_width/decimal(icon_dim[0]), icon_scale*_height/decimal(icon_dim[1])),
				c.paint_image(icon_image),
				c.restore(),

				c.translate(_width/2 - num_area.width/2, int(_height*0.60)),
				c.set_font(_font),
				c.set_font_size(_font_size),
				c.text_path(str(num_items)),
				c.set_source_rgba(0, 0, 0, 1),
				c.fill(),
			]),
		])
		where frame_dim = c.image_dim(frame_image)
		where frame_image = sprintf('images/avatar/deck-frame-%s%s.png', if(num_items = 0, 'empty-', ''), if(is_enemy, 'silver', 'gold'))
		where icon_scale = 0.55
		where icon_dim = c.image_dim(icon_image)
		where icon_image = 'images/avatar/' + if(is_crypt, 'crypt-icon.png', shadow_deck, 'shadow-card-icon.png', 'card-icon.png')
		where num_area = c.text_extents(_font, _font_size, str(num_items))
		where c = canvas()
	),

	if(alpha != 255,
		animate(me, {
			alpha: 255,
		}, {
			duration: 10,
		})
	),
	]
	",

	_ring: { type: "null|obj image_widget" },

	create_ring: "def() ->commands
	if(_ring = null or _ring.image != img_path,
	[
		remove_object(_ring);

		spawn('image_widget', {
			mid_x: mid_x,
			mid_y: mid_y,
			zorder: zorder+1,
			image: img_path,
			image_area: [0,0,200,200],
			draw_width: _width,
			draw_height: _height,
			rotate: _rotate,
		}, [
			set(_ring, child),
		])
	]) where img_path = sprintf('avatar/%s_ring_%s_%s.png', if(is_crypt, 'discard', 'hand'), if(is_enemy, 'silver', 'gold'), if(num_items = 0, 'off', 'on'))
	",

	activate_animation: "def() ->commands add(ring_rotation, 60.0)",

	ring_rotation: {
		type: "decimal",
		default: 0.0,
		set: "if(_data != value, [
			set(_data, value),
			animate(me, {
				_rotate: value,
			}, {
				name: 'ring',
				duration: 30,
				replace_existing: false,
			})
		])",
	},

	_rotate: {
		type: "decimal",
		default: 0.0,
		set: "if(_data != value, [
			set(_data, value),
			if(_ring != null, set(_ring.rotate, value)),
		])",
	},

	_delay: { type: "int", default: 0 },
},

on_create: "schedule(_delay, ; [

	render(),

	set(x, x),
	set(y, y),

	create_card_objects(items, item_objects),

	create_ring(),
])",

on_click: "if(is_crypt, controller.crypt_clicked(player_index))",

on_type_updated: "[fire_event('being_removed'), fire_event('create')]",

on_mouse_enter: "[
	if(ctrl, ctrl.mouse_enter_crypt_library_display(me))
] where ctrl = find(level.chars, value is obj citadel_controller)",

on_mouse_leave: "[
	if(ctrl, ctrl.mouse_leave_crypt_library_display(me))
] where ctrl = find(level.chars, value is obj citadel_controller)",

on_being_removed: "[
	remove_object(_ring),
]",

}
