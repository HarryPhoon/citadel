{
id: "crypt_library_display",
is_strict: true,
hidden_in_game: false,
always_active: true,

properties: {
	_text: { type: "string" },
	items: { type: "[class card]" },
	num_items: "int :: size(items)",
	_width: { type: "int" },
	_height: { type: "int" },

	controller: { type: "obj citadel_controller" },

	item_objects: { type: "[obj card]", default: [] },

	create_card_objects: "def([class card] items, [obj card] objects) ->commands
		if(items = [], ; set(item_objects, filter(item_objects, value not in objects)),
			if(obj != null,
			   create_card_objects(items[1:], filter(objects, value != obj)),

			   [
			   add(item_objects, [
				   object('card', 0, 0, {
					card_type: item,
					controller: controller,
					in_hand: false,
					card_size: 1.0,
				   })
			   ]),

				create_card_objects(items[1:], objects),
			   ]
			)
			where obj = find(objects, value.card_type = item)
			where item = items[0]
		)
	",

	is_crypt: { type: "bool" },
	player_index: { type: "int" },

	_font: { type: "string", init: "lib.font.regular_font" },
	_font_size: { default: 24 },
	_left_align: { default: true, type: "bool" },

	highlight: { default: false, set: "if(_data != value, [set(_data, value); render()])" },

	_card: { type: "null|obj card" },

	px: "def(int pixels) ->int int(pixels*(_height/28.0))",

	render: "def() ->commands
	[
	set(animation,
		lib.citadel.render_frame(c, _width, _height, [
			c.save(),
			c.scale(_width/decimal(frame_dim[0])),
			c.paint_image(frame_image),
			c.restore(),

			c.save(),
			c.translate((1.0 - icon_scale)*0.5*_width, (1.0 - icon_scale)*0.5*_height),
			c.scale(icon_scale*_width/decimal(icon_dim[0]), icon_scale*_height/decimal(icon_dim[1])),
			c.paint_image(icon_image),
			c.restore(),

			c.set_source_rgba(1, 1, 1, 1),
			c.translate(_width/2 - num_area.width/2, int(_height*0.65)),
			c.set_font(_font),
			c.set_font_size(_font_size),
			c.text_path(str(num_items)),
			c.fill(),
		])
		where frame_dim = c.image_dim(frame_image)
		where frame_image = 'images/avatar/deck-frame.png'
		where icon_scale = 0.65
		where icon_dim = c.image_dim(icon_image)
		where icon_image = 'images/avatar/card-icon.png'
		where num_area = c.text_extents(_font, _font_size, str(num_items))
		where c = canvas()
	),

	if(num_items = 0, [
		set(alpha, 0),
	], alpha != 255, animate(me, {
		alpha: 255,
	}, {
		duration: 10,
	}))
	]
	",

	spawn_card: "def() ->commands [
		remove_object(_card),
		set(_card, null),

		if(index >= 0,

			spawn('card', 0, 0, {
				mid_x: x + if(_left_align, lib.citadel.py(100), -lib.citadel.py(20)),
				mid_y: y + if(_left_align, lib.citadel.py(-40), lib.citadel.py(60)),
				rotate: if(_left_align, 180, 0),
				card_type: items[index],
				card_size: 1.0,
				zorder: me.zorder+1,
				controller: controller,
				mouse_enter_handler: def() ->commands [controller.mouse_enter_crypt_library_display(me)],
				mouse_leave_handler: def() ->commands controller.mouse_leave_crypt_library_display(me),
			}, [
				set(_card, child),
			])
		)
	]
	where index = size(items)-1 - size(controller.pending_card_discards)
	",
},

on_create: "[

	render(),

	set(x, x),
	set(y, y),

	create_card_objects(items, item_objects);

	if(is_crypt and items, ; spawn_card()),
]",

on_type_updated: "[fire_event('being_removed'), fire_event('create')]",

on_being_removed: "remove_object(_card)",

on_mouse_enter: "[
	if(ctrl and _card = null, ctrl.mouse_enter_crypt_library_display(me))
] where ctrl = find(level.chars, value is obj citadel_controller)",

on_mouse_leave: "[
	if(ctrl and _card = null, ctrl.mouse_leave_crypt_library_display(me))
] where ctrl = find(level.chars, value is obj citadel_controller)",

}
