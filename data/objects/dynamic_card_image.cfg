{
	is_strict: true,

	id: "dynamic_card_image",

	properties: {
		portrait: "string<- card.card_type.portrait",
		portrait_path: "string :: 'images/portraits/' + portrait",

		card: { type: "obj card", set: "[
			calculate_sequence(value.card_type.animation_sequence),
			set(_data, value),
			fire_event('check_needs_render')
		]"
		},

		calculate_sequence: "def([CardAnim] sequence) ->commands [
			set(num_cycles, sum(map(sequence, value.cycles)))
		]",

		calculate_anim: "def(int cycle_num) ->{zoom: decimal, focus: [decimal,decimal], cross_fade: {zoom: decimal, focus: [decimal,decimal], ratio: decimal}|null}
		{
			zoom: mix(anim.start_zoom, anim.end_zoom, ratio),
			focus: [
				mix(anim.start_focus[0], anim.end_focus[0], ratio), 
				mix(anim.start_focus[1], anim.end_focus[1], ratio), 
			],

			cross_fade: if(cycles_left < cross_fade_length,
			{
				zoom: fade.zoom,
				focus: fade.focus,
				ratio: decimal(cross_fade_length - cycles_left)/decimal(cross_fade_length)
			} where fade = calculate_anim(cycle_num + cycles_left))

		}
			where ratio = decimal(ncycle)/decimal(anim.cycles)
			where cycles_left = anim.cycles - ncycle
			where ncycle = if(nindex = 0, cycle, cycle - prev_cycles)
			where prev_cycles = sum(map(card.card_type.animation_sequence[:nindex], value.cycles))
		    where nindex = index(card.card_type.animation_sequence, anim)
			where anim = find_or_die(card.card_type.animation_sequence, cycle < sum(map(card.card_type.animation_sequence[:index+1], value.cycles)))
			where cycle = cycle_num%num_cycles
			where cross_fade_length = 12
		",

		num_cycles: { type: "int", default: 1 },

		_rendered_size: { type: "decimal|null" },

		render: "def(int ww, int hh, decimal scaling) ->map {
			id: 'fbo',
			image: 'fbo',
			x: 0, y: 0, w: ww, h: hh,
			scale: scaling,
			frames: 1,
			fbo: c.render(ww, hh, [
				c.scale(decimal(ww)/decimal(dim[0]),
				        decimal(hh)/decimal(dim[1])),
				c.paint_image(portrait_path),
			])
			where dim = c.image_dim(portrait_path)
			where c = canvas()
		}",

		sprite_dim: { type: "[decimal,decimal]", default: [0.0,0.0] },
		card_dim: { type: "[decimal,decimal]", default: [0.0,0.0] },
	},

	on_process: "[
		set(zorder, card.zorder+1),
	]",

	on_draw: "[
		if(_rendered_size != card.card_size, fire_event('check_needs_render')),
	//	set(xy, card.xy),
	//	set(rotate, card.rotate),
	]",
	on_check_needs_render: "if(_rendered_size != card.card_size, [
		set(animation, render(int(render_size[0]),
		                      int(render_size[1]), scaling)),
		set(_rendered_size, card.card_size),
		set(sprite_dim, render_size),
		set(card_dim, card.render_size(card.card_size)),
	]) where scaling = decimal(card.render_size(card.card_size)[0]) / decimal(render_size[0])
	   where render_size = canvas().image_dim(portrait_path)",

	on_create: "[
		//force custom drawing so the shader gets the parameters it needs.
		set(uv_segments, [0,1]),
		fire_event('check_needs_render'),
	]",

	shader: {
	name: "card_image_render",
	vertex: "
	uniform mat4 u_anura_mvp_matrix;
	uniform vec4 u_anura_sprite_area;
	uniform vec4 u_anura_draw_area;
	uniform float u_zoom;
	uniform vec2 u_target;
	uniform float u_alt_zoom;
	uniform vec2 u_alt_target;
	uniform float u_ratio;
	attribute vec4 a_anura_vertex;
	attribute vec2 a_anura_texcoord;
	varying vec2 v_texcoord;
	varying vec2 v_alt_texcoord;
	void main()
	{
		gl_Position = u_anura_mvp_matrix * a_anura_vertex;

		vec2 target_pos = vec2(
		  u_anura_sprite_area[0] + u_target[0]*(u_anura_sprite_area[2] - u_anura_sprite_area[0]),
		  u_anura_sprite_area[1] + u_target[1]*(u_anura_sprite_area[3] - u_anura_sprite_area[1]));

		v_texcoord = mix(a_anura_texcoord, target_pos, u_zoom);

		if(u_ratio > 0.0) {
			vec2 alt_target_pos = vec2(
		  	  u_anura_sprite_area[0] + u_alt_target[0]*(u_anura_sprite_area[2] - u_anura_sprite_area[0]),
		  	  u_anura_sprite_area[1] + u_alt_target[1]*(u_anura_sprite_area[3] - u_anura_sprite_area[1]));
			v_alt_texcoord = mix(a_anura_texcoord, alt_target_pos, u_alt_zoom);
		}
	}
	",

	fragment: "
	uniform sampler2D u_anura_tex_map;
	uniform float u_ratio;
	uniform vec4 u_anura_sprite_area;
	uniform vec2 u_sprite_dim;
	varying vec2 v_texcoord;
	varying vec2 v_alt_texcoord;
	void main()
	{
		float px_width = (u_anura_sprite_area[2] - u_anura_sprite_area[0]) / u_sprite_dim[0];
		float px_height = (u_anura_sprite_area[3] - u_anura_sprite_area[1]) / u_sprite_dim[1];

		gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);

		for(float x = -3.0; x <= 3.0; x += 1.0) {
			for(float y = -3.0; y <= 3.0; y += 1.0) {
				float px = (px_width*x)/7.0;
				float py = (px_height*y)/7.0;

				gl_FragColor += texture2D(u_anura_tex_map, v_texcoord + vec2(px,py));
			}
		}

		gl_FragColor /= 49.0;

		if(u_ratio > 0.0) {
			gl_FragColor = mix(gl_FragColor, texture2D(u_anura_tex_map, v_alt_texcoord), u_ratio);
		}

		//gl_FragColor[3] = (v_texcoord[0] - u_anura_sprite_area[0])/(u_anura_sprite_area[2] - u_anura_sprite_area[0]);
	}
	",

	draw: "[
		set(uniform_commands.u_sprite_dim, parent.sprite_dim),
		set(uniform_commands.u_target, anim.focus),
		set(uniform_commands.u_zoom, anim.zoom),
		if(anim.cross_fade, [
			set(uniform_commands.u_alt_target, anim.cross_fade.focus),
			set(uniform_commands.u_alt_zoom, anim.cross_fade.zoom),
			set(uniform_commands.u_ratio, anim.cross_fade.ratio),
		], [
			set(uniform_commands.u_alt_target, [0,0]),
			set(uniform_commands.u_alt_zoom, 0),
			set(uniform_commands.u_ratio, 0),
		]),
	] where anim = parent.calculate_anim(level.cycle)
	",

	}
}
