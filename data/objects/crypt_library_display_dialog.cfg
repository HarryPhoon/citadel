{
id: "crypt_library_display_dialog",
is_strict: true,

properties: {
	items: { type: "[string]" },
	parent_display: { type: "obj crypt_library_display" },

	_border_size: "int :: 5",
	_bottom_pad: "int :: 50",

	_dimensions: "[int,int,int,int,int] :: [
	   if(parent_display.mid_x < level.dimensions[2]/2, 5, level.dimensions[2] - 5 - display_width),
	   parent_display.y - display_height,
	   display_width,
	   display_height,
	   nrows
	 ]
	   where display_width = max(440, min(level.dimensions[2] - 8, cards_per_row*200))
	   where display_height = nrows * row_height
	   where cards_per_row = 1 + size(items)/nrows
	   where nrows = min(max_rows, 1 + size(items)/ideal_cards_per_row)
	   where max_rows = max(1, (level.dimensions[3] - 50)/row_height)
	   where row_height = 400
	   where ideal_cards_per_row = 8",

	render: "def(int xx, int yy, int ww, int hh) ->commands [
	set(animation,
		lib.citadel.render_frame(c, ww, hh, [
			c.set_source_rgba(0, 0, 0, 1),

			c.move_to(0, 0),
			c.line_to(ww, 0),
			c.line_to(ww, hh-_bottom_pad),
			c.line_to(min(ww, (parent_display.x2 - xx) + _bottom_pad/2), hh-_bottom_pad),
			c.line_to(parent_display.x2 - xx, hh),
			c.line_to(parent_display.x - xx, hh),
			c.line_to(max(0, (parent_display.x - xx) - _bottom_pad/2), hh-_bottom_pad),
			c.line_to(0, hh-_bottom_pad),

			c.fill(),

		]) where c = canvas()
	)
	]",
},

on_being_removed: "map(spawned_children, remove_object(value))",

on_create: "[
	debug(['CHILD DISPLAY', size(items)]),
	render(_dimensions[0], _dimensions[1], _dimensions[2], _dimensions[3]),
	set(xy, [_dimensions[0],_dimensions[1]]),

	map(items, spawn('card', 0, 0, {
		mid_x: int(25 + _dimensions[0] + (col+0.5) * ((_dimensions[2]-50)/cards_per_row)),
		mid_y: int(25 + _dimensions[1] + (row+0.5) * ((_dimensions[3]-100)/_dimensions[4])),
		card_type: lib.citadel.create_card(value),
		controller: find_or_die(level.chars, value is obj citadel_controller),
		in_hand: false,
		allow_drag: false,
		card_size: 1,
		zorder: zorder+1000 - col,
	})
	  where col = index%cards_per_row
	  where row = index/cards_per_row
	  where cards_per_row = size(items)/_dimensions[4]
	)
]",


}
