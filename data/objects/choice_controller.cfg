{
id: "choice_controller",
is_human: false,
is_strict: true,
hidden_in_game: true,
always_active: true,
zorder: 20000,

properties: {
	_mm: { type: "obj matchmaking_base" },
	_controller: { type: "obj citadel_controller" },

	level_width: "int :: level.dimensions[2]",
	level_height: "int :: level.dimensions[3]",

	exit_dialog: "def() ->commands [

		map(level.chars, if(value.paused, set(value.paused, false), remove_object(value))),
		set(level.frame_buffer_shaders, filter(level.frame_buffer_shaders, value.shader_info != 'citadel_background_blur_hor' and value.shader_info != 'citadel_background_blur_ver')),

	]",


	children: { type: "[obj card]", default: [] },

	game: { type: "class game" },
},

on_create: "[
	add(level.frame_buffer_shaders, [{
		begin_zorder: -10000000,
		end_zorder: 12000,
		shader_info: 'citadel_background_blur_hor',
	}]),

	add(level.frame_buffer_shaders, [{
		begin_zorder: -10000000,
		end_zorder: 12000,
		shader_info: 'citadel_background_blur_ver',
	}]),

	[set(c.paused, true) | c <- level.chars, c != me],

			set(zorder, 20000),
			execute(me, map(range(24), schedule(value, set(alpha, value*8)))),

			map(cards, spawn('card', 100 + ((index*100)/(size(cards)-1)*(level_width-200))/100, level_height/2, {
				card_type: if(value.card is string, lib.citadel.create_card(value.card), value.card),
				controller: obj citadel_controller<- find(level.chars, value is obj citadel_controller),
				card_size: 1,
			  }, [
				debug('spawn card ' + index + '/' + size(cards)),
				set(child.is_choice, true),
				set(child.choice_value, value.tag),
				set(child.zorder, 20000),
				add(children, [child]),
		   ]))
	    where cards = filter(game.current_choice.options, value is class choice.card),

			set_widgets(map(buttons, {
				type: 'button',
				padding: [25, 15],
				resolution: 'normal',
				align_h: 'center',
				x: 100 + ((index*100)/(size(buttons)-1)*(level_width-200))/100,
				y: level_height - 200,
				label: {type: 'label', text: value.text, font: 'RobotoCondensed-Bold', size: 16, color: 'white'},
				on_click: q(find(level.chars, value.type = 'citadel_controller').option_clicked) + '(' + value.tag + ')'
			}) + [
				choice_text
			])
		where buttons = filter(game.current_choice.options, value is class choice.button)
		where choice_text = {
				type: 'label',
				size: 28,
				zorder: 20000,
				text: game.current_choice.text,
				font: 'RobotoCondensed-Bold',
				color: 'white',
				x: level_width - 20,
				y: level_height - 20,
				align_h: 'right',
				align_v: 'bottom',
			},
] asserting game.current_choice != null",

on_process: "[
	_mm.process_matchmaking_connection(),
	_controller.process_connection(),
]",


animation: {
	id: "normal",
	image: "dark-solid.png",
	x: 0,
	y: 0,
	w: 3,
	h: 3,
	frames: 1,
	duration: 1000,
},

}
