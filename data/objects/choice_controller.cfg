{
id: "choice_controller",
is_human: false,
is_strict: true,
hidden_in_game: true,
always_active: true,
zorder: 20000,

properties: {
	_mm: { type: "obj matchmaking_base" },
	_controller: { type: "obj citadel_controller" },

	original_cards: { type: "[{card: obj card, in_opponent_hand: bool } ]", default: [] },

	level_width: "int :: level.dimensions[2]",
	level_height: "int :: level.dimensions[3]",

	exit_dialog: "def() ->commands [
		[c.hide_halo() | c <- level.chars, c is obj card, c.paused = false],

		set(_controller.in_background, false),
		map(original_cards, [
			set(value.card.in_opponent_hand, value.in_opponent_hand),
			set(value.card.is_choice, false),
		]),
		map(level.chars, if(value.paused or value = _controller or find(original_cards, value.card = context.value), set(value.paused, false), remove_object(value))),
		set(level.frame_buffer_shaders, filter(level.frame_buffer_shaders, value.shader_info != 'citadel_background_blur_hor' and value.shader_info != 'citadel_background_blur_ver')),

	]",


	children: { type: "[obj card]", default: [] },

	game: { type: "class game" },

	process_presence: "def(any info) ->commands [
		[if(c.card_type._uuid = info, c.show_halo(), c.hide_halo()) | c <- level.chars, c is obj card, c.paused = false]
	]",
},

on_create: "[
	add(level.frame_buffer_shaders, [{
		begin_zorder: -10000000,
		end_zorder: 12000,
		shader_info: 'citadel_background_blur_hor',
	}]),

	add(level.frame_buffer_shaders, [{
		begin_zorder: -10000000,
		end_zorder: 12000,
		shader_info: 'citadel_background_blur_ver',
	}]),

	set(_controller.in_background, true),
	[set(c.paused, true) | c <- level.chars, c != me, c != _controller],

			set(zorder, 20000),
			execute(me, map(range(24), schedule(value, set(alpha, value*8)))),

			map(cards,

			if(card_obj,

			[
			add(original_cards, [{card: card_obj, in_opponent_hand: card_obj.in_opponent_hand}]),

			set(card_obj.paused, false),
			set(card_obj.in_opponent_hand, false),
			set(card_obj.choice_value, int<- value.tag),
			set(card_obj.choice_index, if(value in game.current_choice.card_options, index(game.current_choice.card_options, value), int<- value.tag)),

			set(card_obj.zorder, 20000+index),

			animate(card_obj, {
				mid_x: xpos,
				mid_y: ypos,
				rotate: 0,
			}, {
				duration: 40 + index*10,
				on_complete: [
					set(card_obj.is_choice, _controller.myturn),
					bind_command(card_obj.flip_card_over, false, 20, 1.0),
				]
			}),

			],
			
			spawn('card', 0, level_height, {
				card_type: if(value.card is string, lib.citadel.create_card(value.card), value.card),
				controller: obj citadel_controller<- find(level.chars, value is obj citadel_controller),
				card_size: 1,
				show_back: true,
			  }, [
				debug('spawn card ' + index + '/' + size(cards)),
				set(child.is_choice, _controller.state.myturn),
				set(child.choice_value, int<- value.tag),
				set(child.choice_index, if(value in game.current_choice.card_options, index(game.current_choice.card_options, value), int<- value.tag)),
				set(child.zorder, 20000),
				set(child.rotate, 180),
				add(children, [child]),
				set(child.animation, 'back'),
				set(child.scale, 0.1),
				animate(child, {
					scale: 1,
					},{
					duration: 20,
					name: 'card_nearing',
				}),

				animate(child, {
					mid_x: xpos,
					mid_y: ypos,
					rotate: 0,
				}, {
					duration: 40 + index*10,
					on_complete: [
						set(child.is_choice, _controller.state.myturn),
						bind_command(child.flip_card_over, false, 20, 1.0),
					]
				}),

				add(me.original_cards, [{card: child, in_opponent_hand: false}]),

			])
			)
			where xpos = 180 + ((index*100)/(size(cards)-1)*(level_width-360))/100
			where ypos = level_height/2

			where card_obj = find(level.chars, value is obj card and value.card_type = context.value.card) where uuid = value.card._uuid
			
			)
	    where cards = game.current_choice.card_options,

			set_widgets(map(buttons, {
				type: 'button',
				padding: [25, 15],
				resolution: 'normal',
				align_h: 'center',
				x: 180 + ((index*100)/(size(buttons)-1)*(level_width-360))/100,
				y: level_height - 200,
				label: {type: 'label', text: value.text, font: lib.font.regular_font, size: 16, color: 'white'},
				color_scheme: lib.citadel.button_color_scheme,
				on_click: q(find(level.chars, value.type = 'citadel_controller').option_clicked) + '(' + index(game.current_choice.options, value) + ', ' + str(value.tag) + ')',
				on_mouse_enter: q(find(level.chars, value.type = 'card').on_mouse_enter)
			}) + [
				choice_text
			])
		where buttons = filter(game.current_choice.options, value is class choice.button)
		where choice_text = {
				type: 'label',
				size: 28,
				zorder: 20000,
				text: if(_controller.myturn, '', 'Waiting for your opponent to ') + game.current_choice.text,
				font: lib.font.regular_font,
				color: 'white',
				x: level_width - 20,
				y: level_height - 20,
				align_h: 'right',
				align_v: 'bottom',
			},
] asserting game.current_choice != null",

on_process: "[
	_mm.process_matchmaking_connection(),
	_controller.process_connection(),
]",


animation: {
	id: "normal",
	image: "dark-solid.png",
	x: 0,
	y: 0,
	w: 3,
	h: 3,
	frames: 1,
	duration: 1000,
},

}
