{
id: "log_controller",
is_strict: true,

next_animation: "'normal'",
always_active: true,
hidden_in_game: true,

types: {
	LogEntry: "{
		state: class game,
		card: class card_base,
		player_index: int,
	}",
},

properties: {
	controller: { type: "obj citadel_controller" },

	_pane: { type: "null|obj scrollable_pane" },
	pane: "obj scrollable_pane<-  _pane",

	_nturn: { type: "null|int" },

	screen_width: "int<- level.dimensions[2]",
	screen_height: "int<- level.dimensions[3]",

	history: { type: "[LogEntry]", default: [] },

	process_game_state: "def(class game state) ->commands execute(me,
	if(_nturn != state.nturn,
	[
		set(_nturn, state.nturn),
		add_element(object('label', {
			_text: ['Turn ' + str(1 + state.nturn/size(state.players)), state.players[state.nturn%size(state.players)].name + q('s Turn)],
			_font_size: lib.citadel.py(14),
		}), 0, lib.citadel.py(6))
	]);
	if(state.stack != [] and state.stack[size(state.stack)-1].card != null,
		if(find(history, value.card = card) = null,
			add_entry({ state: get_modified_object(state, def(class game game) ->commands null), card: card, player_index: entry.player_index })
		)

	where card = class card<- entry.card
	where entry = state.stack[size(state.stack)-1])
	)
	",

	add_element: "def(custom_obj obj, int xpos=0, int ypos=0) ->commands
		let old_elements = map(pane.elements, {obj: value.obj, ypos: value.ypos});
		let old_position = pane.current_position;
		add(pane.elements, [{
			xpos: xpos,
			ypos: if(pane.elements, back_or_die(pane.elements).ypos + back_or_die(pane.elements).obj.img_h + ypos, 0),
			obj: obj
		}]); pane.force_to_bottom(); pane.recalculate(); pane.animate_element_movement_from_previous_position(old_elements, 20, old_position)
	",

	add_entry: "def(LogEntry entry) ->commands [
		set(card.mouse_enter_handler, def()->commands mouse_enter(card)),
		set(card.mouse_leave_handler, def()->commands mouse_leave(card)),
		add(me.history, [entry]),
		add_element(card, lib.citadel.py(if(entry.player_index%2 = 0, 2, 46)), lib.citadel.py(if(is_response, 0, 6))),

	] where card = object('card', 0, 0, {
		card_type: lib.citadel.create_card(entry.card.name),
		card_size: 0.3,
		controller: controller,
		show_shadow: false,
	})
	  where is_response = if(history, find(entry.state.stack, value.card != null and last.card != null and value.card._uuid = last.card._uuid) != null where last = history[size(history)-1], false)",

	mouse_enter: "def(obj card card) ->commands [
		set(card.brightness, 512),
		set(_preview_card, object('card', screen_width/2, screen_height/2, { zorder: 10000, card_type: card.card_type, card_size: 2.0, controller: controller }))
	]",

	mouse_leave: "def(obj card card) ->commands [
		set(card.brightness, 255),
		if(_preview_card != null and _preview_card.card_type = card.card_type, set(_preview_card, null))
	]
	",

	_preview_card: { type: "obj card|null", set: "[remove_object(_data), if(value, add_object(value)), set(_data, value)]" },
},

on_create: "
	spawn('scrollable_pane', 0, 0, {
		x: controller.gui_left_edge + lib.citadel.py(110),
		y: lib.citadel.py(120),
		area_width: lib.citadel.py(100),
		area_height: lib.citadel.py(320),
		elements: [],
		zorder: lib.citadel.zorder('game_log'),
		hide_scrollbar_on_mouse_off: true,
	}, [
		set(me._pane, child),
	])",

on_type_updated: "
	log('update log controller');
	let hist = history;
	set(history, []);
	map(pane.elements, remove_object(value.obj));
	set(pane.elements, []);
	map(hist, ; process_game_state(value.state))
",
}
