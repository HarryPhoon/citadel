{
	id: "choose_deck_controller",
	is_human: true,
	hidden_in_game: true,
	is_strict: true,

	properties: {
		title_controller: { type: "obj title_controller" },
		return_controller: { type: "custom_obj" },
		current_controller: { type: "custom_obj" },

		level_width: "int<- level.dimensions[2]",
		level_height: "int<- level.dimensions[3]",

		_preview_x: { type: "int" },
		_preview_y: { type: "int" },

		//the left/right side of the 'usable' area -- i.e. cutting off edges
		//to make for a 4:3 display.
		gui_left_edge: "int :: (level_width - (level_height*4)/3)/2",
		gui_right_edge: "int :: level_width - gui_left_edge",

		starter_decks_selected: "bool :: lib.citadel.preferences.deck_category != 'custom'",

		select_deck_category: "def(obj combo_label lb) ->commands execute(me, [
			add(lib.citadel.preferences, {deck_category: if(starter, 'starter', 'custom')}),
			[set(c.selected, c = lb) | c <- level.chars, c is obj combo_label, c.grouping = lb.grouping],

			show_decks(starter, if(starter, DeckMap<- lib.json.get_document_map('data/starting-decks.cfg'), filter(title_controller.decks, not value.archived))),

		]) where starter = (lb.index = 0)",

		_selected_deck: {
			type: "null|obj deck_avatar",

			set: "if(_data != value, [
				if(_data, animate(_data, { halo: 0.0 }, { duration: 10 })),
				if(value, animate(value, { halo: 20.0 }, { duration: 10 })),
				set(_data, value),
			])"
		},

		deck_mouseover: "def(obj deck_avatar deck) ->commands
		if(deck != _selected_deck,
			animate(deck, {
				halo: 10.0,
			}, {
				duration: 10,
			})
		)
		",

		deck_mouseoff: "def(obj deck_avatar deck) ->commands
		if(deck != _selected_deck,
			animate(deck, {
				halo: 0.0,
			}, {
				duration: 10,
			})
		)
		",

		_deck_preview_widget: { type: "null|obj deck_preview_widget" },

		select_deck: "def(obj deck_avatar deck) ->commands
		[
			set(_selected_deck, deck),
			add(lib.citadel.preferences, {(if(starter_decks_selected, 'selected_starter_deck', 'selected_custom_deck')): deck.deck_name}),

			remove_object(_deck_preview_widget),

			spawn('deck_preview_widget', 0, 0, {
				x: _preview_x,
				y: _preview_y,
				deck: deck_info,
				zorder: zorder+100,
				title_controller: title_controller,
				current_controller: current_controller,
				allow_edit_deck: not starter_decks_selected,
			}, [
				set(_deck_preview_widget, child),
			]),
		]
		asserting deck_info != null | [deck.deck_name, keys(deck_choices), starter_decks_selected]
		where deck_info = Deck|null :: deck_choices[deck.deck_name]
		where deck_choices = if(starter_decks_selected, DeckMap<- lib.json.get_document_map('data/starting-decks.cfg'), filter(title_controller.decks, not value.archived))
		",

		_no_decks_label: { type: "null|obj text_area" },

		show_decks: "def(bool starter, DeckMap decks) ->commands
		[
			add(lib.citadel.preferences, {deck_category: if(starter, 'starter', 'custom')}),

			remove_object(_no_decks_label),
			[remove_object(c) | c <- level.chars, c is obj deck_avatar],

			if(not decks_sorted, spawn('text_area', 0, 0, {
				_text: q(<font size=') + lib.citadel.py(20) + q('>You don't seem to have any custom decks. Head over to the library to make some.</font>),
				text_width: lib.citadel.py(500),
				x: gui_left_edge,
				y: lib.citadel.py(400),
			}, [
				set(_no_decks_label, child),
			])),

			map(decks_sorted, spawn('deck_avatar', 0, 0, {
				x: gui_left_edge + (index%3)*lib.citadel.py(226),
				y: lib.citadel.py(30) + (index/3)*lib.citadel.py(270),
				_width: lib.citadel.py(200),
				_portrait: avatar_card.portrait or 'acolyte.png',
				_name: value.name,
				click_handler: me.select_deck,
				mouse_enter_handler: me.deck_mouseover,
				mouse_leave_handler: me.deck_mouseoff,
			}) where avatar_card = lib.citadel.create_card(value.avatar or if(value.cards, value.cards[0], 'Acolyte')));

			(
			[
			if(selected_obj != null, select_deck(selected_obj)),
			set(_selected_deck, selected_obj),
			]

			where selected_obj = find(level.chars, value is obj deck_avatar and value.deck_name = selected_deck) or find(level.chars, value is obj deck_avatar)

			where selected_deck = lib.citadel.preferences[if(starter, 'selected_starter_deck', 'selected_custom_deck')]
			)
		] where decks_sorted = sort(filter(values(decks), size(value.cards) = 50), [a.creation_time, a.name] < [b.creation_time, b.name])
		",

		create_objects: "def() ->commands [
			spawn('combo_label', 0, 0, {
				x: gui_left_edge + lib.citadel.py(70),
				y2: level_height - lib.citadel.py(14),
				_text: 'Starter Decks',
				_font_size: lib.citadel.py(24),
				grouping: 'deck_type',
				index: 0,
				left_rect: lib.citadel.py(-10),
				click_handler: me.select_deck_category,
			}, [
			]),

			spawn('combo_label', 0, 0, {
				x: gui_left_edge + lib.citadel.py(230),
				y2: level_height - lib.citadel.py(14),
				_text: 'Custom Decks',
				_font_size: lib.citadel.py(24),
				grouping: 'deck_type',
				index: 1,
				left_rect: lib.citadel.py(-10),
				click_handler: me.select_deck_category,
			}, [
			]),

			spawn('combo_label', 0, 0, {
				x: gui_left_edge + lib.citadel.py(390),
				y2: level_height - lib.citadel.py(14),
				_text: 'Library',
				_font_size: lib.citadel.py(24),
				grouping: 'deck_type',
				index: 2,
				left_rect: lib.citadel.py(-10),
				click_handler: def(obj combo_label lb) ->commands me.visit_library(),
			}),

			spawn('combo_label', 0, 0, {
				x: gui_left_edge + lib.citadel.py(480),
				y2: level_height - lib.citadel.py(14),
				_text: 'Main Menu',
				_font_size: lib.citadel.py(24),
				grouping: 'deck_type',
				index: 2,
				left_rect: lib.citadel.py(-10),
				right_rect: lib.citadel.py(-2),
				click_handler: def(obj combo_label lb) ->commands me.return_to_main_menu(),
			}),

		];
		
		select_deck_category(find_or_die(level.chars, value is obj combo_label and value.grouping = 'deck_type' and value.index = if(starter_decks_selected, 0, 1)))",

		visit_library: "def() ->commands
		title_controller.transition_screen(
			; title_controller.enter_library(current_controller)
		)",

		return_to_main_menu: "def() ->commands
		title_controller.transition_screen(
		(
		; [
			title_controller.return_to_main(),
			add_object(return_controller)
		]),
		false
		)
		",

	},

	on_create: "create_objects()",
	on_being_removed: "map(spawned_children, remove_object(value))",
	on_type_updated: "[map(spawned_children, remove_object(value)), fire_event('create')]",
}
