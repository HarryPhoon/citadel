{
	id: "stats_display",
	is_strict: true,

	types: {
		DataSet: "{ samples: [{val: decimal, label: string}] }",
	},

	properties: {

		_datasets: "{string -> DataSet} ::
		query_cache(global_cache(), load_num,
		{
			'Games by Date': { samples: map(lib.stats.games_by_date, { val: size(value), label: key }) },
			'Unique Users': { samples: map(lib.stats.games_by_date, { val: size(unique(sort(map(value, value.user)))), label: key }) },

			'Game Duration (mins)': {
				samples: map(range(31), {val: val, label: str(index) + if(index = 30, '+', '')} where val = duration_map[value] or 0)
			}
			where duration_map = fold(map(unique(sort(duration_taken)), { (value): count(duration_taken, value = context.value) }), a+b, {})
			where duration_taken = map(lib.stats.finished_games, min(30, ((int<- value.end_time) - value.begin_time)/60)),

			'Game Duration (turns)': {
				samples: map(range(21), {val: val, label: str(index) + if(index = 20, '+', '')} where val = duration_map[value] or 0)
			}
			where duration_map = fold(map(unique(sort(duration_taken)), { (value): count(duration_taken, value = context.value) }), a+b, {})
			where duration_taken = map(lib.stats.finished_games, min(20, value.turns[size(value.turns)-1]/2)),

			'Cards Played': {
				samples: samples,
			}
			where samples = sort(counted_cards, a.val > b.val)[:30]
			where counted_cards = map(unique_cards, { val: count(played_cards, value = context.value), label: value })
			where unique_cards = unique(sort(played_cards))
			where played_cards = map([map]<- lib.stats.tables['play_card'], string<- value.card),


			'Cards Played (non-starter)': {
				samples: samples,
			}
			where samples = sort(counted_cards, a.val > b.val)[:30]
			where counted_cards = map(unique_cards, { val: count(played_cards, value = context.value), label: value })
			where unique_cards = filter(unique(sort(played_cards)), value not in starter_card_list)
			where played_cards = map([map]<- lib.stats.tables['play_card'], string<- value.card)

			where starter_card_list = [string] :: unique(sort(fold(card_sets, a+b, [])))
			where card_sets = map(starting_decks, value.cards)
			where starting_decks = {string -> Deck} <- get_document('data/starting-decks.cfg'),

			'Cards Played (non-core)': {
				samples: samples,
			}
			where samples = sort(counted_cards, a.val > b.val)[:30]
			where counted_cards = map(unique_cards, { val: count(played_cards, value = context.value), label: value })
			where unique_cards = filter(unique(sort(played_cards)), value not in starter_card_list)
			where played_cards = map([map]<- lib.stats.tables['play_card'], string<- value.card)

			where starter_card_list = [string] :: lib.citadel.get_cards_in_set('core'),

			'Cards Played by Unique Users': {
				samples: samples,
			}
			where samples = sort(counted_cards, a.val > b.val)[:30]
			where counted_cards = map(unique_cards, { val: size(unique(sort(map(filter([map]<- lib.stats.tables['play_card'], value.card = context.value), string<- value.user)))), label: value })
			where unique_cards = unique(sort(played_cards))
			where played_cards = map([map]<- lib.stats.tables['play_card'], string<- value.card),

		})
		",

		_dataset: { type: "DataSet", default: { 'samples': [] } },

		load_num: { type: "int", default: 0 },
		render: "def() ->commands

		set(load_num, lib.stats.load_num);

		set(animation, lib.citadel.render_frame(c, ww, hh,
		[
			c.set_source_rgba(0.0, 0.0, 0.0, 0.5),
			c.rectangle(0, 0, ww, hh),
			c.fill(),

			if(_dataset, [
				c.save(),
				c.translate(ww*0.2, hh*0.2),

				_draw_bar_chart(c, _dataset, ww*0.6, hh*0.5, {min_samples: 30}),
				c.restore(),
			])
		]))

		where c = canvas()
		where ww = _width
		where hh = _height
		",

		_draw_bar_chart: "def(cairo_callable c, DataSet data, decimal ww, decimal hh, {min_samples: int} options) ->[cairo_op]

		fold(
		map(data.samples, [
			c.set_source_rgba(1.0, 1.0, 1.0, 1.0),
			c.rectangle(index*bar_width, hh - val*hh, bar_width, val*hh),
			c.fill(),

			c.save(),
			c.translate(index*bar_width + bar_width*0.7, hh*1.01),
			c.rotate(1.4),
			label_fragments[0].path,
			c.fill(),
			c.restore(),

			c.save(),
			c.translate(index*bar_width + bar_width*0.5 - value_fragments[0].width*0.5, hh - val*hh - hh*0.035),
			value_fragments[0].path,
			c.fill(),
			c.restore(),

		] where val = (value.val/max_val)
		  where value_fragments = c.markup_text(sprintf(q(<font size='10'>%d</font>), value.val), int(ww))
		  where label_fragments = c.markup_text(sprintf(q(<font size='12'>%s</font>), value.label), int(ww))
		),

		a+b, [])

		where bar_width = ww/max(size(data.samples), options.min_samples)
		where max_val = decimal(max(map(data.samples, value.val)) or 0.0)
		",

		_width: { type: "int" },
		_height: { type: "int" },

		_combo: { type: "null|obj combo_controller" },
	},

	events: {
		create: "if(_datasets, set(_dataset, values(_datasets)[0]));
		render();

		spawn('combo_controller', {
			x2: x2 - lib.gui.py(20),
			y: y + lib.gui.py(20),
			selected_index: 0,
			items: keys(_datasets),
			on_change: (def(int index) ->commands set(_dataset, values(_datasets)[index]); render()),
			_width: lib.gui.py(160),
			_height: lib.gui.py(16),
			_font_size: lib.gui.py(12),
			zorder: zorder+10,
		}, [
			set(_combo, child),
		])",

		process: "if(load_num != lib.stats.load_num and _combo != null, set(_dataset, values(_datasets)[_combo.selected_index]); render())",

		being_removed: "remove_object(_combo)",
	},
}
