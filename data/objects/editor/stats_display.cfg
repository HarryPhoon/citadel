{
	id: "stats_display",
	is_strict: true,

	properties: {
		load_num: { type: "int", default: 0 },
		render: "def() ->commands

		set(load_num, lib.stats.load_num);

		set(animation, lib.citadel.render_frame(c, ww, hh,
		[
			c.set_source_rgba(0.0, 0.0, 0.0, 0.5),
			c.rectangle(0, 0, ww, hh),
			c.fill(),

			if(lib.stats.games, [
				c.translate(ww*0.2, hh*0.2),

				_draw_bar_chart(c, data, ww*0.6, hh*0.5, {min_samples: 30})

				where data = map(lib.stats.games_by_date, { val: size(value), label: key })
			])
		]))

		where c = canvas()
		where ww = _width
		where hh = _height
		",

		_draw_bar_chart: "def(cairo_callable c, [{val: decimal, label: string}] data, decimal ww, decimal hh, {min_samples: int} options) ->[cairo_op]

		fold(
		map(data, [
			c.set_source_rgba(1.0, 1.0, 1.0, 1.0),
			c.rectangle(index*bar_width, hh - val*hh, bar_width, val*hh),
			c.fill(),

		] where val = (value.val/max_val)
		),

		a+b, [])

		where bar_width = ww/max(size(data), options.min_samples)
		where max_val = decimal(max(map(data, value.val)) or 0.0)
		",

		_width: { type: "int" },
		_height: { type: "int" },
	},

	events: {
		create: "render()",

		process: "if(load_num != lib.stats.load_num, render())",
	},
}
