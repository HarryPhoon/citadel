{
	id: "dialog_particle_editor",
	is_strict: true,
	always_active: true,

	mouse_drag_threshold: 10,

	timer_frequency: 20,

	properties: {
		hidden: { type: "bool", default: false },

		node: { type: "null|CampaignDialogNode" },
		particle_node: { type: "CampaignDialogParticles" },

		_removed: { type: "[custom_obj]", default: [] },

		return: "def() ->commands remove_object(me)",

		norm_img_dim: "[int,int] :: [810, 544]",
		img_dim: "[int,int] :: [lib.gui.py(norm_img_dim.x), lib.gui.py(norm_img_dim.y)]",

		_name: { type: "null|obj text_entry" },

		_write_particles: "def() ->commands
		lib.campaign_encounter.write_dialog_particles(particle_node)
		",

		change_name: "def() ->commands
		if(_name,
			set(particle_node.name, _name.text);
			_write_particles()
		)
		",

		_image: { type: "null|obj image_widget" },

		_pos: "[int,int] ::
		  if(particle_node.translate = null, [img.img_w/2, img.img_h],
		     particle_node.translate_anchored, [int(particle_node.translate.x), int(particle_node.translate.y)],
		     [int(particle_node.translate.x*img.img_w), int(particle_node.translate.y*img.img_h)])
		",

		img: "obj image_widget<- _image",

		change_lerp: "def(decimal r) ->commands
		if(node and node.next_image_area and _image,
			set(particles.scale_dimensions, [particles.scale_dimensions.x*virtual_image_scaling_factor, particles.scale_dimensions.y*virtual_image_scaling_factor, particles.scale_dimensions.z]);
			set(_image.image_area, mix(node.image_area, node.next_image_area, r));
			if(particle_node.translate_anchored, set(mid_xy, calculate_anchored_particle_position_on_screen()));
			set(particles.scale_dimensions, [particles.scale_dimensions.x/virtual_image_scaling_factor, particles.scale_dimensions.y/virtual_image_scaling_factor, particles.scale_dimensions.z])
		)
		asserting particles
		",

		set_anchor: "def() ->commands
		[
			set(particle_node.translate_anchored, if(particle_node.translate_anchored, false, true));
			set(particle_node.translate, calculate_anchored_translation());
		    set(mid_xy, calculate_anchored_particle_position_on_screen());
			_write_particles()
		]
		",

		calculate_anchored_translation: "def() ->[decimal,decimal]
			[screen_space_to_image_space(mid_x - virtual_image_midpoint_on_screen.x),
			 screen_space_to_image_space(mid_y - virtual_image_midpoint_on_screen.y)
			]
		",

		calculate_anchored_particle_position_on_screen: "def() ->[int,int]
			[int(virtual_image_midpoint_on_screen.x + image_space_to_screen_space(particle_node.translate.x)),
			 int(virtual_image_midpoint_on_screen.y + image_space_to_screen_space(particle_node.translate.y))]
			 asserting particle_node.translate
		",

		virtual_image_midpoint_on_screen: "[int,int] ::

		[int(img.mid_x + screen_delta.x), int(img.mid_y + screen_delta.y)]

			where screen_delta = [image_space_to_screen_space(delta.x), image_space_to_screen_space(delta.y)]

			where delta = [virtual_image_mid.x - on_screen_mid.x, virtual_image_mid.y - on_screen_mid.y]

			where on_screen_mid = [(img.image_area[0] + img.image_area[2])/2.0, (img.image_area[1] + img.image_area[3])/2.0]
			where virtual_image_mid = [virtual_image_dim.x/2.0, virtual_image_dim.y/2.0]
		",

		virtual_image_dim: "[int,int] ::
			c.image_dim('images/' + img.image)
			where c = canvas()
		",

		image_space_to_screen_space: "def(decimal r) ->decimal
			r * (img.img_w / (img.image_area[2] - img.image_area[0]))
		",

		screen_space_to_image_space: "def(decimal r) ->decimal
			r/image_space_to_screen_space(1.0)
		",

		virtual_image_scaling_factor: "if(particle_node.translate_anchored, (img.image_area[2] - img.image_area[0])/100.0, 1.0)",

		_prev_image_area: { type: "[decimal,decimal,decimal,decimal]|null" },
	},

	events: {
		process: "
		if(node = null and img.image_area != _prev_image_area and particle_node.translate_anchored, [
			set(mid_xy, calculate_anchored_particle_position_on_screen());

			if(_image and _prev_image_area and _image.image_area,
				let new_image_area = _image.image_area;

				set(_image.image_area, _prev_image_area);
				set(particles.scale_dimensions, [particles.scale_dimensions.x*virtual_image_scaling_factor, particles.scale_dimensions.y*virtual_image_scaling_factor, particles.scale_dimensions.z]);
				set(_image.image_area, new_image_area);
				set(particles.scale_dimensions, [particles.scale_dimensions.x/virtual_image_scaling_factor, particles.scale_dimensions.y/virtual_image_scaling_factor, particles.scale_dimensions.z])
			) asserting particles,

			set(_prev_image_area, img.image_area)
		])
		",

		timer: "
		if(node != null,
		(
		let original_scale_dimensions = particles.scale_dimensions;
		set(particles.scale_dimensions, [particles.scale_dimensions.x*virtual_image_scaling_factor*(decimal(norm_img_dim.x)/decimal(img_dim.x)), particles.scale_dimensions.y*virtual_image_scaling_factor*(decimal(norm_img_dim.y)/decimal(img_dim.y)), particles.scale_dimensions.z]);
		(
			if(info != particle_node.info,
				set(particle_node.info, info);
				_write_particles()
			)
			where info = particles.write
		);

		set(particles.scale_dimensions, original_scale_dimensions)

		)
		asserting particles
		)
		",

		drag: "
		  set(mid_xy, lib.gui.mouse_pos(level));
		  set(particle_node.translate, if(particle_node.translate_anchored, calculate_anchored_translation(), [decimal(mid_x - img.x)/img_dim.x, decimal(mid_y - img.y)/img_dim.y]));
		  if(particle_node.translate_anchored, set(mid_xy, calculate_anchored_particle_position_on_screen()));
		  _write_particles()
		",

		create: "[

			set(particles, particle_node.info),

			if(node != null, [
				[remove_object(c) | c <- level.chars, c is obj dialog_particle_editor, c != me];

				//editing mode.
				[[add(c.y, 10000), add(_removed, [c])] | c <- level.chars, c != level.player],

				game_preferences().set_preference_value('particle_editor', true),

				spawn('button_controller', {
					text: 'Back',
					on_click: me.return,
					trap_escape: true,
					_font_size: lib.gui.py(22),
					x2: level.dimensions[2] - lib.gui.py(10),
					y2: level.dimensions[3] - lib.gui.py(10),
					button_width: lib.gui.py(60),
					button_height: lib.gui.py(24),
					zorder: zorder-1,
				}),

				spawn('image_widget', {
					x: lib.gui.py(30),
					y: lib.gui.py(30),
					zorder: zorder-10,
					image: node.image,
					image_area: node.image_area,
					draw_width: img_dim.x,
					draw_height: img_dim.y,
				}, [
					set(_image, child),
				]),
			]);

			set(mid_xy, if(particle_node.translate_anchored, calculate_anchored_particle_position_on_screen(), [img.x + _pos.x, img.y + _pos.y]));

			set(particles.scale_dimensions, [particles.scale_dimensions.x*(1.0/virtual_image_scaling_factor)*(decimal(img.img_w)/decimal(norm_img_dim.x)), particles.scale_dimensions.y*(1.0/virtual_image_scaling_factor)*(decimal(img.img_h)/decimal(norm_img_dim.y)), particles.scale_dimensions.z]) asserting particles;

			set(_prev_image_area, img.image_area);

			set(clip_area, [img.x, img.y, img.img_w, img.img_h]),
			set(clip_area_absolute, true),

			if(node, [
				spawn('slider_widget', {
					x: lib.gui.py(30),
					y: lib.gui.py(590),
					slider_width: lib.gui.py(300),
					slider_height: lib.gui.py(20),
					slider_value: 0.0,
					value_change_handler: me.change_lerp,
				}),

				//editing mode
				spawn('text_entry', {
					x: lib.gui.py(30),
					y: lib.gui.py(620),
					_width: lib.gui.py(120),
					default_text: 'Enter Name',
					text: particle_node.name,
					_on_change: me.change_name,
				}, [
					set(_name, child),
				]),

				spawn('button_controller', {
					text: 'Show Clipping',
					x: lib.gui.py(30),
					y: lib.gui.py(660),
					button_width: lib.gui.py(120),
					button_height: lib.gui.py(24),
					_font_size: lib.gui.py(14),
					color_scheme: lib.citadel.library_color_scheme,
					on_click: def() ->commands if(clip_area, set(clip_area, null), set(clip_area, [lib.gui.py(30), lib.gui.py(30), img_dim.x, img_dim.y])),
					checked: false,
				}, [
				]),

				spawn('button_controller', {
					text: 'Hide Object',
					x: lib.gui.py(30),
					y: lib.gui.py(700),
					button_width: lib.gui.py(120),
					button_height: lib.gui.py(24),
					_font_size: lib.gui.py(14),
					color_scheme: lib.citadel.library_color_scheme,
					on_click: def() ->commands set(hidden, not hidden),
					checked: false,
				}, [
				]),

				spawn('button_controller', {
					text: 'Position on Image',
					x: lib.gui.py(30),
					y: lib.gui.py(740),
					button_width: lib.gui.py(180),
					button_height: lib.gui.py(24),
					_font_size: lib.gui.py(14),
					color_scheme: lib.citadel.library_color_scheme,
					on_click: me.set_anchor,
					checked: if(particle_node.translate_anchored, true, false),
				}, [
				]),

			])

		]",

		being_removed: "if(node != null, [
			game_preferences().set_preference_value('particle_editor', false),
			map(spawned_children, remove_object(value)),
			map(_removed, add(value.y, -10000)),

			if(dialog_editor,
				; dialog_editor.spawn_effects_editor()
			)
		]
		where dialog_editor = find(level.chars, value is obj campaign_dialog_editor)
		)",

	},

	shader: {
		name: "dialog_particle_editor_render",
		vertex: "
        uniform mat4 u_anura_mvp_matrix;
        attribute vec4 a_anura_vertex;
        attribute vec2 a_anura_texcoord;
        varying vec2 v_texcoord;
        void main()
        {
            v_texcoord = a_anura_texcoord;
            gl_Position = u_anura_mvp_matrix * a_anura_vertex;
        }
		",

		fragment: """
        uniform sampler2D u_anura_tex_map;
		uniform vec4 u_anura_sprite_area;
		uniform bool u_property_hidden;
        varying vec2 v_texcoord;

		void main()
		{
       		gl_FragColor = texture2D(u_anura_tex_map, v_texcoord);
			if(u_property_hidden) {
				gl_FragColor.a = 0.0;
			}
		}
		""",
	},
}
