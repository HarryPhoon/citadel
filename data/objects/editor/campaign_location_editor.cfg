{
	id: "campaign_location_editor",
	is_strict: true,
	hidden_in_game: true,

	properties: {

		_locations: { type: "[obj campaign_location_display]", default: [] },
		_locations_labels: { type: "[obj label]", default: [] },

		_location_editing: { type: "null|obj campaign_location_display" },
		_location_editing_index: "int :: index(_locations, _location_editing)",

		enter_campaign_location: "def(int n) ->commands
		animate(_locations[n], {
			luminance: 1.4,
		}, {
			duration: 10,
		})
		",

		leave_campaign_location: "def(int n) ->commands
		animate(_locations[n], {
			luminance: 1.0,
		}, {
			duration: 10,
		})
		",

		click_campaign_location: "def(int n) ->commands
		[
			map(_locations, animate(value, {
				saturation: if(n = index, 1.0, 0.0),
			}, {
				duration: 10,
			})),

			set(_location_editing, loc);

			if(_mode = enum appearance,
				spawn_location_editing_widgets(loc),
			   _mode = enum encounters,
				spawn_encounter_editing_widgets(loc)
			),
		]
		where loc = _locations[n]
		",

		_campaign_location_display: { type: "null|obj campaign_location_display" },
		loc_display: "obj campaign_location_display<- _campaign_location_display",

		_name_entry: { type: "null|obj text_entry" },

		change_name: "def() ->commands
		if(_name_entry and _location_editing,
			set(_location_editing.location.display_name, _name_entry.text);
			_locations_labels[_location_editing_index].set_text([_name_entry.text]);
			spawn_loc_display(_location_editing);
			lib.citadel.write_campaign_locations()
		)
		",

		_image_pane: { type: "null|obj scrollable_pane" },

		set_image: "def(obj image_widget w) ->commands
		if(_location_editing and _campaign_location_display,
			set(_location_editing.location.image, w.image[10:]);
			_location_editing.render();
			_campaign_location_display.render();
			lib.citadel.write_campaign_locations()
		)
			
		",

		complete_images: "[string] ::
			map(filter(lib.citadel.get_card_objects_in_set('core'), value.artist not in [null, 'eleazzaar']),
			    sprintf('portraits/%s', string<- value.portrait))
		",

		_encounter_editor: { type: "null|obj campaign_location_encounter_editor" },

		remove_encounter_editing_widgets: "def() ->commands
		execute(me,
		[
			remove_object(_encounter_editor),
			set(_encounter_editor, null),
		])",

		spawn_encounter_editing_widgets: "def(obj campaign_location_display loc) ->commands
		execute(me,
		[
			remove_encounter_editing_widgets(),
			remove_location_editing_widgets(),

			if(_location_editing,
				spawn('campaign_location_encounter_editor', {
					x: lib.gui.py(300),
					y: lib.gui.py(60),
					_loc: _location_editing.location,
				}, [
					set(_encounter_editor, child),
				])
			),
		])
		",

		remove_location_editing_widgets: "def() ->commands
		execute(me,
		[
			clear_widgets(me),
			remove_object(_image_pane),
			remove_object(_name_entry),
			remove_object(_campaign_location_display),
			remove_object(_slider),
		]
		)
		",

		spawn_location_editing_widgets: "def(obj campaign_location_display loc) ->commands
		execute(me,
		[
			remove_encounter_editing_widgets(),

			if(_image_pane != null and (_image_pane not in level.chars),
			    add_object(_image_pane); _image_pane.recalculate(),

			   _image_pane = null,

			   spawn('scrollable_pane', {
				x: lib.gui.py(1300),
				y: lib.gui.py(10),
				area_width: lib.gui.py(244),
				area_height: lib.gui.py(800),
				elements: [],
				zorder: zorder,
				focus_on_mouseover: true,
			   }, [
			   	set(_image_pane, child),
			   ]);

			map(complete_images,
			execute(_image_pane,
				schedule(index+1, ;
					add(_image_pane.elements, [{
						obj: object('image_widget', {
							image_area: [0,0,dim.x,dim.y],
							image: value,
							draw_width: lib.gui.py(110),
							draw_height: lib.gui.py(100),
							zorder: zorder+1,

							click_handler: set_image,
						}),
						xpos: col * lib.gui.py(120),
						ypos: row * lib.gui.py(110),
						height: if(index = 0, ((size(complete_images)-1)/2) * lib.gui.py(110), 0) + lib.gui.py(100),
					}]) asserting _image_pane != null;

					_image_pane.recalculate() asserting _image_pane != null
				)
			) asserting _image_pane
				  where row = index/2
				  where col = index%2
				  where dim = c.image_dim('images/' + value)
				  where c = canvas()
			)

			),

			remove_object(_name_entry),
			spawn('text_entry', {
				x: lib.gui.py(250),
				y: lib.gui.py(80),
				_width: lib.gui.py(100),
				text: loc.location.get_display_name(),
				default_text: 'Enter location name',
				_on_change: me.change_name,
			}, [
				set(_name_entry, child),
			]),

			set(_spawning_text, true);
			set_widgets([{
				type: 'text_editor',
				id: 'text_editor',
				width: lib.gui.py(300),
				height: lib.gui.py(160),
				x: lib.gui.py(280),
				y: lib.gui.py(160),
				font_size: lib.gui.py(14),
				text: lib.util.utf8_to_ascii(loc.location.text),
				on_change: q(fire_event('text_changed')),
				on_change_focus: q(if(focus, fire_event('text_focus'))),
				filter_paste: lib.util.utf8_to_ascii,
			}, {
				type: 'text_editor',
				id: 'notes_editor',
				width: lib.gui.py(300),
				height: lib.gui.py(260),
				x: lib.gui.py(280),
				y: lib.gui.py(360),
				font_size: lib.gui.py(14),
				text: loc.location.devnotes,
				on_change: q(fire_event('notes_changed')),
				on_change_focus: q(if(focus, fire_event('text_focus'))),
			}]);
			set(_spawning_text, false);

			spawn_loc_display(loc),
		])
		",

		_spawning_text: { type: "bool", default: false },

		drag_image: "def([int,int] delta) ->commands
		if(_location_editing,
			set(_location_editing.location.image_focus, [_location_editing.location.image_focus.x - delta.x/1000.0, _location_editing.location.image_focus.y - delta.y/1000.0]);
			lib.citadel.write_campaign_locations()
		)
		",

		change_scale: "def(decimal s) ->commands
		if(_location_editing,
			set(_location_editing.location.image_scale, s*2.0);
			lib.citadel.write_campaign_locations()
		)
		",

		_slider: { type: "null|obj slider_widget" },

		spawn_loc_display: "def(obj campaign_location_display loc) ->commands
		execute(me,
		[
			remove_object(_campaign_location_display),
			spawn('campaign_location_display', {
				ctrl: find_or_die(level.chars, value is obj title_controller),
				location: loc.location,
				_scaling: 0.7,
				mid_x: lib.gui.py(940),
				mid_y: lib.gui.py(300),
				drag_handler: me.drag_image,
			}, [
				set(_campaign_location_display, child),
			]),

			remove_object(_slider),

			spawn('slider_widget', {
				mid_x: lib.gui.py(940),
				mid_y: lib.gui.py(640),
				slider_width: lib.gui.py(300),
				slider_height: lib.gui.py(20),
				slider_value: loc.img_scale/2.0,
				value_change_handler: me.change_scale,
			}, [
				set(_slider, child),
			]),
		]
		)
		",

		_added_new: { type: "bool", default: false },

		add_location: "def() ->commands execute(me,
			set(_added_new, true);
			add(lib.citadel.campaign_locations, [
				construct('campaign_location', {
					name: generate_uuid(),
					display_name: 'New Location',
					encounters: [],
					image: 'acolyte.png',
					order: size(lib.citadel.campaign_locations)+1,
				})
			]);

			lib.citadel.write_campaign_locations();

			[remove_object(c) | c <- level.chars, c != me, (c is obj title_controller) = false];

			create_locations(); click_campaign_location(size(_locations)-1)
		)
		",

		delete_location: "def() ->commands execute(me,
		if(size(_locations) > 1 and _location_editing,
			if(size(_location_editing.location.encounters) > 0,

				object('modal_message_dialog', {
					message: sprintf('This location has %d encounters. Do you really want to delete this location and all its encounters?', size(_location_editing.location.encounters)),
					buttons: [{
						text: 'Delete',
						callback: me._delete_location_internal,
					}, {
						text: 'Cancel',
						callback: (def()->commands null),
					}],

					_exclude_from_pause: filter(level.chars, value is obj title_controller),
				}).show_dialog(),
				_delete_location_internal()
			)
		)
		)",

		_delete_location_internal: "def() ->commands
		execute(me,
		if(size(_locations) > 1,
			let current_index = _location_editing_index;
			set(lib.citadel.campaign_locations, lib.citadel.campaign_locations[:_location_editing_index] + lib.citadel.campaign_locations[_location_editing_index+1:]);

			lib.citadel.write_campaign_locations();

			[remove_object(c) | c <- level.chars, c != me, (c is obj title_controller) = false];

			create_locations();

			click_campaign_location(min(current_index, size(lib.citadel.campaign_locations)-1))
		)
		)
		",

		_mode: { type: "enum { appearance, encounters }", default: "@eval enum appearance" },

		show_appearance: "def() ->commands
		set(_mode, enum appearance);
		if(_campaign_location_display != null, [
			click_campaign_location(_location_editing_index)
		])
		",

		show_encounters: "def() ->commands
		set(_mode, enum encounters);
		if(_campaign_location_display != null, [
			click_campaign_location(_location_editing_index)
		])
		",

		return_to_titlescreen: "def() ->commands
		controller.show_devtools()
		where controller = find_or_die(level.chars, value is obj title_controller)
		",

		create_locations: "def() ->commands
		[

		spawn('button_controller', {
			text: 'Back',
			trap_escape: true,
			x2: level.dimensions[2] - lib.gui.py(10),
			y2: level.dimensions[3] - lib.gui.py(10),
			_font_size: lib.gui.py(22),
			button_width: lib.gui.py(60),
			button_height: lib.gui.py(24),

			on_click: me.return_to_titlescreen,

			zorder: zorder+1,
			color_scheme: lib.citadel.library_color_scheme,
		}),

		spawn('button_controller', {
			x: lib.gui.py(320),
			y: lib.gui.py(10),
			text: 'Appearance',
			_font_size: lib.gui.py(16),
			button_width: lib.gui.py(90),
			button_height: lib.gui.py(24),
			on_click: me.show_appearance,
			zorder: zorder+1,
			color_scheme: lib.citadel.library_color_scheme,
		}),

		spawn('button_controller', {
			x: lib.gui.py(420),
			y: lib.gui.py(10),
			text: 'Encounters',
			_font_size: lib.gui.py(16),
			button_width: lib.gui.py(90),
			button_height: lib.gui.py(24),
			on_click: me.show_encounters,
			zorder: zorder+1,
			color_scheme: lib.citadel.library_color_scheme,
		}),


		spawn('button_controller', {
			x: lib.gui.py(10),
			y: lib.gui.py(830),
			text: '+Location',
			_font_size: lib.gui.py(16),
			button_width: lib.gui.py(90),
			button_height: lib.gui.py(24),
			on_click: me.add_location,
			zorder: zorder+1,
			color_scheme: lib.citadel.library_color_scheme,
		}),

		spawn('button_controller', {
			x: lib.gui.py(110),
			y: lib.gui.py(830),
			text: 'Delete',
			_font_size: lib.gui.py(16),
			button_width: lib.gui.py(90),
			button_height: lib.gui.py(24),
			on_click: me.delete_location,
			zorder: zorder+1,
			color_scheme: lib.citadel.library_color_scheme,
		}),

		spawn('scrollable_pane', {
			x: lib.gui.py(10),
			y: lib.gui.py(10),
			area_width: lib.gui.py(220),
			area_height: lib.gui.py(800),
			_force_to_bottom: _added_new,
			elements: map(lib.citadel.get_campaign_locations(),
			{
			  ypos: index*lib.gui.py(160),
			  height: lib.gui.py(160),
			  obj: location_objects[index],
			}
			) +
			
			map(location_labels,
			{
			  ypos: index*lib.gui.py(160) + lib.gui.py(140),
			  obj: value,
			}
			),
			focus_on_mouseover: true,
		}),

		set(_locations, location_objects),
		set(_locations_labels, location_labels),

		]
		where location_objects = map(lib.citadel.get_campaign_locations(),
			  object('campaign_location_display', {
				ctrl: find_or_die(level.chars, value is obj title_controller),
				saturation: 0.0,
				_scaling: 0.2,
				location: value,
				_show_text: false,
			  	zorder: zorder+1,
				handle_mouse_enter: def()->commands enter_campaign_location(index),
				handle_mouse_leave: def()->commands leave_campaign_location(index),
				handle_click: def()->commands click_campaign_location(index),
			  })
		)
		where location_labels = map(lib.citadel.get_campaign_locations(),
			  object('label', {
			  	zorder: zorder+2,
				_text: [value.get_display_name()],
				_font_size: lib.gui.py(12),
				_font: lib.font.regular_font,
				_halign: 'left',
			  })
		)
		",
	},

	events: {
		create: "create_locations(); click_campaign_location(0)
		",

		"+text_focus": "[set(c.has_focus, false) | c <- level.chars, c is obj text_entry]",

		"+text_changed": "
		if(_spawning_text = false and editor != null and _name_entry and _location_editing, [
			set(_location_editing.location.text, lib.util.ascii_to_markup(txt));
			spawn_loc_display(_location_editing);
			lib.citadel.write_campaign_locations()

		]
			where txt = editor.text
		)
		where editor = (null|text_editor_widget<- widgets.text_editor)
		",
	
		"+notes_changed": "
		if(_spawning_text = false and editor != null and _name_entry and _location_editing, [
			set(_location_editing.location.devnotes, txt);
			lib.citadel.write_campaign_locations()

		]
			where txt = editor.text
		)
		where editor = (null|text_editor_widget<- widgets.notes_editor)
		",
	},
}
