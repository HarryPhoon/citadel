{
id: "player_avatar",
is_strict: true,
always_active: true,

types: {
	AvatarInfo: "{
		name: string,
		path: string,
		rect: null|[decimal,decimal,decimal,decimal],
		scale: null|decimal,
		flip: null|bool,
	}",
},

properties: {
	_avatar: { type: "string" },

	avatar_info: "{string -> AvatarInfo} ::
	  query_cache(global_cache(), 0, {string -> AvatarInfo} <- get_document('data/avatars.cfg'))",
	
	info: "AvatarInfo :: avatar_info[_avatar] asserting _avatar in avatar_info",

	_reverse: "bool :: if(info.flip, true, false)",

	_top: { type: "int" },
	_edge: { type: "int" },
	_available_space: { type: "int" },
	_width: { type: "int" },
	_height: { type: "int" },

	highlight: { default: true },

	selectable: { default: false },

	player_num: { default: 0 },

	current_desaturation: { default: 0.0 },
	target_desaturation: { default: 0.0 },

	_nick: { type: "string" },

	_nick_font_size: 64,

	_nick_area: "canvas().text_extents(lib.font.regular_font, _nick_font_size, _nick)",

	_nick_width: "decimal :: _width",
	_nick_right: "decimal :: 0.4*_width",
	_nick_left: "_nick_right - _nick_width",

	_controller: "null|obj citadel_controller :: find(level.chars, value is obj citadel_controller)",

	_render_key: "[_width, _height, _avatar, facing, _nick_width]",

	render: "def(int ww, int hh) ->commands [
	set(animation, {
		id: 'fbo',
		image: 'fbo',
		x: 0, y: 0, w: ww, h: hh,
		scale: 1, frames: 1,
		fbo: query_cache(global_cache(2), _render_key, c.render(ww, hh, [

			c.save(),

			dump(hh, null),

			//if(info.scale, c.scale(info.scale)),
			//c.translate(if(_reverse, 1, -1)*image_area[0]*image_scaling, -image_area[1]*image_scaling),

			//c.scale(0.7*if(_reverse, -1, 1) * ww/256.0, 0.7*ww/256.0),
			c.scale(if(_reverse, -image_scaling, image_scaling), image_scaling),
			if(_reverse, c.translate(-ww/image_scaling, 0)),


			c.paint_image(info.path, [-image_area[0], -image_area[1]]),
			c.restore(),

			c.save(),
			c.move_to(if(facing > 0, 10, _width - 10), 60),
			c.set_font(lib.font.regular_font),
			c.set_font_size(_nick_font_size),
			c.scale(facing, 1),
			c.text_path(_nick),
			c.set_source_rgba(1, 1, 1, 1),
			c.fill(),
			c.restore(),

		])
		   where image_scaling = decimal(ww)/decimal(image_area[2] - image_area[0])
		   where image_area = [decimal,decimal,decimal,decimal] ::
		   if(src_aspect = dst_aspect, base_image_area,
		      src_aspect > dst_aspect,
			  [base_image_area[0] + (base_image_area[2] - base_image_area[0])/2 - mod_width/2, base_image_area[1], base_image_area[0] + (base_image_area[2] - base_image_area[0])/2 + mod_width/2, base_image_area[3]] where mod_width = (base_image_area[3] - base_image_area[1])*dst_aspect,

			  [base_image_area[0], base_image_area[1] + (base_image_area[3] - base_image_area[1])/2 - mod_height/2, base_image_area[2], base_image_area[1] + (base_image_area[3] - base_image_area[1])/2 + mod_height/2] where mod_height = (base_image_area[2] - base_image_area[0])/dst_aspect
		   )
		   where src_aspect = decimal(base_image_area[2] - base_image_area[0]) / decimal(base_image_area[3] - base_image_area[1])
		   where dst_aspect = decimal(ww)/decimal(hh)
		   where base_image_area =  unflipped_image_area
		   
		//   if(not _reverse, unflipped_image_area,
		 //     [image_size[0] - unflipped_image_area[2], unflipped_image_area[1], image_size[0] - unflipped_image_area[0], unflipped_image_area[3]])
		   where unflipped_image_area = if(info.rect, info.rect, [0,0,image_size[0],image_size[1]])
		   where image_size = c.image_dim(info.path)) where c = canvas()
	})]",
},

on_type_updated: "fire_event('create')",

on_create: "[
	render(_width, _height),
	set(y, _top),
	if(facing = 1, set(x2, _edge), set(x, _edge)),
]",

shader: {
	name: "player_avatar_render",
	vertex: "
	uniform mat4 u_anura_mvp_matrix;
	uniform vec4 u_anura_sprite_area;
	uniform vec4 u_anura_draw_area;
	uniform vec2 u_target;
	uniform float u_alt_zoom;
	uniform vec2 u_alt_target;
	uniform float u_ratio;
	attribute vec4 a_anura_vertex;
	attribute vec2 a_anura_texcoord;
	varying vec2 v_texcoord;
	varying vec2 v_alt_texcoord;
	void main()
	{
		gl_Position = u_anura_mvp_matrix * a_anura_vertex;
		v_texcoord = a_anura_texcoord;
	}
	",

	fragment: "
	uniform sampler2D u_anura_tex_map;
	uniform float u_ratio;
	uniform vec4 u_anura_sprite_area;
	uniform float u_desaturation;
	varying vec2 v_texcoord;
	void main()
	{
		gl_FragColor = texture2D(u_anura_tex_map, v_texcoord);

		if(u_desaturation > 0.0) {
			float gray = sqrt(pow(gl_FragColor.r,2.2) * 0.2126 + pow(gl_FragColor.g,2.2) * 0.7152 + pow(gl_FragColor.b,2.2) * 0.0722);
			vec4 desaturated = vec4(gray, gray, gray, gl_FragColor[3]);
			gl_FragColor = mix(gl_FragColor, desaturated, u_desaturation);
		}
	}
	",

	draw: "[
		set(uniform_commands.u_desaturation, parent.current_desaturation),
	]
	",
},

on_process: "if(target_desaturation > current_desaturation,
	set(current_desaturation, min(target_desaturation, current_desaturation+0.05)),
	target_desaturation < current_desaturation,
	set(current_desaturation, max(target_desaturation, current_desaturation-0.05))
)",

on_mouse_enter: "if(_controller != null, _controller.mouse_enter_avatar(me))",
on_mouse_leave: "if(_controller != null, _controller.mouse_leave_avatar(me))",

on_click: "if(_controller != null, _controller.avatar_clicked(me))",

}
