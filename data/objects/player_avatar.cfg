{
id: "player_avatar",
is_strict: true,
always_active: true,

properties: {
	_avatar: { type: "string" },

	_creature: { type: "null|class creature" },

	avatar_info: "{string -> AvatarInfo} ::
	  query_cache(global_cache(4), 0, {string -> AvatarInfo} <- get_document('data/avatars.cfg'))",
	
	info: "AvatarInfo :: if(_creature != null, 
	{
		name: _creature.name,
		path: 'images/portraits/' + (string<- _creature.portrait),
		rect: if(_creature.portrait_focus, dump(['AREA::', res],res) where res = [_creature.portrait_focus[0] - portrait_width/2,
		                                    _creature.portrait_focus[1] - portrait_height/2,
											_creature.portrait_focus[0] + portrait_width/2,
											_creature.portrait_focus[1] + portrait_height/2]
		  where portrait_width = decimal<- max(_creature.portrait_focus_width or 300, (_creature.portrait_focus_height or 0)/5)
		  where portrait_height = decimal<- max(_creature.portrait_focus_height or 800, (_creature.portrait_focus_width or 0)*5)
		),
	},
	
	avatar_info[_avatar] asserting _avatar in avatar_info)",

	_reverse: "bool :: if(info.flip, true, false)",

	_top: { type: "null|int" },
	_edge: { type: "null|int" },
	_available_space: { type: "null|int" },
	_width: { type: "int" },
	_height: { type: "int" },

	highlight: { default: true },

	selectable: { default: false },

	player_num: { default: 0 },

	current_desaturation: { default: 0.0 },
	target_desaturation: { default: 0.0 },

	_nick: { type: "string" },

	_calculate_nick_font_size: "def() ->int
		find([64, 52, 40, 32, 24], c.text_extents(lib.font.regular_font, value, _nick).width <= _width*0.4) or 16 where c = canvas()",

	_nick_width: "decimal :: _width",
	_nick_right: "decimal :: 0.4*_width",
	_nick_left: "_nick_right - _nick_width",

	_controller: "null|obj citadel_controller :: find(level.chars, value is obj citadel_controller)",

	_render_key: "[_width, _height, _avatar, facing, _nick_width, if(_creature, _creature.name)]",

	render: "def(int ww, int hh) ->commands [
	set(animation, {
		id: 'fbo',
		image: 'fbo',
		x: 0, y: 0, w: ww, h: hh,
		scale: 1, frames: 1,
		fbo: query_cache(global_cache(2), _render_key, c.render(ww, hh, [

			c.move_to(ww*hex_indent, 0),
			c.line_to(ww*hex_indent_inverse, 0),
			c.line_to(ww, hh/2),
			c.line_to(ww*hex_indent_inverse, hh),
			c.line_to(ww*hex_indent, hh),
			c.line_to(0, hh/2),
			c.clip(),
			c.new_path(),


			c.save(),

			//if(info.scale, c.scale(info.scale)),
			//c.translate(if(_reverse, 1, -1)*image_area[0]*image_scaling, -image_area[1]*image_scaling),

			//c.scale(0.7*if(_reverse, -1, 1) * ww/256.0, 0.7*ww/256.0),
			c.scale(if(_reverse, -image_scaling, image_scaling), image_scaling),
			if(_reverse, c.translate(-ww/image_scaling, 0)),


			c.paint_image(info.path, [-image_area[0], -image_area[1]]),
			c.restore(),

			c.save(),
			c.move_to(if(facing > 0, 0, _width), hh*0.8 + nick_text_area.height*0.2),
			c.line_to(if(facing > 0, _width*0.2 + nick_text_area.width + ww*0.05, _width*0.8 - nick_text_area.width), hh*0.8 + nick_text_area.height*0.2),
			c.line_to(if(facing > 0, _width*0.2 + nick_text_area.width + ww*0.05 + nick_text_area.height*1.0, _width*0.8 - nick_text_area.width - nick_text_area.height*1.0), hh*0.8 - nick_text_area.height*0.5),
			c.line_to(if(facing > 0, _width*0.2 + nick_text_area.width + ww*0.05, _width*0.8 - nick_text_area.width), hh*0.8 - nick_text_area.height*1.2),
			c.line_to(if(facing > 0, 0, _width), hh*0.8 - nick_text_area.height*1.2),
			c.set_source_rgba(0, 0, 0, 0.5),
			c.fill(),
			c.restore(),

			c.save(),
			c.move_to(if(facing > 0, _width*0.18, _width*0.82), hh*0.8),
			c.set_font(lib.font.regular_font),
			c.set_font_size(_calculate_nick_font_size()),
			c.scale(facing, 1),
			c.text_path(_nick),
			c.set_source_rgba(1, 1, 1, 1),
			c.fill(),
			c.restore(),

			//border around the avatar
			c.set_source_rgba(0, 0, 0, 1),

			c.move_to(0, hh/2),
			c.line_to(ww*hex_indent, 0),
			c.line_to(ww*hex_indent + lib.citadel.py(6), 0),
			c.line_to(lib.citadel.py(6), hh/2),
			c.fill(),

			c.move_to(0, hh/2),
			c.line_to(ww*hex_indent, hh),
			c.line_to(ww*hex_indent + lib.citadel.py(6), hh),
			c.line_to(lib.citadel.py(6), hh/2),
			c.fill(),

			c.move_to(ww, hh/2),
			c.line_to(ww*hex_indent_inverse, 0),
			c.line_to(ww*hex_indent_inverse - lib.citadel.py(6), 0),
			c.line_to(ww - lib.citadel.py(6), hh/2),
			c.fill(),

			c.move_to(ww, hh/2),
			c.line_to(ww*hex_indent_inverse, hh),
			c.line_to(ww*hex_indent_inverse - lib.citadel.py(6), hh),
			c.line_to(ww - lib.citadel.py(6), hh/2),
			c.fill(),

			c.move_to(ww*hex_indent, 0),
			c.line_to(ww*hex_indent_inverse, 0),
			c.line_to(ww*hex_indent_inverse, lib.citadel.py(6)),
			c.line_to(ww*hex_indent, lib.citadel.py(6)),
			c.fill(),

			c.move_to(ww*hex_indent, hh),
			c.line_to(ww*hex_indent_inverse, hh),
			c.line_to(ww*hex_indent_inverse, hh - lib.citadel.py(6)),
			c.line_to(ww*hex_indent, hh - lib.citadel.py(6)),
			c.fill(),

		])
		   where nick_text_area = c.text_extents(lib.font.regular_font, _calculate_nick_font_size(), _nick)
		   where image_scaling = decimal(ww)/decimal(image_area[2] - image_area[0])
		   where image_area = [decimal,decimal,decimal,decimal] ::
		   if(src_aspect = dst_aspect, base_image_area,
		      src_aspect > dst_aspect,
			  [base_image_area[0] + (base_image_area[2] - base_image_area[0])/2 - mod_width/2, base_image_area[1], base_image_area[0] + (base_image_area[2] - base_image_area[0])/2 + mod_width/2, base_image_area[3]] where mod_width = (base_image_area[3] - base_image_area[1])*dst_aspect,

			  [base_image_area[0], base_image_area[1] + (base_image_area[3] - base_image_area[1])/2 - mod_height/2, base_image_area[2], base_image_area[1] + (base_image_area[3] - base_image_area[1])/2 + mod_height/2] where mod_height = (base_image_area[2] - base_image_area[0])/dst_aspect
		   )
		   where src_aspect = decimal(base_image_area[2] - base_image_area[0]) / decimal(base_image_area[3] - base_image_area[1])
		   where dst_aspect = decimal(ww)/decimal(hh)
		   where base_image_area =  unflipped_image_area
		   
		//   if(not _reverse, unflipped_image_area,
		 //     [image_size[0] - unflipped_image_area[2], unflipped_image_area[1], image_size[0] - unflipped_image_area[0], unflipped_image_area[3]])
		   where unflipped_image_area = if(info.rect, info.rect, [0,0,image_size[0],image_size[1]])
		   where image_size = c.image_dim(info.path)) where c = canvas()

		   where hex_indent_inverse = 0.75
		   where hex_indent = 0.25
	})]",

	flash_hit: "def() ->commands [
		set(shader.uniform_commands.is_flashing, true) asserting shader,
		schedule(3, set(shader.uniform_commands.is_flashing, false)) asserting shader,
	]",

	click_handler: { type: "null|function(obj player_avatar)->commands" },
},

on_type_updated: "fire_event('create')",

on_create: "[
	render(round_to_even(_width), round_to_even(_height)),
	if(_top != null, set(y, _top)),
	if(_edge != null, if(facing = 1, set(x, _edge), set(x2, _edge))),
]",

shader: {
	name: "player_avatar_render",
	vertex: "
	uniform mat4 u_anura_mvp_matrix;
	uniform vec4 u_anura_sprite_area;
	uniform vec4 u_anura_draw_area;
	uniform vec2 u_target;
	uniform float u_alt_zoom;
	uniform vec2 u_alt_target;
	uniform float u_ratio;
	attribute vec4 a_anura_vertex;
	attribute vec2 a_anura_texcoord;
	varying vec2 v_texcoord;
	varying vec2 v_alt_texcoord;
	void main()
	{
		gl_Position = u_anura_mvp_matrix * a_anura_vertex;
		v_texcoord = a_anura_texcoord;
	}
	",

	fragment: "
	uniform sampler2D u_anura_tex_map;
	uniform float u_ratio;
	uniform vec4 u_anura_sprite_area;
	uniform float u_desaturation;
	uniform float u_alpha;
	uniform bool is_flashing;
	varying vec2 v_texcoord;
	void main()
	{
		gl_FragColor = texture2D(u_anura_tex_map, v_texcoord);
		gl_FragColor[3] *= u_alpha;

		if(u_desaturation > 0.0) {
			float gray = sqrt(pow(gl_FragColor.r,2.2) * 0.2126 + pow(gl_FragColor.g,2.2) * 0.7152 + pow(gl_FragColor.b,2.2) * 0.0722);
			vec4 desaturated = vec4(gray, gray, gray, gl_FragColor[3]);
			gl_FragColor = mix(gl_FragColor, desaturated, u_desaturation);
		}

		if(is_flashing) {
			gl_FragColor[0] = gl_FragColor[1] = gl_FragColor[2] = 1.0;
		}
	}
	",

	create: "[
		set(uniform_commands.is_flashing, false),
	]",

	draw: "[
		set(uniform_commands.u_desaturation, parent.current_desaturation),
		set(uniform_commands.u_alpha, parent.alpha/255.0),
	]
	",
},

on_process: "if(target_desaturation > current_desaturation,
	set(current_desaturation, min(target_desaturation, current_desaturation+0.05)),
	target_desaturation < current_desaturation,
	set(current_desaturation, max(target_desaturation, current_desaturation-0.05))
)",

on_mouse_enter: "if(_controller != null, _controller.mouse_enter_avatar(me))",
on_mouse_leave: "if(_controller != null, _controller.mouse_leave_avatar(me))",

on_click: "[
	if(_controller != null, _controller.avatar_clicked(me)),
	if(click_handler != null, click_handler(me)),
]",

}
