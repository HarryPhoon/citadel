{
id: "player_avatar",
is_strict: true,
always_active: true,

properties: {
	_avatar: { type: "string" },

	_creature: { type: "null|class creature" },

	avatar_info: "{string -> AvatarInfo} ::
	  query_cache(global_cache(4), 0, {string -> AvatarInfo} <- get_document('data/avatars.cfg'))",
	
	info: "AvatarInfo :: if(_creature != null, 
	{
		name: _creature.name,
		path: 'images/portraits/' + (string<- _creature.portrait),
		focus: _creature.portrait_focus,
		rect: if(_creature.portrait_focus, [_creature.portrait_focus[0] - portrait_width/2,
		                                    _creature.portrait_focus[1] - portrait_height/2,
											_creature.portrait_focus[0] + portrait_width/2,
											_creature.portrait_focus[1] + portrait_height/2]
		  where portrait_width = decimal<- max(_creature.portrait_focus_width or 300, (_creature.portrait_focus_height or 0)/5)
		  where portrait_height = decimal<- max(_creature.portrait_focus_height or 800, (_creature.portrait_focus_width or 0)*5)
		),
	},
	
	avatar_info[_avatar] asserting _avatar in avatar_info)",

	_reverse: "bool :: if(info.flip, true, false)",

	_top: { type: "null|int" },
	_edge: { type: "null|int" },
	_available_space: { type: "null|int" },
	_width: { type: "int" },
	_height: { type: "int" },

	_dirty: { type: "bool", default: true },

	preview_y: { type: "int", default: 0 },
	preview_x: { type: "int", default: 0 },

	preview_width: { type: "int", default: 800 },
	preview_height: { type: "int", default: 996 },

	preview_ratio: { default: 1.0, set: "if(value != _data, [set(_dirty, true), set(_data, value)])" },

	face_right: { type: "bool", default: true },

	render_preview: "def() ->commands [
//		render(int(mix(preview_width, _width, preview_ratio)),
//		       int(mix(preview_height, _height, preview_ratio))),
		set(uv_array, new_uv_array),
		set(xy_array, if(face_right,
		                 [0,0, wratio,0, 0,hratio, wratio,hratio,],
		                 [1,0, -(wratio-1.0),0, 1,hratio, -(wratio-1.0),hratio,]
						)),
		set(shader.uniform_commands.u_sprite_area, [new_uv_array[0], new_uv_array[1], new_uv_array[2], new_uv_array[5]]) asserting shader,
		set(_dirty, false),
		set(shader.uniform_commands.u_radius, 1.5 - preview_ratio) asserting shader,
		if(_top != null, set(y, int(mix(preview_y, _top, preview_ratio)))),
		if(_edge != null, if(face_right, set(x, edge), set(x2, edge)) where edge = int(mix(preview_x, _edge, preview_ratio))),
	]
	 where new_uv_array = if(not _reverse, uv_array_unflipped,
	                         [uv_array_unflipped[2],uv_array_unflipped[1],
							  uv_array_unflipped[0],uv_array_unflipped[3],
							  uv_array_unflipped[2],uv_array_unflipped[5],
							  uv_array_unflipped[0],uv_array_unflipped[7],
							 ])
	 where uv_array_unflipped = map([0,0, 1,0, 0,1, 1,1], mix(value, uv_focus[index], preview_ratio))
	 where uv_focus = [uv_focus_mid[0]-uv_focus_w,uv_focus_mid[1]-uv_focus_h,
	                   uv_focus_mid[0]+uv_focus_w,uv_focus_mid[1]-uv_focus_h,
	                   uv_focus_mid[0]-uv_focus_w,uv_focus_mid[1]+uv_focus_h,
	                   uv_focus_mid[0]+uv_focus_w,uv_focus_mid[1]+uv_focus_h,
					   ]
	  where uv_focus_w = radius/800.0
	  where uv_focus_h = radius/996.0
	  where uv_focus_mid = [focus[0]/800.0,focus[1]/996.0]
	  where radius = decimal<- info.radius or 360.0
	  where focus = [decimal,decimal]<- (info.focus or [400,498])
	  where wratio = decimal(virtual_width)/_width
	  where hratio = decimal(virtual_height)/_height
	  where virtual_width = mix(preview_width, _width, preview_ratio)
	  where virtual_height = mix(preview_height, _height, preview_ratio)",


	highlight: { default: true },

	selectable: { default: false },

	player_num: { default: 0 },

	current_desaturation: { default: 0.0 },
	target_desaturation: { default: 0.0 },

	player_name: "string :: _nick",
	_nick: { type: "string" },

	_calculate_nick_font_size: "def() ->int
		find([64, 52, 40, 32, 24], c.text_extents(lib.font.regular_font, value, _nick).width <= _width*0.4) or 16 where c = canvas()",

	_nick_width: "decimal :: _width",
	_nick_right: "decimal :: 0.4*_width",
	_nick_left: "_nick_right - _nick_width",

	_controller: "null|obj citadel_controller :: find(level.chars, value is obj citadel_controller)",

	_render_key: "[preview_ratio, _width, _height, _avatar, _nick_width, if(_creature, _creature.name)]",

	render: "def(int ww, int hh) ->commands [
	set(animation, {
		id: 'fbo',
		image: 'fbo',
		x: 0, y: 0, w: ww, h: hh,
		scale: 1, frames: 1,
		fbo: query_cache(global_cache(2), _render_key, c.render(ww, hh, [

			c.arc(hh/2, hh/2, mix(hh*1.5, hh/2 - 2, preview_ratio), 0.0, 2*3.15),
			c.clip(),
			c.new_path(),

//			c.scale(if(_reverse, -image_scaling, image_scaling), image_scaling),
//			if(_reverse, c.translate(-ww/image_scaling, 0)),


			c.rectangle(0, 0, ww, hh),
			c.set_source_rgba(1, 1, 1, 1),
			c.fill(),
//			c.set_operator('SOURCE'),
//			c.paint_image(info.path, [-image_area[0], -image_area[1]]),
		])
		   where nick_text_area = c.text_extents(lib.font.regular_font, _calculate_nick_font_size(), _nick)
		   where image_scaling = decimal(ww)/decimal(image_area[2] - image_area[0])
		   where image_area = [decimal,decimal,decimal,decimal] <-
		     map(image_area_dest, mix(image_area_orig[index], image_area_dest[index], preview_ratio))
		   where image_area_orig = [0,0,image_size[0],image_size[1]]
		   where image_area_dest = [decimal,decimal,decimal,decimal] ::
		   if(src_aspect = dst_aspect, base_image_area,
		      src_aspect > dst_aspect,
			  [base_image_area[0] + (base_image_area[2] - base_image_area[0])/2 - mod_width/2, base_image_area[1], base_image_area[0] + (base_image_area[2] - base_image_area[0])/2 + mod_width/2, base_image_area[3]] where mod_width = (base_image_area[3] - base_image_area[1])*dst_aspect,

			  [base_image_area[0], base_image_area[1] + (base_image_area[3] - base_image_area[1])/2 - mod_height/2, base_image_area[2], base_image_area[1] + (base_image_area[3] - base_image_area[1])/2 + mod_height/2] where mod_height = (base_image_area[2] - base_image_area[0])/dst_aspect
		   )
		   where src_aspect = decimal(base_image_area[2] - base_image_area[0]) / decimal(base_image_area[3] - base_image_area[1])
		   where dst_aspect = decimal(ww)/decimal(hh)
		   where base_image_area =  unflipped_image_area
		   
		//   if(not _reverse, unflipped_image_area,
		 //     [image_size[0] - unflipped_image_area[2], unflipped_image_area[1], image_size[0] - unflipped_image_area[0], unflipped_image_area[3]])
		   where unflipped_image_area = if(info.rect, info.rect, [0,0,image_size[0],image_size[1]])
		   where image_size = c.image_dim('images/' + info.path)) where c = canvas()

		   where hex_indent_inverse = 0.75
		   where hex_indent = 0.25
	})]",

	flash_hit: "def() ->commands [
		set(shader.uniform_commands.is_flashing, true) asserting shader,
		schedule(3, set(shader.uniform_commands.is_flashing, false)) asserting shader,
	]",

	click_handler: { type: "null|function(obj player_avatar)->commands" },

	frame_texture: { type: "texture_object", init: "get_texture({ image: 'avatar/avatar-frame.png', surface_flags: ['NO_ALPHA_FILTER']})" },
	portrait_texture: { type: "null|texture_object" },
},

on_type_updated: "fire_event('create')",

on_create: "[
	render(_width, _height),
	if(_top != null, set(y, _top)),
	if(_edge != null, if(face_right, set(x, _edge), set(x2, _edge))),
	set(portrait_texture, get_texture({ image: info.path[7:], surface_flags: ['NO_ALPHA_FILTER']})),
]",

shader: {
	name: "player_avatar_render",
	vertex: "
	uniform mat4 u_anura_mvp_matrix;
	uniform vec4 u_anura_sprite_area;
	uniform vec4 u_anura_draw_area;
	uniform vec4 u_sprite_area;
	uniform vec2 u_target;
	uniform float u_alt_zoom;
	uniform vec2 u_alt_target;
	uniform float u_ratio;
	attribute vec4 a_anura_vertex;
	attribute vec2 a_anura_texcoord;
	varying vec2 v_texcoord;
	varying vec2 v_alt_texcoord;
	varying vec2 v_framecoord;
	void main()
	{
		gl_Position = u_anura_mvp_matrix * a_anura_vertex;
		v_texcoord = a_anura_texcoord;
		v_framecoord = vec2(
		                  (a_anura_texcoord[0] - u_sprite_area[0])/(u_sprite_area[2] - u_sprite_area[0]),
		                  (a_anura_texcoord[1] - u_sprite_area[1])/(u_sprite_area[3] - u_sprite_area[1]));
	}
	",

	fragment: "
	uniform sampler2D u_anura_tex_map;
	uniform sampler2D u_frame_tex;
	uniform sampler2D u_portrait_tex;
	uniform float u_ratio;
	uniform vec4 u_anura_sprite_area;
	uniform vec4 u_anura_draw_area;
	uniform float u_desaturation;
	uniform float u_alpha;
	uniform float u_frame_alpha;
	uniform float u_radius;
	uniform bool is_flashing;
	varying vec2 v_texcoord;
	varying vec2 v_framecoord;
	void main()
	{
		vec4 col = vec4(0,0,0,0);
		for(float x = -1.0; x <= 1.0; x += 1.0) {
			for(float y = -1.0; y <= 1.0; y += 1.0) {
				vec2 coord = vec2(v_texcoord[0] + x/800.0, v_texcoord[1] + y/996.0);
				col += texture2D(u_portrait_tex, coord);
			}
		}

		gl_FragColor = col/9.0;

		gl_FragColor[3] *= u_alpha;

		if(u_desaturation > 0.0) {
			float gray = sqrt(pow(gl_FragColor.r,2.2) * 0.2126 + pow(gl_FragColor.g,2.2) * 0.7152 + pow(gl_FragColor.b,2.2) * 0.0722);
			vec4 desaturated = vec4(gray, gray, gray, gl_FragColor[3]);
			gl_FragColor = mix(gl_FragColor, desaturated, u_desaturation);
		}

		if(is_flashing) {
			gl_FragColor[0] = gl_FragColor[1] = gl_FragColor[2] = 1.0;
		}

		float dist_center_x = v_framecoord[0] - 0.5;
		float dist_center_y = v_framecoord[1] - 0.5;
		float dist_center = sqrt(dist_center_x*dist_center_x + dist_center_y*dist_center_y);
		if(dist_center > u_radius) {
			gl_FragColor[3] = 0.0;
		}

		//vec2((v_texcoord[0] - u_anura_sprite_area[0])/(u_anura_sprite_area[2] - u_anura_sprite_area[0]),
		//                        (v_texcoord[1] - u_anura_sprite_area[1])/(u_anura_sprite_area[3] - u_anura_sprite_area[1]));

		vec4 frame_col = texture2D(u_frame_tex, v_framecoord);
		float alpha = max(frame_col[3]*u_frame_alpha, gl_FragColor[3]);
		gl_FragColor = mix(gl_FragColor, frame_col, frame_col[3]*u_frame_alpha);
		gl_FragColor[3] = alpha;
	}
	",

	create: "[
		set(uniform_commands.is_flashing, false),
		set(parent.frame_texture.binding_point, 2),
		set(uniform_commands.u_frame_tex, 2),
		set(uniform_commands.u_portrait_tex, 3),
		set(uniform_commands.u_radius, 0.5),
	]",

	draw: "[
		set(textures, [parent.frame_texture, parent.portrait_texture]),
		set(parent.portrait_texture.binding_point, 3),

		set(uniform_commands.u_desaturation, parent.current_desaturation),
		set(uniform_commands.u_alpha, parent.alpha/255.0),
		set(uniform_commands.u_frame_alpha, if(parent.preview_ratio > 0.8, (parent.preview_ratio - 0.8)*5.0, 0.0)),
	]
	",
},

on_process: "if(target_desaturation > current_desaturation,
	set(current_desaturation, min(target_desaturation, current_desaturation+0.05)),
	target_desaturation < current_desaturation,
	set(current_desaturation, max(target_desaturation, current_desaturation-0.05)),
	if(_dirty, render_preview())
)",

on_mouse_enter: "if(_controller != null, _controller.mouse_enter_avatar(me))",
on_mouse_leave: "if(_controller != null, _controller.mouse_leave_avatar(me))",

on_click: "[
	if(_controller != null, _controller.avatar_clicked(me)),
	if(click_handler != null, click_handler(me)),
]",

}
