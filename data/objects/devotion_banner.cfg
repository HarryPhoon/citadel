{
id: "devotion_banner",
is_strict: true,
always_active: true,

timer_frequency: 6,

properties: {
	_icon: { type: "obj devotion_icon", dynamic_initialization: true },
	school: { type: "int" },
	player_index: { type: "int" },
	_width: { type: "int" },
	_height: { type: "int" },
	_face_right: { default: true },

	is_enemy: { type: "bool" },

	_tokens: { type: "[obj devotion_token]", default: [] },

	is_mouseover: { type: "bool", default: false },

	active_tokens: {
		type: "int",
		default: 0,
		set: "[
			set(_data, value),
			map(_tokens, set(value.luminosity_adj, if(index < context.value, 0.0, -0.3))),
		]
		",
	},

	num_tokens: {
		type: "int",
		get: "int :: size(_tokens)",
		set: "if(val != size(_tokens), [
			if(val < size(_tokens), [
				map(_tokens[val:], remove_object(value)),
				set(_tokens, _tokens[:val]),
			],
			map(range(val - size(_tokens)),
			  spawn('devotion_token', {
				_width: int(_height*0.3),
				school: me.school,
				zorder: me.zorder+1,
			  }, [
			  	add(me._tokens, [child]),
			  ])
			)
		   ),

		   set(_last_pos, null),
		]) where val = min(value,10)
		",
		variable: false,
	},

	animate_token_entry: "def(int delay_anim) ->commands
	;
	if(_tokens != [],
	[
		set(token.alpha, 0);
		schedule(delay_anim,
			; token.play_entry()
		)
	]
		where token = _tokens[size(_tokens)-1]
	)
	",

	_last_pos: { type: "null|[int,int]" },

	render: "def() ->commands
	set(animation,
	lib.citadel.render_frame(c, _width, _height,
	[
		if(not _face_right, [
			c.translate(_width, 0),
			c.scale(-1, 1),
		]),
		c.set_source_rgba(0, 0.27, 0.27, 0.7),

		c.move_to(0, 0),
		c.line_to(_width - _height/4, 0),
		c.line_to(_width, _height/2),
		c.line_to(_width - _height/4, _height),
		c.line_to(0, _height),

		c.fill(),

		c.set_source_rgba(0, 0.52, 0.52, 0.3),
		c.move_to(0, 0),
		c.line_to(_width - _height/4, 0),
		c.line_to(_width, _height/2),
		c.line_to(_width - _height/4, _height),
		c.line_to(0, _height),
		c.set_line_width(_width/80.0),
		c.stroke(),
	]
	)
	)
	where c = canvas()

	",
},

on_create: "[
	render(),
	spawn('devotion_icon', {
		mid_y: mid_y,
		mid_x: x + if(_face_right, 0, _width),
		_school: school,
		zorder: zorder+1,
		is_enemy: is_enemy,
	}, [
		set(_icon, child)
	])
]
",

on_process: "[
  if([x,mid_y] != _last_pos, [
	set(_icon.mid_x, x + if(_face_right, 0, _width)),
	set(_icon.mid_y, mid_y),

	map(_tokens, [
		set(value.mid_y, mid_y + if(size(_tokens) <= 5, 0, if(index < 5, -1, 1)*(_width/16))),
		set(value.mid_x, x + if(_face_right, 0, _width) + (int(_width*0.3) + int(_width*0.14)*(index%5))*if(_face_right, 1, -1)),
	]),
	
	set(_last_pos, [x,mid_y]),
])
]",

on_timer: "
	if(is_mouseover,
		[set(c.devotion_highlight, school in c.creature_object.school) | c <- level.chars, c is obj creature, c.creature_object.controller = player_index]
	)
",

on_being_removed: "map(spawned_children, remove_object(value))",

on_mouse_enter: "[
	set(brightness, 400),
	set(is_mouseover, true),
	[if(school in c.creature_object.school, c.devotion_launch_animation(school)) | c <- level.chars, c is obj creature, c.creature_object.controller = player_index]
]",

on_mouse_leave: "[
	set(brightness, 255),
	set(is_mouseover, false),
		[set(c.devotion_highlight, false) | c <- level.chars, c is obj creature, c.creature_object.controller = player_index]
]",

}
