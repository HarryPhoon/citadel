{
	id: "single_lobby_controller",
	prototype: ["single_lobby_controller_base"],

	properties: {

		_play_button: { type: "null|obj button_controller" },

		_spawn_play_button: "def() ->commands execute(me, [
			remove_object(_play_button),
			set(_play_button, null),

			spawn('button_controller', 0, 0, {
				x: pane_left_edge,
				y: lib.citadel.py(786),
				text: 'play this deck',
				_font_size: lib.citadel.py(32),
				button_width: gui_right_edge - pane_left_edge,
				button_height: lib.citadel.py(44),
				on_click: (def() ->commands me.play_game(_selected_scenario)),
				zorder: me.zorder+10,
			}, [
				set(_play_button, child),
			]),

		])",

		select_tab: "def(obj combo_label combo) ->commands [
			set(_rival_type, combo.index);
			create_rivals()
		]",

		enter_campaign: "def(obj combo_label combo) ->commands [
			title_controller.transition_screen(
				set(title_controller.force_campaign_world_map, true);
				title_controller.set_campaign_controller()
			)
		]",

		_rivals: { type: "[obj rival_avatar]", default: [] },

		_selected_rival: { type: "null|obj rival_avatar", set: "if(value != _data, [set(_data, value), if(value, [animate(value, {halo: 5.0}, {duration: 10}), set(lib.citadel.preferences, lib.citadel.preferences + {selected_rival: value.rival.name}), set(_current_scenario, value.rival.choose_scenario(title_controller.account_info))]), if(_data, animate(_data, {halo: 0.0}, {duration: 10}))])" },

		_mouse_enter_rival: "def(obj rival_avatar avatar) ->commands
			if(avatar != _selected_rival, animate(avatar, {halo: 2.0}, {duration: 10}))
		",
		_mouse_leave_rival: "def(obj rival_avatar avatar) ->commands
			if(avatar != _selected_rival, animate(avatar, {halo: 0.0}, {duration: 10}))
		",
		_mouse_click_rival: "def(obj rival_avatar avatar) ->commands
			set(_selected_rival, avatar)
		",

		//0 = tutorials, 1 = rivals
		_rival_type: {
			type: "int",
			variable: false,
			get: "1", //if(pref is int, pref, 0) where pref = lib.citadel.preferences.rival_tab",
			set: "[set(lib.citadel.preferences.rival_tab, value), [set(c.selected, c.index = value) | c <- level.chars, c is obj combo_label, c.grouping = 'rival_type']]",
		},

		create_rivals: "def() ->commands execute(me, [
			map(_rivals, animate(value, { alpha: 0 }, { duration: 20, on_complete: remove_object(value)})),
			set(_rivals, []),

			map(if(_rival_type = 0, lib.citadel.tutorials, lib.citadel.rivals), spawn('rival_avatar', 0, 0, {
				x: pane_left_edge,
				y: lib.citadel.py(70) + index*lib.citadel.py(80),
				rival: value,
				zorder: zorder+100,
				alpha: 0,

				mouseover_handler: me._mouse_enter_rival,
				mouseoff_handler: me._mouse_leave_rival,
				click_handler: me._mouse_click_rival,
			}, [
				add(_rivals, [child]),
				animate(child, {
					alpha: 255,
				}, {
					duration: 20,
				}),
			]));

			set(_selected_rival, find(_rivals, value.rival.name = lib.citadel.preferences.selected_rival) or _rivals[0]),
		])",

		create_objects: "def() ->commands execute(me, [
			spawn('label', 0, 0, {
				mid_x: (pane_left_edge + gui_right_edge)/2,
				mid_y: lib.citadel.py(60),
				_text: ['RIVALS'],
				_font_size: lib.citadel.py(24),
				zorder: zorder + 10,
			}, [
			]),


			create_rivals(),
/*
			spawn('combo_label', 0, 0, {
				x: pane_left_edge + lib.citadel.py(110) + if(lib.citadel.is_release, lib.citadel.py(40), 0),
				y2: lib.citadel.py(560),
				_text: 'Tutorials',
				_font_size: lib.citadel.py(20),
				grouping: 'rival_type',
				index: 0,
				selected: (_rival_type = 0),
				left_rect: lib.citadel.py(-10),
				click_handler: me.select_tab,
				zorder: zorder+10,
			}, [
			]),

			spawn('combo_label', 0, 0, {
				x: pane_left_edge + lib.citadel.py(200) + if(lib.citadel.is_release, lib.citadel.py(40), 0),
				y2: lib.citadel.py(560),
				_text: 'Rivals',
				_font_size: lib.citadel.py(20),
				grouping: 'rival_type',
				index: 1,
				selected: (_rival_type = 1),
				left_rect: lib.citadel.py(-10),
				right_rect: if(lib.citadel.is_release, lib.citadel.py(-5)),
				click_handler: me.select_tab,
				zorder: zorder+10,
			}, [
			]),

			if(lib.citadel.is_devel,
			spawn('combo_label', 0, 0, {
				x: pane_left_edge + lib.citadel.py(266),
				y2: lib.citadel.py(560),
				_text: 'Campaign',
				_font_size: lib.citadel.py(20),
				grouping: 'campaign',
				index: 0,
				selected: false,
				left_rect: lib.citadel.py(-10),
				right_rect: lib.citadel.py(-5),
				click_handler: me.enter_campaign,
				zorder: zorder+10,
			}, [
			])
			),
*/
			_spawn_play_button(),

			spawn('choose_deck_controller', 0, 0, {
				title_controller: title_controller,
				return_controller: return_controller,
				current_controller: me,
				_preview_x: pane_left_edge,
				_preview_y: lib.citadel.py(590),
			}),

			set(draw_primitives, [
			{
				type: 'rect',
				color: [0.1, 0.1, 0.1, 1.0],
				area: [pane_left_edge, lib.citadel.py(30), gui_right_edge, lib.citadel.py(570)],
			},
			{
				type: 'rect',
				color: [0.1, 0.1, 0.1, 1.0],
				area: [pane_left_edge, lib.citadel.py(590), gui_right_edge, lib.citadel.py(830)],
			},
			]),
		])",

	},

	on_create: "if(MODULE_OPTIONS.startgame,
		schedule(2, ; play_game(_selected_scenario))
	)",
}
