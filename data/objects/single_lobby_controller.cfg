{
	id: "single_lobby_controller",
	is_human: true,
	hidden_in_game: true,
	is_strict: true,

	properties: {
		title_controller: { type: "obj title_controller" },
		return_controller: { type: "custom_obj" },

		level_width: "int<- level.dimensions[2]",
		level_height: "int<- level.dimensions[3]",

		//the left/right side of the 'usable' area -- i.e. cutting off edges
		//to make for a 4:3 display.
		gui_left_edge: "int :: (level_width - (level_height*4)/3)/2",
		gui_right_edge: "int :: level_width - gui_left_edge",

		pane_left_edge: "int :: gui_right_edge - lib.citadel.py(445)",

		_current_scenario: { type: "null|Scenario" },

		_selected_scenario: "Scenario<- (_current_scenario or lib.json.get_document_map('data/campaign.cfg')['scenarios'][4])",

		_internal_client: { type: "object|null" },
		_session_id: { type: "int|null" },
		_sent_message: { type: "map|null" },

		return_from_game: "def(bool result, null|class game state) ->commands
		[
			set(level.frame_buffer_shaders, []),
			title_controller.transition_screen(
			; [
				add_object(me),
				add_object(title_controller),
				lib.citadel.add_main_background_shader(level),
			],
			false)
		]
		",

		play_game: "def() ->commands execute(me, [
			set(me._internal_client, cl),
			set(me._session_id, sid),
			set(me._sent_message, msg),
			tbs_send(cl, msg),
		] where msg = {
			type: 'create_game',
			game_type: 'citadel',
			starting_units: _selected_scenario.starting_units,
			map_dimensions: _selected_scenario.map_dimensions,
			map_lanes: _selected_scenario.map_lanes,
			player_resources: _selected_scenario.player_resources,
			trophies: _selected_scenario.trophies,
			users: [{user: title_controller.username, avatar: title_controller.account_info.avatar, session_id: sid}, {user: bot_name, bot_type: bot_type, args: {}, bot_args: bot_args, bot: true, session_id: sid+1, avatar: _selected_scenario.avatar}],
			tutorial: _selected_scenario.tutorial,
		}
		where cl = tbs_internal_client()
		where sid = int<- time().unix
		where bot_name = _selected_scenario.enemy_name
		where bot_type = _selected_scenario.bot_type or 'eval'
		where bot_args = (if(args != null, args, {}) where args = _selected_scenario.bot_args)

		)",

		_play_button: { type: "null|obj button_controller" },

		_spawn_play_button: "def() ->commands execute(me, [
			remove_object(_play_button),
			set(_play_button, null),

			spawn('button_controller', 0, 0, {
				x: pane_left_edge,
				y: lib.citadel.py(786),
				text: 'play this deck',
				_font_size: lib.citadel.py(32),
				button_width: gui_right_edge - pane_left_edge,
				button_height: lib.citadel.py(40),
				on_click: me.play_game,
				zorder: me.zorder+10,
			}, [
				set(_play_button, child),
			]),

		])",

		select_tab: "def(obj combo_label combo) ->commands [
			set(_rival_type, combo.index);
			create_rivals()
		]",

		enter_campaign: "def(obj combo_label combo) ->commands [
			title_controller.transition_screen(
				set(title_controller.force_campaign_world_map, true);
				title_controller.set_campaign_controller()
			)
		]",

		_rivals: { type: "[obj rival_avatar]", default: [] },

		_selected_rival: { type: "null|obj rival_avatar", set: "if(value != _data, [set(_data, value), if(value, [animate(value, {halo: 5.0}, {duration: 10}), set(lib.citadel.preferences, lib.citadel.preferences + {selected_rival: value.rival.name}), set(_current_scenario, value.rival.choose_scenario(title_controller.account_info))]), if(_data, animate(_data, {halo: 0.0}, {duration: 10}))])" },

		_mouse_enter_rival: "def(obj rival_avatar avatar) ->commands
			if(avatar != _selected_rival, animate(avatar, {halo: 2.0}, {duration: 10}))
		",
		_mouse_leave_rival: "def(obj rival_avatar avatar) ->commands
			if(avatar != _selected_rival, animate(avatar, {halo: 0.0}, {duration: 10}))
		",
		_mouse_click_rival: "def(obj rival_avatar avatar) ->commands
			set(_selected_rival, avatar)
		",

		//0 = tutorials, 1 = rivals
		_rival_type: {
			type: "int",
			variable: false,
			get: "if(pref is int, pref, 0) where pref = lib.citadel.preferences.rival_tab",
			set: "[set(lib.citadel.preferences.rival_tab, value), [set(c.selected, c.index = value) | c <- level.chars, c is obj combo_label, c.grouping = 'rival_type']]",
		},

		create_rivals: "def() ->commands execute(me, [
			map(_rivals, animate(value, { alpha: 0 }, { duration: 20, on_complete: remove_object(value)})),
			set(_rivals, []),

			map(if(_rival_type = 0, lib.citadel.tutorials, lib.citadel.rivals), spawn('rival_avatar', 0, 0, {
				x: pane_left_edge,
				y: lib.citadel.py(70) + index*lib.citadel.py(80),
				rival: value,
				zorder: zorder+100,
				alpha: 0,

				mouseover_handler: me._mouse_enter_rival,
				mouseoff_handler: me._mouse_leave_rival,
				click_handler: me._mouse_click_rival,
			}, [
				add(_rivals, [child]),
				animate(child, {
					alpha: 255,
				}, {
					duration: 20,
				}),
			]));

			set(_selected_rival, find(_rivals, value.rival.name = lib.citadel.preferences.selected_rival) or _rivals[0]),
		])",

		create_objects: "def() ->commands execute(me, [
			spawn('label', 0, 0, {
				mid_x: (pane_left_edge + gui_right_edge)/2,
				mid_y: lib.citadel.py(60),
				_text: ['RIVALS'],
				_font_size: lib.citadel.py(24),
				zorder: zorder + 10,
			}, [
			]),


			create_rivals(),

			spawn('combo_label', 0, 0, {
				x: pane_left_edge + lib.citadel.py(110) + if(lib.citadel.is_release, lib.citadel.py(40), 0),
				y2: lib.citadel.py(560),
				_text: 'Tutorials',
				_font_size: lib.citadel.py(20),
				grouping: 'rival_type',
				index: 0,
				selected: (_rival_type = 0),
				left_rect: lib.citadel.py(-10),
				click_handler: me.select_tab,
				zorder: zorder+10,
			}, [
			]),

			spawn('combo_label', 0, 0, {
				x: pane_left_edge + lib.citadel.py(200) + if(lib.citadel.is_release, lib.citadel.py(40), 0),
				y2: lib.citadel.py(560),
				_text: 'Rivals',
				_font_size: lib.citadel.py(20),
				grouping: 'rival_type',
				index: 1,
				selected: (_rival_type = 1),
				left_rect: lib.citadel.py(-10),
				right_rect: if(lib.citadel.is_release, lib.citadel.py(-5)),
				click_handler: me.select_tab,
				zorder: zorder+10,
			}, [
			]),

			if(lib.citadel.is_devel,
			spawn('combo_label', 0, 0, {
				x: pane_left_edge + lib.citadel.py(266),
				y2: lib.citadel.py(560),
				_text: 'Campaign',
				_font_size: lib.citadel.py(20),
				grouping: 'campaign',
				index: 0,
				selected: false,
				left_rect: lib.citadel.py(-10),
				right_rect: lib.citadel.py(-5),
				click_handler: me.enter_campaign,
				zorder: zorder+10,
			}, [
			])
			),

			_spawn_play_button(),

			spawn('choose_deck_controller', 0, 0, {
				title_controller: title_controller,
				return_controller: return_controller,
				current_controller: me,
				_preview_x: pane_left_edge,
				_preview_y: lib.citadel.py(590),
			}),

			set(draw_primitives, [
			{
				type: 'rect',
				color: [0.1, 0.1, 0.1, 1.0],
				area: [pane_left_edge, lib.citadel.py(30), gui_right_edge, lib.citadel.py(570)],
			},
			{
				type: 'rect',
				color: [0.1, 0.1, 0.1, 1.0],
				area: [pane_left_edge, lib.citadel.py(590), gui_right_edge, lib.citadel.py(830)],
			},
			]),
		])",

	},

	on_process: "[
		if(_internal_client != null, tbs_process(_internal_client)),
	]",

	on_being_added: "
		create_objects()
	",
	on_type_updated: "[map(spawned_children, remove_object(value)); create_objects()]",

	on_message_received: "switch(message.type,
		'game_created',

		title_controller.transition_screen(
		[
		set(level.frame_buffer_shaders, []),
		debug(['XXX: game created session id:', _session_id]),
		set(_session_id, null),
		map(level.chars, remove_object(value)),
		add_object(playable)
		  where playable = object_playable('citadel_controller', 336, 372, 0, {
			_mm_client_state: title_controller.client_state,
			game_server_address: '',
			game_server_port: 23456,
			game_setup_message: _sent_message,
			session_id: _session_id asserting _session_id != null,
			game_created: true,
			selected_deck: title_controller.selected_deck,
			selected_deck_category: title_controller.selected_deck_category,
			return_callback: me.return_from_game,
//			campaign_location: _campaign.name,
//			campaign_scenario: selected_scenario_index,
			campaign_sets: if(_selected_scenario.set != null, [_selected_scenario.set], []),
			_storyline: if(_selected_scenario.storyline, obj storyline_base <- object(_selected_scenario.storyline), object('storyline_null')),
			_theme: if(theme, class theme<- construct('theme_' + theme), lib.theme) where theme = _selected_scenario.theme,
			_music_theme: if(music_theme, music_theme, 'materia') where music_theme = _selected_scenario.music_theme,
			victory_unlock: if(unlock not in title_controller.account_info.unlocks, unlock) where unlock = _selected_scenario.unlock,
		  })
		], true, false)
	) where message = map<- arg.message",
}
