{
	id: "campaign_controller",
	is_human: true,
	hitpoints: 20,
	editor_info: { category: "player" },
    hidden_in_game: true,
	
	is_strict: true,

	types: {

	},
	
    properties: {
		//set the area we take up. Don't use the bottom 80 pixels.
		level_width: "int :: level.dimensions[2]",
		level_height: "int :: level.dimensions[3] - lib.citadel.px(80)",

		px: "def(int pixels) ->int if(res%2 = 1, res+1, res) where res = int((decimal(pixels)*decimal(level_height))/900.0)",


		_mm_client_state: { type: "class mm_client_state" },

		_campaign_record: "CampaignRecord ::
			if(lib.citadel.preferences.campaign_record is CampaignRecord,
			   CampaignRecord<- lib.citadel.preferences.campaign_record,
			   {})
		",

		_campaign_scenario_record: "def(string key) ->CampaignRecordEntry
			if(key in _campaign_record, _campaign_record[key], {victory: 0, plays: 0})
		",

		_increment_scenario_victories: "def(string key) ->commands [
			set(lib.citadel.preferences, lib.citadel.preferences +
			  { campaign_record: _campaign_record + {(key): record + {victory: record.victory+1}} where record = _campaign_scenario_record(key) })
		]",

		_increment_scenario_plays: "def(string key) ->commands [
			set(lib.citadel.preferences, lib.citadel.preferences +
			  { campaign_record: _campaign_record + {(key): record + {plays: record.plays+1}} where record = _campaign_scenario_record(key) })
		]",

		_progress_scenario: { default: false },

		nscenarios: "int :: min(size(_campaign.scenarios), if(s != null, s+1, 1))
		    where s = int|null <- _mm_client_state.account_info.campaign_progress[_campaign.name]",

		victory: "def() ->commands [
			_increment_scenario_victories(_campaign.scenarios[selected_scenario_index].name),
			if(selected_scenario_index = nscenarios-1 and nscenarios <= size(_campaign.scenarios), [
				set(_mm_client_state.account_info.campaign_progress[_campaign.name], (_mm_client_state.account_info.campaign_progress[_campaign.name] or 0) + 1),
				if(nscenarios < size(_campaign.scenarios),
				[
				   sound('interface/path-draw.wav'),
				   set(_progress_scenario, true),
				]),
			])
		]",

		selected_scenario: "visible_scenarios[selected_scenario_index]",
		visible_scenarios: "_campaign.scenarios[:nscenarios]",

	  	selected_scenario_index: "int :: if(MODULE_OPTIONS.scenario != null, int(MODULE_OPTIONS.scenario), if(_campaign_items = [], nscenarios-1, index(_campaign_items, find_or_die(_campaign_items, value.selected))))",

		_displayed_scenario_index: { type: "int|null" },

		chosen_deck: "string :: find_or_die(level.chars, value is obj library_deck_summary and value.selected).deck_name
		  asserting find(level.chars, value is obj library_deck_summary) != null",

		_decks: "DeckMap :: _mm_client_state.account_info.decks",

		_campaign_items: { type: "[obj campaign_item]", default: [] },

		_map_button: { type: "null|obj button_controller" },
		_go_button: { type: "null|obj button_controller" },
		_cancel_button: { type: "null|obj button_controller" },
		_queued_label: { type: "null|obj label" },

		_coop_pending: { type: "bool", default: false },

		_internal_client: { type: "object|null" },
		_session_id: { type: "int|null" },
		_campaign: { type: "Campaign", init: "Campaign<- lib.json.get_document_map('data/campaign.cfg')" }, //'data/campaign2.cfg')" },

		_sent_message: { type: "map|null" },

		_world_map_unlocked: "bool :: _campaign.lock_world_map != true or
		           progress != null and progress >= size(_campaign.scenarios)
		    where progress = int|null <- _mm_client_state.account_info.campaign_progress[_campaign.name]",
		
		_parent: { type: "custom_obj|null" },

		return_from_game: "
		  def(bool result, null|class game_state state) ->commands [
		  	if(result, me.victory()),
			teleport('lobby.cfg', '', 'fade', me._parent asserting me._parent != null)
		]
		",
    },

	on_process: "[
		if(_internal_client != null, tbs_process(_internal_client)),
		if(_displayed_scenario_index != selected_scenario_index, fire_event('show_objects')),

		if(_coop_pending and level.cycle%10 = 0,
		[
			if(_queued_label != null, remove_object(_queued_label)),
			spawn('label', level_width - 220, level_height - 100, {
				_text: ['Queued for Game' + fold(map(range(nitem), '.'), a+b)]
				  where nitem = (level.cycle/10)%3 + 1,
				_font_size: 28,
				_halign: 'left',
			}, [
				set(_queued_label, child),
			]),
		]
		)

	]",


	on_message_received: "switch(message.type,
		'game_created',
		[
		log(['XXX: game created session id:', _session_id]),
		set(_session_id, null),
		teleport('level1.cfg', '', 'fade', playable)
		  where playable = object_playable('citadel_controller', 336, 372, 0, {
			_mm_client_state: _mm_client_state,
			game_server_address: '',
			game_server_port: 23456,
			game_setup_message: _sent_message,
			session_id: _session_id asserting _session_id != null,
			game_created: true,
			selected_deck: chosen_deck,
			return_callback: me.return_from_game,
			campaign_location: _campaign.name,
			campaign_scenario: selected_scenario_index,
			campaign_sets: if(scenario.set != null, [scenario.set], []),
			_storyline: if(scenario.storyline, obj storyline_base <- object(scenario.storyline), object('storyline_null')),
			_theme: if(theme, class theme<- construct('theme_' + theme), lib.theme) where theme = _campaign.scenarios[selected_scenario_index].theme,
			_music_theme: if(music_theme, music_theme, 'materia') where music_theme = _campaign.scenarios[selected_scenario_index].music_theme,
			victory_unlock: if(unlock not in _mm_client_state.account_info.unlocks, unlock) where unlock = scenario.unlock,
		  } where scenario = _campaign.scenarios[selected_scenario_index])
		]
	) where message = map<- arg.message",

	on_return_to_map: "[
		remove_object(me),
		spawn('map_campaign_controller', 0, 0, {
			_mm_client_state: _mm_client_state
		}),
	]",

	on_cancel_game: "[
		find_or_die(level.chars, value is obj title_controller).send_cancel_matchmaking_request(),
		set(_coop_pending, false),
		fire_event('show_objects'),
	]",

	on_play_game: "if(selected_scenario.scenario_type = 'coop',
	    [
			set(me._sent_message, null),
			find_or_die(level.chars, value is obj title_controller).send_matchmaking_request({
				type: 'coop',
				bot_users: [{user: bot_name, bot_type: bot_type, args: {}, bot_args: bot_args, bot: true, session_id: sid+1, avatar: selected_scenario.avatar, index: 1}],

				info: {
					starting_units: selected_scenario.starting_units,
					map_dimensions: selected_scenario.map_dimensions,
					map_lanes: selected_scenario.map_lanes,
					player_resources: selected_scenario.player_resources,
					trophies: selected_scenario.trophies,
				},
			}),

			set(_coop_pending, true),

			fire_event('show_objects'),
		],
	    _session_id = null, [
		_increment_scenario_plays(selected_scenario.name),
		add(lib.citadel.preferences, { selected_deck: chosen_deck }),

		set(me._internal_client, cl),
		set(me._session_id, sid),
		set(me._sent_message, msg),
		tbs_send(cl, msg),
	] where msg = {
			type: 'create_game',
			game_type: 'citadel',
			starting_units: selected_scenario.starting_units,
			map_dimensions: selected_scenario.map_dimensions,
			map_lanes: selected_scenario.map_lanes,
			player_resources: selected_scenario.player_resources,
			trophies: selected_scenario.trophies,
			users: [{user: _mm_client_state.username, avatar: _mm_client_state.account_info.avatar, session_id: sid}, {user: bot_name, bot_type: bot_type, args: {}, bot_args: bot_args, bot: true, session_id: sid+1, avatar: selected_scenario.avatar}],
			tutorial: selected_scenario.tutorial,
	}) where cl = tbs_internal_client()
	  where sid = int<- time().unix
	  where bot_name = selected_scenario.enemy_name
	  where bot_type = selected_scenario.bot_type or 'eval'
	  where bot_args = (if(args != null, args, {}) where args = selected_scenario.bot_args)
	",

	on_being_removed: "map(spawned_children, remove_object(value))",

	on_show_objects: "[
		log('event show_objects'),
		set(_displayed_scenario_index, selected_scenario_index),

		map(spawned_children, remove_object(value)),

		spawn('combo_label', level_width - lib.citadel.px(42), lib.citadel.py(54), {
			_text: 'SETTINGS',
			_font_size: lib.citadel.px(14),
			_halign: 'right',
			grouping: 'settings',
			selected: false,
			index: 0,
			click_handler: (def(obj combo_label label)->commands find_or_die(level.chars, value is obj title_controller).enter_settings()),
		}),
	
		spawn('text_area', px(10), px(10), {
			_text: q(<font weight='60' size=') + px(32) + q('>) + selected_scenario.name + q(</font>
<font size=') + px(16) + q('>) + selected_scenario.text + q(</font>),
			text_width: px(340),
			x: px(10),
			y: px(10),
			zorder: 100,
		}, [
		]),
		
		spawn('label', px(30), level_height - lib.citadel.py(170), {
			_text: [
			  'You have won ' +
			  str(_campaign_scenario_record(selected_scenario.name).victory) +
			  ' times in ' +
			  str(_campaign_scenario_record(selected_scenario.name).plays) +
			  ' attempts' ],
			_halign: 'left',
			_valign: 'top',
			_font_size: px(16),
			x: px(30),
			y: level_height - lib.citadel.py(170),
			zorder: 100,
			_outline_width: 0.0,
		}, [
		]),

		spawn('label', px(30), level_height - lib.citadel.py(150), {
			_text: [
			  if(selected_scenario.set = null,
			     'No cards are rewarded for this scenario',
				 selected_scenario.set + ' set: ' + str(ncards_owned) + '/' + str(ncards_in_set) + ' owned'

				 where ncards_owned = sum(map(cards_in_set, min(3, count(owned_cards, value = context.value))))
				 where ncards_in_set = size(cards_in_set)*3
				 where cards_in_set = lib.citadel.get_cards_in_set(selected_scenario.set)
				 where owned_cards = map(_mm_client_state.account_info.collection, value.name)
			  )
			],

			_halign: 'left',
			_valign: 'top',
			_font_size: px(16),
			x: px(30),
			y: level_height - lib.citadel.py(150),
			zorder: 100,
			_outline_width: 0.0,
		}, [
		]),
		
		map(level.chars, if(value is obj campaign_avatar,
		  if(value.portrait != selected_scenario.portrait,
		  [
		    add(value.zorder, 10),
		  	animate(value, {
				alpha: 0,
			}, {
				duration: 50,
				on_complete: remove_object(value),
			}),
		  ],
		  remove_object(value))
		)),
		spawn('campaign_avatar', level_width/2, level_height*0.4, {
			portrait: selected_scenario.portrait,
			zorder: -10,
		}, [
			//see if we want to fade this in while the new avatar fades out.
			if(find(level.chars, value is obj campaign_avatar and value.portrait != selected_scenario.portrait) != null, [
				set(child.alpha, 0),
				animate(child, {
					alpha: 255,
				}, {
					duration: 50,
				}),
			])
		]),

		map(level.chars, if(value is obj library_deck_summary|obj scrollable_pane, remove_object(value))),

		map(_campaign_items, remove_object(value)),
		set(_campaign_items, []),

		map(visible_scenarios, spawn('campaign_item', 0, level_height-64, {
			selected: index = selected_scenario_index,
			show_next: index < size(visible_scenarios)-1,
			mid_x: (level_width - lib.citadel.px(196)*(size(visible_scenarios)-1))/2 + lib.citadel.px(196)*index,
			scenario: value,
		}, [
			add(_campaign_items, [child]),
			if(_progress_scenario and index = nscenarios-2, [
				set(child.show_next_progress, 0.0),
				animate(child, {
					show_next_progress: 1.0,
				}, {
					duration: 50,
				}),
			]),

			if(_progress_scenario and index = nscenarios-1, [
				set(child.alpha, 0),
				animate(child, {
					alpha: 0,
				}, {
					duration: 50,
					name: 'fade_in',
				}),
				animate(child, {
					alpha: 255,
				}, {
					duration: 50,
					name: 'fade_in',
					on_complete: bind_command(child.select_item),
				}),

				if( index = 1, [
					spawn('tip_dialog', level_width - 200, level_height/2, {
						zorder: 10000,
						_tip: {
							key: 'unlock',
							text: 'You have unlocked a new scenario!',
							max_shows: 3,
							targets: [child],
						},

						_width: 260,
						_height: 200,
					})
				])
			]),
		])),

		schedule(50, set(me._progress_scenario, false)),

		spawn('scrollable_pane', 0, 0, {
			x: level_width - lib.citadel.px(300),
			y: lib.citadel.px(28 + 72),
			area_width: lib.citadel.px(290),
			area_height: lib.citadel.py(500),
			left_align: false,
			always_keep_children_in_level: true,
			elements: map(_decks, {ypos: lib.citadel.py(72*index), obj: object('library_deck_summary', 0, 0, {selected: index = if(selected_index >= 0, selected_index, 0), zorder: 500, deck_name: key, _mm: find_or_die(level.chars, value is obj title_controller)})}),
		}, [
		])

		  where selected_index = index(keys(_decks), find(keys(_decks), value = selected_deck) or _decks[0])
		  where selected_deck = if(selected_deck_obj, selected_deck_obj.deck_name, lib.citadel.preferences.selected_deck)
		  where selected_deck_obj = find(level.chars, value is obj library_deck_summary and value.selected),

		if(_go_button, [remove_object(_go_button), set(_go_button, null)]),
		if(_map_button, [remove_object(_map_button), set(_map_button, null)]),
		if(_cancel_button, [remove_object(_cancel_button), set(_cancel_button, null)]),
		if(_queued_label, [remove_object(_queued_label), set(_queued_label, null)]),

		
		if(_world_map_unlocked,
		spawn('button_controller', lib.citadel.px(40), level_height - lib.citadel.py(240), {
			text: '<< World Map',
			on_click: (def() -> commands fire_event(me, 'return_to_map')),
			button_width: lib.citadel.px(240),
			button_height: lib.citadel.py(50),
		}, [
			set(_map_button, child)
		])
		),

		if(_coop_pending = false,

			spawn('button_controller', level_width - lib.citadel.px(260), level_height - lib.citadel.py(80), {
				text: 'Play',
				on_click: (def() -> commands fire_event(me, 'play_game')),
				button_width: lib.citadel.px(240),
				button_height: lib.citadel.py(50),
			}, [
				set(_go_button, child)
			]),

			[

			spawn('button_controller', level_width - lib.citadel.px(220), level_height - lib.citadel.py(50), {
				text: 'Cancel',
				on_click: (def() -> commands fire_event(me, 'cancel_game')),
				button_width: lib.citadel.px(240),
				button_height: lib.citadel.py(50),
			}, [
				set(_cancel_button, child)
			]),


			]

		),

		fire_event('show_welcome'),

	]",

	on_show_welcome: "
	if(_go_button != null and lib.citadel.num_times_tip_shown('welcome') < 1,
		   spawn('tip_dialog', level_width - 200, level_height/2, {
				zorder: 10000,
				_tip: {
					key: 'welcome',
					text: 'Welcome to <i>Argentum Age</i>. When you are ready, click the Play button to start the tutorial',
					max_shows: 1,
					targets: [_go_button],
				},

				_width: 260,
				_height: 200,
			}),
	   _map_button != null and lib.citadel.num_times_tip_shown('world_map') < 1,
	      spawn('tip_dialog', level_width - 200, level_height/2, {
				zorder: 10000,
				_tip: {
					key: 'world_map',
					text: 'You have completed the tutorial and are ready to venture forth. Use the <i>World Map</i> to travel to different locations.',
					max_shows: 1,
					targets: [_map_button] asserting _map_button != null,
				},

				_width: 260,
				_height: 200,
		  })
		)
	",

	on_being_added: "[
		log(['BBB', _mm_client_state.account_info.campaign_location]),
		if(MODULE_OPTIONS.campaign != null,
		   schedule(2, fire_event(me, 'play_game'))),

		if(campaign != null,
	               set(_campaign, Campaign<- lib.json.get_document_map('data/' + str(campaign))))
			where campaign = MODULE_OPTIONS.campaign or _mm_client_state.account_info.campaign_location,
		set(_parent, find_or_die(level.chars, value is obj title_controller)),
		fire_event('window_resize_custom', {width: level.camera_position[2], height: level.camera_position[3]}),
	]",

	on_window_resize_custom: "[
		lib.gui.set_screen_dimensions(level),
		set(level.dimensions, [0,0,new_width,new_height]),

		log('event window_resize'),
		fire_event('show_objects'),
	] where new_width = max(int<- arg.width,800)-1
	  where new_height = max(int<- arg.height, 600)-1",
}
