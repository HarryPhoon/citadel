{
id: "devotion_token",
is_strict: true,
always_active: true,

properties: {
	_width: { type: "int" },
	school: { type: "int" },
	primary_color: "[decimal,decimal,decimal] ::
	lib.citadel.school_info[school].color
	",
	secondary_color: "[decimal,decimal,decimal] ::
	[c[0]*0.9, c[1]*0.9, c[2]*0.9]
	where c = primary_color
	",

	luminosity_adj: { type: "decimal", default: 0.0 },

	render: "def() ->commands
	set(animation,
	lib.citadel.render_frame(c, _width, _width,
	[
		c.set_source_rgba(primary_color[0], primary_color[1], primary_color[2], 1.0),
		c.arc(_width/2, _width/2, _width/2, 0.0, 2*3.15),
		c.fill(),

		c.set_source_rgba(primary_color[0]*0.5, primary_color[1]*0.5, primary_color[2]*0.5, 1.0),
		c.arc(_width/2, _width/2, _width*0.45, 0.0, 2*3.15),
		c.set_line_width(lib.gui.dpy(2.0)),
		c.stroke(),

		map(range(6),
		[
			c.set_source_rgba(secondary_color[0], secondary_color[1], secondary_color[2], 0.5 + 1d50*0.01),
			c.arc(_width/4 + (1d100*0.01)*_width/2, _width/4 + (1d100*0.01)*_width/2, (0.5 + 1d50*0.01)*_width/4, 0.0, 2*3.15),
			c.fill(),
		]
		)

	])
	) where c = canvas()
	",

	play_entry: "def() ->commands
	(
	set(alpha, 0);
	schedule(ncycles, set(alpha, 255); set(luminosity_adj, 1.0); animate(me, {luminosity_adj: 0.0}, {duration: 10}));
	map(range(nsteps),
	schedule((value*ncycles)/nsteps,
		; add(me.blur, [
			blur_object({
				mid_y: mix(mid_y - lib.gui.py(60), mid_y, lerp),
				alpha: 64,
				scale: mix(0.4, 1.2, lerp),
				luminosity_adj: 0.0,
			}, {
				duration: 12,
				animate: {
					alpha: 0,
				}
			})
		])
	)
	where lerp = decimal(value)/decimal(nsteps)
	)
	)
	where nsteps = 40
	where ncycles = 4
	",

	launch_from_creature_anim: "def() ->commands
	(
	set(alpha, 0);
	schedule(2, set(alpha, 255); set(luminosity_adj, 1.0); animate(me, {luminosity_adj: 0.0}, {duration: 20}));
	schedule(ncycles+12, remove_object(me));
	map(range(nsteps),
	schedule((value*ncycles)/nsteps,
		; add(me.blur, [
			blur_object({
				mid_y: mix(mid_y, mid_y - lib.gui.py(60), lerp),
				alpha: 64,
				scale: mix(1.2, 1.4, lerp),
				luminosity_adj: 0.0,
			}, {
				duration: 12,
				animate: {
					alpha: 0,
				}
			})
		])
	)
	where lerp = decimal(value)/decimal(nsteps)
	)
	)
	where nsteps = 40
	where ncycles = 4

	",
},

on_create: "render()",
on_type_updated: "render()",

shader: {
	name: "devotion_token_shader",
	vertex: "
        uniform mat4 u_anura_mvp_matrix;
        attribute vec4 a_anura_vertex;
        attribute vec2 a_anura_texcoord;
        varying vec2 v_texcoord;
        void main()
        {
            v_texcoord = a_anura_texcoord;
            gl_Position = u_anura_mvp_matrix * a_anura_vertex;
        }
	",

	fragment: "
		vec3 rgb_to_hsv(vec3 c)
		{
			vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
			vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
			vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

			float d = q.x - min(q.w, q.y);
			float e = 1.0e-10;
			return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
		}

		vec3 hsv_to_rgb(vec3 c)
		{
			vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
			vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
			return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
		}

        uniform sampler2D u_anura_tex_map;
		varying vec2 v_texcoord;
		uniform float u_property_alpha;
		uniform vec4 u_anura_sprite_area;
		uniform float u_property_luminosity_adj;
        void main()
        {
			vec4 col = texture2D(u_anura_tex_map, v_texcoord);

			if(u_property_luminosity_adj != 0.0) {
				vec3 hsv = rgb_to_hsv(col.rgb);
				hsv[2] += u_property_luminosity_adj;
				col.rgb = hsv_to_rgb(hsv);
			}

			gl_FragColor = col;
			gl_FragColor[3] *= u_property_alpha/255.0;
		}
	",
},
}
