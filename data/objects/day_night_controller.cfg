{
	id: "day_night_controller",
	is_strict: true,
	always_active: true,
	hidden_in_game: true,

	properties: {
		//This is the property you can set to say if it's day right now
		//or not. Set to true for day, false for night.
		//When set it triggers drawing the transition to the new
		//state by calling _create_icon.
		is_day: {
			type: "bool",
			set: "if(_data != value, [
				set(_data, value); _create_icon()
			])",
		},

		_icon: { type: "null|obj game_icon" },

		//This function will create a new icon and transition any
		//existing icon out, providing a cool little animation.
		_create_icon: "def() ->commands
			if(_icon,
				//make the old icon disappear by moving it out of
				//the clip area and then removing it from play
				//at the end of the animation.
				animate(_icon, {
					mid_x: _icon.mid_x - lib.gui.py(80),
				}, {
					duration: 30,
					on_complete: remove_object(_icon),
				})
			);

			spawn('game_icon', {
				//display a sun at day and a moon at night.
				icon: if(is_day, 'sun.svg', 'moon.svg'),
				size: lib.gui.py(48),

				//spawn the icon to the right of the place we want it,
				//so we can animate it into play.
				mid_x: mid_x + lib.gui.py(80),
				mid_y: mid_y,

				//The clip area. Any part of the object outside of this
				//area won't be drawn.
				clip_area: [mid_x - lib.gui.py(40), mid_y - lib.gui.py(40), lib.gui.py(80), lib.gui.py(80)],
				clip_area_absolute: true,
			}, [
				//commands executed right when the object is
				//created. Animate it into its final position.
				set(_icon, child),
				animate(child, {
					mid_x: mid_x,
				}, {
					duration: 30,
				})
			])
		",
	},

	events: {
	},
}
