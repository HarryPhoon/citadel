{
	id: "title_lobby_controller",
	hidden_in_game: true,
	is_strict: true,

	prototype: ["title_multiplayer_base"],

	properties: {
		level_width: "int :: level.dimensions[2]",
		level_height: "int :: level.dimensions[3] - 80",

		_mm_client_state: { type: "class mm_client_state" },

		_change_avatar: "def(int index) ->commands [
			set(_mm_client_state.account_info.avatar, new_avatar),
			debug('new avatar ' + new_avatar),
			fire_event(me, 'create'),
			title_controller.set_avatar(new_avatar),
		] where new_avatar = lib.citadel.basic_avatars[index]",

		_avatar_combo: { type: "obj combo_controller|null" },
		_avatar_selection: { type: "int|null" },

		_display_settings: { default: false },

		_display_server_status: "bool :: _display_settings = false",

		_handle_settings: "def(obj combo_label label) ->commands [
			if(_display_settings, title_controller.close_settings(),
					              title_controller.enter_settings())
		]",

		_background_image: { type: "null|obj dynamic_title_image" },

		create_objects: "def() ->commands [
			map(spawned_children, remove_object(value)),

			if(_background_image != null, [
				remove_object(_background_image),
				add_object(_background_image),
			]),

			if(_display_settings = false,
			[
			spawn('label', level_width * 0.9, level_height*0.25, {
				_text: ['Argentum Age'],
				_font_size: lib.citadel.px(96),
				_halign: 'right',
			}),
			]),

			spawn('label', level_width - lib.citadel.px(40), lib.citadel.py(90), {
				_text: ['Welcome, ' + _mm_client_state.username],
				_font_size: lib.citadel.px(16),
				_halign: 'right',
				_valign: 'top',
			}),

			spawn('combo_label', level_width - lib.citadel.px(42), lib.citadel.py(54), {
				_text: if(_display_settings, 'CLOSE SETTINGS', 'SETTINGS'),
				_font_size: lib.citadel.px(14),
				_halign: 'right',
				grouping: 'settings',
				selected: false,
				index: 0,
				click_handler: me._handle_settings,
			}),

			if(_display_settings,
			[
				spawn('player_avatar', 200, 200, {
					_avatar: _mm_client_state.account_info.avatar,
					_top: 100,
					_width: (100 + top_player_area - bot_opponent_area)/2,
					_height: top_player_area - bot_opponent_area,
					_edge: avatar_width,
					_available_space: avatar_width,
					_nick: _mm_client_state.username,
					facing: 1,
					highlight: true,
					current_desaturation: 0.0,
					target_desaturation: 0.0,
				}),

				spawn('combo_controller', 40, top_player_area + 90, {
					items: avatars,
					_starting_selection_index: selection_index
					
				}, [
					set(me._avatar_combo, child),
					set(me._avatar_selection, selection_index),
				]) 
				where selection_index =	(if(idx = -1, 0, idx) where idx = index(map(lib.citadel.basic_avatars_info, value.id), _mm_client_state.account_info.avatar))
				where avatars = map(lib.citadel.basic_avatars_info, value.name),

				spawn('checkbox_controller', 380, 200, {
					text: 'Allow Animations',
					tooltip: 'Allow cosmetic background animations during gameplay',
					checked: lib.citadel.preferences['disable_animations'] != true,
					on_update: (def(bool value) ->commands set(lib.citadel.preferences, lib.citadel.preferences + {disable_animations: not value})),
					button_width: 220,
				}),

				spawn('checkbox_controller', 380, 260, {
					text: 'Hold Responses',
					tooltip: 'Will always hold for you to press Pass during response phases.',
					checked: lib.citadel.preferences['hold_responses'] != false,
					on_update: (def(bool value) ->commands set(lib.citadel.preferences, lib.citadel.preferences + {hold_responses: value})),
					button_width: 220,
				}),

				spawn('button_controller', 380, 420, {
					text: 'Delete Account',
					on_click: title_controller.delete_account,
				}),

			]
				where avatar_width = min((100 + top_player_area - bot_opponent_area)/2, (level_width - 400) / 2)
				where bot_opponent_area = if(level_height >= 900, 80, 80 - (900 - level_height)/2)
				where top_player_area = level_height - if(level_height >= 900, 250, 250 - (900 - level_height)/3),

			),

			create_server_status_labels(),
		]",
	},

	on_create: "[
		create_objects(),
	]",

	on_process: "[
		create_server_status_labels(),
		if(_avatar_combo != null and _avatar_combo.selected_index != _avatar_selection, [
			_change_avatar(_avatar_combo.selected_index)
		])
	] where ctrl = title_controller",

	on_being_removed: "map(spawned_children, remove_object(value))",
 
 	on_type_updated: "fire_event('create')",

	on_window_resize: "[
		create_objects(),
	] where width = int :: arg.width, height = int :: arg.height",
}
