{
	id: "title_lobby_controller",
	hidden_in_game: true,
	is_strict: true,

	properties: {
		level_width: "int :: level.dimensions[2]",
		level_height: "int :: level.dimensions[3] - 80",

		_mm_client_state: { type: "class mm_client_state" },

		_handle_logout: "def(obj combo_label label) ->commands [
			write_document('citadel_cookie', null),
			teleport('titlescreen.cfg', '', 'instant', object_playable('login_controller', 0, 0, 0)),
		]",

		_display_settings: { default: false },

		_handle_settings: "def(obj combo_label label) ->commands [
			set(_display_settings, not _display_settings),
			fire_event(me, 'create'),
		]",

		create_objects: "def() ->commands [
			map(spawned_children, remove_object(value)),

			spawn('dynamic_title_image', level_width/2, level_height/2, {
				zorder: -1000,
				portrait: 'thespire.png',
				animation_sequence: [
					{start_focus: [0.5,0.75], end_focus: [0.5,0.75], start_zoom: 0.0, end_zoom: 0.5, cycles: 5000},
					{start_focus: [0.2,0.2], end_focus: [0.5,0.5], start_zoom: 0.0, end_zoom: 0.8, cycles: 5000},
				],
			}),

			if(_display_settings = false,
			[
			spawn('label', level_width * 0.9, level_height*0.25, {
				_text: ['C I T A D E L'],
				_font_size: 96,
				_halign: 'right',
			}),
			]),

			spawn('label', level_width - 40, 40, {
				_text: ['Welcome, ' + _mm_client_state.username],
				_font_size: 16,
				_halign: 'right',
				_valign: 'top',
			}),

			spawn('combo_label', level_width - 52, 60, {
				_text: if(_display_settings, 'CLOSE SETTINGS', 'SETTINGS'),
				_font_size: 14,
				_halign: 'right',
				grouping: 'settings',
				selected: false,
				index: 0,
				click_handler: me._handle_settings,
			}),

			if(_display_settings = false,
			spawn('combo_label', level_width - 52, 80, {
				_text: 'LOGOUT',
				_font_size: 14,
				_halign: 'right',
				grouping: 'logout',
				selected: false,
				index: 0,
				click_handler: me._handle_logout,
			})),

			if(_display_settings,
				spawn('player_avatar', 200, 200, {
					_avatar: 'goddess.png',
					_top: 100,
					_width: (100 + top_player_area - bot_opponent_area)/2,
					_height: top_player_area - bot_opponent_area,
					_edge: avatar_width,
					_available_space: avatar_width,
					_nick: _mm_client_state.username,
					facing: 1,
					highlight: true,
					current_desaturation: 0.0,
					target_desaturation: 0.0,
				})

				where avatar_width = min((100 + top_player_area - bot_opponent_area)/2, (level_width - 400) / 2)
				where bot_opponent_area = if(level_height >= 900, 80, 80 - (900 - level_height)/2)
				where top_player_area = level_height - if(level_height >= 900, 250, 250 - (900 - level_height)/3)
			),

			create_server_status_labels(),
		]",

		create_server_status_labels: "def() ->commands [
			map(_server_status_labels, remove_object(value)),
			set(_server_status_labels, []),

			if(_display_settings = false,
			spawn('label', 100, 100, {
				_halign: 'left',
				_text: if(ctrl.num_users = null, ['Getting server status...'],
				  [str(ctrl.num_users) + ' players online',
				   str(ctrl.num_games) + ' games being played']
				  )
			}, [
				add(me._server_status_labels, [child]),
			])),

			set(_server_status_label_key, [ctrl.num_users, ctrl.num_games, _display_settings]),
		] where ctrl = title_controller",

		_server_status_labels: { type: "[obj label]", default: [] },
		_server_status_label_key: { type: "any" },

		title_controller: "obj title_controller ::
		  find_or_die(level.chars, value is obj title_controller)",
	},

	on_create: "[
		create_objects(),
	]",

	on_process: "[
		if([ctrl.num_users, ctrl.num_games, _display_settings] != _server_status_label_key,
		   create_server_status_labels()),
	] where ctrl = title_controller",

	on_being_removed: "map(spawned_children, remove_object(value))",
 
 	on_type_updated: "fire_event('create')",

	on_window_resize: "[
		create_objects(),
	] where width = int :: arg.width, height = int :: arg.height",
}
