{
id: "campaign_item",
is_strict: true,

types: {
	Scenario: "{
		name: string,
		text: [string],
		bot_num: int,
		portrait: string,
		portrait_scale: decimal,
		portrait_translate: [decimal, decimal],
	}",
},

properties: {
	show_next: { default: false },
	show_next_progress: { default: 1.0, set: "[set(_data, value), fire_event('create')]" },
	selected: { default: false, set: "if(_data != value, [set(_data, value), fire_event('create')])" },

	highlight: { default: false },

	scenario: { type: "Scenario" },

	render_width: "int :: 96",
	render_height: "int :: 128",

	render: "def() ->commands [
	set(animation, {
		id: 'fbo',
		image: 'fbo',
		x: 0, y: 0, w: render_width, h: render_height,
		scale: 1, frames: 1,
		fbo: c.render(render_width, render_height, [

			c.set_source_rgba(1, 1, 1, 1),

			c.arc(render_width/2, render_height - 16, 12, 0.0, 3.15*2),
			c.set_line_width(2),
			c.stroke(),

			if(selected, [
				c.arc(render_width/2, render_height - 16, 8, 0.0, 3.15*2),
				c.fill(),
			]),

			if(show_next, [
			]),

			c.save(),
			c.rectangle(0, 0, render_width, render_height*0.75),
			c.clip(),
			c.new_path(),

			//c.translate(-20, -10),
			//c.scale(0.2),

			c.translate(-scenario.portrait_translate[0], -scenario.portrait_translate[1]),
			c.scale(scenario.portrait_scale),

			c.set_source_rgba(0.5, 0.5, 0.5, 0.2),
			c.paint_image('images/portraits/' + scenario.portrait),
			c.restore(),

		]) where c = canvas()
	}),
	]",

},

on_create: "[
	render(),
	set(mid_x, mid_x),
	set(y2, y2),

	set(draw_primitives, if(show_next, [{
		type: 'rect',
		area: [mid_x + 18, y2 - 17, mid_x + 18 + (174 - 18)*show_next_progress, y2 - 16],
		color: [255, 255, 255, 255],
	}], [])),
]",

on_type_updated: "fire_event('create')",

on_mouse_enter: "[
	[set(c.highlight, false) | c <- level.chars, c is obj campaign_item, c.highlight],
	set(highlight, true),
]",

on_mouse_leave: "[
	set(highlight, false),
]",

on_click: "[
	swallow_mouse_event(),
	[set(c.selected, false) | c <- level.chars, c is obj campaign_item],
	set(selected, true),
]",

shader: {
	name: "campaign_item_render",
	vertex: "

	uniform sampler2D u_anura_tex_map;
	uniform mat4 u_anura_mvp_matrix;
	attribute vec4 a_anura_vertex;
	attribute vec2 a_anura_texcoord;
	varying vec2 v_texcoord;

	void main()
	{
		gl_Position = u_anura_mvp_matrix * a_anura_vertex;
		v_texcoord = a_anura_texcoord;
	}
	",

	fragment: "
	uniform sampler2D u_anura_tex_map;
	varying vec2 v_texcoord;
	uniform vec4 u_anura_sprite_area;
	uniform bool u_highlight;
	uniform bool u_selected;
	uniform float u_alpha;

	void main()
	{
		float xpos = (v_texcoord[0] - u_anura_sprite_area[0]) /
		             (u_anura_sprite_area[2] - u_anura_sprite_area[0]);
		float ypos = (v_texcoord[1] - u_anura_sprite_area[1]) /
		             (u_anura_sprite_area[3] - u_anura_sprite_area[1]);
		gl_FragColor = texture2D(u_anura_tex_map, v_texcoord);

		if(xpos < 0.2) {
			gl_FragColor[3] *= xpos*5.0;
		} else if(xpos > 0.8) {
			gl_FragColor[3] *= (1.0 - xpos)*5.0;
		}

		if(ypos < 0.2) {
			gl_FragColor[3] *= ypos*5.0;
		} else if(ypos > 0.58 && ypos <= 0.78) {
			gl_FragColor[3] *= (0.78 - ypos)*5.0;
		}

		if(!u_highlight && !u_selected && gl_FragColor[3] > 0.0) {
			float avg = (gl_FragColor[0] + gl_FragColor[1] + gl_FragColor[2])/3.0;
			for(int i = 0; i != 3; ++i) {
				gl_FragColor[i] = (gl_FragColor[i] + avg)/2.0;
			}
		}

		if(u_highlight && !u_selected && ypos <= 0.78 && (xpos < 0.02 || ypos < 0.02 || xpos > 0.98 || ypos > 0.76)) {
			gl_FragColor = vec4(1, 1, 1, 1);
		}

		gl_FragColor = gl_FragColor*u_alpha;
	}
	",

	draw: "[
		set(uniform_commands.u_highlight, parent.highlight),
		set(uniform_commands.u_selected, parent.selected),
		set(uniform_commands.u_alpha, parent.alpha/255.0),
	]",
},

}
