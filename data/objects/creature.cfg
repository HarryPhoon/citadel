{
	"animation": [

		{
			"frames": 72,
			"frames_per_row": 9,
			"id": "creature",
			"image": "citadel-creatures.png",
			"pad": 3,
			"rect": [5,4,39,36],
			feet_x: 16,
			feet_y: 30,
			duration: 1
		},

		{
			"frames": 9,
			"frames_per_row": 3,
			"id": "building",
			"image": "citadel-buildings.png",
			"pad": 3,
			"rect": [3,4,37,44],
			feet_x: 18,
			feet_y: 36,
			duration: 1
		},

	],

	vars: {
		creature_object: null,
		target_xy: null,
		animate_move_speed: 0,
		controller: null,
		lifebar: null,
	},

	"hitpoints": 1,
	"id": "creature",

	on_click: "if(vars.controller.creature_clicked, vars.controller.creature_clicked(me))",
	
	on_spawned: "[set(vars.controller, spawner)]",

	on_process: "[
	  //TODO: make attachments update more efficiently than in on_process.
	  map(attached_objects, [set(value.alpha, alpha*value.vars.alpha_multiply), /*set(value.facing, facing),*/ set(value.mid_x, mid_x), set(value.mid_y, mid_y)]),
	  if(vars.creature_object.loc and (not vars.creature_object.summoned), set(me.alpha, 128 + (64*wave(cycle*10))/1000)),
	   if(vars.target_xy != null,
	  if(mid_xy = vars.target_xy, set(vars.target_xy, null),
	   [if(abs(target_xy[0] - mid_x) <= move_speed,
	          set(mid_x, target_xy[0]), add(mid_x, move_speed*sign(target_xy[0] - mid_x))),
	    if(abs(target_xy[1] - mid_y) <= move_speed,
	          set(mid_y, target_xy[1]), add(mid_y, move_speed*sign(target_xy[1] - mid_y)))]) where move_speed = vars.animate_move_speed)]",

	on_update_lifebar: "
		    if(vars.lifebar, [set(vars.lifebar.vars.xpos, mid_x), set(vars.lifebar.creature_object, vars.creature_object)] asserting vars.lifebar != null,
			       spawn('lifebar', mid_x, mid_y+36, 1, [set(child.vars.xpos, mid_x), set(vars.lifebar, child), set(child.parent, me), set(child.zorder, 400), set(child.creature_object, vars.creature_object)]))",
	
	on_destroy: "[if(vars.lifebar, vars.lifebar.destroy()), remove_object(me)]",

	properties: {
		destroy: "def() execute(me, fire_event('destroy'))",
		image_num: { set: "[set(time_in_animation, value), set(time_in_animation_delta, 0)]", get: "time_in_animation" },

		play_death_animation: "def()
		  if(creature_object.loc = null, me.destroy(),
			  execute(me, [map(range(30), schedule(50 + value, add(me.alpha, -30))),
			   schedule(82, me.destroy())]))
		    ",
		play_endzone_animation: "def()
		  execute(me, [map(range(30), schedule(50 + value, add(me.brightness, 10))),
		     schedule(82, me.destroy())])
		  ",
		creature_object: { set: "
		  execute(me, [
		    set(me.attached_objects, []),
		    map(value.overlays, [if(value.alpha, set(obj.vars.alpha_multiply, value.alpha)), set(obj.time_in_animation, value.image_num), add(context.me.attached_objects, [obj])] where obj = object('creature.equipment', mid_x, mid_y, facing)),
			if(vars.creature_object.is_building, [set(obj.time_in_animation, vars.creature_object.controller + 1), add(context.me.attached_objects, [obj])] where obj = object('creature.banner', mid_x, mid_y, 1)),
		    set(me.alpha, 255),
		    set(vars.creature_object, value),
			set(me.animation, if(value.is_building, 'building', 'creature')),
			set(me.image_num, value.image_num),
			set_widgets([value.gui_stats_grid]),
			set(me.facing, value.direction_moving),

			if(value.loc != null,
			 (if(vars.creature_object = null,
			     set(me.mid_xy, [target_x, target_y]),
			    [set(me.vars.target_xy, [target_x, target_y]),
				 set(me.vars.animate_move_speed, max(abs(target_x - mid_x), abs(target_y - mid_y))/30),
				 
					if(vars.creature_object.wounds != value.wounds,
					schedule(30, spawn('creature.damage_label', target_x, target_y - 20, 1, [set(child.label_value, value.wounds - vars.creature_object.wounds)]))),
				 ])
			    where
				  target_x = 20 + value.loc[1]*60 + if(value.loc[0]%2 = 1, 30, 0) + if(value.is_building, 2, 0) where
				  target_y = 208 + value.loc[0]*38 + if(value.is_building, -10, 0))
				 ),
			set(me.zorder, if(value.loc != null, (value.loc[0]+1)*10, 10)),
			if(not value.alive, me.play_death_animation()),
			if(value.reached_endzone, me.play_endzone_animation()),
			fire_event('update_lifebar')
			])",
		get: "vars.creature_object" },
	},

	object_type: [
		{
			id: "damage_label",
			animation: [
				{
					id: "normal",
					"image": "citadel-creatures.png",
					"rect": [0,0,1,1],
					"duration": 50,
					velocity_y: -100,
				}
			],

			zorder: 500,

			on_end_normal_anim: "remove_object(me)",

			properties: {
				label_value: { get: "null", set: "
				  execute(me, set_widgets([
				    {
						type: 'label',
						color: if(value > 0, 'red', 'green'),
						border_color: 'black',
						text: str(abs(value)),
						size: 32,
					}
				  
				  ]))
				" },
			}
		},

		{
			id: "equipment",
			animation: [
				{
					id: "normal",
					image: "citadel-equipment.png",
					rect: [5, 5, 39, 38],
					pad: 3,
					frames_per_row: 9,
					frames: 27,
					duration: 1,
				},
			],
			on_create: "set(time_in_animation_delta, 0)",
			vars: {
				alpha_multiply: 1.0
			}
		},
		{
			id: "banner",
			animation: [
				{
					id: "normal",
					image: "citadel-buildings.png",
					rect: [3, 136, 37, 176],
					pad: 3,
					frames_per_row: 3,
					frames: 3,
					duration: 1,
				},
			],
			on_create: "set(time_in_animation_delta, 0)",
			vars: {
				alpha_multiply: 1.0,
			}
		}
	],
}
