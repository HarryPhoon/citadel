{
	is_strict: true,
	"animation": [

		{
			"frames": 81,
			"frames_per_row": 9,
			"id": "creature",
			"image": "citadel-creatures.png",
			"pad": 3,
			"rect": [5,4,39,36],
			feet_x: 16,
			feet_y: 30,
			duration: 1
		},

		{
			"frames": 3,
			"frames_per_row": 3,
			"id": "creature_large",
			"image": "citadel-large-creatures.png",
			"pad": 3,
			"rect": [45,2,84,47],
			feet_x: 62,
			feet_y: 30,
			duration: 1
		},

		{
			"frames": 9,
			"frames_per_row": 3,
			"id": "building",
			"image": "citadel-buildings.png",
			"pad": 3,
			"rect": [3,4,37,44],
			feet_x: 18,
			feet_y: 36,
			duration: 1
		},

		{
			id: "explosion",
			frames: 21,
			frames_per_row: 7,
			image: "effects/explosion4.png",
			pad: 1,
			rect: [65,1,126,126],
			feet_x: 30,
			feet_y: 70,
			duration: 4,
		},
	],

	vars: {
		creature_object: null,
		target_xy: null,
		animate_move_speed: 0,
		controller: null,
		lifebar: null,
		buildbar: null,
		start_hurt_cycle: 0,
		end_hurt_cycle: 0,
		texture: null,
		
		regen_start_position: null,
		regen_attrib_cycle: null,
		regen_start_cycle: 0,
		regen_end_cycle: -1,
	},

	"hitpoints": 1,
	"id": "creature",
	mouseover_delay: 20,

	on_click: "if(vars.controller.type = 'citadel_controller', vars.controller.creature_clicked(me))",
	
	on_spawned: "[set(vars.controller, spawner)]",

	on_mouse_enter: "[if(creature, [set(me.widgets.child, {type:'grid', alpha:196, zorder:1000, frame_padding:[5, 5], xy:[me.img_w, -20], frame:'regular_button', columns:1, id:'tooltip', children:[
		{type:'label', font:'RobotoCondensed-Regular', alpha:255, size:18, color:switch(vars.controller, -1, 'light_gray', 0, 'yellow', 1, 'orange'), text:creature.name},
		{type:'grid', alpha:255, columns:creature.attack+creature.life+creature.move, children:[{type:'image', image:'citadel-icons.png', area:[40,0,47,7]}]*creature.attack + [{type:'image', image:'citadel-icons.png', area:[0,0,7,7]}]*creature.life + [{type:'image', image:'citadel-icons.png', area:[32,0,39,7]}]*creature.move},
		{type:'label', font:'RobotoCondensed-Regular', size:18, color:'white', text:'abcde'},
		]}), 
		]) where creature = vars.creature_object]",
	on_mouse_leave: "if(me.widgets.tooltip, set(me.widgets.tooltip, null))",
	
	on_process: "[
	  //TODO: make attachments update more efficiently than in on_process.
	  map(attached_objects, [set(value.alpha, alpha*value.vars.alpha_multiply), /*set(value.facing, facing),*/ set(value.mid_x, mid_x), set(value.mid_y, mid_y)]),
	  if(vars.creature_object.loc and (not vars.creature_object.summoned), set(me.alpha, 128 + (64*wave(cycle*10))/1000)),
	   if(vars.target_xy != null,
	  if(mid_xy = vars.target_xy, set(vars.target_xy, null),
	   [if(abs(vars.target_xy[0] - mid_x) <= move_speed,
	          set(mid_x, vars.target_xy[0]), add(mid_x, move_speed*sign(vars.target_xy[0] - mid_x))),
	    if(abs(vars.target_xy[1] - mid_y) <= move_speed,
	          set(mid_y, vars.target_xy[1]), add(mid_y, move_speed*sign(vars.target_xy[1] - mid_y)))]) where move_speed = vars.animate_move_speed)]",
	
	on_create: "if(vars.creature_object.name = 'Guard Tower', debug('create guard tower: ' + zorder))",

	on_update_lifebar: "[
	        if(vars.buildbar, if(vars.creature_object.summoned, [
					vars.buildbar.destroy(),
					set(vars.buildbar, null)
				],
				[
					set(vars.buildbar.creature_object, vars.creature_object)
				]),
				if(not vars.creature_object.summoned,
				[
					spawn('lifebar', mid_x, mid_y+18, 1, [set(child.vars.xpos, mid_x), set(child.vars.type, 'buildbar'), set(child.parent, me), set(vars.buildbar, child), set(child.zorder, zorder+400), set(child.creature_object, vars.creature_object)])
				])
			),
		    if(vars.lifebar and vars.creature_object.life = vars.lifebar.vars.creature_object.life, [set(vars.lifebar.vars.delay_move, vars.controller.tmp.animation_move_time + 10), set(vars.lifebar.vars.xpos, mid_x), set(vars.lifebar.creature_object, vars.creature_object)] asserting vars.lifebar != null,
				[
				   if(vars.lifebar, vars.lifebar.destroy()),
			       spawn('lifebar', mid_x, mid_y+36, 1, [set(child.vars.xpos, mid_x), set(vars.lifebar, child), set(child.parent, me), set(child.zorder, zorder+400), set(child.creature_object, vars.creature_object)])
				])
			]",
	
	on_destroy: "[if(vars.buildbar, vars.buildbar.destroy()), if(vars.lifebar, vars.lifebar.destroy()), remove_object(me)]",

	on_end_explosion_anim: "destroy()",

	properties: {
		destroy: "def() execute(me, fire_event('destroy'))",
		image_num: { set: "[set(time_in_animation, value), set(time_in_animation_delta, 0)]", get: "time_in_animation" },

		play_attack_animation: "def(new_creature) [
		  if(size(new_creature.attack_hint.attacks) = 1,
		     [
			  if(new_creature.range <= 1,
			     null,
				 execute(me, map(range(attack.damage),
				   [
				    schedule(vars.controller.tmp.animation_move_time + 10 + (value*30)/attack.damage,
				     spawn('creature.missile', src_x, src_y, dst_x > src_x,
					       [set(child.zorder, zorder+950),
						    set(child.velocity_x, ((dst_x - src_x)*100)/10)]))
					 ]
					 where src_x = calculate_x(new_creature, new_creature.loc)
					 where src_y = calculate_y(new_creature, new_creature.loc)
					 where dst_x = calculate_x(attack.target, attack.target_loc)))),
				    vars.controller.reserve_animation_time(vars.controller.tmp.animation_move_time + 20),

					  ]
					  where attack = new_creature.attack_hint.attacks[0]
		  )]
		",

		play_death_animation: "def(new_creature)
		  if(creature_object.loc = null, me.destroy(),
		    [
			 vars.controller.reserve_animation_time(vars.controller.tmp.animation_move_time + 70),
			switch(new_creature.death_animation_hint,
			'explosion',
			[
			   execute(me, schedule(vars.controller.tmp.animation_move_time + 16, [
			             set(me.animation, 'explosion'),
						 set(me.time_in_animation_delta, 3)
			           ])),
			],

			[
			   execute(me, [map(range(30), schedule(vars.controller.tmp.animation_move_time + 40 + value, add(me.alpha, -30))),
			   schedule(vars.controller.tmp.animation_move_time + 70, me.destroy())])
			])])
		    ",
		play_endzone_animation: "def() [
		  vars.controller.reserve_animation_time(vars.controller.tmp.animation_move_time + 52),
		  execute(me, [map(range(30), schedule(vars.controller.tmp.animation_move_time + 20 + value, add(me.brightness, 10))),
		     schedule(vars.controller.tmp.animation_move_time + 52, me.destroy())])
		  ]
		  ",
		creature_object: { set: "
		  execute(me, [
		    set(me.attached_objects, []),
		    map(value.overlays, [if(value.alpha, set(obj.vars.alpha_multiply, value.alpha)), set(obj.time_in_animation, value.image_num), add(me.attached_objects, [obj])] where obj = object('creature.equipment', mid_x, mid_y, facing)),
			if(vars.creature_object.is_building, [set(obj.time_in_animation, vars.creature_object.controller + 1), add(me.attached_objects, [obj])] where obj = object('creature.banner', mid_x, mid_y, 1)),
		    set(me.alpha, 255),
		    set(vars.creature_object, value),

			if((not vars.creature_object) or vars.creature_object.sprite_sheet != value.sprite_sheet or vars.creature_object.image_num != value.image_num,
			[
			  set(me.animation, if(value.sprite_sheet, value.sprite_sheet, if(value.is_building, 'building', 'creature'))),
			  set(me.image_num, value.image_num),
			]),
			set_widgets([value.gui_stats_grid] + if(status_grid, [status_grid], []) where status_grid = value.gui_status_grid),
			set(me.facing, value.direction_moving),

			if(value.loc != null,
			 (if(vars.creature_object = null,
			     set(me.mid_xy, [target_x, target_y]),
			    [set(me.vars.target_xy, [target_x, target_y]),
				 set(me.vars.animate_move_speed, max(abs(target_x - mid_x), abs(target_y - mid_y))/30),
				 
					if(vars.creature_object.wounds != value.wounds,
					[
		  			vars.controller.reserve_animation_time(vars.controller.tmp.animation_move_time + 40),
					set(vars.start_hurt_cycle, cycle + vars.controller.tmp.animation_move_time + 15),
					set(vars.end_hurt_cycle, cycle + vars.controller.tmp.animation_move_time + 25),
					schedule(vars.controller.tmp.animation_move_time + 20, spawn('creature.damage_label', target_x, target_y - 20, 1, [set(child.label_value, value.wounds - vars.creature_object.wounds)]))
					]),
				 ])
			    where target_x = calculate_x(value, value.loc)
				where target_y = calculate_y(value, value.loc))
				 ),
			if(value.loc != null, set(me.zorder, (value.loc[0]+1)*10)),
			if(vars.creature_object != null and
			   value.attack_hint and ((not vars.creature_object.attack_hint) or
			   vars.creature_object.attack_hint.turn != value.attack_hint.turn),
			   me.play_attack_animation(value)),
			if(not value.alive, me.play_death_animation(value)),
			if(value.reached_endzone, me.play_endzone_animation()),
			fire_event('update_lifebar')
			])",
		get: "vars.creature_object" },

	  calculate_x: "def(value, loc) 20 + loc[1]*90 + if(loc[0]%2 = 1, 45, 0) + if(value.is_building, 2, 0)",
	  calculate_y: "def(value, loc) 158 + loc[0]*52 + if(value.is_building, -10, 0)",
	},

	object_type: [
		{
			id: "damage_label",
			animation: [
				{
					id: "normal",
					"image": "citadel-creatures.png",
					"rect": [0,0,1,1],
					"duration": 50,
					velocity_y: -100,
				}
			],

			zorder: 500,

			on_end_normal_anim: "remove_object(me)",

			properties: {
				label_value: { get: "null", set: "
				  execute(me, set_widgets([
				    {
						type: 'label',
						color: if(value > 0, 'red', 'green'),
						border_color: 'black',
						text: str(abs(value)),
						size: 32,
					}
				  
				  ]))
				" },
			}
		},

		{
			id: "equipment",
			animation: [
				{
					id: "normal",
					image: "citadel-equipment.png",
					rect: [5, 5, 39, 38],
					pad: 3,
					frames_per_row: 9,
					frames: 27,
					duration: 1,
				},
			],
			on_create: "set(time_in_animation_delta, 0)",
			vars: {
				alpha_multiply: 1.0
			}
		},
		{
			id: "banner",
			animation: [
				{
					id: "normal",
					image: "citadel-buildings.png",
					rect: [3, 136, 37, 176],
					pad: 3,
					frames_per_row: 3,
					frames: 3,
					duration: 1,
				},
			],
			on_create: "set(time_in_animation_delta, 0)",
			vars: {
				alpha_multiply: 1.0,
			}
		},
		{
			id: "missile",
			animation: [
				{
					id: "normal",
					image: "missile.png",
					rect: [0,0,71,71],
					frames: 1,
					duration: 10,
					scale: 1,
				}
			],

			on_end_normal_anim: "die()"
		},
	],
	
	shader: {
		program: "hurt_flash",
		draw: "[
			set(uniforms.u_color, color), 
			set(uniforms.start_cycle, parent.vars.start_hurt_cycle),
			set(uniforms.end_cycle, parent.vars.end_hurt_cycle),
			set(uniforms.cycle, parent.cycle),
			set(uniforms.is_poisoned, if(co, 'Poisoned' in co.status_effects, false)) where co = parent.vars.creature_object,
		]",
		create: "set(uniforms.u_tex_map, 0)",
	},

	effects: [{
		program: "particle1",
		zorder: 1,
		create: "[
			set(parent.vars.texture, load_texture('images/red-cross.png')),
			set(uniforms.u_tex_map, 1),
			set(uniforms.u_color, [255,255,255,255]),
			
			set(parent.vars.regen_start_position, float_array(flatten(map(range(5), [1d70 - 35, 40 - 1d20])), 2)),
			set(parent.vars.regen_attrib_cycle, float_array(flatten(map(range(5), 1d50)), 1)),
		]",
		
		draw: "[
			bind_texture(parent.vars.texture.id, 1),
			
			set(uniforms.u_cycle, parent.cycle),
			set(uniforms.u_start_cycle, parent.vars.regen_start_cycle),
			set(uniforms.u_end_cycle, parent.vars.regen_end_cycle),
			set(uniforms.u_centre_position, [parent.mid_x, parent.mid_y]),
			set(attributes.a_position, parent.vars.regen_start_position),
			set(attributes.a_start_cycle, parent.vars.regen_attrib_cycle),
			draw_arrays('points', 0, 5),
		]",
	}],
}
