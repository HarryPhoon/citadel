{
	id: "library_label",

	is_strict: true,

	properties: {
		_font: { type: "string", init: "lib.font.regular_font" },
		_font_size: { default: 36 },

		_text: { type: "string" },

		_render_key: "[_font, _font_size, bolded, _text]",

		mouseover: { default: false },
		selected: { default: false, set: "if(value != _data, [set(_data, value), fire_event('create')])" },

		bolded: "bool :: grouping != null and (mouseover or selected)",

		grouping: { type: "string|null" },
		index: { type: "int" },

		text_area: "{width: extents.width + 10, height: extents.height + 6}
		  where extents = canvas().text_extents(_font, _font_size, _text)",

		controller: "obj library_controller ::
		  find_or_die(level.chars, value is obj library_controller)",

		render_label: "def() ->commands set(animation, {
			id: 'fbo',
			image: 'fbo',
			x: 0, y: 0, w: area.width, h: area.height,
			scale: 1, frames: 1,
			fbo: query_cache(global_cache(32), _render_key, c.render(int(area.width), int(area.height),
				[
					c.rectangle(0, 0, area.width, area.height),
					c.set_source_rgba(1, 1, 1, 1),
					c.fill(),
				] +

				fold(map(if(bolded, [[0,0],[-1,0],[1,0],[0,1],[0,-1]], [[0,0]]),
				[
					c.save(),
					c.translate(value[0], area.height + value[1] - 2),
					c.set_font(_font),
					c.set_font_size(_font_size),
					c.text_path(_text),
					c.set_source_rgba(0, 0, 0, 1),
					c.fill(),
					c.restore(),
				]), a+b)
			)),
		} where area = text_area
		  where c = canvas())",
	},

	on_click: "[
		debug('clicked'),
		swallow_mouse_event(),
		controller.label_clicked(me),
	]",

	on_mouse_enter: "[set(mouseover, true), fire_event('create')]",

	on_mouse_leave: "[set(mouseover, false), fire_event('create')]",

	on_create: "render_label()",

	on_type_updated: "render_label()",

	shader: {
		name: "library_label_render",
	
		vertex: "
			uniform mat4 u_mvp_matrix;
			attribute vec4 a_position;
			attribute vec2 a_texcoord;
			varying vec2 v_texcoord;
			void main()
			{
				v_texcoord = a_texcoord;
				gl_Position = u_mvp_matrix * a_position;
			}
		",

		fragment: "
			#version 120
			uniform sampler2D u_tex_map;
			uniform vec4 u_color;
			varying vec2 v_texcoord;
			void main()
			{
				gl_FragColor = texture2D(u_tex_map, v_texcoord) * u_color;
				if(gl_FragColor[0] + gl_FragColor[1] + gl_FragColor[2] > 0.95) {
					gl_FragColor[3] = 0.0;
				} else {
					gl_FragColor[0] = gl_FragColor[1] = gl_FragColor[2] = 0.0;
				}
			}
		",

		attributes: {
			position: "a_position",
			texcoord: "a_texcoord",
		},

		uniforms: {
			mvp_matrix: "u_mvp_matrix",
			color: "u_color",
		},
	}
}
