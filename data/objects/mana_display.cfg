{
id: "mana_display",
is_strict: true,
always_active: true,

properties: {
	amount: { default: 0 },
	amount_delta: { default: 0 },
	amount_delta_str: "string :: if(amount_delta > 0, '+', '') + if(amount_delta = 0, '', str(amount_delta))",
	player_num: { type: "int" },
	title: { default: "MANA" },
	_render_key: "[amount, selectable, icon]",

	_font_size: 12,
	_value_font_size: 18,

	_bg_color: "[0, 0.31, 0.32]",

	icon: { default: "mana.svg" },

	selectable: { default: false },

	render: "def(int ww, int hh) ->commands [
	set(animation, {
		id: 'fbo',
		image: 'fbo',
		x: 0, y: 0, w: ww, h: hh,
		scale: 1, frames: 1,
		fbo: query_cache(global_cache(8), _render_key, c.render(ww, hh, [
			c.save(),

			c.scale(ww, hh),
		] + outline + [

			c.set_source_rgba(_bg_color[0], _bg_color[1], _bg_color[2], 1),
			c.fill(),

			c.restore(),

			c.save(),

			c.set_font(lib.font.regular_font),
			c.set_font_size(_font_size),
			c.translate(24, 32),
			c.rotate(-3.14*0.32),
			c.text_path(title), 
			c.set_source_rgba(1, 1, 1, 1),
			c.fill(),

			c.restore(),
	
			c.save(),

			c.translate(52, 5),
			c.draw_svg('images/icons/' + icon, 32, 32),

			c.restore(),

			c.save(),
			c.set_font(lib.font.regular_font),
			c.set_font_size(_value_font_size),
			c.translate(0.6*ww - c.text_extents(lib.font.regular_font, _value_font_size, str(amount)).width*0.5, 0.85*hh),
			c.text_path(str(amount)),
			c.set_source_rgba(1, 1, 1, 1),
			c.fill(),
			c.restore(),

			c.save(),
			c.set_font(lib.font.regular_font),
			c.set_font_size(_value_font_size-4),
			c.translate(0.6*ww + c.text_extents(lib.font.regular_font, _value_font_size-4, amount_delta_str).width*0.5, 0.75*hh),
			c.text_path(amount_delta_str),
			c.set_source_rgba(1, 1, 1, 1),
			c.fill(),
			c.restore(),
		] + if(selectable, [
			c.save(),

			c.scale(ww, hh),
		] + outline + [

			c.scale(1.0/ww, 1.0/hh),
			c.set_source_rgba(1, 1, 1, 1),
			c.set_line_width(4.0),
			c.stroke(),

			c.restore(),
		], [])

		where outline = [
			c.move_to(0.2, 0.5),
			c.line_to(0.2 + 0.25*0.8, 0),
			c.line_to(0.2 + 0.75*0.8, 0),
			c.line_to(1, 0.5),
			c.line_to(0.2 + 0.75*0.8, 1),
			c.line_to(0.2 + 0.25*0.8, 1),
			c.line_to(0.2, 0.5),
		]) where c = canvas())
	})]",

	_controller: "obj citadel_controller :: find_or_die(level.chars, value is obj citadel_controller)",
},

on_update: "[render(110, 66)]",

on_click: "_controller.mana_display_clicked(me)",
}
