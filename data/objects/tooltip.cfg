{
id: "tooltip",
is_strict: true,
zorder: 10000,
always_active: true,

properties: {
    text: { type: "string", default: "Tooltip text" },

    ww: "int :: round_to_even(_get_width)",
    hh: "int :: round_to_even(_get_height)",

	_formatted_text: "string :: q(<font size=') + lib.citadel.py(20) + q('>) + text + q(</font>)",

	_get_width: "int ::
		int(max(map(fragments, value.x + value.width)) or 6) + lib.citadel.py(10)
		where fragments = c.markup_text(_formatted_text, { width: lib.citadel.py(1000), scale: lib.citadel.py(1000)/1000.0 })
		where c = canvas()
	",

	_get_height: "int ::
		int(max(map(fragments, value.y + value.height)) or 6) + lib.citadel.py(10)
		where fragments = c.markup_text(_formatted_text, { width: lib.citadel.py(1000), scale: lib.citadel.py(1000)/1000.0 })
		where c = canvas()
	",

	_blur_controller: { type: "null|obj blur_controller" },

    render: "def() ->commands [
	/* FIXME: this blurs the whole screen
	spawn('blur_controller', 0, 0, {
		blur_amount: 0.0,
		end_zorder: me.zorder-10,
	}, [
		set(me._blur_controller, child),
		animate(child, {
			blur_amount: 2.0,
		}, {
			duration: 10,
		}),
	]),*/

    set(animation, lib.citadel.render_frame(c, ww, hh,
    [
        c.set_operator('SOURCE'),
        c.rectangle(0,0,ww,hh),
        c.set_source_rgba(0.1,0.1,0.1,0.75),
        c.fill(),

		c.set_source_rgba(1,1,1,1),

        map(fragments, [
            c.save(),
            c.translate(lib.citadel.py(5), (hh - text_height)/2),
            value.path,
            c.fill(),
            c.restore(),
        ])

		where text_height = decimal<- (max(map(fragments, value.height)) or hh)
        where fragments = c.markup_text(_formatted_text, { width: lib.citadel.py(1000), scale: lib.citadel.dpy(1.0) }),
    ]))
        where c = canvas()
    ]",
},

on_type_updated: "render()",

on_create: "[
    render(),
]",

}
