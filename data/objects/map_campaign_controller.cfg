{
	id: "map_campaign_controller",
	is_human: true,
	hitpoints: 20,
	editor_info: { category: "player" },
	hidden_in_game: false,

	is_strict: true,

	types: {
	},

	properties: {
		//set the area we take up. Don't use the bottom 80 pixels.
		level_width: "int :: level.dimensions[2]",
		level_height: "int :: level.dimensions[3] - 80",

		_mm_client_state: { type: "class mm_client_state" },

		map_scale: "decimal :: min((level_width/1280.0)*0.8, (level_height/960.0)*0.9)",

		spawn_points: "def() ->commands [
			map(spawned_children, remove_object(value)),

			map(filter(campaign_info.areas, value.prerequisites = [] or find(value.prerequisites, lib.campaign_utils.campaign_completed(_mm_client_state.account_info, lib.campaign_utils.get_campaign_info(campaign_info, value))) != null),
			 spawn('map_campaign_controller.map_point', 0, 0, {
				filename: value.file,
				loc_info: value,
				completed: lib.campaign_utils.campaign_completed(_mm_client_state.account_info, lib.campaign_utils.get_campaign_info(campaign_info, value.name)),
				is_new: lib.campaign_utils.campaign_is_new(_mm_client_state.account_info, lib.campaign_utils.get_campaign_info(campaign_info, value.name)),
			 }, [
			 	set(child.mid_x, x + 1280*map_scale*loc.x),
			 	set(child.mid_y, y + 960*map_scale*loc.y),
				set(child.z, z + 100),
			 ])
			 where loc = value)
		]",
		
		campaign_info: "CampaignMap<- lib.json.get_document_map('data/campaign-map.cfg')",

		select_campaign: "def(string name) ->commands [
			set(_mm_client_state.account_info.campaign_location, name),
			find_or_die(level.chars, value is obj title_controller).set_campaign_location(name),

			execute(me, fire_event('enter_campaign')),
		]",
		
	},

	on_being_removed: "map(spawned_children, remove_object(value))",

	on_enter_campaign: "[
		remove_object(me),
		find_or_die(level.chars, value is obj title_controller).set_campaign_controller(true),
	]",

	on_create: "[
		set(animation, {
			id: 'map',
			image: 'campaign-map.png',
			force_no_alpha: true,
			x: 0, y: 0, w: 1279, h: 959,
			scale: map_scale,
			frames: 1,
			duration: -1,
		}),
		set(mid_x, level_width/2),
		set(mid_y, level_height/2),

		bind_command(spawn_points),
	]",

object_type: [
{
	id: "map_point",
	is_strict: true,

	properties: {
		completed: { type: "bool" },
		is_new: { type: "bool" },

		render: "def(int ww=24, int hh=24) ->commands
		set(animation, {
			id: 'fbo',
			image: 'fbo',
			fbo: c.render(ww, hh, [
				if(_highlighted,
				   c.set_source_rgba(1, 0, 0, 1),
				   completed,
				   c.set_source_rgba(0.8, 0.8, 0.8, 1),
				   c.set_source_rgba(1, 1, 1, 1)),
				
				c.set_line_width(2.0),
				c.arc(ww/2, hh/2, ww/2 - 2, 0.0, 2*3.15),
				c.stroke(),

				c.arc(ww/2, hh/2, ww/3 - 2, 0.0, 2*3.15),
				c.fill(),
			]) where c = canvas(),
			x: 0,
			y: 0,
			w: ww,
			h: hh,
			scale: 1.0,
			frames: 1,
			duration: -1,
			force_no_alpha: true,
		})",

		_highlighted: { type: "bool", default: false },

		filename: { type: "string" },
		loc_info: { type: "CampaignMapLocation" },

		_tip_dialog: { type: "null|obj tip_dialog" },
	},

	on_create: "[
		render(),
		if(is_new,
		spawn('map_campaign_controller.map_point_halo', 0, 0, {
			_obj: me,
			zorder: z + 100,
		})),
	]",

	on_click: "[
		debug('click'),
		find_or_die(level.chars, value is obj map_campaign_controller).select_campaign(filename)
	]",

	on_mouse_enter: "[
		set(_highlighted, true),
		bind_command(render),

		spawn('tip_dialog', x + 200, y, {
			zorder: 10000,
			_tip: {
				key: 'key_name',
				text: loc_info.description,
				targets: [me],
			},

			_title: loc_info.name,
			_delay_widgets: 10,
			_has_close: false,

			_width: 260,
			_height: 200,
		}, [
			set(me._tip_dialog, child),
		]),
	]",

	on_mouse_leave: "[
		if(_tip_dialog != null, [
			remove_object(_tip_dialog),
			set(_tip_dialog, null),
		]),
		set(_highlighted, false),
		bind_command(render),
	]",

	on_being_removed: "map(spawned_children, remove_object(value))",

}, {
	id: "map_point_halo",
	is_strict: true,
	properties: {
		render: "def(int ww=24, int hh=24) ->commands
		set(animation, {
			id: 'fbo',
			image: 'fbo',
			fbo: c.render(ww, hh, [
				c.set_source_rgba(1, 1, 1, 0.4),
				
				c.set_line_width(2.0),
				c.arc(ww/2, hh/2, ww/2 - 2, 0.0, 2*3.15),
				c.stroke(),

			]) where c = canvas(),
			x: 0,
			y: 0,
			w: ww,
			h: hh,
			scale: 1.0,
			frames: 1,
			duration: -1,
			force_no_alpha: true,
		})",

		_obj: { type: "custom_obj" },
	},

	on_process: "[
		render(10 + cycle%50, 10 + cycle%50),
		set(mid_xy, _obj.mid_xy),
	]",
},
]
}
