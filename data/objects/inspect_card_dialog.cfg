{
	id: "inspect_card_dialog",

	is_strict: true,
	always_active: true,
	hidden_in_game: true,

	properties: {
		_mm: { type: "obj matchmaking_base" },
		_controller: { type: "obj citadel_controller" },
		_card: { type: "obj card" },
		level_width: "int :: level.dimensions[2]",
		level_height: "int :: level.dimensions[3]",

		_card_start_size: { type: "decimal", default: 2.0 },
		_card_start_mid_x: { type: "int", default: 0 },
		_card_start_mid_y: { type: "int", default: 0 },

		_help_button: { type: "custom_obj|null" },

		_display_help: { type: "bool", default: false },

		_on_done_commands: { type: "commands", default: null },

		show_help: "def() ->commands [
			[remove_object(c) | c <- level.chars, c is obj tip_dialog, c.paused = false],

			if(_help_button != null, [
				remove_object(_help_button),
				set(_help_button, null),
			]),

			spawn('tip_dialog', 0, 0, {
				_title: 'Name',
				_tip: {
					key: 'tip',
					text: 'Name of the card',
					targets: [_card],
				},

				_width: lib.citadel.py(200),
				_height: lib.citadel.py(80),
				zorder: 20000,
				_has_close: false,

				_target_offset_x: int(_card.img_w*0.2),
				_target_offset_y: int(_card.img_h*0.16),
			}, [
				set(child.x, int(level_width*0.6)),
				set(child.y, lib.citadel.py(760)),
			]),

			spawn('tip_dialog', 0, 0, {
				_title: 'Type',
				_tip: {
					key: 'tip',
					text: 'Type of the card. A card can be a <b>Creature</b>, a <b>Spell</b> or a <b>Land</b>.',
					targets: [_card],
				},

				_width: lib.citadel.py(200),
				_height: lib.citadel.py(160),
				zorder: 20000,
				_has_close: false,

				_target_offset_x: int(-_card.img_w*0.3),
				_target_offset_y: int(_card.img_h*0.20),
			}, [
				set(child.x, lib.citadel.py(100)),
				set(child.y, lib.citadel.py(600)),
			]),

			spawn('tip_dialog', 0, 0, {
				_title: 'Cost',
				_tip: {
					key: 'tip',
					text: q(The amount of mana required to cast this spell.),
					targets: [_card],
				},

				_width: lib.citadel.py(200),
				_height: lib.citadel.py(170),
				zorder: 20000,
				_has_close: false,

				_target_offset_x: int(_card.img_w*0.39),
				_target_offset_y: int(_card.img_h*0.0),
			}, [
				set(child.x, int(level_width*0.9)),
				set(child.y, lib.citadel.py(420)),
			]),

			spawn('tip_dialog', 0, 0, {
				_title: 'School',
				_tip: {
					key: 'tip',
					text: q(The <b>school</b> of the card. The schools are,
<img src='images/icons/school-faith.svg'/>&AElig;ther
<img src='images/icons/school-blood.svg'/>Entropia
<img src='images/icons/school-food.svg'/>Gaea
<img src='images/icons/school-gold.svg'/>Materia
<img src='images/icons/school-scrolls.svg'/>Minerva),
					targets: [_card],
				},

				_width: lib.citadel.py(200),
				_height: lib.citadel.py(170),
				zorder: 20000,
				_has_close: false,

				_target_offset_x: int(-_card.img_w*0.12),
				_target_offset_y: int(_card.img_h*0.13),
			}, [
				set(child.x, int(level_width*0.84)),
				set(child.y, lib.citadel.py(640)),
			]),

			spawn('tip_dialog', 0, 0, {
				_title: 'Devotion Cost',
				_tip: {
					key: 'tip',
					text: q(For each level of Devotion you have in the card's school the devotion cost is reduced by one.),
					targets: [_card],
				},

				_width: lib.citadel.py(200),
				_height: lib.citadel.py(170),
				zorder: 20000,
				_has_close: false,

				_target_offset_x: int(_card.img_w*0.36),
				_target_offset_y: int(-_card.img_h*0.12),
			}, [
				set(child.x, level_width - lib.citadel.py(180)),
				set(child.y, lib.citadel.py(230)),
			]),

			if(_card.card_type.creature != null,

			spawn('tip_dialog', 0, 0, {
				_title: 'Attack/Life',
				_tip: {
					key: 'tip',
					text: q(Attack and Life of the creature.),
					targets: [_card],
				},

				_width: lib.citadel.py(200),
				_height: lib.citadel.py(120),
				zorder: 20000,
				_has_close: false,

				_target_offset_x: int(_card.img_w*0.38),
				_target_offset_y: int(_card.img_h*0.14),
			}, [
				set(child.x, level_width - 180),
				set(child.y, 480),
			]),

			),


			spawn('tip_dialog', 0, 0, {
				_title: 'Rules Text',
				_tip: {
					key: 'tip',
					text: q(Effects and abilities of the card.),
					targets: [_card],
				},

				_width: lib.citadel.py(200),
				_height: lib.citadel.py(120),
				zorder: 20000,
				_has_close: false,

				_target_offset_x: int(-_card.img_w*0.25),
				_target_offset_y: int(_card.img_h*0.27),
			}, [
				set(child.x, lib.citadel.py(360)),
				set(child.y, int(level_height*0.84)),
			]),

			if(_card.card_type.flavor_text,
			spawn('tip_dialog', 0, 0, {
				_title: 'Flavor Text',
				_tip: {
					key: 'tip',
					text: q(Text fitting the card into the Lore of Citadel.),
					targets: [_card],
				},

				_width: lib.citadel.py(200),
				_height: lib.citadel.py(120),
				zorder: 20000,
				_has_close: false,

				_target_offset_x: int(-_card.img_w*0.25),
				_target_offset_y: int(_card.img_h*0.45),
			}, [
				set(child.x, 180),
				set(child.y, level_height-100),
			])),

		]",

		exit_dialog: "def() ->commands [
			execute(_card,
				animate(_card, {
					alpha: 0,
				}, {
					duration: 10,
					name: 'card_move',
					on_complete: remove_object(_card),
				})
			),

			map(level.chars, if(value.paused, set(value.paused, false), value != _card, remove_object(value))),
			set(level.frame_buffer_shaders, filter(level.frame_buffer_shaders, value.shader_info != 'background_blur_hor' and value.shader_info != 'background_blur_ver')),

			_controller.spawn_cards_in_hand(),

			_on_done_commands,
		]",

		_target_card_size: "decimal :: 3.0",

	},

	on_mouse_wheel: "
	if(yscroll < 0, exit_dialog())
	where yscroll = int<- arg.yscroll
	",

	on_create: "[
		set(_card_start_size, _card.card_size),
		set(_card_start_mid_x, _card.mid_x),
		set(_card_start_mid_y, _card.mid_y),

		set(_card.zorder, 15000),
		animate(_card, {
			card_size: _target_card_size,
			mid_y: level_height/2,
			mid_x: level_width/2,
			rotate: 0,
			alpha: 255,
		}, {
			duration: 10,
			on_complete: if(_display_help, execute(me, bind_command(me.show_help))),
		}),

		add(level.frame_buffer_shaders, [{
			begin_zorder: -10000000,
			end_zorder: 12000,
			shader_info: 'background_blur_hor',
		}]),

		add(level.frame_buffer_shaders, [{
			begin_zorder: -10000000,
			end_zorder: 12000,
			shader_info: 'background_blur_ver',
		}]),

		[set(c.paused, true) | c <- level.chars, c != me, c != _card],

		spawn('button_controller', level_width-260, level_height-70 - 40, {
			text: 'Help',
			on_click: me.show_help,
			zorder: 20000,
			button_width: 240,
			button_height: 50,
		}, [
			set(me._help_button, child),
		]),

		spawn('button_controller', level_width-lib.citadel.py(260), level_height-lib.citadel.py(45), {
			text: 'Close',
			on_click: me.exit_dialog,
			zorder: 20000,
			button_width: lib.citadel.py(240),
			button_height: lib.citadel.py(50),
		}),

	]",

	on_type_updated: "show_help()",

	on_process: "[
		_mm.process_matchmaking_connection(),
		_controller.process_connection(),
		_controller.reserve_animation_time('card_dialog', 5),
	]",
}
