{
	id: "inspect_card_dialog",

	is_strict: true,
	always_active: true,
	hidden_in_game: true,

	properties: {
		_mm: { type: "obj matchmaking_base" },
		_controller: { type: "obj citadel_controller" },
		_card: { type: "obj card" },
		level_width: "int :: level.dimensions[2]",
		level_height: "int :: level.dimensions[3]",

		_card_start_size: { type: "decimal", default: 2.0 },
		_card_start_mid_x: { type: "int", default: 0 },
		_card_start_mid_y: { type: "int", default: 0 },

		exit_dialog: "def() ->commands [
			animate(_card, {
				card_size: _card_start_size,
				mid_x: _card_start_mid_x,
				mid_y: _card_start_mid_y,
			}, {
				duration: 10,
				name: 'card_move',
			}),

			map(level.chars, if(value.paused, set(value.paused, false), value != _card, remove_object(value))),
			set(level.frame_buffer_shaders, filter(level.frame_buffer_shaders, value.shader_info != 'citadel_background_blur_hor' and value.shader_info != 'citadel_background_blur_ver')),

			_controller.spawn_cards_in_hand(),

		]",

		_target_card_size: "decimal(level_height)/card_height
		  where card_height = decimal(_card.render_size(1.0)[1])",

	},

	on_mouse_wheel: "
	if(yscroll < 0, exit_dialog())
	where yscroll = int<- arg.yscroll
	",

	on_create: "[
		set(_card_start_size, _card.card_size),
		set(_card_start_mid_x, _card.mid_x),
		set(_card_start_mid_y, _card.mid_y),

		set(_card.zorder, 15000),
		animate(_card, {
			card_size: _target_card_size,
			y: 0,
			mid_x: level_width/2,
		}, {
			duration: 10,
		}),

		add(level.frame_buffer_shaders, [{
			begin_zorder: -10000000,
			end_zorder: 12000,
			shader_info: 'citadel_background_blur_hor',
		}]),

		add(level.frame_buffer_shaders, [{
			begin_zorder: -10000000,
			end_zorder: 12000,
			shader_info: 'citadel_background_blur_ver',
		}]),

		[set(c.paused, true) | c <- level.chars, c != me, c != _card],

		spawn('button_controller', level_width-260, level_height-70 + 25, {
			text: 'Close',
			on_click: me.exit_dialog,
			zorder: 20000,
			button_width: 240,
			button_height: 50,
		}),

	]",

	on_process: "[
		_mm.process_matchmaking_connection(),
		_controller.process_connection(),
	]",
}
