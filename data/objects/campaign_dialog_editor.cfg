{
	id: "campaign_dialog_editor",
	is_strict: true,

	properties: {
		title_controller: { type: "obj title_controller" },

		width: { type: "int" },
		height: { type: "int" },
		nodes: { type: "[CampaignDialogNode]" },
		selected_node_index: { type: "int", default: 0 },
		selected_node: "CampaignDialogNode :: nodes[selected_node_index]",

		image_widgets: { type: "[obj image_widget]", default: [] },

		load_nodes: "def(CampaignDialogNode node) ->commands
			map(filter(node.options, value.goto != null), ;
			  if(find(nodes, value.id = context.value.goto) = null,
				add(nodes, [lib.campaign_encounter.get_campaign_dialog_node(string<- value.goto)]);
				load_nodes(nodes[size(nodes)-1])
			  )
			);

			if(node.related_nodes is [string],
				add(nodes, [lib.campaign_encounter.get_campaign_dialog_node(id) | id <- node.related_nodes, id in lib.campaign_encounter.campaign_doc, find(nodes, value.id = id) = null])
			)
		",

		_node_tier: "def(int nindex) ->int
		if(nindex = 0, 0,
			0
		)
		",

		image_width: { type: "int", default: 90 },
		image_height: { type: "int", default: 60 },

		render: "def() ->commands
		set(animation, lib.gui.render_frame(c, width, height, [
			c.set_source_color([0.1,0.1,0.1,1.0]),
			c.rectangle(0,0,width,height),
			c.fill(),

			map(nodes, [
				c.set_source_color('white'),

				if(selected_node_index = index, [
					c.rectangle(node.edit_loc.x - image_width/2 - 2.0, node.edit_loc.y - image_height/2 - 2.0, image_width + 4.0, image_height + 4.0),
					c.set_line_width(2.0),
					c.stroke(),
				]),


				map(value.options, [
					c.set_source_color(if({node: node, option: index} = _goto_selected, 'yellow', {node: node, option: index} = _goto_mouseover, 'red', value.text = 'Victory', 'lightgreen', value.text = 'Defeat', 'lightpink', 'white')),
					c.arc(node.edit_loc.x - image_width/2.0 + image_width*ratio, node.edit_loc.y + image_height/2.0 + 4, 6, 0.0, 2*3.15),
					c.fill(),

					if(next_node != null, [
						c.move_to(node.edit_loc.x - image_width/2.0 + image_width*ratio, node.edit_loc.y + image_height/2.0 + 4),
						c.line_to(next_node.edit_loc.x, next_node.edit_loc.y),
						c.set_line_width(1.0),
						c.stroke(),
					])
				]
					where ratio = if(size(node.options) = 1, 0.5, index/decimal(size(node.options)-1))
					where next_node = find(nodes, value.id = context.value.goto)
				),


			] where node = value),
		]))
		where c = canvas()
		",

		_goto_mouseover: {
			type: "null|{node: CampaignDialogNode, option: int}",
			set: "if(_data != value, [
				set(_data, value);
				render()
			])",
		},

		_goto_selected: {
			type: "null|{node: CampaignDialogNode, option: int}",
			set: "if(_data != value, [
				set(_data, value);
				render()
			])",
		},

		_get_goto_mouseover: "def() -> null|{node: CampaignDialogNode, option: int}
		if(op, op.value)
		where op = find(options, abs(mouse_pos.x - value.center.x) < 6 and abs(mouse_pos.y - value.center.y) < 6)
		where options =
		fold(
		map(nodes,
		    map(value.options, {
				center: [node.edit_loc.x - image_width/2.0 + image_width*ratio,
				         node.edit_loc.y + image_height/2.0 + 4],
				value: {node: node, option: index},
			}
			where ratio = if(size(node.options) = 1, 0.5, index/decimal(size(node.options)-1))
			)
			where node = value
		), a+b, [])
		where mouse_pos = [mp.x - x, mp.y - y]
		where mp = lib.gui.mouse_pos(level)
		",

		set_image: "def(obj image_widget w) ->commands
		if(selected_node.battle != null,
		[
			find_or_die(level.chars, value is obj scenario_editor).set_avatar(w.image)
		],
		[
		set(selected_node.image_area, [0,0,dim.x,int((dim.x*draw_dim.y)/draw_dim.x)]);
		set(selected_node.next_image_area, [0,0,dim.x,int((dim.x*draw_dim.y)/draw_dim.x)]);
		set(selected_node.image, w.image);
		spawn_images();
		spawn_effects_editor();
		lib.campaign_encounter.save_campaign_dialog_node(selected_node)
		]
		where dim = c.image_dim('images/' + w.image)
		where c = canvas()
		)
		",

		click_image: "def(obj image_widget w) ->commands
		if(_goto_selected and node != _goto_selected.node and _goto_selected.option < size(_goto_selected.node.options),
		[
			set(_goto_selected.node.options[_goto_selected.option].goto, node.id);
			lib.campaign_encounter.save_campaign_dialog_node(_goto_selected.node);
			set(_goto_selected, null);
			render()
		],

		[
			set(selected_node_index, n);
			render();
			spawn_text_editor();
			spawn_effects_editor();
			spawn_options_editor();
			spawn_scenario_editor()
		]
		)
		where w = image_widgets[n]
		where node = nodes[n]
		where pos = [w.mid_x - x, w.mid_y - y]
		where n = index(image_widgets, w)
		",

		drag_image: "def(obj image_widget w) ->commands
		[
		set(node.edit_loc, pos);
		render()
		]
			where node = nodes[n]
			where pos = [w.mid_x - x, w.mid_y - y]
			where n = index(image_widgets, w)
		",

		end_drag_image: "def(obj image_widget w) ->commands
		[
		set(node.edit_loc, pos);
		lib.campaign_encounter.save_campaign_dialog_node(node)
		]
			where node = nodes[n]
			where pos = [w.mid_x - x, w.mid_y - y]
			where n = index(image_widgets, w)
		",

		_image_pane: { type: "null|obj scrollable_pane" },

		_keyframe_images: { type: "[obj image_widget]", default: [] },
		_effects_widgets: { type: "[custom_obj]", default: [] },

		_drag_image_base: { type: "[int,int]", default: [0,0] },

		_drag_start_image: "def(obj image_widget w) ->commands
		set(_drag_image_base, mouse_pos)
		where mouse_pos = lib.gui.mouse_pos(level)
		where nwidget = index(_keyframe_images, w)
		",

		_drag_image: "def(obj image_widget w) ->commands
		[
			set(_drag_image_base, mouse_pos),
			set(w.image_area, [basic_area[0] + hshift, basic_area[1] + vshift, basic_area[2] + hshift, basic_area[3] + vshift]),
		]

		where vshift = if(basic_area[1] < 0.0, -basic_area[1], basic_area[3] > image_dim.y, image_dim.y - basic_area[3], 0.0)
		where hshift = if(basic_area[0] < 0.0, -basic_area[0], basic_area[2] > image_dim.x, image_dim.x - basic_area[2], 0.0)
		where basic_area = [w.image_area[0] - delta.x, w.image_area[1] - delta.y, w.image_area[2] - delta.x, w.image_area[3] - delta.y]
		where delta = [mouse_pos.x - _drag_image_base.x, mouse_pos.y - _drag_image_base.y]
		where mouse_pos = lib.gui.mouse_pos(level)
		where nwidget = index(_keyframe_images, w)
		where image_dim = c.image_dim('images/' + w.image)
		where c = canvas()
		",

		_drag_end_image: "def(obj image_widget w) ->commands
		[
		if(nwidget = 0,
		   set(selected_node.image_area, w.image_area),
		   set(selected_node.next_image_area, w.image_area)
		);
			lib.campaign_encounter.save_campaign_dialog_node(selected_node);
			spawn_images()
		]
		where nwidget = index(_keyframe_images, w)
		",

		change_zoom: "def(int n, decimal r) ->commands
		[
		set(image_widget.image_area, [basic_area[0] + hshift, basic_area[1] + vshift, basic_area[2] + hshift, basic_area[3] + vshift]);
		if(n = 0,
		   set(selected_node.image_area, image_widget.image_area),
		   set(selected_node.next_image_area, image_widget.image_area)
		);
			lib.campaign_encounter.save_campaign_dialog_node(selected_node);
			spawn_images()
		]
		where vshift = if(basic_area[1] < 0.0, -basic_area[1], basic_area[3] > image_dim.y, image_dim.y - basic_area[3], 0.0)
		where hshift = if(basic_area[0] < 0.0, -basic_area[0], basic_area[2] > image_dim.x, image_dim.x - basic_area[2], 0.0)
		where basic_area = [center_focus.x - new_dim.x/2.0, center_focus.y - new_dim.y/2.0, center_focus.x + new_dim.x/2.0, center_focus.y + new_dim.y/2.0]
		where center_focus = [(image_widget.image_area[0] + image_widget.image_area[2])/2.0,
		                      (image_widget.image_area[1] + image_widget.image_area[3])/2.0]
		where image_widget = _keyframe_images[n]
		where new_dim = [int((1.0 - r)*image_dim.x), int(((1.0 - r)*image_dim.x * draw_dim.y)/draw_dim.x)]
		where image_dim = c.image_dim('images/' + selected_node.image)
		where c = canvas()
		",

		draw_dim: "[decimal,decimal] :: [900.0, 602.0]",

		duplicate_keyframe: "def() ->commands
		[
			set(selected_node.next_image_area, selected_node.image_area);
			lib.campaign_encounter.save_campaign_dialog_node(selected_node);
			spawn_effects_editor();
			spawn_images()
		]
		",

		set_image_animate_easing: "def(int n) ->commands
		execute(me, [
			set(selected_node.image_animate_easing, lib.easing.curves[n]);
			lib.campaign_encounter.save_campaign_dialog_node(selected_node);
			spawn_effects_editor()
		])
		",

		_animate_time_entry: { type: "null|obj text_entry" },

		change_animate_time: "def() ->commands
		execute(me, if(_animate_time_entry != null,
		[
			if(mod_txt != txt, set(_animate_time_entry.text, mod_txt)),

			if(mod_txt,
				set(selected_node.image_animate_time, int(decimal(mod_txt)*60));
				lib.campaign_encounter.save_campaign_dialog_node(selected_node);
				spawn_effects_editor()
			)
		]
		
		where mod_txt = regex_replace(txt, '[^0-9\\.]', '')
		where txt = _animate_time_entry.text
		))
		",

		spawn_effects_editor: "def() ->commands
		execute(me, [
			map(_effects_widgets, remove_object(value)),
			set(_effects_widgets, []),
			set(_keyframe_images, []),

			if(selected_node.battle = null, [
				spawn('button_controller', {
					text: 'Duplicate',
					x: lib.gui.py(720),
					y: lib.gui.py(20),
					_font_size: lib.gui.py(16),
					button_width: lib.gui.py(90),
					button_height: lib.gui.py(24),
					on_click: me.duplicate_keyframe,
					zorder: zorder+1,
					color_scheme: lib.citadel.library_color_scheme,
				}, [
					add(_effects_widgets, [child]),
				]),

				spawn('combo_controller', {
					x: lib.gui.py(820),
					y: lib.gui.py(420),
					_font_size: lib.gui.py(12),
					selected_index: max(0, index(lib.easing.curves, selected_node.image_animate_easing or 'linear')),
					on_change: me.set_image_animate_easing,
					_width: lib.gui.py(120),
					_height: lib.gui.py(16),
					zorder: zorder+1,
					color_scheme: lib.citadel.library_color_scheme,

					items: lib.easing.curves,
				}, [
					add(_effects_widgets, [child]),
				]),

				spawn('canvas', {
					x: lib.gui.py(820),
					y: lib.gui.py(440),
				}, [
					add(_effects_widgets, [child]),
					child.draw(dim, dim + margin*2, [
						c.rectangle(0, 0, dim, dim + margin*2),
						c.set_source_color('black'),
						c.fill(),

						c.translate(0, margin),

						c.rectangle(0, 0, dim, dim),
						c.set_line_width(lib.gui.dpy(1.0)),
						c.set_source_color('gray'),
						c.stroke(),

						c.set_source_color('white'),

						c.move_to(0, dim),
					] +

						map(range(32),
							c.line_to(xpos*dim, dim - ypos*dim)
							where ypos = fn(xpos)
							where xpos = value/(32.0-1.0)
						) +
					[

						c.stroke(),
					]
					) where dim = lib.gui.py(92)
					  where margin = lib.gui.py(16)
					  where c = canvas()
					  where fn = lib.easing.get(selected_node.image_animate_easing or 'linear'),
				]),
			]),

			if(selected_node.battle = null,
			map(range(2), [

				spawn('label', {
					x: lib.gui.py(20) + index*lib.gui.py(900/2+20),
					y: lib.gui.py(10),
					_text: [if(index = 0, 'Begin Keyframe', 'End Keyframe')],
					_font_size: lib.gui.py(20),
					_color: [1,1,1,1],
					_halign: 'left',
				}, [
					add(_effects_widgets, [child]),
				]),

				spawn('image_widget', {
					x: lib.gui.py(20) + index*lib.gui.py(900/2+20),
					y: lib.gui.py(50),
					image: selected_node.image,
					image_area: image_area,
					draw_width: lib.gui.py(900/2),
					draw_height: lib.gui.py(602/2),
					zorder: zorder+1,

					drag_start_handler: _drag_start_image,
					drag_handler: _drag_image,
					drag_end_handler: _drag_end_image,
				}, [
					add(_effects_widgets, [child]),
					add(_keyframe_images, [child]),
				]),

				spawn('label', {
					x: lib.gui.py(20) + index*lib.gui.py(900/2+20),
					y: lib.gui.py(42 + 602/2),
					_text: ['Zoom:'],
					_font_size: lib.gui.py(16),
					_color: [1,1,1,1],
					_halign: 'left',
				}, [
					add(_effects_widgets, [child]),
				]),

				spawn('slider_widget', {
					x: lib.gui.py(70) + index*lib.gui.py(900/2+20),
					y: lib.gui.py(60 + 602/2),
					slider_width: lib.gui.py(300),
					slider_height: lib.gui.py(20),
					slider_value: 1.0 - min((image_area[2] - image_area[0])/decimal(image_dim.x), 1.0),
					value_change_handler: (def(decimal r) ->commands change_zoom(index, r)),

				}, [
					add(_effects_widgets, [child]),
				]),
			]
			where image_area = if(index = 1 and selected_node.next_image_area != null, selected_node.next_image_area, selected_node.image_area)
			)
			)
		])
		where image_dim = c.image_dim('images/' + selected_node.image)
		where c = canvas()
		",

		spawn_text_editor: "def() ->commands
		execute(me, [
		clear_widgets(me);

		if(selected_node.battle = null,
			set_widgets([{
				type: 'text_editor',
				id: 'text_editor',
				width: lib.gui.py(600),
				height: lib.gui.py(260),
				x: -lib.gui.py(1190),
				y: lib.gui.py(620),
				font_size: lib.gui.py(14),
				text: utf8_to_ascii(selected_node.text),
				on_change: q(fire_event('text_changed')),
				on_change_focus: q(if(focus, fire_event('text_focus'))),
				filter_paste: me.utf8_to_ascii,
			}])
		)
		])
		",

		utf8_to_ascii: """def(string s) ->string
		regex_replace(regex_replace(c.utf8_to_markup(s), '&[lr]dquo;', '"'), '&#8217;', q('))
		where c = canvas()
		""",

		ascii_to_markup: """def(string s) ->string
			regex_replace(regex_replace(s, '"(.*?)"', '&ldquo;$1&rdquo;'), q('), '&#8217;')
		""",

		change_option: "def(int noption) ->commands [
			set(selected_node.options, map(options, { text: value, goto: if(index < size(selected_node.options), selected_node.options[index].goto) }));
			lib.campaign_encounter.save_campaign_dialog_node(selected_node);
			render()
		]
		where options = [w.text | w <- _options_widgets, regex_match(w.text, q(.*[a-zA-Z].*))],
		",

		_options_widgets: { type: "[obj text_entry]", default: [] },

		_other_widgets: { type: "[custom_obj]", default: [] },

		spawn_options_editor: "def() ->commands
		execute(me, [
			map(_options_widgets, remove_object(value)),
			set(_options_widgets, []),

			map(_other_widgets, remove_object(value)),
			set(_other_widgets, []),

			remove_object(_animate_time_entry),

			if(selected_node.battle = null, [
				spawn('label', {
					x: lib.gui.py(784),
					y: lib.gui.py(378),
					_text: ['Time:'],
					_font_size: lib.gui.py(14),
					_color: [1,1,1,1],
					_halign: 'left',
				}, [
					add(_other_widgets, [child]),
				]),

				spawn('text_entry', {
					x: lib.gui.py(820),
					y: lib.gui.py(390),
					_width: lib.gui.py(80),
					text: sprintf('%.1f', (selected_node.image_animate_time or lib.campaign_encounter.image_animate_time)/60.0),
					default_text: 'Enter time',
					_on_change: me.change_animate_time,
				}, [
					set(_animate_time_entry, child),
				]),
			]),

			if(selected_node.battle = null,
			map(range(4),
				spawn('text_entry', {
					x: lib.gui.py(620),
					y: lib.gui.py(740 + index*30),
					_width: lib.gui.py(140),
					text: if(size(selected_node.options) > index, selected_node.options[index].text, ''),
					default_text: 'Enter option here...',
					_on_change: (def()->commands me.change_option(index)),
				}, [
					add(_options_widgets, [child]),
				])
			)
			)
		])
		",

		_scenario_editor: { type: "null|obj scenario_editor" },

		spawn_scenario_editor: "def() ->commands
		execute(me, [
			remove_object(_scenario_editor),
			set(_scenario_editor, null),

			if(selected_node.battle != null,
				spawn('scenario_editor', {
					scenario: selected_node.battle,
					encounter: selected_node,
					title_controller: title_controller,
					controller: me,
					save_fn: (def() ->commands lib.campaign_encounter.save_campaign_dialog_node(selected_node)),
				}, [
					set(_scenario_editor, child),
				])
			)
		])
		",

		spawn_images: "def() ->commands
		[
			map(image_widgets, remove_object(value)),
			set(image_widgets, []),

			map(nodes,
				spawn('image_widget', {
					mid_x: x + value.edit_loc.x,
					mid_y: y + value.edit_loc.y,
					image_area: dump([value.image_area[0], value.image_area[1], min(dim.x-1, value.image_area[2]), min(dim.y-1, value.image_area[3])]),
					image: value.image,
					draw_width: image_width,
					draw_height: image_height,
					zorder: zorder+1,

					click_handler: click_image,

					drag_handler: drag_image,
					drag_end_handler: end_drag_image,

					allow_drag: true,

					clip_area: [x, y, img_w, img_h],
					clip_area_absolute: true,
				}, [
					add(image_widgets, [child]),
				])

				where dim = c.image_dim('images/' + value.image)
			),
		] where c = canvas()",

		spawn_objects: "def() ->commands
		[
			spawn_effects_editor(),

			spawn_text_editor(),
			spawn_options_editor(),

			spawn_images(),

			spawn('scrollable_pane', {
				x: x - lib.gui.py(250),
				y: y,
				area_width: lib.gui.py(244),
				area_height: height,
				elements: [],
				pending_elements: map(complete_images, {
					create: (def()->custom_obj
					object('image_widget', {
						image_area: [0,0,dim.x,dim.y],
						image: value,
						draw_width: lib.gui.py(110),
						draw_height: lib.gui.py(100),
						zorder: zorder+1,

						click_handler: set_image,
					})),

					xpos: col * lib.gui.py(120),
					ypos: row * lib.gui.py(110),
					height: lib.gui.py(100),
				} where row = index/2
				  where col = index%2
				  where dim = c.image_dim('images/' + value)),
				zorder: zorder,
				focus_on_mouseover: true,
			}, [
				set(_image_pane, child),
			]),

			spawn('button_controller', {
				text: 'Test',
				x: x + lib.gui.py(10),
				y: y2 + lib.gui.py(10),
				_font_size: lib.gui.py(16),
				button_width: lib.gui.py(60),
				button_height: lib.gui.py(24),
				on_click: me.play_test,
				zorder: zorder+1,
				color_scheme: lib.citadel.library_color_scheme,
			}),

			spawn('button_controller', {
				text: '+Battle',
				x: x + lib.gui.py(110),
				y: y2 + lib.gui.py(10),
				_font_size: lib.gui.py(16),
				button_width: lib.gui.py(60),
				button_height: lib.gui.py(24),
				on_click: (def()->commands me.add_node('battle')),
				zorder: zorder+1,
				color_scheme: lib.citadel.library_color_scheme,
			}),
	
			spawn('button_controller', {
				text: '+Dialog',
				x: x + lib.gui.py(210),
				y: y2 + lib.gui.py(10),
				_font_size: lib.gui.py(16),
				button_width: lib.gui.py(60),
				button_height: lib.gui.py(24),
				on_click: (def()->commands me.add_node('default')),
				zorder: zorder+1,
				color_scheme: lib.citadel.library_color_scheme,
			}),
	
			spawn('button_controller', {
				text: 'Delete',
				x: x + lib.gui.py(310),
				y: y2 + lib.gui.py(10),
				_font_size: lib.gui.py(16),
				button_width: lib.gui.py(60),
				button_height: lib.gui.py(24),
				on_click: me.delete_node,
				zorder: zorder+1,
				color_scheme: lib.citadel.library_color_scheme,
			}),

		]
		where c = canvas()
		",

		complete_images: "[string] ::
			map(filter(lib.citadel.get_card_objects_in_set('core'), value.artist not in [null, 'eleazzaar']),
			    sprintf('portraits/%s', string<- value.portrait)) + ['backgrounds/thespire.png']
		",

		id_already_used: "def(string id) ->bool
			id in lib.campaign_encounter.campaign_doc
		",

		calculate_new_id: "def(string id) ->string
		if(id_already_used(proposed_id), calculate_new_id(proposed_id), proposed_id)
		where proposed_id = m[0] + str(num+1)
		where num = if(m[1], int(m[1]), 1)
		where m = [string,string]<- regex_match(id, '(.*?)([0-9]*)')
		",

		add_node: "def(string base_node) ->commands [
			add(nodes, [new_node]);
			spawn_images();
			set(nodes[0].related_nodes, (nodes[0].related_nodes or []) + [new_node.id]);
			lib.campaign_encounter.save_campaign_dialog_node(new_node);
			lib.campaign_encounter.save_campaign_dialog_node(nodes[0])

		]
		where new_node = deep_copy(lib.campaign_encounter.get_campaign_dialog_node(base_node)) +
		                 { id: calculate_new_id(selected_node.id), edit_loc: new_pos }
		where new_pos = [img_w/2, min(img_h - 50, (max(map(nodes, value.edit_loc.y)) or 0) + 100)]
		",

		delete_node: "def() ->commands
		if(selected_node != nodes[0] and find(fold(map(nodes, map(value.options, value.goto)), a+b, []), value = selected_node.id) = null,
		[
			map(nodes, if(value.related_nodes is [string], set(value.related_nodes, filter(value.related_nodes, value != selected_node.id)))),
			set(lib.campaign_encounter.campaign_doc, remove_from_map(lib.campaign_encounter.campaign_doc, selected_node.id)),
			set(nodes, filter(nodes, index != selected_node_index)),
			set(selected_node_index, 0),
		]; [
			render();
			spawn_text_editor();
			spawn_effects_editor();
			spawn_options_editor();
			spawn_images();
			lib.campaign_encounter.save_campaign_dialog_node(nodes[0])
		])",

		play_test: "def() ->commands
			[remove_object(c) | c <- level.chars, c != title_controller];

			spawn('button_controller', {
				text: 'Back',
				trap_escape: true,
				x: x + lib.gui.py(20),
				y: y2 + lib.gui.py(10),
				_font_size: lib.gui.py(22),
				button_width: lib.gui.py(60),
				button_height: lib.gui.py(24),
				on_click: me.return_from_test,
				zorder: zorder+1,
			});

			spawn('campaign_encounter_dialog', {
				controller: title_controller,
				location_name: 'Test',
				encounter: encounter,
				_starting_objects: [],
				_edit_widgets: [find_or_die(level.chars, value is obj button_controller and value.text = 'Back')],
			})

			where encounter = construct('campaign_encounter', {
				node: selected_node.id,
			})
		",

		return_from_test: "def() ->commands
			title_controller.edit_dialog(nodes[0].id, selected_node_index)
		",
	},

	events: {
		create: "map(nodes, load_nodes(value)); render(); spawn_objects(); if(selected_node.battle != null, click_image(image_widgets[selected_node_index]))",
		"+text_focus": "[set(c.has_focus, false) | c <- level.chars, c is obj text_entry]",

		"+text_changed": "
		if(editor != null, [
			set(selected_node.text, ascii_to_markup(txt));
			lib.campaign_encounter.save_campaign_dialog_node(selected_node)

		]
			where txt = editor.text
		)
		where editor = (null|text_editor_widget<- widgets.text_editor)
		",

		click: "[
			swallow_event(),

			switch(mouse_button,
				1, set(_goto_selected, goto),
				3, if(goto, [
					set(goto.node.options[goto.option].goto, null);
					lib.campaign_encounter.save_campaign_dialog_node(goto.node);
					set(_goto_selected, null);
					set(_goto_mouseover, null)
				]),
			null)
			where goto = _get_goto_mouseover()
		] where mouse_button = int<- arg.mouse_button",

		mouse_move: "[
			set(_goto_mouseover, _get_goto_mouseover())
		]
		",
	},
}
