{
	id: "choose_deck_screen_controller",
	is_strict: true,

	hidden_in_game: true,
	always_active: true,

	properties: {
		_mm: { type: "obj matchmaking_base" },
		_controller: { type: "obj citadel_controller" },

		title_controller: { type: "obj title_controller" },

		level_width: "int :: level.dimensions[2]",
		level_height: "int :: level.dimensions[3]",

		_blur_controller: { type: "null|obj blur_controller" },
		_confirm_button: { type: "null|obj button_controller" },

		activate: "def() ->commands
		execute(me,
		[
			spawn('blur_controller', { end_zorder: 100}, [set(me._blur_controller, child)]),

			spawn('label', {
				_text: ['Select Deck'],
				_bg_color: [0,0,0,0.6],
				_font_size: lib.gui.py(32),
				mid_x: level_width/2,
				mid_y: int(level_height*0.10),
				zorder: 20000,
			}),

			set(_controller.in_background, true),

			spawn('button_controller', {
				x: int(level_width*0.5) - lib.gui.py(160)/2,
				mid_y: int(level_height*0.8),
				button_width: lib.gui.py(160),
				text: 'Confirm',
				has_focus: true,
				_font_size: lib.gui.py(28),
				on_click: me._confirm,
				zorder: 20000,
			}, [
				set(_confirm_button, child),
			]),

			spawn('choose_deck_controller', {
				title_controller: title_controller,
				current_controller: me,

				right_side: true,

				zorder: 500,

				x: lib.gui.py(560),
				y: lib.gui.py(152),

				_show_vs: false,
				_at_start_of_game: true,
			}),

			set(_active, true),
		])
		",


		_confirm: "def() ->commands
		execute(me,
		[
			_controller.submit_deck(deck, avatar),
			remove_object(me),
		])
		where avatar = if(user_decks and title_controller.selected_deck, user_decks[title_controller.selected_deck].avatar)
		where deck = [string]<- user_decks[title_controller.selected_deck].cards
		where user_decks = if(title_controller.selected_deck_category = 'custom', title_controller.account_info.decks, DeckMap<- lib.json.get_document_map('data/starting-decks.cfg'))
		",

		_active: { type: "bool", default: false },

	},

	events: {

		process: "if(_active, [
			_mm.process_matchmaking_connection(),
			_controller.process_connection(),
		])",

		being_removed: "[
			[set(c.paused, false) | c <- level.chars, c.paused = true],
			set(_controller.in_background, false),
			map(spawned_children, remove_object(value)),
		]",
	},
}
