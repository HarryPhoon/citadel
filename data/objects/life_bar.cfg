{
id: "life_bar",
is_strict: true,

properties: {
	current_life: { type: "int", default: 40 },
	max_life: { type: "int", default: 40 },

	_font: { type: "string", init: "lib.font.regular_font" },
	_font_size: { default: 16 },

	_render_key: "[current_life, max_life]",

	_width: { type: "int" },

	render: "def(int ww, int hh) ->commands [
	set(animation, {
		id: 'fbo',
		image: 'fbo',
		x: 0, y: 0, w: ww, h: hh,
		scale: 1, frames: 1,
		fbo: query_cache(global_cache(8), _render_key, c.render(ww, hh, [

			c.translate(0, hh - 18),

			c.rectangle(0, 0, (ww-0)*min(1.0, decimal(current_life)/decimal(max_life)), 14),
			c.set_source_rgba(1, 1, 1, 1),
			c.fill(),

			c.rectangle(0, 0, ww, 14),
			c.set_source_rgba(1, 1, 1, 1),
			c.set_line_width(2),
			c.stroke(),

			c.translate(0, -5),
			c.set_font(_font),
			c.set_font_size(_font_size),
			c.set_source_rgba(1, 1, 1, 1),
			c.text_path('Life'),
			c.fill(),

			c.translate(ww - c.text_extents(lib.font.regular_font, 26, str(current_life)).width - 4, 0),
			c.set_font(lib.font.regular_font),
			c.set_font_size(26),
			c.text_path(str(current_life)),
			c.fill(),
		])
		 where bar_outline = [
		 	c.rectangle(0, 0, bar_width - 4, 14),
		 ]
		 where bar_width = ww/max_life
		 where c = canvas()
		)
	}),
	]",
},

on_create: "[
	render(_width, 90),
	set(x, x),
	set(y2, y2),
]",

on_type_updated: "fire_event('create')",


}
