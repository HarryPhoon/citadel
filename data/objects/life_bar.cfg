{
id: "life_bar",
is_strict: true,

properties: {
	_prev_current_life: { type: "int|null" },
	current_life: { type: "int", default: 40 },
	max_life: { type: "int", default: 40 },

	_font: { type: "string", init: "lib.font.regular_font" },
	_font_size: "int :: lib.citadel.py(36)",

	_render_key: "[current_life, max_life, _width, _height]",

	_width: { type: "int" },
	_height: { type: "int" },

	px: "def(int pixels) ->int int(pixels*(_height/90.0))",

	render: "def(int ww, int hh) ->commands [
	set(animation, {
		id: 'fbo',
		image: 'fbo',
		x: 0, y: 0, w: ww, h: hh,
		scale: 1, frames: 1,
		fbo: c.render(ww, hh, [
			c.set_source_rgba(0.51, 0.09, 0.12),

			c.arc(0.5*ww, hh - 0.5*ww, 0.5*ww, 2*3.14, 3.14),
			c.fill(),

			c.move_to(ww, hh - 0.5*ww),
			c.line_to(0, hh - 0.5*ww),
			c.line_to(ww*0.02, 0.90*(hh - 0.5*ww)),
			c.line_to(ww*0.05, 0.80*(hh - 0.5*ww)),
			c.line_to(ww*0.10, 0.62*(hh - 0.5*ww)),
			c.line_to(ww*0.15, 0.51*(hh - 0.5*ww)),
			c.line_to(ww*0.20, 0.40*(hh - 0.5*ww)),
			c.line_to(ww*0.25, 0.35*(hh - 0.5*ww)),
			c.line_to(ww*0.30, 0.26*(hh - 0.5*ww)),
			c.line_to(ww*0.35, 0.18*(hh - 0.5*ww)),
			c.line_to(ww*0.40, 0.11*(hh - 0.5*ww)),
			c.line_to(ww*0.45, 0.05*(hh - 0.5*ww)),
			c.line_to(ww*0.50, 0),
			c.line_to(ww*0.55, 0.05*(hh - 0.5*ww)),
			c.line_to(ww*0.60, 0.11*(hh - 0.5*ww)),
			c.line_to(ww*0.65, 0.18*(hh - 0.5*ww)),
			c.line_to(ww*0.70, 0.26*(hh - 0.5*ww)),
			c.line_to(ww*0.75, 0.35*(hh - 0.5*ww)),
			c.line_to(ww*0.80, 0.40*(hh - 0.5*ww)),
			c.line_to(ww*0.85, 0.51*(hh - 0.5*ww)),
			c.line_to(ww*0.90, 0.62*(hh - 0.5*ww)),
			c.line_to(ww*0.95, 0.80*(hh - 0.5*ww)),
			c.line_to(ww*0.98, 0.90*(hh - 0.5*ww)),
			c.line_to(ww, hh - 0.5*ww),
			c.fill(),

			c.save(),
			c.translate(ww/2 - num_area.width/2, int(hh*0.65)),
			c.set_font(_font),
			c.set_font_size(_font_size),
			c.text_path(str(cur_life)),
			c.set_source_rgba(1, 1, 1, 1),
			c.fill(),
			c.restore(),

			c.save(),
			c.translate(ww/2 - text_area.width/2, int(hh*0.85)),
			c.set_font(_font),
			c.set_font_size(_font_size/2),
			c.text_path(str('Life')),
			c.set_source_rgba(1, 1, 1, 1),
			c.fill(),
			c.restore(),

		])
		 where bar_rect = c.rectangle(0, 0, bar_line, hh)
		 where inverse_bar_rect = c.rectangle(bar_line, 0, ww - bar_line, hh)
		 where bar_line = (ww-2)*min(1.0, decimal(cur_life)/decimal(max_life))
		 where num_area = c.text_extents(lib.font.regular_font, _font_size, str(cur_life))
		 where text_area = c.text_extents(lib.font.regular_font, _font_size/2, str('Life'))
		 where text_commands = [
			c.save(),

			c.translate(0, int(hh*0.7)),
			c.set_font(_font),
			c.set_font_size(_font_size),
			c.text_path('Life'),
			c.fill(),

			c.translate(ww - c.text_extents(lib.font.regular_font, _font_size, str(cur_life)).width - 4, 0),
			c.set_font(lib.font.regular_font),
			c.set_font_size(int(_font_size)),
			c.text_path(str(cur_life)),
			c.fill(),

			c.restore(),
		 ]
		 where bar_outline = [
		 	c.rectangle(0, 0, bar_width - 4, px(14)),
		 ]
		 where bar_width = ww/max_life
		 where c = canvas()
		 where cur_life = if(_prev_current_life is int, _prev_current_life, current_life)
	}),
	]",

	temp_modify_life: "def(custom_obj obj, int namount) ->commands
	if(obj not in _mods and namount != 0, [
		if(_prev_current_life = null, set(_prev_current_life, current_life)),
		add(current_life, namount),
		set(_mods[obj], namount),
	])",

	remove_modify_life: "def(custom_obj obj) ->commands
	if(obj in _mods,
	[
		set(_mods, remove_from_map(_mods, obj)),
		if(_prev_current_life = null, set(_prev_current_life, current_life)),
		add(current_life, -namount),
	] where namount = int<- _mods[obj])",


	_mods: { type: "{custom_obj -> int}", default: {} },
},

on_create: "[
	fire_event('render'),
	set(mid_x, mid_x),
	set(mid_y, mid_y),
]",

on_render: "[
	render(_width, _height),
	if(_prev_current_life = current_life, set(_prev_current_life, null)),
]",

on_process: "if(_prev_current_life is int and cycle > 2, [
	add(_prev_current_life, if(current_life > _prev_current_life, 1, -1)),
	fire_event('render'),
])",

on_type_updated: "fire_event('create')",


}
