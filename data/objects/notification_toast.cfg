{
	id: "notification_toast",
	is_strict: true,
	always_active: true,

	zorder: 100000,

	properties: {
		_font_size: { default: 18 },

		_width: { default: 200 },

		_border: { default: 8 },

		_height: "int :: int(max(map(fragments, value.y + value.height)) or 0) + _border*2
		
		 where fragments = c.markup_text(_marked_up_text, _width - _border*2)
		 where c = canvas()",

		_text: { type: "string" },
		_marked_up_text: "string :: q(<font size=') + _font_size + q('>) + _text + q(</font>)",

		_on_click: { type: "commands" },

		render: "def(int ww, int hh) ->commands [
		set(animation, {
			id: 'fbo',
			image: 'fbo',
			x: 0, y: 0, w: ww, h: hh,
			scale: 1, frames: 1,
			fbo: c.render(ww, hh, [
				c.rectangle(0, 0, ww, hh),
				c.set_source_rgba(0.0, 0.54, 0.44, 1.0),
				c.fill(),

				c.save(),
				c.translate(_border, _border),

				c.set_source_rgba(0.61, 0.84, 0.65, 1.0),

				map(fragments,
				[
					c.save(),
					value.path,
					c.fill(),
					c.restore(),
				]),

				c.restore(),
			] where fragments = c.markup_text(_marked_up_text, _width - _border*2)
			)
			  where c = canvas(),
		})
		]",
	},

	on_click: "_on_click",

	on_create: "[
		render(_width, _height),
		set(x, level.dimensions[2] - _width - _border),
		set(y, -_height),

		fire_event('animate_toast'),
		schedule(200, fire_event('fade_out'))
	]",

	on_animate_toast: "[
		animate(me, {
			y: _border,
		}, {
			duration: 20
		})
	]",

	on_fade_out: "[
		animate(me, {
			alpha: 0,
		}, {
			duration: 20,
			on_complete: remove_object(me),
		})
	]",
}
