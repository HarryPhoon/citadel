{
	id: "chat_area",

	always_active: true,
	hidden_in_game: true,
	is_strict: true,

	on_construct: "[
	clear_widgets(me),
	set_widgets([{
		type: 'rich_text_label',
		id: 'chat',
		x: lib.gui.py(10),
		width: label_width,
		height: chat_height,
		font_size: _font_size,
		children: _widgets,
		auto_scroll_bottom: true,
	},

	{
		type: 'text_editor',
		id: 'entry',
		width: chat_width + lib.gui.py(10),
		x: lib.gui.py(10),
		y: chat_height + lib.gui.py(8),
		font_size: _font_size,
		on_enter: q(fire_event('enter')),

		color: edit_text_color,
		bg_color: edit_bg_color,
		no_border: edit_no_border,

		text: 'Enter chat message',
		clear_on_focus: true,
	}]);

	set(draw_primitives, [{
		type: 'rect',
		area: [x,y,x + entry.width + entry.x*2, y + entry.y + entry.height + lib.gui.py(6)],
		color: rect_color,
	}]) where entry = widget<- widgets.entry,
	]",

	on_enter: "[
		if(controller and _entry_widget.text, controller.send_chat(_entry_widget.text)),
		if(_message_send_handler and _entry_widget.text, _message_send_handler(_entry_widget.text)),
		set(_entry_widget.text, ''),
	]",

	properties: {
		_font_size: "int :: lib.gui.py(18)",
		edit_text_color: { default: [255,255,255,255] },
		edit_bg_color: { default: [0,0,0,0] },
		edit_no_border: { default: false },

		rect_color: { type: "[int,int,int,int]", default: [0,0,0,128] },

		has_focus: { type: "bool", get: "bool :: _entry_widget.has_focus", set: "set(_entry_widget.has_focus, value)", variable: false},
		_entry_widget: "text_editor_widget<- widgets.entry",
		_chat_widget: "text_editor_widget<- widgets.chat",
		_widgets: { type: "[map]", default: [] },
		controller: "find(level.chars, value is obj citadel_controller)",

		_message_send_handler: { type: "null|function(string) ->commands" },

		label_width: "int :: chat_width - 10",

		chat_height: { type: "int", init: "lib.gui.py(400)" },
		chat_width: { type: "int", set: "if(value != _data, [
			set(_data, value),
			if(_data != null, fire_event(me, 'land')),
		])" },

		_current_game_log: { type: "[string]", default: [] },

		set_chat_widgets: "def([widget] items) ->commands
			set(widgets.chat, {
				type: 'rich_text_label',
				id: 'chat',
				x: lib.gui.py(10),
				width: label_width,
				height: chat_height,
				font_size: _font_size,
				auto_scroll_bottom: true,
				children: items,
			})
		",

		set_game_log: "def([string] text) ->commands
		if(size(text) > size(_current_game_log), [
		    set(_current_game_log, text),

			set(widgets.chat, {
				type: 'rich_text_label',
				id: 'chat',
				x: lib.gui.py(10),
				width: label_width,
				height: chat_height,
				font_size: _font_size,
				auto_scroll_bottom: true,
				children: _widgets + new_widgets,
			}),

			add(_widgets, new_widgets),
		]
			where new_widgets = map(text[size(_current_game_log):], {
				type: 'label',
				size: _font_size,
				text: '\n ' + value,
				color: 'antique_white',
			})
	    )
		",

		server_message: "def(string text) ->commands
		if(size(text) > size(_current_game_log), [
			set(widgets.chat, {
				type: 'rich_text_label',
				id: 'chat',
				x: lib.gui.py(10),
				width: label_width,
				height: chat_height,
				font_size: _font_size,
				auto_scroll_bottom: true,
				children: _widgets + new_widgets,
			}),

			add(_widgets, new_widgets),
		]
		where new_widgets = [{
			type: 'label',
			size: _font_size,
			text: '\n ' + text,
			color: 'navy',
		}]
	    )
		",

		log_message: "def(string text) ->commands [

			set(widgets.chat, {
				type: 'rich_text_label',
				id: 'chat',
				x: lib.gui.py(10),
				width: label_width,
				height: chat_height,
				font_size: _font_size,
				auto_scroll_bottom: true,
				children: _widgets + new_widgets,
			}),

			add(_widgets, new_widgets),
		]
			where new_widgets = [
			{
				type: 'label',
				size: _font_size,
				text: '\n' + text,
				color: 'white',
			}]
		",

		message_received: "def(ChatMessage msg) ->commands [

			set(widgets.chat, {
				type: 'rich_text_label',
				id: 'chat',
				x: lib.gui.py(10),
				width: label_width,
				height: chat_height,
				font_size: _font_size,
				auto_scroll_bottom: true,
				children: _widgets + new_widgets,
			}),

			add(_widgets, new_widgets),
		]
			where new_widgets = if(msg.message[0:4] = '/me ',
			[

			{
				type: 'label',
				size: _font_size,
				text: '\n' + formatted_time,
				color: 'gray',
			},
			
			{
				type: 'label',
				size: _font_size,
				text: ' * ' + msg.nick + ' ',
				color: 'white',
			},

			{
				type: 'label',
				size: _font_size,
				text: msg.message[4:],
				color: 'snow',
			}],
			
			[
			
			{
				type: 'label',
				size: _font_size,
				text: '\n' + formatted_time,
				color: 'gray',
			},
		
			
			{
				type: 'label',
				size: _font_size,
				text: ' <' + msg.nick + '> ',
				color: if(controller and msg.nick = controller.state.players[controller.state.nplayer].name, 'white', 'indianred'),
			},

			{
				type: 'label',
				size: _font_size,
				text: msg.message,
				color: 'snow',
			}])
			where formatted_time = hour + ':' + min
			where hour = if(t.hour < 10, '0', '') + str(t.hour)
			where min = if(t.minute < 10, '0', '') + str(t.minute)
			where t = time(timestamp)
			where timestamp = msg.timestamp - lib.tbs.server_time_delta
		",

	},
}
