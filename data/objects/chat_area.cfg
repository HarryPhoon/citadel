{
	id: "chat_area",

	always_active: true,
	hidden_in_game: true,
	is_strict: true,

	on_create: "[
	clear_widgets(me),
	set_widgets([{
		type: 'rich_text_label',
		id: 'chat',
		width: chat_width,
		height: 200,
		font_size: 18,
		children: _widgets,
		auto_scroll_bottom: true,
	},

	{
		type: 'text_editor',
		id: 'entry',
		width: chat_width + 40,
		y: 208,
		font_size: 18,
		on_enter: q(fire_event('enter')),
	}])
	]",

	on_enter: "[
		if(controller and _entry_widget.text, controller.send_chat(_entry_widget.text)),
		set(_entry_widget.text, ''),
	]",

	properties: {
		has_focus: "bool :: _entry_widget.has_focus",
		_entry_widget: "text_editor_widget<- widgets.entry",
		_chat_widget: "text_editor_widget<- widgets.chat",
		_widgets: { type: "[map]", default: [] },
		controller: "find(level.chars, value is obj citadel_controller)",

		chat_width: { type: "int", set: "if(value != _data, [
			set(_data, value),
			if(_data != null, fire_event('create')),
		])" },

		message_received: "def(string nick, string text) ->commands [
			set(widgets.chat, {
				type: 'rich_text_label',
				id: 'chat',
				width: chat_width,
				height: 200,
				font_size: 18,
				auto_scroll_bottom: true,
				children: _widgets + new_widgets,
			}),

			add(_widgets, new_widgets),
		]
			where new_widgets = if(text[0:4] = '/me ',
			[{
				type: 'label',
				size: 18,
				text: '\n * ' + nick + ' ',
				color: 'white',
			},

			{
				type: 'label',
				size: 18,
				text: text[4:],
				color: 'snow',
			}],
			
			[{
				type: 'label',
				size: 18,
				text: '\n <' + nick + '> ',
				color: if(controller and nick = controller.state.players[controller.state.nplayer].name, 'white', 'indian_red'),
			},

			{
				type: 'label',
				size: 18,
				text: text,
				color: 'snow',
			}])
		",
	},
}
