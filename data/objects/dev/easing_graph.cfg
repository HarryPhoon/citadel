{
	id: "easing_graph",
	is_strict: true,

	mouse_drag_threshold: 5,

	properties: {
		anim_point: { type: "decimal", default: 0.0 },

		points: { type: "[CurvePoint]", init: "[{x: 0.0, y: 0.0}, {x: 1.0, y: 1.0}]", set: "set(_data, sort(value, a.x < b.x))", },

		points_canvas: {
			type: "[CurvePoint]",
			variable: false,
			get: "[CurvePoint] :: map(points, {x: _borderh + value.x*(_width - _borderh*2), y: _borderv + (1.0 - value.y)*(_height - _borderv*2), t: value.t, t2: value.t2})",
			set: "set(points, map(value, {x: (value.x - _borderh)/decimal(_width - _borderh*2), y: 1.0 - (value.y - _borderv)/decimal(_height - _borderv*2), t: value.t, t2: value.t2}))",
		},

		get_gradient: "def(CurvePoint a, CurvePoint b) ->decimal
			(b.y - a.y) / (b.x - a.x)
		",

		get_tangent: "def([CurvePoint] points, int n) ->decimal
		if(override is decimal, override,
		if(grad_a is decimal and grad_b is decimal, (grad_a + grad_b)/2.0, grad_a is decimal, grad_a, grad_b is decimal, grad_b, 0.0)
		where grad_b = if(n < size(points)-1, get_gradient(points[n], points[n+1]), null)
		where grad_a = if(n > 0, get_gradient(points[n-1], points[n]), null)
		)

		where override = points[n].t
		",

		render: "def() ->commands

		set(animation, lib.gui.render_frame(c, ww, hh, [
			c.set_source_color('black'),
			c.rectangle(0, 0, ww, hh),
			c.fill(),

			c.set_source_color('white'),
			c.set_line_width(lib.gui.dpy(2.0)),

			c.set_source_color('gray'),
			c.new_path(),
			c.move_to(0, _borderv),
			c.line_to(_width, _borderv),
			c.move_to(0, _width/2),
			c.line_to(_width, _width/2),
			c.move_to(0, _width - _borderv),
			c.line_to(_width, _width - _borderv),
			c.move_to(_width/2.0, 0.0),
			c.line_to(_width/2.0, _height),
			c.stroke(),

			c.new_path(),
			c.move_to(_borderh, y_values[0]),
			map(y_values, [
				c.line_to(_borderh + (decimal(index)/decimal(size(y_values)-1))*(_width - _borderh*2), value),
			]),

			c.stroke(),


			map(p, [
				c.set_source_color(if(index = nselected, 'red', index = nmouseover, 'yellow', 'white')),
				c.arc(value.x, value.y, lib.gui.py(8), 0, 3.15*2),
				c.fill(),

				c.set_source_color('black'),
				c.arc(value.x, value.y, lib.gui.py(8), 0, 3.15*2),
				c.set_line_width(lib.gui.dpy(2.0)),
				c.stroke(),

				if(index = nselected, [
					c.set_source_color(if(gradient_mouseover, 'red', 'blue')),
					c.move_to(value.x + 100, value.y - 100*t*canvas_ratio),
					c.line_to(value.x - 100, value.y + 100*t*canvas_ratio),
					c.set_line_width(lib.gui.dpy(2.0)),
					c.stroke(),
				] where t = dump(get_tangent(points, index))
				)
			]),

			if(anim_point != 0.0, [
				c.set_line_width(4.0),
				c.set_source_color('red'),
				c.new_path(),
				c.move_to(0.0, _height - _borderv - anim_point*(_height - _borderv*2)),
				c.line_to(_width, _height - _borderv - anim_point*(_height - _borderv*2)),
				c.stroke(),
			]),
		]))
			where nselected = point_selected
			where nmouseover = point_mouseover
			where y_values = dump(['GRADIENT:', 100.0*(pp[50] - pp[49])] where pp = points_along_curve(map(points, [value.x, value.y, get_tangent(points, index)]), 100),
			   map(points_along_curve(map(points, [value.x, value.y, get_tangent(points, index)]), 100), _borderv + (1.0 - value)*(_height - _borderv*2)))
		    where p = points_canvas
			where ww = _width
			where hh = _height
			where c = canvas()
		",

		change_gradient: "def() ->commands
		if(gradient_entry != null and point_selected is int and regex_match(gradient_entry.text, '-?([0-9]*\.)?[0-9]+') != null,
			set(points[point_selected].t, decimal(gradient_entry.text))
		)
		",

		gradient_entry: { type: "null|obj text_entry" },
		point_selected: {
			type: "int|null",
			set: "remove_object(gradient_entry);
			      if(value is int, [

					spawn('text_entry', {
						x: x + lib.gui.py(16),
						y: y2 + lib.gui.py(16),
						text: str(get_tangent(points, value)),
						_width: lib.gui.py(128),
						_on_change: me.change_gradient,
					}, [
						set(gradient_entry, child)
					])
				  ]);
				  set(_data, value)"
		},

		point_mouseover: "int|null ::
		if(p != null,
			if(dist < lib.gui.dpy(8.0), index(points_canvas, p))
			where dist = sqrt((_mouse_x - p.x)^2 + (_mouse_y - p.y)^2)
		)
		where p = choose(points_canvas, -((_mouse_x - value.x)^2 + (_mouse_y - value.y)^2))",

		gradient_mouseover: "bool ::
		if(point_selected = null or _mouse_x < 0 or _mouse_y < 0 or _mouse_x > _width or _mouse_y > _height, false,
			if(abs(atan(t) - atan(our_t)) < 4.0,
				true, false
			)
			where t = get_tangent(points, point_selected)
			where our_t = if(xdiff = 0.0, 99999.0, -(ydiff/xdiff)/canvas_ratio)
			where xdiff = _mouse_x - points_canvas[point_selected].x
			where ydiff = _mouse_y - points_canvas[point_selected].y
		)
		",

		canvas_ratio: "decimal :: decimal(_height - _borderv*2)/decimal(_width - _borderh*2)",

		_recalculate_borderv: "def() ->commands
		set(_borderv,
			max(lib.gui.py(32),
			  int(fraction*_height)
			  where fraction = val/(val*2.0+1.0)
			  where val = 2.0*(decimal<- max(map(y_values, if(value < 0.0, abs(value), value > 1.0, value - 1.0, 0.0))))
			  where y_values = map(points, value.y)
			)
		)
		",

		_borderh: "int :: lib.gui.py(32)",
		_borderv: { type: "int", init: "lib.gui.py(32)" },
		_width: "int :: lib.gui.py(512)",
		_height: "int :: lib.gui.py(512)",

		_mouse_x: "lib.gui.mouse_pos(level)[0] - x",
		_mouse_y: "lib.gui.mouse_pos(level)[1] - y",

		_drag_state: { type: "null|{points_canvas: [CurvePoint], p: int, anchor: [int,int]}" },
		_drag_gradient: { type: "null|{ anchor: [int,int], t: decimal }" },

		_save_button: { type: "null|obj button_controller" },
		_create_save_button: "def(bool has) ->commands
			remove_object(_save_button);
			set(_save_button, null);
			if(has,
				spawn('button_controller', {
					x: x + lib.gui.py(16),
					y: y2 + lib.gui.py(80),
					text: 'Save',
					on_click: me.save,
					_font_size: lib.gui.py(14),
					button_width: lib.gui.py(40),
					button_height: lib.gui.py(18),
				})
			)
		",

		save: "def() ->commands
		if(_name_entry != null,
			lib.easing.add_curve(_name_entry.text, points)
		);
		_spawn_combo()
		",

		_name_entry: { type: "null|obj text_entry" },
		change_name: "def() ->commands
			_create_save_button(_name_entry != null and _name_entry.text != '')
		",

		_combo: { type: "null|obj combo_controller", },
		_spawn_combo: "def() ->commands
			remove_object(_combo);
			spawn('combo_controller', {
				x: x + lib.gui.py(196),
				y: y2 + lib.gui.py(32),
				_width: lib.gui.py(120),
				_height: lib.gui.py(20),
				_font_size: lib.gui.py(14),
				items: ['<Create>'] + lib.easing.curves,
				selected_index: if(selected, index(lib.easing.curves, selected)+1, 0),
				on_change: me.select_curve,
			}, [
				set(_combo, child),
			]) where selected = if(_name_entry, find(lib.easing.curves, value = _name_entry.text))
		",

		select_curve: "def(int n) ->commands
			if(n = 0, [
				if(_name_entry, set(_name_entry.text, '')),
				set(points, [{x: 0.0, y: 0.0}, {x: 1.0, y: 1.0}]),
			], [
				if(_name_entry, set(_name_entry.text, lib.easing.curves[n-1])),
				set(points, lib.easing.get_curve(lib.easing.curves[n-1]).points),
			])
		",

		create_widgets: "def() ->commands
		spawn('text_entry', {
			default_text: 'Enter curve name',
			x: x + lib.gui.py(16),
			y: y2 + lib.gui.py(48),
			text: '',
			_width: lib.gui.py(128),
			_on_change: me.change_name,
		}, [
			set(_name_entry, child),
		]);
		_spawn_combo()
		",
	},

	events: {
		create: "render(); create_widgets()",
		process: "render()",

		click: "
	   if(point_selected = null and point_mouseover = null and _mouse_x > _borderh and _mouse_x < _width - _borderh,
			add(points_canvas, [{x: decimal(_mouse_x), y: decimal(_mouse_y)}]),
		
		set(point_selected, null); [
			if(point_mouseover != null and mouse_button = 1,
				set(point_selected, point_mouseover),

			   point_mouseover and mouse_button = 3 and point_mouseover != 0 and point_mouseover != size(points)-1,
			    set(points_canvas, filter(points_canvas, index != point_mouseover))
			)
		] where mouse_button = int<- arg.mouse_button
		)
		",

		"+mouse_down*": "[
		set(_drag_state, null),
		set(_drag_gradient, null),
		if(gradient_mouseover,
			set(_drag_gradient, { anchor: [_mouse_x, _mouse_y], t: get_tangent(points, int<-point_selected)}),
			point_mouseover != null,
			set(_drag_state, {
				points_canvas: points_canvas,
				p: point_mouseover,
				anchor: [_mouse_x, _mouse_y],
			})
		)
		] where mouse_button = int<- arg.mouse_button
		",

		drag_start: "null",
		drag_end: "if(_drag_gradient = null, set(point_selected, null)); set(_drag_state, null); set(_drag_gradient, null); _recalculate_borderv()",
		drag: "if(_drag_gradient != null,

			if(gradient_entry != null, set(gradient_entry.text, str(our_t)))
			where our_t = if(xdiff = 0.0, 99999.0, -(ydiff/xdiff)/canvas_ratio)
			where xdiff = _mouse_x - points_canvas[point_selected].x
			where ydiff = _mouse_y - points_canvas[point_selected].y,
			
		    _drag_state != null,
			set(points_canvas, _drag_state.points_canvas[:_drag_state.p] + [{x: clamp(pt.x + dx, _borderh+1, _width-_borderh-1), y: pt.y + dy, t: pt.t, t2: pt.t2}] + _drag_state.points_canvas[_drag_state.p+1:])
			where pt = _drag_state.points_canvas[_drag_state.p]
			where dx = _mouse_x - _drag_state.anchor[0]
			where dy = _mouse_y - _drag_state.anchor[1]
		)",
	},
}
