{
	id: "library_deck_entry",

	is_strict: true,
	use_absolute_screen_coordinates: true,

	zorder: 500,
	always_active: true,

	properties: {
		_font: { type: "string", init: "lib.font.regular_font" },
		_font_size: "int :: px(14)",

		controller: { type: "null|obj library_controller" },
		_editing: { type: "bool", default: false },
		_anchor_mouse: { type: "null|[int,int]" },

		adjustments: "{string -> decimal}<-
		if(_adjustments_override != null, _adjustments_override,
		{
			deck_entry_focus_x: adj['deck_entry_focus_x'] or 400,
			deck_entry_focus_y: adj['deck_entry_focus_y'] or 400,
			deck_entry_focus_scale: adj['deck_entry_focus_scale'] or 0.35,
		}
		)
		where adj = lib.citadel.card_adjustments[card.name] or {}
		",

		_adjustments_override: { type: "null|{string -> decimal}", change: "render_entry()" },


		px: "def(int pixels) ->int lib.citadel.px(pixels)",
		py: "def(int pixels) ->int lib.citadel.py(pixels)",

		card: { type: "class card" },

		_card_preview: { type: "null|obj card" },

		_type_text: "string :: if(card.creature_object != null, if(card.creature_object.is_construct, 'Land', card.creature_object.is_building, 'Fortification', 'Creature') + if(card.creature_object.is_construct, '', canvas().emdash + str(card.creature_object.attack) + '/' + str(card.creature_object.life)), 'Spell' + if(card.is_response, canvas().emdash + 'Response', ''))",

		area: "{ width: px(240), height: py(36) }",

		count: { default: 1 },

		pulse: "def() ->commands animate(me, {
			alpha: 255,
		}, {
			duration: 20,

			on_complete: animate(me, {
				alpha: 196,
			}, {
				duration: 20,
			}),
		})",

		_delay_drawing_frames: { type: "null|int" },

		render_entry: "def() ->commands set(animation, {
			id: 'fbo',
			image: 'fbo',
			x: 0, y: 0, w: area.width, h: area.height,
			scale: 1, frames: 1,
			fbo: c.render(area.width, area.height, [
				c.rectangle(0, 0, area.width, area.height),
				//c.set_source_rgba(school_info.red, school_info.green, school_info.blue, 0.8),
				c.set_source_rgba(0, 0, 0, 1.0),
				c.fill(),
			] +

			if(_delay_drawing_frames is int and _delay_drawing_frames > level.cycle, [], [

				[
					c.save(),

					c.move_to(area.width/2, 0),
					c.line_to(area.width, 0),
					c.line_to(area.width, area.height),
					c.line_to(area.width/2, area.height),

					c.clip(),

					c.new_path(),

					c.translate((area.width*3)/4, area.height/2),

					[
					c.scale(focus_scale),
					c.paint_image('images/portraits/card-size/' + (card.portrait or 'null'), [-(focus_x/2), -(focus_y/2)]),
					]
					where focus_x = decimal<- adj['deck_entry_focus_x']
					where focus_y = decimal<- adj['deck_entry_focus_y']
					where focus_scale = decimal<- adj['deck_entry_focus_scale']
					where adj = adjustments,

					//c.fill(),
					c.restore(),

					c.save(),

					c.rectangle(area.width/2, 0, area.width/4, area.height),
					c.move_to(area.width/2, 0),
					c.line_to((3*area.width)/4, 0),
					c.line_to((3*area.width)/4, area.height),
					c.line_to(area.width/2, area.height),

					c.set_linear_pattern(area.width/2, 0, (3*area.width)/4, 0, [
						{ offset: 0, red: 0, green: 0, blue: 0, alpha: 1.0 },
						{ offset: 1, red: 0, green: 0, blue: 0, alpha: 0.0 }]),
					c.fill(),

					c.restore(),
				] +
			[
				c.move_to(0,0),
				c.line_to(area.width, 0),
				c.set_line_width(2.0),
				c.set_source_rgba(1, 1, 1, 1),
				c.stroke(),

				c.move_to(0,area.height),
				c.line_to(area.width, area.height),
				c.set_line_width(2.0),
				c.set_source_rgba(1, 1, 1, 1),
				c.stroke(),

				//c.translate(0, hh where hh = c.text_extents(_font, _font_size, card.name).height),
				c.save(),
				c.translate(px(46), py(2)),
				c.set_font(_font),
				c.set_font_size(_font_size+2),
				c.text_path_in_bounds(card.name, area.width, ['left', 'top']),
				c.set_source_rgba(1, 1, 1, 1),
				c.fill(),
				c.restore(),

				c.save(),
				c.translate(px(48), area.height - py(4)),
				c.set_font(_font),
				c.set_font_size(_font_size - 2),
				c.text_path_in_bounds(_type_text, area.width, ['left']),
				c.set_source_rgba(1, 1, 1, 1),
				c.fill(),
				c.restore(),

				c.save(),
				c.translate(px(34), py(4)),
				c.set_font(_font),
				c.set_font_size(_font_size - 2),
				c.text_path_in_bounds(str(card.cost /*+ card.loyalty_cost*/), area.width, ['left', 'top']),
				c.set_source_rgba(1, 1, 1, 1),
				c.fill(),
				c.restore(),

				c.save(),
				c.translate(px(4), area.height/2 + py(6)),
				c.set_font(_font),
				c.set_font_size(_font_size),
				c.text_path_in_bounds(str(count) + 'x', area.width, ['left']),
				c.set_source_rgba(1, 1, 1, 1),
				c.fill(),
				c.restore(),
			] + fold(map(card.school_list,
			[
				c.save(),
				c.translate(px(32 + index*10), area.height/2),
				c.set_source_color(lib.citadel.school_info[value].color),
				c.draw_svg('images/icons/school-hex.svg', px(12), py(12)),
				c.set_source_color([0.0,0.0,0.0,1.0]),
				c.draw_svg('images/icons/' + icon_name, px(12), py(12)),
				c.restore(),
			] where icon_name = lib.citadel.school_info[value].icon), a+b, []),

			]
			)


			where school_info = lib.citadel.school_info[card.first_school])
			where c = canvas()
		})",

		_increase_button: {
			type: "null|obj svg_button",
			set: "if(_data != value, [remove_object(_data), set(_data, value)])",
		},

		_decrease_button: {
			type: "null|obj svg_button",
			set: "if(_data != value, [remove_object(_data), set(_data, value)])",
		},

		_delete_button: {
			type: "null|obj svg_button",
			set: "if(_data != value, [remove_object(_data), set(_data, value)])",
		},

		increase_entry: "def() ->commands if(controller, controller.add_deck_item(card))",
		decrease_entry: "def() ->commands
		     if(count <= 1, if(controller, controller.remove_deck_item(card)),
			 [
			 	if(controller, controller.play_card_remove_sound()),
			 	add(count, -1),
				bind_command(me.render_entry),
			 ])
		",
		delete_entry: "def() ->commands if(controller, controller.remove_deck_item(card))",
	},

	on_type_updated: "render_entry()",

	on_create: "[
		set(alpha, 196),
		if(_delay_drawing_frames is int and _delay_drawing_frames > level.cycle,
			[
				render_entry(),
				schedule(_delay_drawing_frames - level.cycle,
					; set(_delay_drawing_frames, null); render_entry()
				),
			],
			render_entry()
		),
		set(x2, x2),
		set(y, y),
	]",

	on_being_removed: "[
		remove_object(_card_preview),
		set(_delete_button, null),
		set(_increase_button, null),
		set(_decrease_button, null),
	]",

	on_mouse_enter: "if(controller, [
		set(alpha, 255),
		spawn('card', mid_x - px(320), mid_y + py(0), {
			zorder: 10000,
			in_hand: false,
			card_size: 1.6,
			card_type: card,
			controller: controller,
			use_absolute_screen_coordinates: true,
		}, [
			set(me._card_preview, child),
		]),

		spawn('svg_button', 0, 0, {
			icon: 'health-increase.svg',
			zorder: zorder+1000,
			mid_x: x2 - lib.citadel.py(64),
			mid_y: mid_y - lib.citadel.py(6),
			mouseover_color: [0, 255, 0],
			mouseoff_color: [0, 196, 0],
			size: lib.citadel.py(24),
			click_handler: me.increase_entry,
			use_absolute_screen_coordinates: true,
		}, [
			set(me._increase_button, child),
		]),

		spawn('svg_button', 0, 0, {
			icon: 'health-decrease.svg',
			zorder: zorder+1000,
			mid_x: x2 - lib.citadel.py(39),
			mid_y: mid_y - lib.citadel.py(6),
			mouseover_color: [255, 0, 0],
			mouseoff_color: [196, 0, 0],
			size: lib.citadel.py(24),
			click_handler: me.decrease_entry,
			use_absolute_screen_coordinates: true,
		}, [
			set(me._decrease_button, child),
		]),

		spawn('svg_button', 0, 0, {
			icon: 'cancel.svg',
			zorder: zorder+1000,
			mid_x: x2 - lib.citadel.py(14),
			mid_y: mid_y - lib.citadel.py(6),
			mouseover_color: [255, 0, 0],
			mouseoff_color: [196, 0, 0],
			size: lib.citadel.py(24),
			click_handler: me.delete_entry,
			use_absolute_screen_coordinates: true,
		}, [
			set(me._delete_button, child),
		]),
	
	])
	",

	on_mouse_leave: "[
		remove_object(_card_preview),
		set(_card_preview, null),
		set(alpha, 196),

		set(_delete_button, null),
		set(_increase_button, null),
		set(_decrease_button, null),
	]",

	on_click: "if(controller, [
		swallow_mouse_event(),

		if(mouse_button = 1, controller.add_deck_item(card),
		   mouse_button = 3,
		     if(count <= 1, controller.remove_deck_item(card),
			 [
			 	controller.play_card_remove_sound(),
			 	add(count, -1),
				bind_command(me.render_entry),
			 ])
		),

		
	])
	  where mouse_button = int<- arg.mouse_button",

	on_drag_start: "if(_editing, [
	])",

	on_drag_end: "if(_editing, [
		set(_anchor_mouse, null),
	])",

	on_drag: "if(_editing, [
		if(_anchor_mouse != null,
			if('left' in level.player.ctrl_mice[0],
				set(_adjustments_override, adjustments + {deck_entry_focus_x: decimal<- adjustments['deck_entry_focus_x'] + dx, deck_entry_focus_y: decimal<- adjustments['deck_entry_focus_y'] + dy}),
				set(_adjustments_override, adjustments + {deck_entry_focus_scale: decimal<- adjustments['deck_entry_focus_scale'] + dx/1000.0})
			)
			where dx = _anchor_mouse[0] - lib.citadel.mouse_pos(level)[0]
			where dy = _anchor_mouse[1] - lib.citadel.mouse_pos(level)[1]
		),
		set(_anchor_mouse, lib.citadel.mouse_pos(level)),
	])",



	shader: {
		name: "library_deck_entry_shader",

		vertex: "
			uniform mat4 u_mvp_matrix;
			attribute vec4 a_position;
			attribute vec2 a_texcoord;
			varying vec2 v_texcoord;
			void main()
			{
				v_texcoord = a_texcoord;
				gl_Position = u_mvp_matrix * a_position;
			}
		",

		fragment: "
			#version 120
			uniform sampler2D u_tex_map;
			uniform vec4 u_color;
			varying vec2 v_texcoord;
			void main()
			{
				gl_FragColor = texture2D(u_tex_map, v_texcoord);
				if(gl_FragColor[3] < 0.2) {
					gl_FragColor[3] = v_texcoord[0]*1.0;
				}

				gl_FragColor = gl_FragColor * u_color;
			}
		",

		attributes: {
			position: "a_position",
			texcoord: "a_texcoord",
		},

		uniforms: {
			mvp_matrix: "u_mvp_matrix",
			color: "u_color",
		},
	}
}
