{
	id: "library_deck_entry",

	is_strict: true,
	use_absolute_screen_coordinates: true,

	zorder: 500,
	always_active: true,

	properties: {
		_font: { type: "string", init: "lib.font.regular_font" },
		_font_size: "int :: px(14)",

		px: "def(int pixels) ->int lib.citadel.px(pixels)",
		py: "def(int pixels) ->int lib.citadel.py(pixels)",

		card: { type: "class card" },

		_card_preview: { type: "null|obj card" },

		_type_text: "string :: if(card.creature_object != null, if(card.creature_object.is_construct, 'Land', card.creature_object.is_building, 'Fortification', 'Creature') + if(card.creature_object.is_construct, '', canvas().emdash + str(card.creature_object.attack) + '/' + str(card.creature_object.life)), 'Invocation' + if(card.is_response, canvas().emdash + 'Response', ''))",

		area: "{ width: px(240), height: py(36) }",

		count: { default: 1 },

		pulse: "def() ->commands animate(me, {
			alpha: 255,
		}, {
			duration: 20,

			on_complete: animate(me, {
				alpha: 196,
			}, {
				duration: 20,
			}),
		})",

		render_entry: "def() ->commands set(animation, {
			id: 'fbo',
			image: 'fbo',
			x: 0, y: 0, w: area.width, h: area.height,
			scale: 1, frames: 1,
			fbo: c.render(area.width, area.height, [
				c.rectangle(0, 0, area.width, area.height),
				//c.set_source_rgba(school_info.red, school_info.green, school_info.blue, 0.8),
				c.set_source_rgba(0, 0, 0, 1.0),
				c.fill(),
			] +

				if(card.portrait_focus, [
					c.save(),

					c.move_to(area.width/2, 0),
					c.line_to(area.width, 0),
					c.line_to(area.width, area.height),
					c.line_to(area.width/2, area.height),

					c.clip(),

					c.new_path(),

					c.translate((area.width*3)/4, area.height/2),
					c.scale(min([
					  if(card.portrait_focus_width is int, decimal(area_w)/decimal(card.portrait_focus_width), 1.0),
					  if(card.portrait_focus_height is int, decimal(area_h)/decimal(card.portrait_focus_height), 1.0),
					  1.0,
					])) where area_w = area.width/2 where area_h = area.height,
					c.paint_image('images/portraits/' + (card.portrait or 'null'), [-(card.portrait_focus[0]), -(card.portrait_focus[1])]),

					//c.fill(),
					c.restore(),

					c.save(),

					c.rectangle(area.width/2, 0, area.width/4, area.height),
					c.move_to(area.width/2, 0),
					c.line_to((3*area.width)/4, 0),
					c.line_to((3*area.width)/4, area.height),
					c.line_to(area.width/2, area.height),

					c.set_linear_pattern(area.width/2, 0, (3*area.width)/4, 0, [
						{ offset: 0, red: 0, green: 0, blue: 0, alpha: 1.0 },
						{ offset: 1, red: 0, green: 0, blue: 0, alpha: 0.0 }]),
					c.fill(),

					c.restore(),
				], []) +
			[
				c.move_to(0,0),
				c.line_to(area.width, 0),
				c.set_line_width(2.0),
				c.set_source_rgba(1, 1, 1, 1),
				c.stroke(),

				c.move_to(0,area.height),
				c.line_to(area.width, area.height),
				c.set_line_width(2.0),
				c.set_source_rgba(1, 1, 1, 1),
				c.stroke(),

				//c.translate(0, hh where hh = c.text_extents(_font, _font_size, card.name).height),
				c.save(),
				c.translate(px(46), py(4)),
				c.set_font(_font),
				c.set_font_size(_font_size+2),
				c.text_path_in_bounds(card.name, area.width, ['left', 'top']),
				c.set_source_rgba(1, 1, 1, 1),
				c.fill(),
				c.restore(),

				c.save(),
				c.translate(46, area.height - py(4)),
				c.set_font(_font),
				c.set_font_size(_font_size - 2),
				c.text_path_in_bounds(_type_text, area.width, ['left']),
				c.set_source_rgba(1, 1, 1, 1),
				c.fill(),
				c.restore(),

				c.save(),
				c.translate(px(34), py(4)),
				c.set_font(_font),
				c.set_font_size(_font_size - 2),
				c.text_path_in_bounds(str(card.cost + card.loyalty_cost), area.width, ['left', 'top']),
				c.set_source_rgba(1, 1, 1, 1),
				c.fill(),
				c.restore(),

				c.save(),
				c.translate(px(4), area.height/2 + py(6)),
				c.set_font(_font),
				c.set_font_size(_font_size),
				c.text_path_in_bounds(str(count) + 'x', area.width, ['left']),
				c.set_source_rgba(1, 1, 1, 1),
				c.fill(),
				c.restore(),
			] + fold(map(card.school_list,
			[
				c.save(),
				c.translate(px(32 + index*10), area.height/2),
				c.draw_svg('images/icons/' + icon_name, px(12), py(12)),
				c.restore(),
			] where icon_name = lib.citadel.school_info[value].icon), a+b, [])


			where school_info = lib.citadel.school_info[card.first_school])
		} where c = canvas())",
	},

	on_type_updated: "render_entry()",

	on_create: "[
		set(alpha, 0),
		render_entry(),
		set(x2, x2),
		set(y, y),
	]",

	on_being_removed: "[
		remove_object(_card_preview),
	]",

	on_mouse_enter: "[
		set(alpha, 255),
		spawn('card', mid_x - px(220), mid_y + py(40), {
			zorder: 10000,
			in_hand: false,
			card_size: 1.0,
			card_type: card,
			controller: controller,
		}, [
			set(me._card_preview, child),
		])
	] where controller = find_or_die(level.chars, value is obj library_controller)
	
	",
	on_mouse_leave: "[
		remove_object(_card_preview),
		set(_card_preview, null),
		set(alpha, 196)
	]",

	on_click: "[
		swallow_mouse_event(),

		if(mouse_button = 1, controller.add_deck_item(card),
		   mouse_button = 3,
		     if(count <= 1, controller.remove_deck_item(),
			 [
				sound(fname, lib.citadel.sound_volume(fname)) where fname = 'interface/card-remove${1d3}.wav',
			 	add(count, -1),
				bind_command(me.render_entry),
			 ])
		),

		
	] where controller = find_or_die(level.chars, value is obj library_controller)
	  where mouse_button = int<- arg.mouse_button",


	shader: {
		name: "library_deck_entry_shader",

		vertex: "
			uniform mat4 u_mvp_matrix;
			attribute vec4 a_position;
			attribute vec2 a_texcoord;
			varying vec2 v_texcoord;
			void main()
			{
				v_texcoord = a_texcoord;
				gl_Position = u_mvp_matrix * a_position;
			}
		",

		fragment: "
			#version 120
			uniform sampler2D u_tex_map;
			uniform vec4 u_color;
			varying vec2 v_texcoord;
			void main()
			{
				gl_FragColor = texture2D(u_tex_map, v_texcoord);
				if(gl_FragColor[3] < 0.2) {
					gl_FragColor[3] = v_texcoord[0]*1.0;
				}

				gl_FragColor = gl_FragColor * u_color;
			}
		",

		attributes: {
			position: "a_position",
			texcoord: "a_texcoord",
		},

		uniforms: {
			mvp_matrix: "u_mvp_matrix",
			color: "u_color",
		},
	}
}
