{
	id: "library_deck_entry",

	is_strict: true,

	zorder: 500,

	properties: {
		_font: { default: "Ubuntu-L.ttf" },
		_font_size: { default: 14 },

		card: { type: "class card" },

		_type_text: "string :: if(card.creature_object != null, if(card.creature_object.is_construct, 'Land', card.creature_object.is_building, 'Fortification', 'Creature') + if(card.creature_object.is_construct, '', canvas().emdash + str(card.creature_object.attack) + '/' + str(card.creature_object.life)), 'Spell' + if(card.is_response, canvas().emdash + 'Response', ''))",

		area: "{ width: 190, height: 36 }",

		count: { default: 1 },

		pulse: "def() ->commands animate(me, {
			alpha: 255,
		}, {
			duration: 20,

			on_complete: animate(me, {
				alpha: 196,
			}, {
				duration: 20,
			}),
		})",

		render_entry: "def() ->commands set(animation, {
			id: 'fbo',
			image: 'fbo',
			x: 0, y: 0, w: area.width, h: area.height,
			scale: 1, frames: 1,
			fbo: c.render(area.width, area.height, [
				c.rectangle(0, 0, area.width, area.height),
				//c.set_source_rgba(school_info.red, school_info.green, school_info.blue, 0.8),
				c.set_source_rgba(0, 0, 0, 0.6),
				c.fill(),
			] +

				if(card.portrait_focus, [
					c.save(),
					c.scale(0.5),
					c.paint_image('images/portraits/' + card.portrait, [-(card.portrait_focus[0] - area.width), -(card.portrait_focus[1] - area.height)]),
					c.restore(),
				], []) +
			[
				c.move_to(0,0),
				c.line_to(area.width, 0),
				c.set_line_width(2.0),
				c.set_source_rgba(1, 1, 1, 1),
				c.stroke(),

				c.move_to(0,area.height),
				c.line_to(area.width, area.height),
				c.set_line_width(2.0),
				c.set_source_rgba(1, 1, 1, 1),
				c.stroke(),

				//c.translate(0, hh where hh = c.text_extents(_font, _font_size, card.name).height),
				c.save(),
				c.translate(-4, 4),
				c.set_font(_font),
				c.set_font_size(_font_size+2),
				c.text_path_in_bounds(card.name, area.width, ['right', 'top']),
				c.set_source_rgba(1, 1, 1, 1),
				c.fill(),
				c.restore(),

				c.save(),
				c.translate(-4, area.height - 4),
				c.set_font(_font),
				c.set_font_size(_font_size - 2),
				c.text_path_in_bounds(_type_text, area.width, ['right']),
				c.set_source_rgba(1, 1, 1, 1),
				c.fill(),
				c.restore(),

				c.save(),
				c.translate(34, 4),
				c.set_font(_font),
				c.set_font_size(_font_size - 2),
				c.text_path_in_bounds(str(card.cost + card.loyalty_cost), area.width, ['left', 'top']),
				c.set_source_rgba(1, 1, 1, 1),
				c.fill(),
				c.restore(),

				c.save(),
				c.translate(4, area.height/2 + 6),
				c.set_font(_font),
				c.set_font_size(_font_size),
				c.text_path_in_bounds(str(count) + 'x', area.width, ['left']),
				c.set_source_rgba(1, 1, 1, 1),
				c.fill(),
				c.restore(),
			] + fold(map(card.school_list,
			[
				c.save(),
				c.translate(32 + index*10, area.height/2),
				c.scale(12.0/512.0),
				c.draw_svg('images/icons/' + icon_name),
				c.restore(),
			] where icon_name = lib.citadel.school_info[value].icon), a+b, [])


			where school_info = lib.citadel.school_info[card.first_school])
		} where c = canvas())",
	},

	on_type_updated: "render_entry()",

	on_create: "[
		set(alpha, 0),
		render_entry(),
		set(x2, x2),
		set(y, y),
	]",

	on_mouse_enter: "set(alpha, 255)",
	on_mouse_leave: "set(alpha, 196)",


	shader: {
		name: "library_deck_entry_shader",
		create: "[
		]",

		draw: "[
			bind_texture(current_texture, 0),
		]",
		
		vertex: "
			uniform mat4 u_mvp_matrix;
			attribute vec4 a_position;
			attribute vec2 a_texcoord;
			varying vec2 v_texcoord;
			void main()
			{
				v_texcoord = a_texcoord;
				gl_Position = u_mvp_matrix * a_position;
			}
		",

		fragment: "
			#version 120
			uniform sampler2D u_tex_map;
			uniform vec4 u_color;
			varying vec2 v_texcoord;
			void main()
			{
				gl_FragColor = texture2D(u_tex_map, v_texcoord);
				if(gl_FragColor[3] < 0.2) {
					gl_FragColor[3] = v_texcoord[0]*1.0;
				}

				gl_FragColor = gl_FragColor * u_color;
			}
		",

		attributes: {
			vertex: "a_position",
			texcoord: "a_texcoord",
		},

		uniforms: {
			mvp_matrix: "u_mvp_matrix",
			color: "u_color",
		},
	}
}
