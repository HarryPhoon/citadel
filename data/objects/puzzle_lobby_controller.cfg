{
	id: "puzzle_lobby_controller",
	prototype: ["single_lobby_controller_base"],

	types: {
		Puzzle: "{
			name: string,
			portrait: string,
			deck: [string],
			is_advanced: bool,			//distinguish tutorial puzzles and advanced puzzles
			scenario: Scenario,
		}",
	},
	
	properties: {

		_specified_deck: { type: "null|[string]" },
		specified_deck: "null|[string] :: _specified_deck",

		puzzles: "[Puzzle] ::  query_cache(global_cache(1), null, [Puzzle]<- get_document('data/puzzles.cfg'))",

		mouse_enter_avatar: "def(obj deck_avatar avi) ->commands
			animate(avi, {
				halo: 10.0,
			}, {
				duration: 10,
			})
		",

		mouse_leave_avatar: "def(obj deck_avatar avi) ->commands
			animate(avi, {
				halo: 0.0,
			}, {
				duration: 10,
			})
		",

		create_objects: "def() ->commands [
			spawn('label', level_width/2, lib.citadel.py(240), {
				_text: ['Puzzles'],
				_font_size: lib.citadel.py(96),
				_halign: 'center',
				_blend: null,
			}),

			map(puzzles,
				spawn('deck_avatar', {
					mid_x: int(mix(level_width/2 - puzzle_width/2, level_width/2 + puzzle_width/2, if(size(puzzles) > 1, decimal(index)/decimal(size(puzzles)-1), 0.5))),
					y: lib.citadel.py(372),
					_width: lib.citadel.py(160),
					_portrait: value.portrait,
					_name: value.name,
					alpha: 0,
					click_handler: (def(obj deck_avatar avi)->commands
					 set(_specified_deck, value.deck);
					 set(me._current_scenario, value.scenario);
					 me.play_game(value.scenario)),
					mouse_enter_handler: me.mouse_enter_avatar,
					mouse_leave_handler: me.mouse_leave_avatar,
				}, [
					animate(child, {
						alpha: 255,
					}, {
						duration: 20,
					})
				])
			) where puzzle_width = lib.citadel.py(900),

			spawn('button_controller', 0, 0, {
				x2: gui_right_edge - lib.citadel.py(280),
				y2: level_height - lib.citadel.py(32),
				text: 'Back',
				on_click: me.close_tutorial,
			}),
		]",

		close_tutorial: "def()->commands execute(me, [
			title_controller.transition_screen(
			; [
				remove_object(title_controller),
				add_object(title_controller),
				add_object(return_controller),
			],
			false)
		])",

	},

	on_being_added: "[
		create_objects(),
	]",
}
