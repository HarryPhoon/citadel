{
	id: "pause_dialog",

	is_strict: true,
	always_active: true,
	hidden_in_game: true,

	properties: {
		_mm: { type: "obj matchmaking_base" },
		_controller: { type: "obj citadel_controller" },
		_widgets: { type: "[custom_obj]", default: [] },
		_internal_client: { type: "object|null" },
		level_width: "int :: level.dimensions[2]",
		level_height: "int :: level.dimensions[3]",

		_hidden: { type: "bool", default: false },

		_menu_controller: { type: "null|obj game_menu_controller" },

		restart_game: "def() ->commands instrument_command('restart_game', [
			if(_controller.game_setup_message != null, [
				instrument('aaa', set(alpha, 0)),
				instrument('bbb', map(spawned_children, set(value.alpha, 0))),
				instrument('ccc', set(_controller.suppress_disconnect_dialog, true)),
				instrument('ddd', set(_internal_client, cl)),
				instrument('tbs_send', execute(me, tbs_send(cl, setup_message))),
			] where cl = instrument('eee', tbs_internal_client())
			
			  //map the session ID's to increase them all by 16.
			  //otherwise use the same setup message as used
			  //for this game.
			  where setup_message = instrument('setup_message', _controller.game_setup_message + {users: map(([map]<-_controller.game_setup_message.users), value + {session_id: 1 + index})})
			),
		])",

		concede_game: "def() ->commands [
			_controller.concede_game(),
			exit_dialog(),
		]",

		exit_dialog: "def() ->commands [
		    set(_controller.in_background, false),
			remove_object(me),
		]",
	},

	on_create: "if(not _hidden, [
		set(_controller.in_background, true),

		spawn('game_menu_controller', {
			_exclude_from_pause: [me, _controller],

			buttons:

			[{
				text: 'Resume',
				callback: me.exit_dialog,
			}] +
			
			if(_controller.observer, [{
				pad: lib.citadel.py(40),
				text: 'Quit',
				callback: _controller.quit_game,
			}], 

			[{
				text: 'Concede',
				callback: _controller.concede_game,
			}] +
			
		   if(_controller.game_setup_message != null, [ // and _controller.specified_deck = null, [
			{
				text: 'Restart',
				callback: me.restart_game,
			},
			{
				text: 'Quit',
				callback: _controller.quit_game,
				pad: lib.citadel.py(40),
			}
			], [])
			)
			
		}, [
			set(_menu_controller, child)
		]),

	])",

	on_process: "[
		if(_internal_client != null, tbs_process(_internal_client)),
//		_mm.process_matchmaking_connection(),
		_controller.process_connection(),
	]",

	on_settings_menu: "[
		debug('BBB: SETTINGS'),
		remove_object(_menu_controller),
		set(level.show_builtin_settings_dialog, false),
		exit_dialog(),
	]",

	on_message_received: "
	[
		switch(message.type,
		  'game_created',
		  instrument_command('game_created',
		  [
		  	[
				set(level.frame_buffer_shaders, []),
				map(level.chars, remove_object(value)),
				add_object(playable),
			]
		    where playable = object_playable('citadel_controller', 336, 372, 0, {
			_mm_client_state: _controller.get_mm_client_state(),
			game_server_address: '',
			game_server_port: 23456,
			game_setup_message: _controller.game_setup_message,
			session_id: _controller.session_id + 16,
			game_created: true,
			selected_deck: _controller.selected_deck,
			selected_deck_category: _controller.selected_deck_category,
			specified_deck: _controller.specified_deck,
			return_callback: _controller.return_callback,
			respond_to_challenge: _controller.respond_to_challenge,
			campaign_location: _controller.campaign_location,
			campaign_scenario: _controller.campaign_scenario,
			victory_unlock: _controller.victory_unlock,
			client_tutorial_args: _controller.client_tutorial_args,
			_played_start: true,
			_playing_start_anim: false,
		  })
		  ])
		  )
	]
			where message = map<- arg.message
	",

}
