{
	id: "pause_dialog",

	is_strict: true,
	always_active: true,
	hidden_in_game: true,

	properties: {
		_mm: { type: "obj matchmaking_base" },
		_controller: { type: "obj citadel_controller" },
		_widgets: { type: "[custom_obj]", default: [] },
		_internal_client: { type: "object|null" },
		level_width: "int :: level.dimensions[2]",
		level_height: "int :: level.dimensions[3]",

		restart_game: "def() ->commands [
			if(_controller.game_setup_message != null, [
				debug('send restart game message'),
				set(_internal_client, cl),
				execute(me, tbs_send(cl, setup_message))
			] where cl = tbs_internal_client()
			
			  //map the session ID's to increase them all by 16.
			  //otherwise use the same setup message as used
			  //for this game.
			  where setup_message = _controller.game_setup_message + {users: map(([map]<-_controller.game_setup_message.users), value + {session_id: _controller.session_id + 16 + index})}
			),
		]",

		concede_game: "def() ->commands [
			_controller.concede_game(),
			exit_dialog(),
		]",

		exit_dialog: "def() ->commands [
		    set(_controller.in_background, false),
			map(level.chars, if(value.paused or value = _controller, set(value.paused, false), remove_object(value))),
			set(level.frame_buffer_shaders, filter(level.frame_buffer_shaders, value.label != 'pause_dialog_blur')),

		]",
	},

	on_create: "[
		add(level.frame_buffer_shaders, [{
			label: 'pause_dialog_blur',
			begin_zorder: -10000000,
			end_zorder: 12000,
			shader_info: 'citadel_background_blur_hor',
		}]),
		add(level.frame_buffer_shaders, [{
			label: 'pause_dialog_blur',
			begin_zorder: -10000000,
			end_zorder: 12000,
			shader_info: 'citadel_background_blur_ver',
		}]),
		set(_controller.in_background, true),
		[set(c.paused, true) | c <- level.chars, c != me, c != _controller],

		if(_controller.observer,
		  spawn('button_controller', level_width/2, level_height/2 - 25, {
			text: 'Quit',
			on_click: bind(_controller.return_callback,false,null),
			zorder: 20000,
			button_width: 240,
			button_height: 50,
		})),

		if(_controller.observer = false,
		[
		if(_controller.game_setup_message != null and _controller.specified_deck = null,
		  spawn('button_controller', level_width/2, level_height/2 - 75, {
			text: 'Restart',
			on_click: me.restart_game,
			zorder: 20000,
			button_width: 240,
			button_height: 50,
		})),
		  spawn('button_controller', level_width/2, level_height/2 - 25, {
			text: 'Concede',
			on_click: me.concede_game,
			zorder: 20000,
			button_width: 240,
			button_height: 50,
		})
		
		]),

		spawn('button_controller', level_width/2, level_height/2 + 25, {
			text: 'Close',
			on_click: me.exit_dialog,
			zorder: 20000,
			button_width: 240,
			button_height: 50,
		}),

	]",

	on_process: "[
		if(_internal_client != null, tbs_process(_internal_client)),
//		_mm.process_matchmaking_connection(),
		_controller.process_connection(),
	]",

	on_settings_menu: "[
		debug('BBB: SETTINGS'),
		set(level.show_builtin_settings_dialog, false),
		exit_dialog(),
	]",

	on_message_received: "
	[
		switch(message.type,
		  'game_created',
		  [
		  teleport('level1.cfg', '', 'instant', playable)
		    where playable = object_playable('citadel_controller', 336, 372, 0, {
			_mm_client_state: _controller.get_mm_client_state(),
			game_server_address: '',
			game_server_port: 23456,
			game_setup_message: _controller.game_setup_message,
			session_id: _controller.session_id + 16,
			game_created: true,
			selected_deck: _controller.selected_deck,
			return_callback: _controller.return_callback,
			campaign_location: _controller.campaign_location,
			campaign_scenario: _controller.campaign_scenario,
			victory_unlock: _controller.victory_unlock,
		  })
		  ])
	]
			where message = map<- arg.message
	",

}
