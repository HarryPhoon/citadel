{
	id: "channeling_widget",

	is_strict: true,

	zorder: 20000,
	always_active: true,

	properties: {
		dialog: { type: "obj channeling_dialog" },
		_width: { type: "int" },
		_height: { type: "int" },
		_font_size: "int :: int(_height*0.8)",

		_color: "[decimal,decimal,decimal] ::
			hsv_to_rgb([hsv.x + hue_shift, hsv.y, hsv.z + if(selected, 0.0, -0.4)])

			where hsv = rgb_to_hsv([0.49, 0.94, 1.0])
		",

		hue_shift: { type: "decimal" },
		
		number: { type: "int" },

		selected: {
			type: "bool",
			default: false,
		},

		render: "def() ->commands
		set(animation,
		lib.citadel.render_frame(c, _width, _height, [
			c.set_source_color(_color),
			c.rectangle(0, 0, _width, _height),
			c.fill(),

			c.set_line_width(_height*0.02),
			c.set_source_color([0,0,0,1]),
			c.rectangle(0, 0, _width, _height),
			c.stroke(),

			c.set_source_color(if(selected, [1,1,1,1], [0,0,0,1])),

			map(fragments, [
				c.save(),
				c.translate(_width/2 - value.width/2, _height/2 - value.height/2),
				value.path,
				c.fill(),
				c.restore(),
			])

			where fragments = c.markup_text(sprintf(q(<font size='%d'><b>%d</b></font>), _font_size, number), 1000)
		])
		)
		where c = canvas()
		",
	},

	events: {
		create: "render()",

		click: "[swallow_mouse_event(), if(mouse_button = 1, dialog.channel(number))]
		where mouse_button = int<- arg.mouse_button",

		mouse_enter: "set(selected, true); render(); dialog.mouseover_channel(number)",
		mouse_leave: "set(selected, false); render(); if(find(level.chars, value is obj channeling_widget and value.selected) = null, dialog.mouseover_channel(0))",
	},
}
