{
	id: "connection_status_display",
	is_strict: true,

	properties: {
		info: {
			type: "{ color: string, summary: string, report: string }",
			set: "if(_data != value, set(_data, value); [if(_tip, _spawn_tip()), render()])",
			default: { color: 'white', summary: '', report: '' },
		},

		render: "def() ->commands
		[
		set(animation,
		lib.gui.render_frame(c, _width, _height, [
			c.set_source_color('black'),
			c.rectangle(0, 0, _width, _height),
			c.fill(),

			c.set_source_color('white'),
			c.arc(0.5*_height, 0.5*_height, 0.45*_height, 0, 2*3.15),
			c.fill(),

			c.set_source_color(info.color),
			c.arc(0.5*_height, 0.5*_height, 0.38*_height, 0, 2*3.15),
			c.fill(),

			c.translate(_height*1.2, _height*0.06),

			c.set_source_color('white'),

			map(fragments, [
				c.save(),
				value.path,
				c.fill(),
				c.restore(),
			]) where fragments = c.markup_text(sprintf(q(<font size='12'>%s</font>), info.summary), { width: _width, scale: lib.gui.dpy(1.0) })
		])
		)
		where c = canvas(),
		]
		",

		_width: "int :: lib.gui.py(128)",
		_height: "int :: lib.gui.py(16)",

		_tip: {
			type: "null|obj tooltip",
			set: "if(_data != value, [
				remove_object(_data),
				set(_data, value),
			])",
		},

		_spawn_tip: "def() ->commands
		if(info.report,
			spawn('tooltip', {
				text: info.report,
				y2: y,
				x: x,
			}, [
				set(_tip, child),
			])
		)
		",
	},

	events: {
		create: "render()",
		mouse_enter: "
			_spawn_tip()
		",

		mouse_leave: "
			set(_tip, null)
		",
	},
}
