{
	id: "crawl_shop_screen",
	is_strict: true,

	zorder: 10000,

	properties: {
		screen_width: "int :: level.dimensions[2]",
		screen_height: "int :: level.dimensions[3]",

		_widgets: { type: "[custom_obj]", default: [] },

		_card_obj: { type: "[obj card]", default: [] },

		cards: { type: "[{ card: string, price: int, sold_out: null|bool }]" },

		leave: "def() ->commands
		[
			set(finished, true),
			remove_object(me),
		]
		",

		mouseover_card: "def(int n) ->commands
		if(is_active,
		[
			animate(c, {
				card_size: 2.5,
				zorder: 11000,
			}, {
				duration: 12,
				on_complete: ; c.show_halo(),
			})
		]
		where c = _card_obj[n]
		)
		",

		mouseoff_card: "def(int n) ->commands
		if(is_active,
		[
			c.hide_halo(),
			animate(c, {
				card_size: 1.5,
				zorder: 10010,
			}, {
				duration: 12,
				on_complete: ; c.hide_halo(),
			})
		]
		where c = _card_obj[n]
		)
		",

		click_card: "def(int n) ->commands
		if(is_active and lib.citadel.crawl_state_or_die.player_gold >= cards[n].price and (not cards[n].sold_out),
		[
			set(cards[n].sold_out, true),
			add(lib.citadel.crawl_state_or_die.player_deck, [cards[n].card]),
			add(lib.citadel.crawl_state_or_die.player_gold, -cards[n].price);
			spawn_labels(),

			animate(c, {
				card_size: 1.5,
				mid_x: lib.gui.py(1200),
				mid_y: lib.gui.py(-200),
			}, {
				duration: 20,
			})
		]
		where c = _card_obj[n]
		)
		",

		finished: { type: "bool", default: false },
		is_active: { type: "bool", default: true },

		render: "def() ->commands
		set(animation, {
			id: 'fbo',
			image: 'fbo',
			x: 0, y: 0, w: ww, h: hh,
			scale: 1.0,
			frames: 1,
			duration: -1,
			fbo: c.render(ww, hh, [

				c.rectangle(0, 0, ww, hh),
				c.set_source_rgba(0.0, 0.0, 0.0, 0.5),
				c.fill(),

				c.set_source_color('white'),

				[
				c.translate(ww/2 - fragments[0].x_advance/2, lib.gui.py(12)),
				map(fragments, [
					c.save(),
					value.path,
					c.fill(),
					c.restore(),
				])
				]

				where fragments = c.markup_text(sprintf(q(<font size='38'>Shop</font>)),
			                                {width: lib.gui.py(256), scale: 1.0}),
				
			])
		}
		)
		where ww = dimensions.x
		where hh = dimensions.y
		where c = canvas()
		",

		spawn_objects: "def() ->commands
		[
		map(cards,
			spawn('card', {
				mid_x: screen_width/2 + (col-1)*lib.gui.py(400),
				mid_y: screen_height/2 + (row-1)*lib.gui.py(240),
				zorder: zorder+10,
				card_type: lib.citadel.create_card(value.card),
				in_hand: false,
				allow_drag: false,
				card_size: 1.5,
				show_shadow: true,
				use_absolute_screen_coordinates: true,
				mouse_enter_handler: (def() ->commands mouseover_card(index)),
				mouse_leave_handler: (def() ->commands mouseoff_card(index)),
				click_handler: (def() ->commands click_card(index)),
			}, [
				add(_widgets, [child]),
				add(_card_obj, [child]),
			])

			where col = index%3
			where row = index/3
		),

		spawn_labels(),
		]
		",

		_labels: { type: "[obj label]", default: [] },

		spawn_labels: "def() ->commands
		[
			map(_labels, remove_object(value)),

			map(cards,
				spawn('label', {
					mid_x: screen_width/2 + (col-1)*lib.gui.py(400) + lib.gui.py(130),
					mid_y: screen_height/2 + (row-1)*lib.gui.py(240) + lib.gui.py(100),
					zorder: zorder+8,
					_text: [sprintf('%d Gold', value.price)],
					_font_size: lib.gui.py(16),
					_color: if(value.price <= lib.citadel.crawl_state_or_die.player_gold, [1,1,1,1], [1,0,0,1]),
				}, [
					add(_labels, [child]),
					add(_widgets, [child]),
				])
				where col = index%3
				where row = index/3
			)
		]",

		dimensions: "[int,int] :: [lib.gui.py(1300), lib.gui.py(820)]",
	},

	events: {
		create: "[
/*
			spawn('label', {
				mid_x: level.dimensions[2]/2,
				mid_y: lib.gui.py(100),
				_text: ['Shop'],
				_font_size: lib.gui.py(44),
				_color: [1,1,1,1],
				zorder: zorder,
				_bg_color: [0,0,0,0.6],
			}, [
				add(_widgets, [child]),
			]);
*/
			render();

			set(mid_x, screen_width/2);
			set(mid_y, screen_height/2);

			spawn_objects();

			spawn('button_controller', {
				text: 'Leave',
				x2: screen_width - lib.gui.py(20),
				y2: screen_height - lib.gui.py(20),
				button_width: lib.gui.py(160),
				button_height: lib.gui.py(40),
				on_click: leave,
				use_absolute_screen_coordinates: true,
				color_scheme: lib.citadel.library_color_scheme,
				zorder: 12000,
			}, [
				add(_widgets, [child]),
			])
			
		]",

		being_removed: "map(_widgets, remove_object(value))",
	},
}
