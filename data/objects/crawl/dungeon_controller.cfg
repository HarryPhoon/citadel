{
	id: "dungeon_controller",
	is_strict: true,

	types: {
		Chamber: "{
			loc: Loc,
			xpos: decimal,
			ypos: decimal,
			width: decimal,
			height: decimal,
			stairway: bool,
			is_side_passage: null|bool,
			dir: null|Loc,

			//directional exits
			exits: [{ dir: Loc, dst: Loc }],
		}",

		ChamberEncounter: "{
			loc: Loc,
			room_index: int,
			scenario: Scenario,
			avatar: obj player_avatar,
		}",
	},

	properties: {

		_nodes: "[CampaignDialogNode] ::
		filter(
		map(_encounter.get_options(),
			if(value.goto != null, lib.campaign_encounter.get_campaign_dialog_node(value.goto))
		),
		value != null
		)
		",

		_battles: "[CampaignDialogNode] ::
		filter(_nodes, value.battle != null)
		",

		_encounter: { type: "class campaign_encounter" },
		_dungeon: { type: "CampaignDungeon" },

		create_encounters: "def() ->[ChamberEncounter]

		map(battles,
		{
			loc: chamber.loc,
			room_index: index(_chambers, chamber),
			avatar: object('player_avatar', {
				player_num: 1,
				is_enemy: true,
				_avatar: scenario.avatar,
				zorder: zorder+8,
				_nick: '',
				_width: lib.gui.py(_player_avatar_dim),
				_height: lib.gui.py(_player_avatar_dim),
				facing: 1,
				current_desaturation: 0.0,
				target_desaturation: 0.0,
				clip_area_absolute: true,
			}),

			scenario: scenario,
			
		}
		where scenario = Scenario<- (if(value.map, lib.maps.get_map(value.map), {}) + (Scenario<- value.battle))
		where chamber = chambers[main_passage_index]
		where main_passage_index = clamp((index*size(main_passage))/size(battles), 0, size(main_passage)-1)
		)

		where main_passage = filter(chambers, not value.is_side_passage)
		where chambers = _chambers[1:]
		where battles = _battles
		",

		_animation_time: { type: "int", default: 0 },

		is_animating: "bool :: _animation_time > 0",
		reserve_animation_time: "def(int ncycles) ->commands
			set(_animation_time, max(_animation_time, ncycles))
		",

		_player_avatar_dim: "int :: 48",

		controller: { type: "obj title_controller" },
		player: {
			type: "obj player_avatar",
			init: "
				object('player_avatar', {
					player_num: 0,
					_avatar: controller.account_info.avatar,
					zorder: zorder+10,
					_nick: '',
					_width: lib.gui.py(_player_avatar_dim),
					_height: lib.gui.py(_player_avatar_dim),
					facing: 1,
					current_desaturation: 0.0,
					target_desaturation: 0.0,
				})
			",
		},

		_encounters: {
			type: "[ChamberEncounter]",
			init: "create_encounters()",
		},

		_accessible_rooms: "[Chamber] ::
			if(is_animating or room_index >= size(_chambers), [],
				map(chamber.exits, find_or_die(_chambers, value.loc = context.value.dst))
				where chamber = _chambers[room_index]
			)
		",

		_highlight_areas: "[[decimal,decimal,decimal,decimal]] ::
			map(_accessible_rooms, [
				(value.xpos  - value.width*0.5)/dimensions.x,
				(value.ypos  - value.height*0.5)/dimensions.y,
				(value.xpos  + value.width*0.5)/dimensions.x,
				(value.ypos  + value.height*0.5)/dimensions.y,
			])
		",

		highlight_chamber_0: "[decimal,decimal,decimal,decimal] :: if(n >= size(a), [0.0,0.0,0.0,0.0], _highlight_areas[n]) where a = _highlight_areas where n = 0",
		highlight_chamber_1: "[decimal,decimal,decimal,decimal] :: if(n >= size(a), [0.0,0.0,0.0,0.0], _highlight_areas[n]) where a = _highlight_areas where n = 1",
		highlight_chamber_2: "[decimal,decimal,decimal,decimal] :: if(n >= size(a), [0.0,0.0,0.0,0.0], _highlight_areas[n]) where a = _highlight_areas where n = 2",
		highlight_chamber_3: "[decimal,decimal,decimal,decimal] :: if(n >= size(a), [0.0,0.0,0.0,0.0], _highlight_areas[n]) where a = _highlight_areas where n = 3",

		selected_chamber_area: "[decimal,decimal,decimal,decimal] ::
		if(n = -1, [0.0,0.0,0.0,0.0], _highlight_areas[n])
		where n = selected_chamber
		",

		selected_chamber: "int ::

		index(_highlight_areas, chamber)

		where chamber = find(_highlight_areas, pos.x > value[0] and pos.x < value[2] and pos.y > value[1] and pos.y < value[3])
		where pos = screen_pos_to_uv([mouse_pos.x,mouse_pos.y])
		where mouse_pos = lib.gui.mouse_pos(level)
		",

		player_pos: { type: "[decimal,decimal]", default: [0.0,0.0], change: "_update_player_pos()" },

		_update_player_pos: "def() ->commands
		[
		set(player.mid_xy, target_pos)
		]
			where target_pos = pos_on_canvas(player_pos)
		",

		_update_encounter_pos: "def() ->commands
		[
			map(_encounters, set(value.avatar.mid_xy, pos_on_canvas(if(value = _current_encounter, _current_encounter_pos, room_pos(value.room_index))))),
			map(_encounters, set(value.avatar.clip_area, [x, y, img_w, img_h])),
		]",

		_current_encounter: { type: "null|ChamberEncounter" },
		_current_encounter_pos: { type: "[decimal,decimal]", default: [0.0,0.0] },

		room_index: { type: "int", default: 0 },

		_focus_pos_current: { type: "null|[decimal,decimal]" },

		_focus_pos_target: "[decimal,decimal] ::
		if(room_index >= size(_chambers),
		   [0.0,0.0],
		   [max(1024.0/zoom, chamber.xpos)/decimal(dimensions.x),chamber.ypos/decimal(dimensions.y)]
		   where chamber = _chambers[room_index]
		)",

		focus_pos: "[decimal,decimal] ::
		if(_focus_pos_current = null, _focus_pos_target, _focus_pos_current)
		",

		screen_pos_to_uv: "def([int,int] pos) ->[decimal,decimal]
		[
			focus_pos.x - (decimal(mid_x - pos.x)/dimensions.x)/(zoom*_texture_scale),
			focus_pos.y - (decimal(mid_y - pos.y)/dimensions.y)/(zoom*_texture_scale),
		]
		",

		pos_on_canvas: "def([decimal,decimal] pos) ->[int,int]
		   [int(mid_x + (pos.x - focus_pos.x*dimensions.x)*zoom*_texture_scale), int(mid_y + (pos.y - focus_pos.y*dimensions.y)*zoom*_texture_scale)]
		",

		room_pos: "def(int n) ->[decimal,decimal]
		if(n >= size(_chambers), [0.0,0.0], [chamber.xpos, chamber.ypos] where chamber = _chambers[n])
		",

		zoom: { type: "decimal", default: 2.0 },

		dimensions: "Loc :: [2048,2048]",
		chamber_dim: "[decimal,decimal] :: [156.0,156.0]",
		passage_width: "decimal :: 0.3",

		_min_y: "int :: -2",
		_max_y: "int :: 2",
		_min_x: "int :: 0",
		_max_x: "int :: 4",

		_loc_on_board: "def(Loc loc) ->bool
			loc.x >= _min_x and loc.x <= _max_x and
			loc.y >= _min_y and loc.y <= _max_y
		",

		_up_dir: "Loc :: [0,-1]",
		_down_dir: "Loc :: [0,1]",
		_forward_dir: "Loc :: [1,0]",

		_apply_dir: "def(Loc loc, Loc dir) ->Loc [loc.x+dir.x, loc.y+dir.y]",

		_chambers: { type: "[Chamber]", init: "create_chambers()" },

		_generate_main_path_chamber: "def([Chamber] main_path) ->null|Chamber

		if(dir,
		{
			xpos: new_xpos,
			ypos: new_ypos,
			loc: _apply_dir(chamber.loc, dir),
			width: chamber_dim.x,
			height: chamber_dim.y,
			stairway: (new_xpos >= dimensions.x - chamber_dim.x or size(main_path) >= 8),
			dir: dir,

			exits: [],
		}

		where new_xpos = chamber.xpos + dir.x*chamber_dim.x*2.0
		where new_ypos = chamber.ypos + dir.y*chamber_dim.y*2.0
		)

		where dir = choose(possible_dir)
		where possible_dir = filter(all_possible_dir, _loc_on_board(dst) and find(main_path, value.loc = dst) = null where dst = _apply_dir(chamber.loc, value))
		where all_possible_dir = [_forward_dir]*3 + [_up_dir, _down_dir]
		
		where chamber = main_path[size(main_path)-1]
		",

		_create_chambers_internal: "def([Chamber] main_path) ->[Chamber]
		if(new_chamber = null or new_chamber.stairway, path, _create_chambers_internal(path))
		where path = if(new_chamber, main_path + [new_chamber], main_path[:size(main_path)-1] + [main_path[size(main_path)-1] + {stairway: true}])
		where new_chamber = _generate_main_path_chamber(main_path)
		",

		_generate_side_passages: "def([Chamber] chambers, int n) ->[Chamber]
		modified_source_chambers + new_chambers
			where modified_source_chambers = [Chamber]<- map(mod_chambers,
			if(value != current, value,
				current + {
					exits: current.exits + map(dirs, {dir: value, dst: dst.loc}
					  where dst = find_or_die(new_chambers + mod_chambers, value.loc = _apply_dir(current.loc, context.value))
					),
				}
			)
			)

		    where new_chambers = [Chamber] :: map(filter(dirs, find(chambers, value.loc = _apply_dir(current.loc, context.value)) = null), {
				loc: loc,
				xpos: chamber_dim.x*2 + loc.x*chamber_dim.x*2.0,
				ypos: dimensions.y/2.0 + loc.y*chamber_dim.y*2.0,
				width: chamber_dim.x,
				height: chamber_dim.y,
				stairway: false,
				is_side_passage: true,
				dir: value,
				exits: [{
					dir: [-value.x,-value.y],
					dst: current.loc,
				}],
			}
			where loc = _apply_dir(current.loc, value)
			)
			where mod_chambers = [Chamber]<-
			  map(chambers, value +
			                if(connecting_dir != null, {
								exits: value.exits + [{dir: [-connecting_dir.x,-connecting_dir.y], dst: current.loc}]
							}, {}
							) where connecting_dir = find(dirs, context.value.loc = _apply_dir(current.loc, value))
			  )
			where dirs = [Loc] :: filter(possible_dirs, current.stairway = false and 1d100 - index > 70)
			//we can go in any direction that is on the board, and we must be going to or from a side passage or to a new chamber
			where possible_dirs = filter(all_dirs, _loc_on_board(_apply_dir(current.loc, value)) and
			                    (target_chamber = null or target_chamber.is_side_passage or current.is_side_passage)
								where target_chamber = find(chambers, value.loc = _apply_dir(current.loc, context.value))
						 )
			where all_dirs = [[-1,0], [1,0], [0,-1], [0,1]]
			where current = chambers[n]
		",

		_generate_all_side_passages: "def([Chamber] chambers, int n=0) ->[Chamber]
			if(n >= size(chambers),
			   chambers,
			   _generate_all_side_passages(_generate_side_passages(chambers, n), n+1)
			)
		",

		create_chambers: "def() ->[Chamber]

		_generate_all_side_passages(
			map(main_path, value + {
				exits:
				  if(prev_chamber, [{ dst: prev_chamber.loc, dir: [prev_chamber.loc.x - value.loc.x, prev_chamber.loc.y - value.loc.y] }], []) +
				  if(next_chamber, [{ dst: next_chamber.loc, dir: [next_chamber.loc.x - value.loc.x, next_chamber.loc.y - value.loc.y] }], [])
			}

			where prev_chamber = if(index > 0, main_path[index-1])
			where next_chamber = if(index < size(main_path)-1, main_path[index+1])
			)
		)

		where main_path = _create_chambers_internal([first_chamber])

		where first_chamber = {
			loc: [0,0],
			xpos: chamber_dim.x*2,
			ypos: dimensions.y/2.0,
			width: chamber_dim.x,
			height: chamber_dim.y,
			stairway: false,
			exits: [],
		}
		",

		_draw_passage: "def(cairo_callable c, Chamber src, Chamber dst, Loc dir) ->[cairo_op]
		[
			c.move_to(src.xpos + (dir.x or -passage_width)*src.width/2.0, src.ypos + (dir.y or -passage_width)*src.width/2.0),
			c.line_to(dst.xpos + (-dir.x or -passage_width)*dst.width/2.0, dst.ypos + (-dir.y or -passage_width)*dst.width/2.0),

			c.move_to(src.xpos + (dir.x or passage_width)*src.width/2.0, src.ypos + (dir.y or passage_width)*src.width/2.0),
			c.line_to(dst.xpos + (-dir.x or passage_width)*dst.width/2.0, dst.ypos + (-dir.y or passage_width)*dst.width/2.0),
			c.stroke(),
		]
		",

		_draw_chamber_wall: "def(cairo_callable c, Chamber chamber, Loc dir) ->[cairo_op]
		[
			c.move_to(chamber.xpos + (dir.x or -1)*chamber.width/2.0, chamber.ypos + (dir.y or -1)*chamber.width/2.0),
		] +

		if(find(chamber.exits, value.dir = dir) != null, [
			c.line_to(chamber.xpos + (dir.x or -passage_width)*chamber.width/2.0, chamber.ypos + (dir.y or -passage_width)*chamber.width/2.0),
			c.move_to(chamber.xpos + (dir.x or passage_width)*chamber.width/2.0, chamber.ypos + (dir.y or passage_width)*chamber.width/2.0),
		], [
		]) +

		[
			c.line_to(chamber.xpos + (dir.x or 1)*chamber.width/2.0, chamber.ypos + (dir.y or 1)*chamber.width/2.0),
			c.stroke(),
		]
		",

		_texture_scale: "decimal :: lib.gui.dpy(0.4)",

		render: "def() ->commands
		set(animation, {
			id: 'fbo',
			image: 'fbo',
			x: 0,
			y: 0,
			w: ww,
			h: hh,
			scale: _texture_scale,
			frames: 1,
			duration: -1,
			fbo: c.render(ww, hh, [
			c.paint_image('images/textures/stone-1.png'),

			c.set_line_width(5.0),
			c.set_source_color('white'),

			map(_chambers, [
				c.set_source_color(if(value.is_side_passage, [1.0,1.0,1.0,0.4], [1.0,1.0,1.0,1.0])),
				_draw_chamber_wall(c, value, [0,-1]),
				_draw_chamber_wall(c, value, [1,0]),
				_draw_chamber_wall(c, value, [0,1]),
				_draw_chamber_wall(c, value, [-1,0]),

				map(filter(value.exits, value.dir.x > 0 or value.dir.y > 0),
					_draw_passage(c, context.value, find_or_die(_chambers, value.loc = context.value.dst), value.dir)
				),
			]),
			//c.rectangle(0,0,2048,2048),
			//c.set_source_color('white'),
			//c.fill(),
		])
		}
		)
		where ww = dimensions.x
		where hh = dimensions.y
		where c = canvas()
		",

		return_from_game: "def(bool result, null|class game_state state) ->commands [
			set(ctrl.return_from_game_override, null),
			add_object(me),

			animate(me, {
				zoom: 2.0,
			}, {
				duration: 20,
			}),

			set(player_pos, room_pos(room_index)),

			add_object(player),

			player.scale_dim(lib.gui.py(_player_avatar_dim), lib.gui.py(_player_avatar_dim), 20),

			set(_encounters, filter(_encounters, value.room_index != room_index));
			map(_encounters, add_object(value.avatar)),
		]
		where ctrl = find_or_die(level.chars, value is obj title_controller)
		",
	},

	events: {
		create: "
			render();
			add_object(player);
			set(player_pos, room_pos(0));
			map(_encounters, add_object(value.avatar))
		",

		process: "[
			_update_player_pos(),
			_update_encounter_pos(),

			set(_focus_pos_current, mix(focus_pos, _focus_pos_target, 0.02)),

			if(_animation_time > 0,
				add(_animation_time, -1)
			),
		]",

		click: "
			if(selected_chamber != -1,
				if(encounter = null, [
					set(room_index, new_room_index);
					animate(me, {
						player_pos: room_pos(room_index),
					}, {
						name: 'move_player',
						replace_existing: true,
						duration: 40,
					});

					reserve_animation_time(40)
				], [
					set(room_index, new_room_index);
					animate(me, {
						player_pos: target_pos,
					}, {
						name: 'move_player',
						replace_existing: true,
						duration: 40,
					});

					set(_current_encounter, encounter);
					set(_current_encounter_pos, encounter_pos);

					player.scale_dim(lib.gui.py(_player_avatar_dim*2), lib.gui.py(_player_avatar_dim*2), 60);
					encounter.avatar.scale_dim(lib.gui.py(_player_avatar_dim*2), lib.gui.py(_player_avatar_dim*2), 60);

					schedule(50, ;
						spawn('sweat_effect', {
							zorder: encounter.avatar.zorder-5,
							mid_x: encounter.avatar.mid_x,
							mid_y: encounter.avatar.mid_y - lib.gui.py(40),
							_tile_height_override: lib.gui.py(96),
							targets: [encounter.avatar],
						});

						set(ctrl.return_from_game_override, me.return_from_game);

						ctrl.play_single_player_game(
						encounter.scenario
						)
					)
						where ctrl = find_or_die(level.chars, value is obj title_controller);

					animate(me, {
						zoom: 4.0,
					}, {
						duration: 60,
					});

					schedule(30,
						animate(me, {
							_current_encounter_pos: encounter_move_back_pos,
						}, {
							duration: 6,
						})
					);

					reserve_animation_time(40)

				]

				where encounter_move_back_pos = [encounter_pos.x + pos_diff.x, encounter_pos.y + pos_diff.y]
				where pos_diff = [encounter_pos.x - target_pos.x, encounter_pos.y - target_pos.y]
				where target_pos = mix(starting_pos, encounter_pos, 0.9)
				where starting_pos = player_pos
				where encounter_pos = room_pos(encounter.room_index)
				)
			where encounter = find(_encounters, value.room_index = new_room_index)
			where new_room_index = index(_chambers, _accessible_rooms[selected_chamber])
			)
		",
	},

	shader: {
		name: "dungeon_controller",
		vertex: "
		uniform mat4 u_anura_mvp_matrix;
		uniform vec2 u_property_focus_pos;
		uniform float u_property_zoom;
        attribute vec4 a_anura_vertex;
        attribute vec2 a_anura_texcoord;
        varying vec2 v_texcoord;
		void main()
		{
			vec2 center_texcoord = vec2(0.5, 0.5);

			vec2 delta_center = a_anura_texcoord - center_texcoord;
			delta_center /= u_property_zoom;

            v_texcoord = u_property_focus_pos + delta_center;
            gl_Position = u_anura_mvp_matrix * a_anura_vertex;
		}
		",

		fragment: "
        uniform sampler2D u_anura_tex_map;
		uniform float u_anura_cycle;
		uniform vec4 u_property_highlight_chamber_0;
		uniform vec4 u_property_highlight_chamber_1;
		uniform vec4 u_property_highlight_chamber_2;
		uniform vec4 u_property_highlight_chamber_3;
		uniform vec4 u_property_selected_chamber_area;
		varying vec2 v_texcoord;

        void main()
        {
			vec4 col = vec4(0.0, 0.0, 0.0, 0.0);
			for(float i = -1.0; i <= 1.0; i += 1.0) {
				for(float j = -1.0; j <= 1.0; j += 1.0) {
					col += texture2D(u_anura_tex_map, v_texcoord + vec2(i,j)/2048.0);
				}
			}

			gl_FragColor = col/9.0;

			if(v_texcoord.x >= u_property_selected_chamber_area[0] && v_texcoord.x <= u_property_selected_chamber_area[2] && v_texcoord.y >= u_property_selected_chamber_area[1] && v_texcoord.y <= u_property_selected_chamber_area[3]) {
				gl_FragColor.g = 1.0; //.rgb += vec3(1,1,1)*d;
			} else
			if(
				v_texcoord.x >= u_property_highlight_chamber_0[0] && v_texcoord.x <= u_property_highlight_chamber_0[2] && v_texcoord.y >= u_property_highlight_chamber_0[1] && v_texcoord.y <= u_property_highlight_chamber_0[3] ||
				v_texcoord.x >= u_property_highlight_chamber_1[0] && v_texcoord.x <= u_property_highlight_chamber_1[2] && v_texcoord.y >= u_property_highlight_chamber_1[1] && v_texcoord.y <= u_property_highlight_chamber_1[3] ||
				v_texcoord.x >= u_property_highlight_chamber_2[0] && v_texcoord.x <= u_property_highlight_chamber_2[2] && v_texcoord.y >= u_property_highlight_chamber_2[1] && v_texcoord.y <= u_property_highlight_chamber_2[3] ||
				v_texcoord.x >= u_property_highlight_chamber_3[0] && v_texcoord.x <= u_property_highlight_chamber_3[2] && v_texcoord.y >= u_property_highlight_chamber_3[1] && v_texcoord.y <= u_property_highlight_chamber_3[3]
			) {
				float d = 0.5 + sin(u_anura_cycle*0.1)*0.5;
				gl_FragColor.r = mix(gl_FragColor.r, 1.0, 0.5 + d*0.1); //.rgb += vec3(1,1,1)*d;
			}

			gl_FragColor.a *= 0.7;
		}
		",
	},
}
