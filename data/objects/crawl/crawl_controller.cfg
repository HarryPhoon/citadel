{
	id: "crawl_controller",
	is_strict: true,
	mouse_drag_threshold: 5,

	types: {
		CrawlChamberType: "enum { crawl_entry, crawl_fight, crawl_elite, crawl_random, crawl_treasure, crawl_shop, crawl_empty }",
		CrawlChamber: "{
			chamber_type: CrawlChamberType,
			exits: [int],
			xpos: decimal,
			ypos: decimal,
			obj: null|obj game_icon,
			floor_num: int,
			room_num: int,

			risk_reward: null|int,
		}",
	},

	properties: {
		session_uuid: { type: "string", init: "generate_uuid()" },

		state: { type: "class crawl_state" },

		num_floors: { type: "int", default: 20 },
		rooms_per_floor: { type: "int", default: 5 },

		_chambers: {
			type: "[[CrawlChamber]]",
			init: "
			map(range(num_floors),
				map(range(rooms_per_floor), {
					chamber_type: enum crawl_entry, //choose([enum crawl_fight]), //, enum crawl_elite, enum crawl_random, enum crawl_treasure, enum crawl_shop]),
					exits: if(floor_num = num_floors-1, [], [index]),
					xpos: decimal(index) / decimal(rooms_per_floor-1.0),
					ypos: 1.0 - decimal(floor_num) / decimal(num_floors-1.0),
					floor_num: floor_num,
					room_num: index,
				})

				where floor_num = index
			)",
		},

		_active_game_icons: { type: "[obj game_icon]", default: [] },

		create_map: "def() ->commands

			map(range(120),
				;
				if(room_num not in _chambers[floor_num][room_num+branch_dir].exits,
					set(_chambers[floor_num][room_num].exits, unique(sort(_chambers[floor_num][room_num].exits + [room_num + branch_dir])))
				)

				where branch_dir = if(room_num > 0 and (1d2 = 1 or room_num = rooms_per_floor-1), -1, 1)
				where room_num = 1d(rooms_per_floor)-1
				where floor_num = 1d(num_floors-1)-1
			);

			//the first floor has just one room where the player enters
			map(_chambers[0], if(index != 3, [
				set(value.chamber_type, enum crawl_empty),
				set(value.exits, []),
			]));

			set(_chambers[0][3].exits, shuffle(range(5))[:2+1d2]);
			set(_chambers[0][3].xpos, 0.5);

			//randomly remove some forward paths in favor of branch only.
			map(_chambers,
				map(value,
					if(size(value.exits) > 1 and (1d100 < 50),
						set(value.exits, filter(value.exits, value != context.index))
					)
				)
			);

			//get rid of orphaned chambers
			map(_chambers[1:],
			;
				map(value,
					if(entry = null, [
						set(value.exits, []),
						set(value.chamber_type, enum crawl_empty),
					])
					where entry = find(_chambers[floor_num-1], room_num in value.exits)
					where room_num = index
				)
				where floor_num = index+1
			);

			map(_chambers[1:],
				map(live_chambers, set(value.xpos, index/decimal(size(live_chambers)-1)))
				where live_chambers = filter(value, value.chamber_type != enum crawl_empty)
			);

			_set_chamber_types()
		",

		_set_chamber_types: "def() ->commands
			map(_chambers[1:], map(value, if(value.chamber_type != enum crawl_empty, set(chamber.chamber_type, choose([enum crawl_fight, enum crawl_fight, enum crawl_random])) where chamber = value)));

			//place some shops
			map([choose([3,4,5]), choose([8,9,10]), choose([14,15,16])],
				if(shop_chamber != null,
					set(shop_chamber.chamber_type, enum crawl_shop)
				)
				where shop_chamber = choose(filter(_chambers[floor_num], value.chamber_type in [enum crawl_fight, enum crawl_random]))
				where floor_num = value
			);

			//place some elites
			map([6,12,18],
			[
				map([elite_chamber] + sister_chambers, set(value.chamber_type, enum crawl_elite)),
				map(elite_chamber.exits, set(_chambers[floor_num+1][value].chamber_type, enum crawl_treasure)),
			]
			where sister_chambers = _chamber_sister_rooms(floor_num, elite_chamber.room_num)
			where elite_chamber = choose(chambers)
			where chambers = filter(_chambers[floor_num], value.chamber_type != enum crawl_empty)
			where floor_num = value);

			//place some random treasures
			map([choose([3,4,5]), choose([8,9,10]), choose([14,15,16])],
				map(_chambers[value], if(value.chamber_type in [enum crawl_fight, enum crawl_random], set(value.chamber_type, enum crawl_treasure)))
			);
			_calculate_chamber_risk_reward()
		",

		_chamber_sister_rooms: "def(int floor_num, int chamber_num) ->[CrawlChamber]
			filter(_chambers[floor_num], index != chamber_num and find(value.exits, value in chamber.exits) != null)
			where chamber = _chambers[floor_num][chamber_num]
		",

		_calculate_chamber_risk_reward: "def() ->commands
			map(_chambers, map(value, set(value.risk_reward, if(floor_num = 0, 0, null))) where floor_num = index);
			map(_chambers[:size(_chambers)-1], map(value,
				if(chamber.risk_reward != null,
					map(chamber.exits,
						if(old_risk = null or new_risk < old_risk,
							set(next_chamber.risk_reward, new_risk)
						)
					
						where new_risk = chamber.risk_reward + _chamber_type_risk_reward(next_chamber.chamber_type)
						where old_risk = next_chamber.risk_reward
						where next_chamber = _chambers[floor_num+1][value]
					)
				)
			where chamber = value) where floor_num = index)
		",

		//positive number is a risk, negative number is a reward
		_chamber_type_risk_reward: "def(CrawlChamberType t) ->int
		switch(t,
			enum crawl_fight, 10,
			enum crawl_elite, 30,
			enum crawl_random, 5,
			enum crawl_treasure, -20,
			enum crawl_shop, -10,
			0
		)
		",


		screen_width: "int :: level.dimensions[2]",
		screen_height: "int :: level.dimensions[3]",

		_screen_margin: "int :: lib.gui.py(20)",
		_texture_margin: "decimal :: 0.1",

		controller: { type: "obj title_controller" },
		player: {
			type: "obj player_avatar",
			init: "
				object('player_avatar', {
					player_num: 0,
					_avatar: controller.account_info.avatar,
					zorder: zorder+10,
					_nick: '',
					_width: lib.gui.py(_player_avatar_dim),
					_height: lib.gui.py(_player_avatar_dim),
					facing: 1,
					current_desaturation: 0.0,
					target_desaturation: 0.0,
				})
			",
		},

		render: "def() ->commands
		set(animation, {
			id: 'fbo',
			image: 'fbo',
			x: 0,
			y: 0,
			w: ww,
			h: hh,
			scale: _texture_scale,
			frames: 1,
			duration: -1,
			fbo: c.render(ww, hh, [
			c.paint_image('images/textures/stone-1.png'),

			c.set_line_width(5.0),
			c.set_source_color('white'),

			map(_chambers,
				map(value,
				[
					if(value.chamber_type != enum crawl_empty, [
//						c.set_source_color('white'),
//						c.rectangle(xpos*ww - 10, ypos*hh - 10, 20, 20),
//						c.fill(),
					]),

					map(value.exits,
					[
						c.move_to(mix(from.x, to.x, cutoff), mix(from.y, to.y, cutoff)),
						c.line_to(mix(from.x, to.x, 1.0-cutoff), mix(from.y, to.y, 1.0-cutoff)),
						c.stroke(),
					]
						where cutoff = 20.0/dist
						where dist = sqrt((from.x-to.x)*(from.x-to.x) + (from.y-to.y)*(from.y-to.y))/lib.gui.dpy(1.0)
						where from = [xpos*ww, ypos*hh]
						where to = [next_pos.x*ww, next_pos.y*hh]

						where next_pos = [room_to_xpos(floor_num+1, value), room_to_ypos(floor_num+1, value)]
					)
				]

					where xpos = room_to_xpos(floor_num, room_num)
					where ypos = room_to_ypos(floor_num, room_num)
					where room_num = index
				)

				where floor_num = index
			)
		])
		}
		)
		where ww = dimensions.x
		where hh = dimensions.y
		where c = canvas()
		",

		room_to_ypos: "def(int floor_num, int room_num) ->decimal _texture_margin*0.5 + (_chambers[floor_num][room_num].ypos) * (1.0 - _texture_margin*0.5*2.0)
		",

		room_to_xpos: "def(int floor_num, int room_num) ->decimal _texture_margin + (_chambers[floor_num][room_num].xpos) * (1.0 - _texture_margin*2.0)
		",

		_removed_children: { type: "[custom_obj]", default: [] },

		trigger_encounter: "def(obj game_icon icon) ->commands
		if(icon in _active_game_icons,
//		controller.campaign_encounter(loc_info.name)
		(
		[
			if(top < target_top,
				animate(me, {
					top: target_top,
				}, {
					duration: 40,
				})
			),

			set(active_room, null),
			animate(me, {
				player_pos: [target_xpos, target_ypos],
			}, {
				duration: 40,
				sleep: true,
			}),
			
		]
			where target_top = clamp(-int(target_ypos*img_h - screen_height*0.7), min_top, max_top)
			where target_xpos = room_to_xpos(chamber.floor_num, chamber.room_num)
			where target_ypos = room_to_ypos(chamber.floor_num, chamber.room_num)
		
		;
		[
			controller.record_stats({ table: 'crawl_encounter', session: session_uuid, floor: chamber.floor_num, chamber_type: str(chamber_type)}),

			set(state.chamber_type, chamber_type),
			set(active_room, [chamber.floor_num, chamber.room_num]),
			set(current_encounter, encounter),

			if(chamber_type = enum crawl_shop,
			[
			let shop = object('crawl_shop_screen', {
				cards: state.generate_shop_inventory()
			});

			set(active_room, null);

			add_object(shop);

			sleep_until(shop.finished);

			set(active_room, [chamber.floor_num, chamber.room_num]),
			], //enum crawl_shop

			chamber_type = enum crawl_treasure,
			; [
			let treasure = object('crawl_card_reward_screen', {
				cards: state.generate_rewards(),
				gold_reward: 100 + 1d50,
				on_complete: def() ->commands null,
			});

			set(active_room, null);

			add_object(treasure);

			sleep_until(treasure.is_active = false);

			set(active_room, [chamber.floor_num, chamber.room_num]),
			], //treasure

			[
			[[remove_object(c), add(_removed_children, [c])] | c <- level.chars, not (c is obj title_controller)];

			spawn('campaign_encounter_dialog', {
				controller: controller,
				location_name: loc_info.name,
				encounter: encounter,
				_starting_objects: level.chars,
				leave_encounter_override: finish_encounter,
				crawl_state: state,
			})
			]
			)
		]
		)
			where encounter = lib.campaign_generator.generate_encounter(controller, loc_info)
			where loc_info = find_or_die(lib.citadel.get_campaign_locations(), value.display_name = encounter_type)
			where encounter_type = if(chamber_type = enum crawl_elite, 'CrawlElite', 'Crawl')

			where chamber_type = if(chamber.chamber_type = enum crawl_random, shuffle([enum crawl_fight, enum crawl_fight, enum crawl_fight, enum crawl_treasure, enum crawl_shop])[0], chamber.chamber_type)
			where chamber = find_or_die(flatten(_chambers), value.obj = icon)
		)
		",

		current_encounter: { type: "null|class campaign_encounter" },
		encounter_dialog: { type: "null|obj campaign_encounter_dialog" },

		finish_encounter: "def() ->commands [
			remove_object(encounter_dialog),
			add_object(controller),

			if(current_encounter != null and current_encounter.had_victory = false, [
				set(lib.citadel.crawl_state, null),
				controller.crawl,
			], [
				map(_removed_children, add_object(value)),
				set(_removed_children, []),
			]),
		]",

		get_chamber_icon: "def(CrawlChamberType t) ->string
		if(t = enum crawl_fight, 'crossed-swords.svg',
		   t = enum crawl_elite, 'dervish-swords.svg',
		   t = enum crawl_treasure, 'chest.svg',
		   t = enum crawl_shop, 'village.svg',
		   'perspective-dice-six-faces-random.svg', //random or anything else
		)",

		create_objects: "def() ->commands
		[
		spawn('crawl_status_display',
		{
			x2: screen_width,
			y: 0,
			state: state,
			zorder: zorder+100,
		}, [
		]
		),

		map(_chambers,
			map(value,
				if(value.chamber_type != enum crawl_empty and value.chamber_type != enum crawl_entry,
					spawn('game_icon', {
						size: lib.gui.py(128),
						icon: get_chamber_icon(value.chamber_type),
						mid_x: x + int(room_to_xpos(floor_num, room_num)*img_w),
						mid_y: y + int(room_to_ypos(floor_num, room_num)*img_h),
						zorder: zorder+1,

						click_handler: me.trigger_encounter,
						mouse_enter_handler: def(obj game_icon icon) ->commands if(icon in _active_game_icons, set(icon.brightness, 0)),
						mouse_leave_handler: def(obj game_icon icon) ->commands set(icon.brightness, 255),
						force_no_alpha: true,
					}, [
						set(value.obj, child),
					])
				)
				where room_num = index
			)
			where floor_num = index
		)
		]
		",

		_player_avatar_dim: "int :: 128",
		dimensions: "Loc :: [512,2048]",
		_texture_scale: "decimal :: lib.gui.dpy(2.5)",

		_drag_anchor: { type: "null|Loc" },

		top: {
			type: "int",
			variable: false,
			get: "int :: y",
			set: "[
				map(_chambers, map(value, if(value.obj != null, add(value.obj.y, delta)))),
				set(y, value),
			] where delta = value - y",
		},

		min_top: "int :: -(img_h - screen_height + _screen_margin)",
		max_top: "int :: _screen_margin",

		player_pos: { type: "[decimal,decimal]", default: [0.5, 1.05] },

		active_room: { type: "null|[int,int]", change: "[
			map(_chambers, map(value, if(value.obj != null, [set(value.obj.scale, 1.0), set(value.obj.brightness, 255)]))),
			set(active_room_cycle, cycle),
		]" },
		active_room_cycle: { type: "int", default: 0 },

	},

	events: {
		create: "
			controller.record_stats({ table: 'crawl_begin', session: session_uuid, schools: state.schools, deck: state.player_deck, life: state.player_life, gold: state.player_gold });
			create_map();
			render();
			set(x, _screen_margin);
			set(top, max_top);
			create_objects();

			sleep(0.5);

			animate(me, {
				top: min_top,
			}, {
				duration: 300,
				easing: lib.math.ease_in_out_cubic,
				sleep: true,
			});

			add_object(player);
			set(player.zorder, zorder+5);

			animate(me, {
				player_pos: [room_to_xpos(0, 3), room_to_ypos(0, 3)],
			}, {
				duration: 60,
			});

			set(active_room, [0,3])
		",

		process: "[
			set(player.mid_x, x + int(img_w*player_pos.x)),
			set(player.mid_y, y + int(img_h*player_pos.y)),

			set(_active_game_icons, []),

			if(active_room != null,
				map(exits, if(target_chamber.obj != null, [
					add(_active_game_icons, [target_chamber.obj]),
					set(target_chamber.obj.scale, 1.0 + 0.2*(1.0 + sin((cycle-active_room_cycle)*3.0)))
				]) where target_chamber = _chambers[next_floor][value]
				)

			where exits = _chambers[active_room.x][active_room.y].exits
			where next_floor = active_room.x+1
			)
		]",

		drag_start: "
		set(_drag_anchor, loc)
		 where loc = [mouse_x,mouse_y]
		 where mouse_x = lib.gui.mouse_pos(level)[0]
		 where mouse_y = lib.gui.mouse_pos(level)[1]
		",
		
		drag: "
		[
		if(_drag_anchor != null,
			[
				set(top, new_y),
			]
			where new_y = clamp(top - int(diff_y), -(img_h - screen_height + _screen_margin), _screen_margin)
			where diff_y = _drag_anchor.y - mouse_y
		),
		set(_drag_anchor, loc),
		]
		 where loc = [mouse_x,mouse_y]
		 where mouse_x = lib.gui.mouse_pos(level)[0]
		 where mouse_y = lib.gui.mouse_pos(level)[1]
		",

		drag_end: "
			set(_drag_anchor, null)
		",

		type_updated: "fire_event('create')",
	},
}
