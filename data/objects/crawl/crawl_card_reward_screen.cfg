{
	id: "crawl_card_reward_screen",
	is_strict: true,
	hidden_in_game: true,

	zorder: 10000,

	properties: {
		_paused_objects: { type: "[custom_obj]", default: [] },
		_widgets: { type: "[custom_obj]", default: [] },

		gold_reward: { type: "int" },
		cards: { type: "[string]" },

		_card_obj: { type: "[obj card]", default: [] },

		mouseover_card: "def(int n) ->commands
		if(is_active,
		[
			animate(c, {
				card_size: 3.0,
				zorder: 11000,
			}, {
				duration: 12,
				on_complete: ; c.show_halo(),
			})
		]
		where c = _card_obj[n]
		)
		",

		mouseoff_card: "def(int n) ->commands
		if(is_active,
		[
			c.hide_halo(),
			animate(c, {
				card_size: 1.5,
				zorder: 10000,
			}, {
				duration: 12,
				on_complete: ; c.hide_halo(),
			})
		]
		where c = _card_obj[n]
		)
		",

		click_card: "def(int n) ->commands
		if(is_active,
		[
			set(is_active, false),

			map(_card_obj, if(n != index, value.start_fizzle_animation())),

			animate(c, {
				card_size: 1.5,
				mid_x: lib.gui.py(1200),
				mid_y: lib.gui.py(-200),
			}, {
				duration: 20,
				on_complete: ; [
					add(lib.citadel.crawl_state_or_die.player_deck, [cards[n]]),
					add(lib.citadel.crawl_state_or_die.player_gold, gold_reward),
					remove_object(me),
					on_complete(),
				],
			})
		]
		where c = _card_obj[n]
		)
		",

		is_active: { type: "bool", default: true },
		on_complete: { type: "function() ->commands" },
	},

	events: {
		create: "[

			spawn('label', {
				mid_x: level.dimensions[2]/2,
				mid_y: lib.gui.py(100),
				_text: ['Card Reward'],
				_font_size: lib.gui.py(44),
				_color: [1,1,1,1],
				zorder: zorder,
				_bg_color: [0,0,0,0.6],
			}, [
				add(_widgets, [child]),
			]),

			spawn('label', {
				mid_x: level.dimensions[2]/2,
				mid_y: lib.gui.py(180),
				_text: ['Choose a card to add to your deck'],
				_font_size: lib.gui.py(24),
				_color: [1,1,1,1],
				zorder: zorder,
				_bg_color: [0,0,0,0.6],
			}, [
				add(_widgets, [child]),
			]),

			spawn('label', {
				mid_x: level.dimensions[2]/2,
				mid_y: lib.gui.py(720),
				_text: ['Gold Reward: ' + str(gold_reward)],
				_font_size: lib.gui.py(44),
				_color: [1,1,1,1],
				zorder: zorder,
				_bg_color: [0,0,0,0.6],
				_pad_left: lib.gui.py(12),
				_pad_right: lib.gui.py(12),
			}, [
				add(_widgets, [child]),
			]),

			map(level.chars, if(value != me and (not value is obj matchmaking_base) and value.paused = false, [
				set(value.paused, true),
				add(_paused_objects, [value]),
			])),

			spawn('blur_controller', {
				end_zorder: 5000,
				blur_darken: 0.5,
			}, [
				add(_widgets, [child]),
			]),

			map(cards,
				spawn('card', {
					mid_x: level.dimensions[2]/2 + ratio*lib.gui.py(450),
					mid_y: level.dimensions[3]/2,
					zorder: zorder+1,
					card_type: lib.citadel.create_card(value),
					in_hand: false,
					allow_drag: false,
					card_size: 1.5,
					show_shadow: true,
					use_absolute_screen_coordinates: true,
					mouse_enter_handler: (def() ->commands mouseover_card(index)),
					mouse_leave_handler: (def() ->commands mouseoff_card(index)),
					click_handler: (def() ->commands click_card(index)),
				}, [
					add(_widgets, [child]),
					add(_card_obj, [child]),
				])
				where ratio = ((index / decimal(size(cards)-1)) - 0.5)*2.0
			)
		]",

		being_removed: "[
			map(_paused_objects, set(value.paused, false)),
			map(_widgets, remove_object(value)),
		]",
	},
}
