{
	id: "title_screen_controller",
	is_human: true,
	hidden_in_game: true,
	is_strict: true,

	properties: {
		title_controller: { type: "obj title_controller" },

		level_width: "int<- level.dimensions[2]",
		level_height: "int<- level.dimensions[3]",

		//the left/right side of the 'usable' area -- i.e. cutting off edges
		//to make for a 4:3 display.
		gui_left_edge: "int :: (level_width - (level_height*4)/3)/2",
		gui_right_edge: "int :: level_width - gui_left_edge",

		show_settings: "def() ->commands
		[
			title_controller.transition_screen(; execute(me, title_controller.enter_settings(me)), false)
		]
		",

		enter_library: "def() ->commands
			lib.gui.play_sound(me, 'interface/enter-library');
			title_controller.transition_screen(; execute(me, title_controller.enter_library(me)))
		",

		enter_multi: "def() ->commands
		execute(me,
			title_controller.transition_screen(; execute(me, title_controller.enter_multi(me)))
		)
		",

		enter_single: "def() ->commands
		execute(me,
			title_controller.transition_screen(; execute(me, title_controller.enter_single(me)))
		)
		",

		enter_tutorial: "def() ->commands
		execute(me,
			title_controller.transition_screen(; execute(me, title_controller.enter_tutorial(me)))
		)
		",

		enter_puzzles: "def() ->commands
		execute(me,
			title_controller.transition_screen(; execute(me, title_controller.enter_puzzles(me)))
		)
		",

		mouse_enter_avatar: "def(obj deck_avatar avi) ->commands
			animate(avi, {
				halo: 10.0,
			}, {
				duration: 10,
			})
		",

		mouse_leave_avatar: "def(obj deck_avatar avi) ->commands
			animate(avi, {
				halo: 0.0,
			}, {
				duration: 10,
			})
		",

		create_objects: "def() ->commands [

			spawn('deck_avatar', 0, 0, {
				mid_x: level_width/2 - lib.gui.py(320),
				y: lib.gui.py(372),
				_width: lib.gui.py(270),
				_portrait: 'rihn-incarnate.png',
				_name: 'Single Player',
				alpha: 0,
				click_handler: def(obj deck_avatar avi)->commands enter_single(),
				mouse_enter_handler: me.mouse_enter_avatar,
				mouse_leave_handler: me.mouse_leave_avatar,
			}, [
				animate(child, {
					alpha: 255,
				}, {
					duration: 20,
				})
			]),

			spawn('deck_avatar', 0, 0, {
				mid_x: level_width/2,
				y: lib.gui.py(372),
				_width: lib.gui.py(270),
				_portrait: 'anthem-of-battle.png',
				_name: 'Multiplayer',
				alpha: 0,
				click_handler: def(obj deck_avatar avi)->commands enter_multi(),
				mouse_enter_handler: me.mouse_enter_avatar,
				mouse_leave_handler: me.mouse_leave_avatar,
			}, [
				animate(child, {
					alpha: 255,
				}, {
					duration: 20,
				})
			]),

			spawn('deck_avatar', 0, 0, {
				mid_x: level_width/2 + lib.gui.py(320),
				y: lib.gui.py(372),
				_width: lib.gui.py(270),
				_portrait: 'greatlibrary.png',
				_name: 'Library',
				alpha: 0,
				click_handler: def(obj deck_avatar avi)->commands enter_library(),
				mouse_enter_handler: me.mouse_enter_avatar,
				mouse_leave_handler: me.mouse_leave_avatar,
			}, [
				animate(child, {
					alpha: 255,
				}, {
					duration: 20,
				})
			]),

			spawn('button_controller', 0, 0, {
				x2: gui_right_edge - lib.gui.py(680),
				y2: level_height - lib.gui.py(32),
				text: 'Tutorial',
				on_click: me.enter_tutorial,
			}),

			spawn('button_controller', 0, 0, {
				x2: gui_right_edge - lib.gui.py(480),
				y2: level_height - lib.gui.py(32),
				text: 'Puzzles',
				on_click: me.enter_puzzles,
			}),

			spawn('button_controller', 0, 0, {
				x2: gui_right_edge - lib.gui.py(280),
				y2: level_height - lib.gui.py(32),
				text: 'Settings',
				on_click: me.show_settings,
			}),

			if(title_controller.game_logo and (title_controller.game_logo not in level.chars), add_object(title_controller.game_logo)),
			if(title_controller.game_title and (title_controller.game_title not in level.chars), add_object(title_controller.game_title)),

			show_update_status(),
		]",

		show_update_status: "def() ->commands [
			set(me.widgets, [
				{ x: lib.gui.py(34), y: level_height - lib.gui.py(18), type: 'label', id: 'module_update_status', size: lib.gui.py(12), text: 'Argentum Age version ' + str(MODULE_VERSION), color: 'white' },
				{ x: lib.gui.py(34), y: level_height - lib.gui.py(4), type: 'label', id: 'module_update_status', size: lib.gui.py(12), text: if(auto_update_status().attempt_module, if(auto_update_status().complete_module, 'Citadel up-to-date', if(err is string, 'Error updating Citadel: ' + err, 'Citadel update timed out') where err = auto_update_status().module_error), 'Not auto-updating Citadel'), color: 'white' },
				{ x: lib.gui.py(34), y: level_height - lib.gui.py(-10), type: 'label', id: 'anura_update_status', size: lib.gui.py(12), text: if(auto_update_status().attempt_anura, if(auto_update_status().complete_anura, 'Anura up-to-date', if(err is string, 'Error updating Anura: ' + err, 'Anura update timed out') where err = auto_update_status().anura_error), 'Not auto-updating Anura'), color: 'white' },
			]),
		]",
	},

	on_being_added: "[
		create_objects(),
//		spawn('mist_effect', level_width/2, int(level_height*0.5), {hdirection: 1}),
//		spawn('mist_effect', level_width/2, int(level_height*0.5), {hdirection: -1}),
//		spawn('ember_effect', level_width/2, int(level_height*1.00), {hdirection: 1}),
	]",
}
