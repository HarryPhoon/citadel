{
id: "speech_bubble",
is_strict: true,

properties: {

	_text: { type: "[string]" },
	_visible_lines: { type: "int", default: 0 },
	_visible_chars: { type: "int", default: 0 },
	_visible_text: "[string] :: if(_visible_lines >= size(_text), _text,
		_text[0:_visible_lines] + [_text[_visible_lines][0:_visible_chars]]
	)",

	_font: { type: "string", init: "lib.font.regular_font" },
	_font_size: { default: 18 },

	at_end: "bool :: _visible_lines >= size(_text)",
	skip_to_end: "def() ->commands [
		set(me._visible_lines, size(_text)),
		execute(me, bind_command(me.render)),
	]",

	render: "def() ->commands
	set(animation, {
		id: 'fbo',
		image: 'fbo',
		x: 0, y: 0, w: ww, h: hh,
		scale: 1,
		frames: 1,
		fbo: c.render(ww, hh,
		[
		/*
		outline,
		c.set_source_rgba(1, 1, 1, 1),
		c.fill(),

		outline,
		c.set_line_width(1),
		c.set_source_rgba(0, 0, 0, 1),
		c.stroke(),

		c.set_font(_font),
		c.set_font_size(18),

		map(_visible_text, [
			c.save(),
			c.translate(8, 20+index*20),
			c.text_path(value),
			c.fill(),
			c.restore(),
		]),
		]
		where outline = [
		c.move_to(140, 130),
		c.line_to(240, 130),
		c.line_to(240, 0),
		c.line_to(2, 2),
		c.line_to(2, 130),
		c.line_to(120, 130),

		c.line_to(180, 180),
		c.line_to(140, 130),
		*/
		]
		
		) where c = canvas()

	}) where ww = 242 where hh = 202",
},

on_create: "render()",

on_process: "
	if(_visible_lines < size(_text),
	   [
	   if(_visible_chars < size(_text[_visible_lines]),
		  add(_visible_chars, 1),
		  [add(_visible_lines, 1), set(_visible_chars, 0)]),
	   bind_command(me.render),
	   ]
	)
",

on_type_updated: "render()",

}
