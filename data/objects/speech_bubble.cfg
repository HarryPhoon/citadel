{
id: "speech_bubble",
is_strict: true,

properties: {

	_text: { type: "string" },

	_visible_chars: { type: "int", default: 0 },

	_font: { type: "string", init: "lib.font.regular_font" },
	_font_size: { default: 18 },

	at_end: "bool :: _visible_chars >= size(_text)",
	skip_to_end: "def() ->commands [
		set(me._visible_chars, size(_text)),
		execute(me, bind_command(me.render)),
	]",

	_width: { type: "int" },
	_height: { type: "int" },

	//Function to calculate the font size we will use. It works by starting with the
	//largest possible font size we might use, doing a test render, and see if it fits.
	//If it does it sets it, otherwise recurse and choose a lower font size.
	calculate_font_size: "def(int|null max_size=null) ->commands
		if(cur_font_size < 8 or find(fragments, value.y + value.height > 126*y_ratio) = null,
		   set(_font_size, cur_font_size),
		   calculate_font_size(cur_font_size-2)
		)
		
		where fragments = c.markup_text(q(<font size=') + cur_font_size + q('>) + _text + q(</font>), int(_width-16*x_ratio)),
		where cur_font_size = if(max_size != null, max_size, int(18*_width/250.0))
		where x_ratio = _width/242.0
		where y_ratio = _height/202.0
		where c = canvas()
	",

	render: "def() ->commands
	[
	set(animation, {
		id: 'fbo',
		image: 'fbo',
		x: 0, y: 0, w: ww, h: hh,
		scale: 1,
		frames: 1,
		fbo: c.render(ww, hh,
		[
		c.translate(0, 40*x_ratio),

		outline,
		c.set_source_rgba(1, 1, 1, 1),
		c.fill(),

		outline,
		c.set_line_width(1),
		c.set_source_rgba(0, 0, 0, 1),
		c.stroke(),

		c.save(),
		c.translate(int(8*x_ratio), int(4*y_ratio)),
		map(fragments,
		  if(percent_shown > begin_percent,
			[
				c.save(),
				c.set_source_color([0,0,0]),
				if(percent_shown < end_percent,
				[
				  c.rectangle(value.x, value.y, value.width*ratio, value.height),
				  c.clip(),
				]
					where ratio = (percent_shown - begin_percent)/(end_percent - begin_percent)
				),
				value.path,
				c.fill(),
				c.restore(),
			]
		  )
			where end_percent = min(1.0, begin_percent + value.width/total_width)
			where begin_percent = sum(map(fragments[:index], value.width))/total_width
		)
		where percent_shown = decimal(_visible_chars)/decimal(size(_text))
		where total_width = sum(map(fragments, value.width))
		where fragments = c.markup_text(q(<font size=') + _font_size + q('>) + _text + q(</font>), int(ww-16*x_ratio)),
		c.restore(),

		]
		where outline = [
		c.move_to(230*x_ratio, 130*y_ratio),
		c.curve_to(230*x_ratio, 130*y_ratio, 240*x_ratio, 130*y_ratio, 240*x_ratio, 120*y_ratio),

		c.line_to(240*x_ratio, 10*y_ratio),
		c.curve_to(240*x_ratio, 10*y_ratio, 240*x_ratio, 0*y_ratio, 230*x_ratio, 0*y_ratio),

		c.line_to(190*x_ratio, 0*y_ratio),
		c.line_to(150*x_ratio, (-40)*y_ratio),
		c.line_to(130*x_ratio, 0*y_ratio),

		c.line_to(12*x_ratio, 0*y_ratio),
		c.curve_to(12*x_ratio, 0*y_ratio, 2*x_ratio, 0*y_ratio, 2*x_ratio, 10*y_ratio),

		c.line_to(2*x_ratio, 120*y_ratio),
		c.curve_to(2*x_ratio, 120*y_ratio, 2*x_ratio, 130*y_ratio, 12*x_ratio, 130*y_ratio),

		]
		
		) where c = canvas()

	})
	where x_ratio = ww/242.0
	where y_ratio = hh/202.0
	where ww = _width where hh = _height,
	set(mid_xy, mid_xy)
   ]",
},

on_create: "calculate_font_size()",

on_process: "
	if(_visible_chars < size(_text),
	   [
	     add(_visible_chars, 1),
		 bind_command(me.render),
	   ]
	)
",

on_type_updated: "render()",

}
