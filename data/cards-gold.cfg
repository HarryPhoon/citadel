{
	"Armory": {
		name: "Armory",
		set: "core",
		rarity: 1,
		type: "creature",
		portrait: "school-gold.png",
		cost: 5,
		loyalty_cost: 0,
		school: "@eval GOLD",
		creature: {
			tags: ["Shrine"],
			life: 8,
			level: 2,
			is_construct: true,
			portrait_y_offset: 80,
			image_num: 4,
            passive_abilities: [{
				name: "Equipt",
				rules: "Your creatures in this lane have +2 armor.",
				static_effect: "def(class game game, class creature creature) ->commands 
                [target.apply_static_effect('resistance', 2)
                | target <- game.creatures,
				  (creature.controller = target.controller and (not target.is_building) and creature.loc[0] = target.loc[0])
                ]"
			}],
            
		}
	},

	"King's Rider": {
		name: "King's Rider",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "kings-rider.png",
		cost: 5,
		loyalty_cost: 1,
		school: "@eval GOLD",
		creature: {
			tags: ['Human', 'Mounted'],
			sprite_sheet: "creature_large",
			image_num: 1,
			attack: 6,
			life: 6,
			move: 2,

			activated_abilities: [
				{
					name: 'Maneuver',
					cost: 1,
					school: "@eval GOLD",
					rules: "Move this creature to an adjacent lane.",
					exhausts_creature: true,

					possible_targets: "
					 def(class game game, class creature creature, [Loc] targets) ->[Loc]|null
						if(targets = [], filter(
								game.get_adjacent_locs(creature.loc),
							game.is_loc_on_board(value) and
							value[0] != creature.loc[0] and
							game.creature_at_loc(value) = null), null)
					",

					on_play: "def(class game game, class creature creature, class message.play_ability info) ->commands [
						set(creature.loc, info.targets[0])
					] asserting size(info.targets) = 1",
				}
			]
		}
	},

	"Dwarvish Warrior": "Mercenary",
	
	"Mercenary": {
		name: "Mercenary",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "mercenary.png",
		artist: "lucy",
		cost: 0,
		loyalty_cost: 0,
		additional_cost: "def(class player player) ->int player.base_income",
		school: "@eval GOLD",
		rules: "Mercenary's summoning cost is equal to the size of your mana pool. When summoned, Mercenary gains attack equal to the size of your mana pool.",
		creature: {
			tags: ['Human', 'Warrior'],
			attack: 2,
			life: 4,
			move: 1,
			portrait_y_offset: 20,
			resistance: 1,
			initiative: 20,
			image_num: 42,
			on_summoned: "def(class game game) ->commands [
				add(me.attack, game.players[controller].base_income)
			]",
		}
	},

	"Thunderer": {
		name: "Thunderer",
		set: "core",
		rarity: 1,
		type: "creature",
		cost: 5,
		loyalty_cost: 0,
		portrait: "thunderer.png",
		school: "@eval GOLD",
		creature: {
			tags: ['Dwarf'],
            abilities: ['Reload'],
			attack: 6,
			life: 4,
			move: 1,
			range: 1,
			resistance: 1,
			image_num: 71,
		}
	},
	
	"Dwarvish Armourer": {
		name: "Dwarvish Armourer",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "dwarvish-armourer.png",
		cost: 4,
		loyalty_cost: 0,
		school: "@eval GOLD",
		creature: {
			tags: ['Dwarf'],
			attack: 3,
			life: 6,
			move: 1,
			resistance: 1,
			initiative: 20,
			image_num: 71,
		}		
	},

	"Jaded Runesmith": {
		name: "Jaded Runesmith",
		set: "core",
		type: "creature",
		portrait: "jaded-runesmith.png",
		cost: 6,
		loyalty_cost: 0,
		school: "@eval GOLD",
		creature: {
			tags: ['Dwarf'],
			attack: 6,
			life: 4,
			move: 1,
			resistance: 3,
			initiative: 20,
			image_num: 71,
            triggered_abilities: [{
				name: 'Rune Spark',
				rules: 'When you cast a rune spell, Gain two mana.',
				on_card_played: "def(class creature creature, class game game, class player player, class message.play_card info) ->commands
					if(player.player_index = creature.controller and info.card and 'Rune' in info.card.tags,
					   [
                       game.players[creature.controller].gain_mana_with_hint(game, creature.loc),
                       game.players[creature.controller].gain_mana_with_hint(game, creature.loc)
                       ])
				",
			}],
		}		
	},
    
    "Elven Condatiare": {
		name: "Elven Condatiare",
		set: "core",
		type: "creature",
		portrait: "elven-condatiare.png",
		cost: 4,
		loyalty_cost: 1,
		school: "@eval GOLD",
		creature: {
			tags: ['Elf'],
			attack: 6,
			life: 6,
			move: 1,
			initiative: 20,
			image_num: 71,
            passive_abilities: [{
				static_effect: "def(class game game, class creature creature) ->commands
				if(creature.controller >= 0,
				   game.players[creature.controller].apply_static_effect(
					(def(class player p, map info) ->commands add(p.card_draw, -1)),
					(def(class player p, map info) ->commands add(p.card_draw, 1)),
					{}))",
				
				name: "Fee of Service",
				rules: "-1 hand size",
			}]
		}		
	},
    
    "Biting Rune": {
		name: "Biting Rune",
		set: "core",
		type: "invocation",
        portrait: "biting-rune.png",
		is_response: false,
        tags: ['Rune'],
		cost: 2,
		loyalty_cost: 3,
		school: "@eval GOLD",
		rarity: 0,
		rules: "Target creature gains 3 attack.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands
		  add(game.creature_at_loc_or_die(info.targets[0]).attack, 3)
					asserting size(info.targets) = 1",
	},
    
    "Blunting Rune": {
		name: "Blunting Rune",
		set: "core",
		type: "invocation",
        portrait: "blunting-rune.png",
		is_response: false,
        tags: ['Rune'],
		cost: 3,
		loyalty_cost: 2,
		school: "@eval GOLD",
		rarity: 0,
		rules: "Target creature gains 2 Armor.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands
		  add(game.creature_at_loc_or_die(info.targets[0]).resistance, 2)
					asserting size(info.targets) = 1",
	},
    
    "Sentry Rune": {
		name: "Sentry Rune",
		set: "core",
		type: "invocation",
        portrait: "sentry-rune.png",
		is_response: false,
        tags: ['Rune'],
		cost: 4,
		loyalty_cost: 2,
		school: "@eval GOLD",
		rarity: 0,
		rules: "Place a 6,1 Lightning Ward with cover, first strike, and 0 movement in target hex. May not target a hex where your opponent can summon.",
		possible_targets: "def(class game game, int nplayer, [Loc] targets) ->[Loc]|null
		  if(targets = [],
			   filter(game.all_locs, (game.is_loc_on_board(value) and
					  game.creature_at_loc(value) = null and
                      value not in game.players[(nplayer+1)%2].summoning_locs(game, construct('creature', {name: 'Wolf', school: FOOD, image_num: 5}))
                      )), null
                      )",
		   on_play: "def(class game game, class message.play_card info) ->commands
		   map(info.targets, game.summon_creature(
		   lib.citadel.create_creature('Lightning Ward', {
			name: 'Lightning Ward',
			controller: game.current_player,
			loc: value,
            })))"
	},
    
    
	"Lightning Ward": {
		name: "Lightning Ward",
		type: "creature",
		portrait: "sentry-rune.png",
		cost: 4,
		loyalty_cost: 2,
		school: "@eval GOLD",
		rarity: 0,
		creature: {
			tags: ['Ward'],
			abilities: ['First Strike', 'Cover'],
            portrait: "sentry-rune.png",
			image_num: 26,
			attack: 6,
			life: 1,
			move: 0,
            activated_abilities: [
				{
					name: 'Erase',
					cost: 0,
					school: "@eval GOLD",
					rules: "Remove the ward",
					on_play: "def(class game game, class creature creature, class message.play_ability info) ->commands [
						set(creature.destroyed, true),
					]",
				}
			]
            }
	},
    
    
    //'Runewall' is the spell that summons a 'Rune Wall'
        "Runewall": {
		name: "Runewall",
		set: "core",
		type: "invocation",
        portrait: "runewall.png",
		is_response: false,
        tags: ['Rune'],
		cost: 5,
		loyalty_cost: 2,
		school: "@eval GOLD",
		rarity: 0,
		rules: "Place a 0,9 Runewall with cover. When attacked the runewall will inflict equal damage back to the creature that attacked. May not target a hex where your opponent can summon.",
		possible_targets: "def(class game game, int nplayer, [Loc] targets) ->[Loc]|null
		  if(targets = [],
			   filter(game.all_locs, (game.is_loc_on_board(value) and
					  game.creature_at_loc(value) = null and
                      value not in game.players[(nplayer+1)%2].summoning_locs(game, construct('creature', {name: 'Wolf', school: FOOD, image_num: 5}))
                      )), null
                      )",
		   on_play: "def(class game game, class message.play_card info) ->commands
		   map(info.targets, game.summon_creature(
		   lib.citadel.create_creature('Rune Wall', {
			name: 'Rune Wall',
			controller: game.current_player,
			loc: value,
            })))"
	},
    
    
	"Rune Wall": {
		name: "Rune Wall",
		type: "creature",
		portrait: "runewall.png",
		cost: 5,
		loyalty_cost: 3,
		school: "@eval GOLD",
		rarity: 0,
        rules: "When attacked, inflict equal damage back to the source.",
		creature: {
			tags: ['Ward'],
			abilities: ['Cover'],
            portrait: "runewall.png",
			image_num: 26,
			attack: 0,
			life: 9,
            on_attacked: "def(class game game, class creature attacker, int damage) ->commands attacker.inflict_damage(game, damage)",
			move: 0,
            activated_abilities: [
				{
					name: 'Erase',
					cost: 0,
					school: "@eval GOLD",
					rules: "Remove the Ward",
					on_play: "def(class game game, class creature creature, class message.play_ability info) ->commands [
						set(creature.destroyed, true),
					]",
				}
			]
		}
	},

	// Note: Maybe retheme this guy as a "peddler", see reddit.
	"Student of Kilmorph": {
		name: "Student of Kilmorph",
		set: "core",
		rarity: 1,
		type: "creature",
		portrait: "oldrics-guard.png",
		cost: 4,
		school: "@eval GOLD",
		flavor_text: "Kilmorph teaches economy, and opportunism.",
		creature: {
			tags: ['Dwarf'],
			attack: 2,
			life: 4,
			move: 1,
			initiative: 20,
			image_num: 71,

			activated_abilities: [
				{
					name: 'Industry',
					cost: 0,
					school: "@eval GOLD",
					rules: "+1 mana.",
					exhausts_creature: true,

					on_play: "def(class game game, class creature creature, class message.play_ability info) ->commands [
						game.players[creature.controller].gain_mana_from_card(game, me)
					]",
				}
			],
		}
	},
    
    "Scrap Tinker": {
		name: "Scrap Tinker",
		set: "core",
		rarity: 2,
		type: "creature",
		portrait: "scrap_tinker.png",
		cost: 3,
		loyalty_cost: 0,
		school: "@eval GOLD",
		creature: {
			tags: ['Gnome'],
			attack: 1,
			life: 5,
			move: 1,
			initiative: 20,
            triggered_abilities: [{
				name: "Tinkering",
				rules: "Whenever you discard a card, Queiligan gains 2 attack until end of turn.",
				on_card_discarded: "def(class creature creature, class game game, class player player, class card card) ->commands
				if(player = game.players[creature.controller], creature.apply_effect_until_end_of_turn('attack', 2))
				",
			}],
		}
	},

	"Oldric, Lord of the Hold": {
		name: "Oldric, Lord of the Hold",
		set: "core",
		rarity: 2,
		type: "creature",
		portrait: "oldric-lord-of-the-hold.png",
		cost: 6,
		loyalty_cost: 3,
		school: "@eval GOLD",
		hero: true,
		creature: {
			tags: ['Dwarf', 'Lord'],
			attack: 8,
			life: 8,
			move: 1,
			resistance: 3,
			initiative: 20,
		}
	},
	
    "Queiligan, the Merchant Prince": {
		name: "Queiligan, the Merchant Prince",
		set: "core",
		rarity: 2,
		type: "creature",
		portrait: "merchant-prince.png",
		cost: 5,
		loyalty_cost: 2,
		school: "@eval GOLD",
		hero: true,
		creature: {
			tags: ['Human', 'Lord'],
			attack: 6,
			life: 6,
			move: 1,
			initiative: 20,
            triggered_abilities: [{
				name: "Planning",
				rules: "Whenever you discard a card, Queiligan gains armor equal to your Materia level until end of turn.",
				on_card_discarded: "def(class creature creature, class game game, class player player, class card card) ->commands
				if(player = game.players[creature.controller], creature.apply_effect_until_end_of_turn('resistance', player.get_resource_level(GOLD)))
				",
			}],
		}
	},
    
	"Janus, the Great": {
		name: "Janus, the Great",
		set: "core",
		rarity: 2,
		type: "creature",
		portrait: "janus-the-great.png",
		cost: 8,
		loyalty_cost: 5,
		school: "@eval GOLD",
		hero: true,
		creature: {
			tags: ['Human', 'Lord'],
			image_num: 46,
			attack: 8,
			life: 8,
			move: 1,
			resistance: 2,
                
            passive_abilities: [{
				name: "Terrible Command",
				rules: "Creatures you control get +2 attack and +2 life. Creatures opponents control get -2 attack and -2 life.",
				static_effect: "def(class game game, class creature creature) ->commands
				[   
                    if(creature.controller = target.controller,
				    [target.apply_static_effect('attack', 2), target.apply_static_effect('life', 2)], 
				    [target.apply_static_effect('attack', -2), target.apply_static_effect('life', -2)])
				  | target <- game.creatures,
				    target.is_building = false
				]"
			}],
		}
	},

	"Barracks": {
		name: "Barracks",
		set: "core",
		rarity: 1,
		type: "creature",
		cost: 4,
		loyalty_cost: 1,
		school: "@eval GOLD",
		rules: "You may summon creatures on or adjacent to Barracks.",
		creature: {
			is_construct: true,
			allows_summoning: "def(class game game, class creature target) ->[Loc]
			if(not target.is_construct,
			  filter(game.all_locs, (game.locs_adjacent(value, loc) or value = loc) and
			         game.creature_at_loc(value) = null), [])",
		}
	},

	"Wall of Stone": {
		name: "Wall of Stone",
		set: "core",
		rarity: 0,
		type: "creature",
		artist: "lucy",
		cost: 2,
		loyalty_cost: 0,
		portrait: "wall-of-stone.png",
		school: "@eval GOLD",
		creature: {
			tags: ["Wall"],
			life: 8,
			resistance: 1,
			portrait_y_offset: 30,
			sprite_sheet: 'building',
			is_building: true,
			image_num: 0,
			activated_abilities: [
				{
					name: 'Disassemble',
					cost: 0,
					school: "@eval GOLD",
					rules: "Destroy Wall of Stone, gain one mana.",
					on_play: "def(class game game, class creature creature, class message.play_ability info) ->commands [
						set(creature.destroyed, true),
						add(game.players[creature.controller].resources, 1),
					]",
				}
			]
		}
	},

	"Marlank Wall": {
		name: "Marlank Wall",
		rarity: 0,
		type: "creature",
		cost: 2,
		loyalty_cost: 0,
		portrait: "wall-of-stone.png",
		school: "@eval GOLD",
		creature: {
			tags: ["Wall"],
			life: 8,
			resistance: 1,
			portrait_y_offset: 30,
			sprite_sheet: 'building',
			is_building: true,
			image_num: 0,
		}
	},

	"Guard Post": {
		name: "Guard Post",
		set: "core",
		rarity: 1,
		type: "creature",
		cost: 5,
		loyalty_cost: 1,
		portrait: "guard-post.png",
		school: "@eval GOLD",
		rules: "Guard Post attacks creatures in adjacent lanes.",
		creature: {
			life: 8,
            abilities: ['Reload'],
			range: 1,
			attack: 3,
			image_num: 0,
			is_building: true,
			sprite_sheet: 'building',
			targets_attacking: "def(class game game) ->[class creature]
			if(is_exhausted or attack <= 0, [],
			  filter(map(target_locs, if(target and target.controller != controller, target) where target = game.creature_at_loc(value)), value != null)
			   ) where target_locs = game.get_adjacent_locs(loc)",
		}
	},

	"Oldric's Trap": {
		name: "Oldric's Trap",
		set: "core",
		rarity: 0,
		type: "creature",
		cost: 2,
		loyalty_cost: 0,
		school: "@eval GOLD",
		rules: "At the start of your turn, +1 energy. When a non-flying enemy creature enters the trap, it takes two damage for each energy.",
		creature: {
			tags: ["Trap"],
			is_construct: true,
			image_num: 0,

			on_moved_over_by_creature: "def(class game game, class creature creature) ->commands
			  if(creature.controller != me.controller and energy > 0,
			  [
				 creature.inflict_combat_damage(game, me, me.energy*2),
				 set(me.destroyed, true)
			  ])",

			on_begin_turn: "def(class game game) ->commands
			                 if(game.current_player_index = me.controller,
							    add(me.energy, 1))",
		}
	},
	
	"Armed to the Teeth": {
		name: "Armed to the Teeth",
		set: "core",
		rarity: 1,
		type: "invocation",
		portrait: "armed-to-the-teeth.png",
		school: "@eval GOLD",
		cost: 4,
		loyalty_cost: 2,
		rules: "Creatures you control gain +1 attack, +1 resistance, and +1 life.",
		on_play: "def(class game game, class message.play_card info) ->commands map(game.creatures, creature, if(game.current_player_index = creature.controller and (not creature.is_construct) and (not creature.is_building), [
			add(creature.resistance, 1),
			add(creature.life, 1),
			add(creature.attack, 1)
		]))",

		runes: [
		{
			color: 'black',
			points: [[0,100], [0,0], [0,0], [100,100]]
		}
		],
	},
    
    "Rain of Steel": {
		name: "Rain of Steel",
		set: "core",
		rarity: 1,
		type: "invocation",
		portrait: "rain-of-steel.png",
		school: "@eval [SAPIENZA, GOLD]",
		cost: 4,
		loyalty_cost: 3,
        
        possible_targets: "all_tiles_as_possible_targets",
		rules: "Target a hex. Inflict 5 damage to creatures and buildings in that hex and adjacent hexes.",
		on_play: "def(class game game, class message.play_card info) ->commands 
        map(game.creatures, creature, 
        if(creature and (not creature.is_building) and (info.targets[0] = creature.loc or game.locs_adjacent(info.targets[0], [int<-creature.loc[0],int<-creature.loc[1],])), [
			creature.inflict_damage(game, 5)
		]))",

		runes: [
		{
			color: 'black',
			points: [[0,100], [0,0], [0,0], [100,100]]
		}
		],
	},
    
	"Toughness": {
		name: "Toughness",
		set: "core",
		rarity: 0,
		type: "invocation",
		school: "@eval GOLD",
		cost: 1,
		loyalty_cost: 2,
        is_response: true,
		rules: "Target creature gains +4 resistance until the end of the turn.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands
            game.creature_at_loc_or_die(info.targets[0]).apply_effect_until_end_of_turn('resistance', 4)
        ",

		runes: [
		{
			color: 'black',
			points: [[0,100], [25,0], [0,0], [25,100]]
		}
		],
	},

	"Tactical Maneuver": {
		name: "Tactical Maneuver",
		set: "core",
		rarity: 1,
		type: "invocation",
		portrait: "school-gold.png",
		school: "@eval GOLD",
		cost: 1,
		loyalty_cost: 2,
        is_response: false,
		rules: "Move target friendly creature to vacant adjacent tile",
		possible_targets: "def(class game game, int nplayer, [Loc] targets) ->[Loc]|null
			switch(size(targets),
			  0, my_creatures_as_possible_targets(game, nplayer, targets),
			  1, if(creature, filter(game.all_locs, game.locs_adjacent(value, creature.loc) and game.creature_at_loc(value) = null), []) where creature = game.creature_at_loc(targets[0]),
			  null)

		",

		on_play: "def(class game game, class message.play_card info) ->commands
		  set(game.creature_at_loc_or_die(info.targets[0]).loc, info.targets[1])",
	},

	"Taxes and Tolls": {
		name: "Taxes and Tolls",
		type: "invocation",
		portrait: "school-gold.png",
		school: "@eval GOLD",
		cost: 0,
		loyalty_cost: 2,
		is_response: true,
		rules: "Pay all your mana. Your opponent must pay the same amount of mana or their spell fizzles.",

		possible_targets: "
		  def(class game game, int nplayer, [Loc] targets) ->[Loc]|null
		    if(game.stack = [] or not (game.stack[size(game.stack)-1] is class message.play_card), [], null)
		",

		on_play: "def(class game game, class message.play_card info) ->commands
		if(info.choices,
			[
				// do whatever they chose
				if (info.choices[0] = 0,
					they_pay,
					fizzle),
				we_pay
			]
				asserting they_can_pay
			,
			if (they_can_pay,
				game.set_current_choice({
					card: me,
					info: info,
					player_index: 1 - info.player_index, // opponent of who played this card
					text: 'Choose whether to pay ' + str(game.players[info.player_index].resources) + ' mana or to let your spell fizzle',
					options: [
							construct('choice.button', {
								text: 'Pay',
								tag: 0,
							}),
							construct('choice.button', {
								text: 'Do not Pay',
								tag: 1,
							})
						],
				}),
				// They can't afford to pay so skip the question
				[
					fizzle,
					we_pay
				]
			)
		)
			asserting game.stack != []
			where fizzle = set(their_spell.force_fizzle, true)
			where we_pay = set(game.players[info.player_index].resources, 0)
			where they_pay = add(game.players[their_spell.player_index].resources, -game.players[info.player_index].resources)
			where they_can_pay = (game.players[their_spell.player_index].resources >= game.players[info.player_index].resources)
			where their_spell = game.stack[size(game.stack) - 1]
		",
	},

	"Bazaar": {
		name: "Bazaar",
		set: "core",
		rarity: 2,
		type: "creature",
		cost: 6,
		loyalty_cost: 2,
		school: "@eval GOLD",
		rules: "Gain +1 mana per turn for each other land you control.",
		creature: {
			tags: ['Marketplace'],
			is_construct: true,
			income: "def(class game game) ->int count(game.permanents, value.is_construct and value.controller = me.controller)",
		}
	},

	"Market": "Mine",




	"Master Fencer": {
		name: "Master Fencer",
		type: "creature",
		set: "core",
		rarity: 1,
		portrait: "master-fencer.png",
		cost: 3,
		loyalty_cost: 3,
		school: "@eval GOLD",
		creature: {
			tags: ['Human'],
			overlays: [ { image_num: 25 } ],
			activated_abilities: [
				{
					name: 'First Strike',
					cost: 1,
					school: "@eval GOLD",
					rules: "This creature gains First Strike this turn.",
					on_play: "def(class game game, class creature creature, class message.play_ability info) ->commands
					    creature.add_ability_until_end_of_turn('First Strike')"
				},

				{
					name: "Lunge",
					cost: 1,
					school: "@eval GOLD",
					rules: "This creature gains +1 attack this turn.",
					on_play: "def(class game game, class creature creature, class message.play_ability info) ->commands
					    creature.apply_effect_until_end_of_turn('attack', 1)"
				},

				{
					name: "Swift",
					cost: 1,
					school: "@eval GOLD",
					rules: "This creature gets +1 move; and -1 life; this turn.",
					on_play: "def(class game game, class creature creature, class message.play_ability info) ->commands
					[
					    creature.apply_effect_until_end_of_turn('move', 1),
					    creature.apply_effect_until_end_of_turn('life', -1),
					]"
				},

			],
			attack: 4,
			life: 4,
			move: 1,
			image_num: 35
		}
	},

	"Stone Elemental": {
		name: "Stone Elemental",
		type: "creature",
		set: "core",
		rarity: 1,
		portrait: "stone-elemental.png",
		cost: 4,
		loyalty_cost: 1,
        is_channeled: true,
		school: "@eval GOLD",
		creature: {
			tags: ['Elemental', 'Stonebound'],
			overlays: [ { image_num: 25 } ],
			attack: 4,
			life: 7,
			move: 1,
            triggered_abilities: [{
				name: "Rock Solid",
				rules: "Gains 1 armor per mana spent on channeling.",
				on_summoned: "def(class creature creature, class game game) ->commands
                [
                    add(creature.resistance, creature.channel),
                ]",
            }],
			image_num: 35
		}
	},

	"Stalwart Warrior": {
		name: "Stalwart Warrior",
		type: "creature",
		portrait: "stalwart-warrior.png",
		cost: 4,
		loyalty_cost: 0,
		school: "@eval GOLD",
		creature: {
			tags: ['Dwarf'],
			attack: 4,
			life: 4,
			move: 0,
			resistance: 3,
			initiative: 20,
		}
	},

	"Guard of the Keep": {
		name: "Guard of the Keep",
		type: "creature",
		portrait: "guard-of-the-keep.png",
		cost: 2,
		loyalty_cost: 3,
		school: "@eval GOLD",

		rules: "Guard of the Keep may be summoned on any construct you control.",

		possible_targets: "def(class game game, int nplayer, [Loc] targets) ->[Loc]|null
			if(targets = [],
				game.players[nplayer].summoning_locs(game, creature) +
				filter([bldg.loc | bldg <- game.constructs,
								   bldg.controller = nplayer],
				       (not game.creature_at_loc(value)))
			)
			asserting creature
		",
		creature: {
			tags: ['Dwarf'],
			attack: 4,
			life: 4,
			move: 1,
			initiative: 20,
			image_num: 42,

			//carries a sword and shield
			overlays: [ { image_num: 13, }, { image_num: 20, } ],
		}
	},
	
	"Dwarvish Engineer": {
		name: "Dwarvish Engineer",
		type: "creature",
		portrait: "dwarvish-engineer.png",
		cost: 3,
		loyalty_cost: 1,
		school: "@eval GOLD",
		rules: "You may summon constructs on or adjacent to Dwarvish Engineer.",
		creature: {
			name: 'Dwarvish Engineer',			
			tags: ['Dwarf'],
			allows_summoning: "def(class game game, class creature target) ->[Loc]
			if(target.is_construct,
			  filter(game.all_locs, (game.locs_adjacent(value, loc) or value = loc) and
			         game.construct_at_loc(value) = null), [])",

			school: "@eval GOLD", 
			attack: 2,
			life: 4,
			move: 1,
			initiative: 20,
			image_num: 71,
		}
	},

	"Launchpad": {
		name: "Launchpad",
		type: "creature",
		cost: 1,
		loyalty_cost: 5,
		school: "@eval GOLD",
		rules: "At the start of each turn, a creature on the same tile as Launchpad gets +2 move this turn.",
		creature: {
			is_construct: true,
			on_begin_turn: "def(class game game) ->commands
				map(game.creatures, if(value.loc = me.loc, value.apply_effect_until_end_of_turn('move', 2)))
			"
		}
	},

	"Dwarvish Crossbow": "Thunderer",

	"Ballista": {
		name: "Ballista",
		type: "creature",
		cost: 3,
		loyalty_cost: 3,
		school: "@eval GOLD",
		creature: {
			sprite_sheet: 'building',
			life: 4,
			range: 3,
			attack: 2,
			image_num: 0,
			is_building: true,
		}
	},

	"Eldric's Bazaar": {
		name: "Eldric's Bazaar",
		type: "creature",
		cost: 3,
		loyalty_cost: 4,
		school: "@eval GOLD",
		rules: "-1 Hand size. At the start of your turn, you gain +3 mana;.",
		creature: {
			tags: ["Marketplace"],
			life: 2,
			is_construct: true,
			image_num: 0,

			on_begin_turn: "def(class game game) ->commands
			if(game.current_player = controller,
			   [game.players[controller].gain_mana_with_hint(game, loc)]*3)",

			static_effect: "def(class game game) -> commands
			if(controller >= 0,
			   game.players[controller].apply_static_effect(
				(def(class player p, map info) ->commands add(p.hand_size, -1)),
				(def(class player p, map info) ->commands add(p.hand_size, 1)),
			  {}))",
		}
	},

	"Mine": {
		name: "Mine",
		type: "creature",
		set: "core",
		cost: 3,
		artist: "lucy",
		portrait: "mine.png",
		school: "@eval GOLD",
		rules: "+1 mana/turn",
		flavor_text: "All the riches on the Earth,
and all the riches beneath it too.",

		creature: {
			tags: ["Mine"],
			portrait_y_offset: 20,
			portrait_scale: 0.15,
			life: 6,
			is_construct: true,
			image_num: 0,

			income: "def(class game game) ->int 1",
		}

	},

	"Stormgard Armory": {
		name: "Stormgard Armory",
		type: "creature",
		cost: 4,
		loyalty_cost: 4,
		school: "@eval GOLD",
		rules: "Creatures you control in this lane have +1 attack and +1 resistance.",
		creature: {
			tags: ["Forge"],
			life: 12,
			is_construct: true,
			image_num: 0,

			static_ability_effect: "if(creature.controller = target.controller and creature.loc[0] = target.loc[0], [target.apply_static_effect('attack', 1), target.apply_static_effect('resistance', 1)])",
		}
	},

	"Dwarf Forge": {
		name: "Dwarf Forge",
		type: "creature",
		cost: 4,
		loyalty_cost: 2,
		school: "@eval GOLD",
		rules: "Creatures you control in this lane have +1 attack and +1 life.",
		creature: {
			tags: ["Forge"],
			life: 8,
			is_construct: true,
			image_num: 0,

			static_ability_effect: "if(creature.controller = target.controller and creature.loc[0] = target.loc[0], [target.apply_static_effect('attack', 1), target.apply_static_effect('life', 1)])",
		}
	},
	
	"Oldric's Guard": {
		name: "Oldric's Guard",
		type: "creature",
		portrait: "oldrics-guard.png",
		cost: 2,
		loyalty_cost: 2,
		school: "@eval GOLD",
		creature: {
			tags: ['Dwarf'],
			attack: 4,
			life: 4,
			move: 1,
			initiative: 20,
			image_num: 71,
			activated_abilities: [{
				name: 'Sacrifice',
				rules: "Sacrifice Oldric's Guard. Your creatures in this lane are Indestructible this turn.",
				cost: 1,
				is_response: true,
				school: "@eval GOLD",
				on_play: "def(class game game, class creature creature, class message.play_ability info) ->commands [
					set(creature.sacrificed, true),
					[friend.add_ability_until_end_of_turn('Indestructible') |
					 friend <- game.creatures,
					 friend.controller = creature.controller,
					 friend != creature, friend.loc[0] = creature.loc[0]]
				]",
			}],
		}		
	},

	"Shore Up": {
		name: "Shore Up",
		type: "invocation",
		school: "@eval GOLD",
		cost: 2,
		loyalty_cost: 3,
		is_response: true,
		rules: "Target building gains +4 life and +1 resistance.",
		possible_targets: "def(class game game, int nplayer, [Loc] targets) ->[Loc]|null
		  if(targets = [], [creature.loc | creature <- game.creatures, creature.is_building, creature.summoned, creature.is_valid_target(game, nplayer, me)])",
		on_play: "def(class game game, class message.play_card info) ->commands
		  [add(building.life, 4), add(building.resistance, 1)]
		          where building = game.creature_at_loc_or_die(info.targets[0])"
	},
	
	"Armour Up": {
		name: "Armour Up",
		type: "invocation",
		school: "@eval GOLD",
		cost: 2,
		loyalty_cost: 1,
		is_response: true,
		rules: "Target creature gains +1 resistance.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands
		  add(creature.resistance, 1)
			asserting size(info.targets) = 1
			where creature = game.creature_at_loc_or_die(info.targets[0])",
	},
	
	"Whites of their Eyes": {
		name: "Whites of their Eyes",
		type: "invocation",
		school: "@eval GOLD",
		cost: 2,
		loyalty_cost: 2,
		is_response: true,
		rules: "Ranged creatures you control gain +1 range, +2 attack, and First Strike this turn.",
		possible_targets: "def(class game game, int nplayer, [Loc] targets) ->[Loc]|null null",
		on_play: "def(class game game, class message.play_card info) ->commands map(game.creatures, creature, if(creature.range > 1 and creature.controller = game.current_player, [
			creature.apply_effect_until_end_of_turn('range', 1-creature.range),
			creature.apply_effect_until_end_of_turn('attack', 2),
			creature.add_ability_until_end_of_turn('First Strike')]))",
	},
	
	"Forced March": {
		name: "Forced March",
		type: "invocation",
		portrait: "forced-march.png",
		school: "@eval GOLD",
		cost: 2,
		loyalty_cost: 2,
		rules: "Creatures you control get +2 move and -1 life this turn.",
		possible_targets: "def(class game game, int nplayer, [Loc] targets) ->[Loc]|null null",
		on_play: "def(class game game, class message.play_card info) ->commands
			[ [creature.apply_effect_until_end_of_turn('life', -1),
			   creature.apply_effect_until_end_of_turn('move', 2) ] |
			 creature <- game.creatures,
			 creature.controller = game.current_player_index,
			 not creature.is_building]"
	},
	
	"Blessing of Glothorn": {
		name: "Blessing of Glothorn",
		type: "invocation",
		school: "@eval GOLD",
		cost: 0,
		loyalty_cost: 3,
		rules: "All Dwarves gain the ability 'Glothorn\'s Blessing: This creature gets +2 attack and -1 resistance this turn.'",
		on_play: "def(class game game, class message.play_card info) ->commands map(game.creatures,
			if('Dwarf' in creature.tags and find(creature.activated_abilities, value.name = q(Glothorn's Blessing)) != null, 
			add(creature.activated_abilities, [{
				name: q(Glothorn's Blessing),
				cost: 1,
				school: GOLD,
				rules: 'This creature gets +2 attack and -1 resistance this turn.',
				on_play: q(def(class game game, class creature creature, class message.play_ability info) ->commands [
					creature.apply_effect_until_end_of_turn('attack', 1),
					creature.apply_effect_until_end_of_turn('resistance', -1)
				])
			}])) where creature = class creature :: value)",		
	},

	"Rune Cannon": {
		name: "Rune Cannon",
		type: "creature",
		school: "@eval GOLD",
		cost: 3,
		loyalty_cost: 3,
		rules: "At the end of your turn, Rune Cannon gains +1 energy if it has 0 exhaust;.",
		creature: {
			tags: ["Cannon"],
			is_construct: true,
			image_num: 7,
			attack: 0,
			life: 4,


			on_end_turn: "def(class game game) ->commands
			if(game.current_player_index = controller and not is_exhausted,
				add(me.energy, 1)
			)",

			activated_abilities: [{
				name: 'Fire',
				cost: 0,
				school: "@eval GOLD",
				loyalty_cost: 1,
				rules: "Remove all energy from this creature, and target creature or fortification is dealt that much damage.",
				possible_targets: "
				def(class game game, class creature creature, [Loc] targets) ->[Loc]|null
				  if(targets = [], map(game.creatures, value.loc), null)",

				on_play: "def(class game game, class creature creature, class message.play_ability info) ->commands [
					add(game.creature_at_loc_or_die(info.targets[0]).life, -creature.energy),
				]",

				on_pay_cost: "def(class game game, class creature creature, class message.play_ability info) ->commands [
					set(creature.energy, 0),
				]",
			}]
		}
	},
	

	"Training Dummy": {
		name: "Training Dummy",
		type: "creature",
		cost: 1,
		loyalty_cost: 2,
		school: "@eval GOLD",
		rules: "When Training Dummy is summoned, you get +2 Materia experience.",
		creature: {
			tags: ['Mechanical'],
			image_num: 77,
			overlays: [ { image_num: 2 }, { image_num: 8 } ],
			attack: 0,
			life: 2,
			move: 0,
			on_summoned: "def(class game game) ->commands [
				game.players[controller].level_up(GOLD),
				game.players[controller].level_up(GOLD)
			]"
		}
	},

	"Onager": {
		name: "Onager",
		set: "core",
		type: "creature",
		cost: 5,
		loyalty_cost: 2,
		school: "@eval GOLD",
		portrait: "loading-a-catapult.png",
		creature: {
			tags: ['Mechanical'],
			portrait_scale: 0.5,
			image_num: 78,
			attack: 3,
			range: 2,
			life: 2,
			move: 1,
			on_begin_turn: "def(class game game) ->commands
			  if(game.current_player != controller, me.apply_effect_until_end_of_turn('attack', -attack))"
		}
	},
	
	"Trebuchet": {
		name: "Trebuchet",
		type: "creature",
		cost: 7,
		loyalty_cost: 3,
		school: "@eval GOLD",
		creature: {
			tags: ['Mechanical'],
			image_num: 78,
			attack: 4,
			range: 3,
			life: 6,
			move: 1,
		}
	},

	"Need More Lumber": {
		name: "Need More Lumber",
		type: "invocation",
		cost: 0,
		school: 1,
		initiative: 40,
		rules: "Sacrifice a creature you control, you gain 2 mana.",

		possible_targets: "def(class game game, int nplayer, [Loc] targets) ->[Loc]|null
			if(targets = [], [creature.loc | creature <- game.creatures, creature.controller = game.current_player])
		",
		on_play: "def(class game game, class message.play_card info) ->commands
		 if(game.current_player = creature.controller,[
		     set(creature.destroyed, true),
			 bind_command(fn, game.players[creature.controller]) where fn = def(class player p) add(p.resources, 2)

		]) where creature = game.creature_at_loc_or_die(info.targets[0])",
	},
	"Oldric's Storehouse": {
		name: "Oldric's Storehouse",
		type: "creature",
		cost: 4,
		loyalty_cost: 4,
		school: "@eval GOLD",
		rules: "Mana does not drain from your mana pool at the end of turn",
		creature: {
			tags: ['Hold'],
			is_construct: true,
			static_effect: "def(class game game) -> commands
			if(controller >= 0,
			   game.players[controller].apply_static_effect(
				(def(class player p, map info) ->commands add(p.hoard, 1)),
				(def(class player p, map info) ->commands add(p.hoard, -1)),
				{}))"
		}
	},
    
	"Disarmament": {
		name: "Disarmament",
		type: "invocation",
		school: "@eval GOLD",
		cost: 4,
		loyalty_cost: 3,
        is_response: false,
		rules: "All enemy units have 0 attack until end of the turn.",
		on_play: "def(class game game, class message.play_card info) ->commands
            [creature.apply_effect_until_end_of_turn('attack', -creature.attack) | creature <- game.creatures, creature.controller != game.current_player]
        ",

		runes: [{
			color: 'black',
			points: [[50,75], [75,0], [50,0], [75,75]]
		}],
	},
    
	"Cut-Throat": {
		name: "Cut-Throat",
		type: "creature",
        set: "core",
		portrait: "cutthroat.png",
		cost: 2,
		loyalty_cost: 2,
		school: "@eval GOLD",
        rules: "Draw two cards when this card moves into a land you don't control.",
		creature: {
			tags: ['Human'],
			attack: 5,
			life: 3,
			move: 1,
            on_move_over_construct: "def(class game game, class creature construct) ->commands
            if(construct.controller != me.controller, [game.players[me.controller].draw_cards(game, 2)])"
		}
	},
    
    "Shield Bearer": {
		name: "Shield Bearer",
		type: "creature",
        set: "core",
		portrait: "shield-bearer.png",
		cost: 2,
		school: "@eval GOLD",
		creature: {
			tags: ['Human'],
			attack: 1,
			life: 2,
            resistance: 3,
			move: 1,
		}
	},
    
    "Cunning Rogue": {
		name: "Cunning Rogue",
		type: "creature",
        set: "core",
		portrait: "cunning-rogue.png",
		cost: 4,
		loyalty_cost: 2,
		school: "@eval GOLD",
		creature: {
			tags: ['Human'],
			attack: 4,
			life: 5,
			move: 1,
            activated_abilities: [
				{
					name: 'Trick',
					cost: 2,
					loyalty_cost: 0,
					school: "@eval GOLD",
					portrait: "school-gold.png",
					rules: "Cunning Rogue can switch places with a creatre in front or behind him. This cannot be used as a response.",
					is_response: false,
					sound_resolve: 'creatures/wisp-unsummon.wav',
					possible_targets: "def(class game game, class creature creature, [Loc] targets) ->[Loc]|null
						if(targets != [], null,
						   map(filter(game.creatures, value != creature and value.is_building = false and value.loc[0] = creature.loc[0] and abs(value.loc[1] - creature.loc[1])=1), value.loc)
						)
					",

					on_play: "
					 def(class game game, class creature creature, class message.play_ability info) ->commands [
					 	set(creature.loc, info.targets[0]),
						set(game.creature_at_loc_or_die(info.targets[0]).loc, creature.loc),
					]"
				}
			]
		}
	},
}
