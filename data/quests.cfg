{
	'win_a_game': {
		name: "Acolyte",
		rules: "Complete a tutorial or match",
		on_end_game: "def(class creature creature, class game game, int nwinner) ->commands
				if(creature.controller = nwinner, increment())
		",
		max_value: 1,
		_reward: 50,
	},
	'destroy_creatures': {
		name: "Vanquisher",
		rules: "Destroy 30 creatures",
		requirements: ['win_a_game'],
		max_value: 3,
		_reward: 50,
		on_another_creature_died: "def(class creature creature, class game game, class creature victim) ->commands if(not game.puzzle and victim.controller != creature.controller, increment())",
	},

	'cast_spells': {
		name: "Wizard",
		rules: "Cast 50 spells",
		requirements: ['win_a_game'],
		max_value: 5,
		_reward: 50,
		on_card_played: "def(class creature creature, class game game, class player player, class message.play_card info) ->commands
				if(not game.puzzle and info.player_index = creature.controller and info.card and info.card.type = 'spell', [
					increment()
				])
		",
	},

	'cast_responses': {
		name: "Archmage",
		rules: "Cast 20 responses to enemy cards",
		requirements: ['cast_spells'],
		max_value: 20,
		_reward: 80,
		on_card_played: "def(class creature creature, class game game, class player player, class message.play_card info) ->commands
				if(info.player_index = creature.controller and info.card and info.card.type = 'spell' and game.stack, [
					increment()
				])
		",
	},

	'cast_lands': {
		name: "Conjurer",
		rules: "Cast 20 land cards",
		requirements: ['win_a_game'],
		max_value: 2,
		_reward: 50,
		on_card_played: "def(class creature creature, class game game, class player player, class message.play_card info) ->commands
				if(not game.puzzle and info.player_index = creature.controller and info.card and info.card.is_land, [
					increment()
				])
		",
	},

	'win_games': {
		name: "Conqueror",
		rules: "Win 3 games",
		requirements: ['win_a_game'],
		_reward: 50,
		on_end_game: "def(class creature creature, class game game, int nwinner) ->commands
				if(not game.puzzle and creature.controller = nwinner, increment())
		",
		max_value: 3,
	},

	'win_games_quickly': {
		name: "Raider",
		rules: "Win a game in 10 turns or less",
		requirements: ['win_a_game'],
		_reward: 50,
		on_end_game: "def(class creature creature, class game game, int nwinner) ->commands
			if(not game.puzzle and creature.controller = nwinner and game.nturn < 20, increment())

		",
		max_value: 1,
	},

	'win_games_quickly2': {
		name: "Marauder",
		requirements: ['win_games_quickly'],
		rules: "Win a game in 8 turns or less",
		_reward: 80,
		on_end_game: "def(class creature creature, class game game, int nwinner) ->commands
			if(not game.puzzle and creature.controller = nwinner and game.nturn < 16, increment())

		",
		max_value: 1,
	},

	'win_games_life': {
		name: "Guardian",
		rules: "Win a game with 25 or more life remaining",
		requirements: ['win_a_game'],
		_reward: 50,
		on_end_game: "def(class creature creature, class game game, int nwinner) ->commands
			if(not game.puzzle and creature.controller = nwinner and game.players[creature.controller].life >= 25, increment())

		",
		max_value: 1,
	},

	'win_games_life2': {
		name: "Sentinel",
		rules: "Win a game with 35 or more life remaining",
		requirements: ['win_games_life'],
		_reward: 80,
		on_end_game: "def(class creature creature, class game game, int nwinner) ->commands
			if(not game.puzzle and creature.controller = nwinner and game.players[creature.controller].life >= 35, increment())

		",
		max_value: 1,
	},
	
}
