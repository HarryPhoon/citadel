{
	"Elf": {
		name: "Elf",
		type: "creature",
		cost: 2,
		school: 3,
		creature: {
			tags: ['Elf'],
			attack: 2,
			life: 4,
			move: 2,
			initiative: 30,
			image_num: 1,
		}
	},

	"Elvish Archer": {
		name: "Elvish Archer",
		type: "creature",
		cost: 4,
		school: 3,
		creature: {
			tags: ['Elf'],
			attack: 2,
			life: 2,
			move: 2,
			initiative: 50,
			image_num: 1,
			range: 2,

			//Wears a bow and quiver
			overlays: [ { image_num: 11, }, { image_num: 2, } ],
			abilities: [
				{
					name: "Stand Ground",
					cost: 1,
					school: 3,
					rules: "range -> 4, move -> 0 this turn.",
					on_play: "def(game, creature, info) [
					  creature.apply_effect_until_end_of_turn('range', 4 - creature.range),
					  creature.apply_effect_until_end_of_turn('move', -creature.move)]",
				}
			],
		}
	},

	"Call of the Pack": {
		name: "Call of the Pack",
		type: "spell",
		cost: 5,
		school: 3,
		rules: "Summon three 1/1/2 wolves. They each get +1/+1 for each other wolf you control.",
		possible_targets: "def(game, nplayer, targets)
		   if(size(targets) = 3, null,
		      filter(game.players[nplayer].summoning_locs(game),
			         not (value in targets)))",
		on_play: "def(game, info) map(info.targets, game.summon_creature(construct('creature', {
			name: 'Wolf',
			tags: ['Wolf'],
			school: 3,
			controller: game.current_player,
			loc: value,
			attack: 1,
			life: 1,
			move: 2,
			initiative: 20,
			image_num: 5,
			static_ability_effect: q(if(creature = target, [creature.apply_static_effect('attack', bonus), creature.apply_static_effect('life', bonus)] where bonus = count(game.creatures, value.controller = creature.controller and value != creature and ('Wolf' in value.tags))))

		})))"
	},

	"Goblin King": {
		name: "Goblin King",
		type: "creature",
		cost: 4,
		school: 3,
		rules: "When Goblin King is summoned, it summons a goblin in each adjacent lane. Adjacent goblins get +1 attack, +1 life.",
		creature: {
			tags: ['Goblin'],
			abilities: ['Marauder'],
			image_num: 15,
			on_summoned: "def(game) map([[loc[0]-1,loc[1]], [loc[0]+1,loc[1]]],
			               if(game.is_loc_on_board(value) and
						      game.creature_at_loc(value) = null,
							  game.summon_creature(construct('creature',
							    {
									name: 'Goblin',
									school: 3,
									tags: ['Goblin'],
									abilities: ['Marauder'],
									attack: 1,
									life: 2,
									move: 2,
									image_num: 40,
									controller: controller,
									loc: value
								})
							  
							  )))",
			static_ability_effect: "if(creature != target and creature.controller = target.controller and game.locs_adjacent(creature.loc, target.loc) and ('Goblin' in target.tags),
			   [target.apply_static_effect('life', 1),
			    target.apply_static_effect('attack', 1)])",
			attack: 2,
			life: 3,
			move: 2,
			
		}
	},

	"Wolf Rider": {
		name: "Wolf Rider",
		type: "creature",
		cost: 3,
		school: 3,
		creature: {
			tags: ['Mounted', 'Goblin'],
			abilities: ['Marauder'],
			attack: 2,
			life: 3,
			move: 3,
			image_num: 50
		}
	},

	"Goblin Grenadier": {
		name: "Goblin Grenadier",
		type: "creature",
		cost: 3,
		school: 3,
		rules: "When Goblin Grenadier is blocked, it blows up, destroying itself and doing 2 damage to each adjacent creature or building.",
		creature: {
			tags: ['Goblin'],
			abilities: ['Marauder'],
			attack: 2,
			life: 2,
			move: 2,
			initiative: 30,
			image_num: 40,
			overlays: [{image_num: 2}],

			on_move: "def(game) if(creature_in_front and creature_in_front.controller != controller,
			       //we've been blocked, blow up!
				  [
				   set(me.destroyed, true),
				   set(me.death_animation_hint, 'explosion'),
				   [ target.inflict_combat_damage(game, me, 2)
				     | target <- game.creatures,
				       game.locs_adjacent(loc, target.loc) ]
				  ])
			   where creature_in_front = game.summoned_creature_at_loc([loc[0], loc[1] + direction_moving])",
		}
	},

	"Goblin": {
		name: "Goblin",
		type: "creature",
		cost: 1,
		school: 3,
		creature: {
			tags: ['Goblin'],
			abilities: ['Marauder'],
			attack: 1,
			life: 2,
			move: 2,
			initiative: 30,
			image_num: 40,
		}
	},

	"Goblin Sapper": {
		name: "Goblin Sapper",
		type: "creature",
		cost: 2,
		school: 3,
		rules: "+2 resistance against ranged attacks.\n+3 damage against buildings.",
		creature: {
			tags: ['Goblin'],
			abilities: ['Marauder'],
			attack: 1,
			life: 1,
			move: 3,
			initiative: 30,
			image_num: 40,
			overlays: [{image_num: 4}],
			static_ability_effect: "if(creature.controller != target.controller and game.locs_adjacent(creature.loc, target.loc) and target.is_building, 
				creature.apply_static_effect('attack', 3)
			)",
			resistance_against: "def(game, attacker, damage) me.resistance + if(attacker.range > 1, 2, 0)",
		}
	},
	
	"Wolf": {
		name: "Wolf",
		type: "creature",
		cost: 2,
		school: 3,
		creature: {
			tags: ['Wolf'],
			attack: 2,
			life: 2,
			move: 2,
			initiative: 20,
			image_num: 5,
		}
	},

	"Lumbering Ogre": {
		name: "Lumbering Ogre",
		type: "creature",
		cost: 6,
		school: 3,
		rules: "At start of turn, if an enemy is immediately in front of Ogre, Ogre gains +5 until end of turn",
		creature: {
			tags: ['Ogre'],
			attack: 0,
			life: 8,
			move: 2,
			image_num: 17,
			on_begin_turn: "def(game) if(is_engaged(game), me.apply_effect_until_end_of_turn('attack', 5))",
		}
	},

	"Green Adder": {
		name: "Green Adder",
		type: "creature",
		cost: 2,
		school: 3,
		creature: {
			tags: ['Serpent'],
			attack: 3,
			life: 1,
			move: 2,
			image_num: 64
		}
	},

	"Exploration": {
		name: "Exploration",
		type: "spell",
		rules: "Add a new lane to the bottom of the map",
		cost: 3,
		school: 3,
		on_play: "def(game, info) add(game.rows, 1)"
	},

	"Wose": {
		name: "Wose",
		type: "creature",
		cost: 7,
		school: 3,
		rules: "At start of your turn, if Wose is in forest it regenerates to full health. If it is not in forest, it takes one damage.",
		creature: {
			tags: ['Wose'],
			attack: 8,
			life: 8,
			move: 1,
			image_num: 59,
			on_begin_turn: "def(game) if(game.current_player = controller,
			      if(game.terrain_at_loc(loc) = 'forest',
				     set(me.wounds, 0),
					 add(me.wounds, 1)))"
		}
	},

	"Cavern Wurm": {
		name: "Cavern Wurm",
		type: "creature",
		cost: 5,
		school: 3,
		creature: {
			tags: ['Wurm'],
			attack: 5,
			life: 3,
			move: 2,
			image_num: 65
		}
	},

	"Hydra": {
		name: "Hydra",
		type: "creature",
		cost: 6,
		school: 3,
		creature: {
			tags: ['Serpent'],
			attack: 4,
			life: 4,
			move: 2,
			abilities: [
				{
					name: "Regrow",
					cost: 1,
					school: 3,
					rules: "Heal 1, then get +1/+1",

					is_usable: "def(game, creature) creature.wounds > 0",
					on_play: "def(game, creature, info) [
					  add(creature.wounds, -1),
					  add(creature.attack, 1),
					  add(creature.life, 1)
					]",
				}
			],
			image_num: 63
		}
	},
	
	"Farm": {
		name: "Farm",
		type: "creature",
		cost: 2,
		school: 3,
		rules: "+1 food per turn",
		creature: {
			tags: ['Farm'],
			life: 2,
			image_num: 1,
			is_building: "true",
			on_begin_turn: "def(game) if(game.current_player = controller,
			    { execute: q(add(player.resources, 1)), arg: {player: game.players[controller]} } )"
		}
	},
}
