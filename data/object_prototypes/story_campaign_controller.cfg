{
	id: "story_campaign_controller",
	prototype: ["citadel_controller_base"],
	is_human: true,
	hidden_in_game: true,
	is_strict: true,

	types: {
	},

	properties: {
		_title_controller: { type: "null|obj title_controller" },
		title_controller: "obj title_controller<- _title_controller",

		level_width: "int :: level.dimensions[2] - level.dimensions[0]",
		level_height: "int :: level.dimensions[3] - level.dimensions[1]",

		sidebar_width: "int :: lib.citadel.px(300)",
		sidebar_left: "int :: level_width - sidebar_width",

		background_blur_bottom: "decimal :: if(_in_shop, 1.0, _in_library, 0.0, _status_dialog != null, decimal(_status_dialog.img_h)/decimal(level_height), 0.0)",
		background_blur_left: "decimal :: if(dialog = null or _in_library, 1.0, decimal(sidebar_left)/decimal(level_width)) where dialog = find(_location_controls, value is obj campaign_location_dialog)",

		_in_shop: { type: "bool", default: false },
		_in_library: { type: "bool", default: false },

		hex_width: "int :: round_to_even(hex_height*1.3)",
		hex_height: "int :: lib.citadel.px(78)",
		hex_indent: "int :: hex_width - hex_height",
		hex_reverse_indent: "int :: hex_width - hex_indent",

		hex_spacing: "int :: round_to_even(hex_height*1.1)",

		hex_pos: "def(Loc loc) ->Loc [
			loc[0]*hex_spacing,
			loc[1]*hex_spacing + if(loc[0]%2=1, hex_spacing/2, 0)
		]
		",

		_player_avatar: { type: "null|obj campaign_player_avatar" },
		player: "obj campaign_player_avatar<- _player_avatar",

		player_deck: { type: "[string]", default: ["Rihn's Anointed", "Rihn's Anointed", "Rihn's Anointed", "Disciple", "Disciple", "Disciple"], },

		player_collection: { type: "[string]", default: ["Rihn's Anointed", "Rihn's Anointed", "Rihn's Anointed", "Disciple", "Disciple", "Disciple"] },

		player_gold: { type: "int", default: 100 },
		player_wounds: { type: "int", default: 0 },
		player_max_wounds: { type: "int", default: 12 },

		spend_gold: "def(int amount) ->commands execute(me, [
			add(player_gold, -amount),
			bind_command(find_or_die(level.chars, value is obj campaign_status_dialog).update_gold),
		])",

		heal_wounds: "def() ->commands execute(me, [
			set(player_wounds, 0);
			if(_status_dialog, _status_dialog.update_wounds())
		])",

		_regions: { type: "[class campaign_region]", default: [] },
		get_region_for_loc: "def(Loc loc) -> class campaign_region|null
		if(result, result.region)
		  where result = find(sorted_regions, path != null and find(path, value in context.value.region.borders) = null where path = get_path(loc, value.region.loc))
		  where sorted_regions = sort(filter(scored_regions, value.score < value.region.radius), a.score < b.score)
		  where scored_regions = map(_regions, { region: value, score: distance_between(value.loc, loc) })",

		_last_heralded_region: { type: "null|class campaign_region" },

		herald_region: "def(class campaign_region region) ->commands [
			set(_last_heralded_region, region),
			if(_last_heralded_region != null and _last_heralded_region != region, [
				if(region.music, music(region.music)),
				spawn('label', 0, 0, {
					x: int(level_width*0.3),
					y: level_height/2,
					alpha: 0,
					_blend: null,
					_halign: 'center',
					_valign: 'center',
					_font_size: lib.citadel.px(84),
					zorder: 10000,
					_text: [region.name],
					use_absolute_screen_coordinates: true,
				}, [
					animate(child, {
						alpha: 255,
						mid_x: level_width/2,
					}, {
						duration: 40,
						name: 'fade',
						replace_existing: false
					}),
					animate(child, {
						alpha: 255,
					}, {
						duration: 100,
						name: 'fade',
						replace_existing: false
					}),
					animate(child, {
						alpha: 0,
						mid_x: int(level_width*0.7)
					}, {
						duration: 40,
						name: 'fade',
						replace_existing: false,
						on_complete: remove_object(child)
					}),
				]
				)
			])
		]",

		_animate_herald: "def(custom_obj child) ->commands [
		]",

		_locations: { type: "[obj campaign_location]", default: [], set: "[set(_data, value), invalidate_graph()]" },
		get_location: "def(Loc loc) ->null|obj campaign_location find(_locations, value.loc = loc)",

		_location_controls: { type: "[custom_obj]", default: [] },

		_status_dialog: { type: "null|obj campaign_status_dialog" },
		get_status_dialog: "def() ->obj campaign_status_dialog _status_dialog asserting _status_dialog",

		tile_color: "def(string name) ->[decimal,decimal,decimal]
		switch(name,
			'shallow', [0.65,0.86,0.96],
			'beach', [0.87,0.91,0.58],
			'grass', [0.27,0.37,0.25],
			'mountain', [0.45,0.38,0.31],
			[0.0,0.0,0.0],
		)",

		passable_tiles: { type: "[string]", default: ['beach', 'grass'] },

		is_passable: "def(Loc loc) ->bool loc_on_board(loc) and tilemap[loc[1]*tilemap_width + loc[0]] in passable_tiles",

		get_path: "def(Loc a, Loc b) ->[Loc]|null
			if(a = b, [], [Loc]|null<- if(result, result) where result = a_star_search(get_loc_graph, a, b, def(Loc a, Loc b) ->decimal distance_between(a,b)))
		",

		_graph_cache: { type: "object", init: "create_cache(1)" },
		_graph_revision: { type: "int", default: 1 },

		invalidate_graph: "def() ->commands add(_graph_revision, 1)",

		get_loc_graph: "weighted_directed_graph :: query_cache(_graph_cache, _graph_revision, weighted_graph(directed_graph([[xpos,ypos] | xpos <- range(tilemap_width), ypos <- range(tilemap_height), is_passable([xpos,ypos])], def(Loc loc) ->[Loc] if(find(_locations, value.loc = loc) != null, [], filter(get_adjacent_locs_on_board(loc), is_passable(value)))), def(Loc aa, Loc bb) ->decimal if(locations[bb], 100.0, 0.0) + if(me.get_terrain(aa) = me.get_terrain(bb), 1.0, 1.01) + (aa[0] - bb[0])*0.00001 + (aa[1] - bb[1])*0.0001) where locations = fold(map(_locations, {(value.loc): true}), a+b))",

		tilemap: "[string] :: [
		s, s, s, s, s, s, s, s, s, s, s, s, s, s, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g,
		s, s, b, b, b, s, b, b, b, b, b, s, s, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g,
		s, b, g, g, b, b, b, g, g, g, g, m, s, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g,
		s, b, g, g, g, g, g, g, g, g, m, m, m, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g,
		s, b, g, g, g, g, g, g, m, m, m, m, m, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g,
		s, b, b, g, m, g, m, g, m, m, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g,
		s, s, b, m, m, m, m, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g,
		s, s, b, m, m, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g,
		s, b, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g,
		s, b, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g,
		s, b, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g,
		s, b, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g,
		s, b, g, g, b, b, b, b, b, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g,
		s, b, b, b, s, s, s, s, s, b, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g,
		s, s, s, s, s, s, s, s, s, s, b, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g,
		s, s, s, s, s, s, s, s, s, s, g, b, b, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g,
		s, s, s, s, s, s, s, s, s, s, g, g, g, b, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g,
		s, s, s, s, s, s, s, s, s, s, g, g, g, b, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g,
		s, s, s, s, s, s, s, s, s, s, g, g, g, b, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g,
		s, s, s, s, s, s, s, s, s, s, g, g, g, b, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g, g,
		] where b = 'beach'
		  where g = 'grass'
		  where m = 'mountain'
		  where s = 'shallow'",

		tilemap_width: "int :: 40",
		tilemap_height: "int :: size(tilemap) / tilemap_width",

		get_terrain: "def(Loc loc) ->string tilemap[loc[1]*tilemap_width + loc[0]]",

		distance_between: "def(Loc a, Loc b) ->int
		  xdiff + max(0, ydiff - ydiscount)
		    where ydiscount = xdiff/2 + if(a[0]%2 = 0 and b[1] < a[1] or a[0]%2 = 1 and b[1] > a[1], xdiff%2, 0)
			where xdiff = abs(a[0] - b[0])
			where ydiff = abs(a[1] - b[1])
		",

		locs_adjacent: "def(Loc a, Loc b) ->bool
		  a[0] = b[0] and abs(a[1] - b[1]) = 1 or  //same row
		  abs(a[0] - b[0]) = 1  and (a[1] = b[1] or //one row apart
		        abs(a[1] - b[1]) = 1 and
				  ((a[0]%2 = 0 and a[1] = b[1]+1) or 
				   (a[0]%2 = 1 and a[1] = b[1]-1)))",

		loc_on_board: "def(Loc a) -> bool
			a[0] >= 0 and a[1] >= 0 and a[0] < tilemap_width and a[1] < tilemap_height",

		get_adjacent_locs: "def(Loc loc) ->[Loc]
		[
			[loc[0], loc[1]-1], //north
			[loc[0]+1, loc[1] - if(loc[0]%2 = 0, 1, 0)], //north-east
			[loc[0]+1, loc[1] + if(loc[0]%2 = 0, 0, 1)], //south-east
			[loc[0], loc[1]+1], //south
			[loc[0]-1, loc[1] + if(loc[0]%2 = 0, 0, 1)], //south-west
			[loc[0]-1, loc[1] - if(loc[0]%2 = 0, 1, 0)], //north-west
		]
		",

		get_adjacent_locs_on_board: "def(Loc loc) ->[Loc]
		  filter(get_adjacent_locs(loc), loc_on_board(value))",

		current_loc_mouseover: { type: "null|Loc", set: "[set(_data, value), if(_status_dialog, [_status_dialog.update_loc(value), _status_dialog.update_region(if(region, region.name)) where region = if(value != null, get_region_for_loc(value))])]" },

		tile_clicked: "def(Loc loc) ->commands execute(me, if(path and _fight_start = null, [
			player.move(path[1:])
			
		]) where path = get_path(player.loc, loc)
		)",

		_internal_client: { type: "object|null" },
		_session_id: { type: "int|null" },
		_sent_message: { type: "map|null" },

		_screen_focus_x: {
			type: "decimal|null",
			set: "if(value, [
			  set(_data, value),
			  set(level.dimensions, [xpos, level.dimensions[1], xpos + screen_width, level.dimensions[3]])
			]
			  where xpos = int(value - screen_width/2)
			  where screen_width = level.dimensions[2] - level.dimensions[0]
			)
			"
		},

		_screen_focus_y: {
			type: "decimal|null",
			set: "if(value, [
			  set(_data, value),
			  set(level.dimensions, [level.dimensions[0], ypos, level.dimensions[2], ypos + screen_height])
			]
			  where ypos = int(value - screen_height/2)
			  where screen_height = level.dimensions[3] - level.dimensions[1]
			)
			"
		},

		reposition_screen: "def(Loc pos, int duration=25) ->commands execute(me,
		if(new_pos != [null,null],
		[
		 set(_screen_focus_x, (level.dimensions[0] + level.dimensions[2])/2),
		 set(_screen_focus_y, (level.dimensions[1] + level.dimensions[3])/2),
		 animate(me, { _screen_focus_x: new_x }, { duration: duration }),
		 animate(me, { _screen_focus_y: new_y }, { duration: duration }),
		]
		  where new_x = new_pos[0] or (level.dimensions[0] + level.dimensions[2])/2
		  where new_y = new_pos[1] or (level.dimensions[1] + level.dimensions[3])/2
		  )
		  where new_pos = [if(pos[0] < border_left, max(pos[0], min_x), pos[0] > border_right, min(pos[0], max_x), null),
		                   if(pos[1] < border_top, max(pos[1], min_y), pos[1] > border_bot, min(pos[1], max_y), null)]
		  where border_bot = int(level.dimensions[1]*0.2 + level.dimensions[3]*0.7)
		  where border_top = int(level.dimensions[1]*0.7 + level.dimensions[3]*0.2)
		  where border_right = int(level.dimensions[0]*0.2 + level.dimensions[2]*0.7)
		  where border_left = int(level.dimensions[0]*0.7 + level.dimensions[2]*0.2)
		  where min_x = screen_width/2
		  where min_y = screen_height/2
		  where max_x = hex_pos([tilemap_width-1,tilemap_height-1])[0] - screen_width/2
		  where max_y = hex_pos([tilemap_width-1,tilemap_height-1])[1] - screen_height/2
		  where screen_width = level.dimensions[2] - level.dimensions[0]
		  where screen_height = level.dimensions[3] - level.dimensions[1]
		)
		",

		loc_is_full: "def(Loc loc) ->bool
		 loc_info != null
			where loc_info = find(level.chars, value is obj campaign_location and value.loc = loc)
		",

		player_enter_loc: "def(Loc loc) ->commands execute(me, [
		if(region != null, [
			herald_region(region),
			region.player_move(me, loc)
		]) where region = get_region_for_loc(loc),
		add_location_controls(find(level.chars, value is obj campaign_location and value.loc = loc)),
		if(loc_info, loc_info.info.handle_enter(me, loc_info)) where loc_info = find(level.chars, value is obj campaign_location and value.loc = loc),
		reposition_screen(pos)
		where pos = hex_pos(loc),
		if(selected, [set(c.highlight, c.loc in path) | c <- level.chars, c is obj campaign_tile] where path = get_path(loc, selected.loc) or []) where selected = find(level.chars, value is obj campaign_tile and value.selected),
		])",

		add_location: "def(map m, map flags={}) ->commands execute(me,
			spawn('campaign_location', 0, 0, m + { _controller: me , info: construct('campaign_location_info', m.info or {})}, [
				add(me._locations, [child]),
				if(flags['fade_in'] is int, [
					set(child.alpha, 0),
					animate(child, {
						alpha: 255,
					}, {
						duration: int<- flags['fade_in']
					})
				])
			])
		)",

		add_region: "def(map m) ->commands
			add(_regions, [construct('campaign_region', m)])
		",

		_fight_start: { type: "int|null" },

		force_fight: "def(Loc loc, Scenario scenario, class campaign_location_info location, int delay=0) ->commands execute(me,
		[
			set(me.player.current_path, []),
			set(me._current_scenario, scenario),
			set(me._current_scenario_location, location),
			set(me._internal_client, cl),
			set(me._session_id, sid),
			set(me._sent_message, msg),
			if(delay > 0, [
				set(_fight_start, cycle + delay),
				add(location_obj.zorder, 1000),
				set(location_obj.alpha, 0),
				animate(location_obj, {
					alpha: 255,
				}, {
					name: 'fight',
					duration: 12,
					replace_existing: false,
				}),

				animate(location_obj, {
					brightness: 512,
				}, {
					name: 'fight',
					duration: 4,
					replace_existing: false,
				}),

				animate(location_obj, {
					brightness: 255,
				}, {
					name: 'fight',
					duration: 4,
					replace_existing: false,
				}),

				animate(location_obj, {
					brightness: 512,
				}, {
					name: 'fight',
					duration: 4,
					replace_existing: false,
				}),

				animate(location_obj, {
					brightness: 255,
				}, {
					name: 'fight',
					duration: 4,
					replace_existing: false,
				}),

				if(player.attempt_loc != null,
					animate(location_obj, {
						mid_x: hex_pos(player.attempt_loc)[0],
						mid_y: hex_pos(player.attempt_loc)[1],
					}, {
						easing: def(decimal a)->decimal a*0.7,
						name: 'fight',
						duration: 8,
						replace_existing: false,
					})
				),

			] where location_obj = obj campaign_location<- get_location(loc)),

			tbs_send(cl, msg),
		])
			 where cl = tbs_internal_client()
			 where msg = {
				type: 'create_game',
				game_type: 'citadel',
				starting_units: scenario.starting_units,
				map_dimensions: scenario.map_dimensions,
				map_lanes: scenario.map_lanes,
				player_resources: scenario.player_resources,
				trophies: scenario.trophies,
				users: [{user: _mm_client_state.username, avatar: _mm_client_state.account_info.avatar, session_id: sid}, {user: scenario.enemy_name, bot_type: 'eval', args: [], bot_args: if(args != null, args, {}) where args = scenario.bot_args, bot: true, session_id: sid+1, avatar: scenario.avatar}]
			 }
				where sid = int<- time().unix
		",

		_current_scenario: { type: "null|Scenario" },
		_current_scenario_location: { type: "null|class campaign_location_info" },

		remove_location: "def(Loc loc) ->commands execute(me,
		[
			remove_object(find(_locations, value.loc = loc)),
			set(_locations, filter(_locations, value.loc != loc)),
		])",

		remove_location_animated: "def(Loc loc) ->commands execute(me,
		if(location != null,
		[
			animate(location, {
				alpha: 0,
			}, {
				duration: 25,
				on_complete: [bind_command(remove_location, loc), bind_command(update_visibility)],
			})
		]) where location = find(_locations, value.loc = loc))",

		starting_player: "map :: {}",
		starting_regions: "[map] :: []",
		starting_locations: "[map] :: []",

		_new_wounds: { type: "int", default: 0 },

		_defeated: { type: "bool", default: false },

		player_defeat: "def() ->commands [
			spawn('image_widget', 0, 0, {
				x: 0,
				y: - (int(level_width*(996.0/800.0)) - level_height),
				image: 'portraits/knife-in-the-dark.png',
				image_area: [0,0,799, 995],
				draw_width: level_width,
				draw_height: int(level_width*(996.0/800.0)),
				zorder: 50000,
				alpha: 0,
				use_absolute_screen_coordinates: true,
			}, [
				animate(child, {
					alpha: 255,
				}, {
					duration: 50,
					on_complete: bind_command(me._final_defeat)
				}),
				animate(child, {
					y: 0,
				}, {
					duration: 1000,
					easing: def(decimal a) ->decimal a^0.5,
					on_complete: animate(child, { red: 0, green: 0, blue: 0 }, { duration: 50 }),
				})
			]),
		]",

		_final_defeat: "def() ->commands execute(me, [
			[remove_object(c) | c <- level.chars, c != me and not c is obj image_widget],
			spawn('label', 0, 0, {
				x: level_width/2,
				y: level_height/2,
				_halign: 'center',
				_valign: 'center',
				_font_size: lib.citadel.px(48),
				zorder: 60000,
				_text: ['...and you were never', 'heard from again.'],
				use_absolute_screen_coordinates: true,
			}, [
			]),
			spawn('button_controller', level_width/2, level_height/2, {
				x: level_width/2 - lib.citadel.px(180)/2,
				y: level_height/2 + lib.citadel.px(200),
				zorder: 60000,
				text: 'Quit',
				on_click: (def() ->commands fire_event(me, 'quit_campaign')),
				button_width: lib.citadel.px(180),
				button_height: lib.citadel.px(80),
				_font_size: lib.citadel.px(24),
				use_absolute_screen_coordinates: true,
			}, [
			]),
		])",

		return_from_game: "
			def(bool result, null|class game state) ->commands [
				if(result = false and player_wounds >= player_max_wounds, set(_defeated, true),
				   result = false, add(_new_wounds, 4),
				   state and state.players[0].life < 40, add(_new_wounds, 1)),
				if(_current_scenario_location != null, if(result, _current_scenario_location.handle_victory(me), _current_scenario_location.handle_defeat(me))),
				if(result and _current_scenario and _current_scenario.reward_gold != null, add(player_gold, _current_scenario.reward_gold)),
				teleport('lobby.cfg', '', 'fade', me)
			]
		",

		campaign_sets: "[string] :: ['core']",

		add_location_controls: "def(null|obj campaign_location info) ->commands [
			map(_location_controls, remove_object(value)),
			set(_location_controls, []),
			
			if(info, [
				spawn('campaign_location_dialog', 0, 0, {
					x: sidebar_left,
					y: lib.citadel.px(32),
					zorder: 2000,
					_width: sidebar_width,
					_height: level_height - lib.citadel.px(440) - lib.citadel.px(32),
					use_absolute_screen_coordinates: true,
					_controller: me,
					_location: info,
				}, [
					add(me._location_controls, [child]),
				]),
				spawn('image_widget', 0, 0, {
					x: sidebar_left,
					y: level_height - lib.citadel.px(440),
					zorder: 2000,
					image: info.portrait,
					image_area: info.portrait_area,
					draw_width: sidebar_width,
					draw_height: lib.citadel.px(440),
					use_absolute_screen_coordinates: true,
				}, [
					add(me._location_controls, [child]),
				]),
				map(choices,
	
					spawn('button_controller', level_width - lib.citadel.px(200), level_height - lib.citadel.px(520) - (size(choices)-index-1)*lib.citadel.px(60), {
						zorder: 3000,
						text: value.button_text,
						on_click: value.on_select,
						button_width: lib.citadel.px(160),
						button_height: lib.citadel.px(50),
						use_absolute_screen_coordinates: true,
					}, [
						add(me._location_controls, [child]),
					])
				)
				where choices = info.info.get_choices(me)
			]),
		]",

		add_widgets: "def() ->commands execute(me, [
		spawn('button_controller', level_width - lib.citadel.px(52), lib.citadel.py(4), {
			text: 'Quit',
			zorder: 10000,
			on_click: (def() ->commands fire_event(me, 'quit_campaign')),
			button_width: lib.citadel.px(48),
			button_height: lib.citadel.px(24),
			_font_size: lib.citadel.px(12),
			use_absolute_screen_coordinates: true,
		}, [
		]),
		spawn('campaign_status_dialog', 0, 0, {
			x: 0,
			y: 0,
			_width: level_width,
			_height: lib.citadel.py(32),
			_controller: me,
			use_absolute_screen_coordinates: true,
		}, [
			set(_status_dialog, child),
		])
		
		])",

		_previous_visibility: { type: "null|[Loc]" },

		update_visibility: "def() ->commands
		set(_previous_visibility, [ t.loc | t <- level.chars, t is obj campaign_tile])
		; add_tiles()
		; set(_previous_visibility, null)
		",

		add_tiles: "def() ->commands execute(me, [
		[remove_object(t) | t <- level.chars, t is obj campaign_tile],
		map(calculate_visible_tiles([player.loc]),
		if(previously_visible, cmd, schedule((dist)*6 + 1d10 where dist = distance_between(player.loc, value), cmd))
		 where cmd =
			spawn('campaign_tile', 0, 0, {
				color: tile_color(tile),
				mid_x: hex_pos([xpos,ypos])[0],
				mid_y: hex_pos([xpos,ypos])[1],
				loc: [xpos,ypos],
				controller: me,
			 } where tile = tilemap[ypos*tilemap_width + xpos],
			 [
			 	if(not previously_visible, [
					set(child.alpha, 0),
					animate(child, { alpha: 255 }, { duration: 30 })
				])
			 ]
			 ) where xpos = value[0]
			   where ypos = value[1]
			   where previously_visible = (_previous_visibility = null or value in _previous_visibility)
		)
		])",

		calculate_visible_tiles: "def([Loc] locs) ->[Loc]
			if(size(new_locs) <= size(locs), _add_barriers_to_visible_tiles(new_locs), calculate_visible_tiles(new_locs))
			where new_locs = unique(sort(fold(map(locs, filter(get_adjacent_locs_on_board(value), is_passable(value) and find(_locations, value.loc = context.value) = null)), a+b)))
		",

		_add_barriers_to_visible_tiles: "def([Loc] locs) ->[Loc]
			locs + passable_barriers + _expand_barriers(impassable_barriers)
			where impassable_barriers = filter(barriers, not is_passable(value))
			where passable_barriers = filter(barriers, is_passable(value))
			where barriers = unique(sort(filter(fold(map(locs, get_adjacent_locs_on_board(value)), a+b), value not in locs)))
		",

		_expand_barriers: "def([Loc] locs) ->[Loc]
		  if(size(new_locs) <= size(locs), new_locs, _expand_barriers(new_locs))
			where new_locs = unique(sort(locs + fold(map(locs, filter(get_adjacent_locs_on_board(value), get_terrain(value) = get_terrain(context.value))), a+b)))
		",

		show_library: "def() ->commands execute(me, [
			[remove_object(c) | c <- level.chars, c != me],
			set(_in_library, true),
			spawn('library_controller', 0, 0, {
				_mm_client_state: _mm_client_state,
				deck_rules: construct('deck_rules'),
				specified_deck: player_deck,
				specified_collection: player_collection,
			}, [
			]),
			spawn('button_controller', 10, 10, {
				text: '<< Leave',
				on_click: (def() ->commands fire_event(me, 'leave_library')),
				button_width: lib.citadel.px(160),
				button_height: lib.citadel.px(50),
				use_absolute_screen_coordinates: true,
			}, [
			]),
		])",

		show_shop: "def([{type: string, quantity: int, price: int}] items) ->commands execute(me, [
			[set(c.paused, true) | c <- level.chars, c != me, c != _status_dialog, c not in _location_controls, not c is obj campaign_object],
			[remove_object(c) | c <- control_buttons],
			if(_status_dialog, fire_event(_status_dialog, 'create')),
			if(loc_dialog, fire_event(loc_dialog, 'create')) where loc_dialog = find(level.chars, value is obj campaign_location_dialog),
			set(_in_shop, true),
			spawn('campaign_shop', 0, 0, {
				_controller: me,
				_cards: items,
				use_absolute_screen_coordinates: true,
			}, [
			]),
			spawn('button_controller', 0, 0, {
				x: control_buttons[0].x,
				y: control_buttons[0].y,
				zorder: 10000,
				text: '<< Leave',
				on_click: (def() ->commands fire_event(me, 'leave_shop')),
				button_width: lib.citadel.px(160),
				button_height: lib.citadel.px(50),
				use_absolute_screen_coordinates: true,
			}, [
			]),
			
		]) where control_buttons = filter(_location_controls, value is obj button_controller)",

		shop_responses: { type: "[class campaign_card_response]", default: [] },
		_load_shop_responses: "[map]<- get_document('data/shop-responses.cfg')",

		get_shop_response_inspect: "def(string card) ->string|null
			choose(filter([response.get_response_inspect(me, card) | response <- shop_responses, card in response.get_cards], value != null))
		",

		get_shop_response_purchase: "def(string card) ->string|null
			choose(filter([response.get_response_purchase(me, card) | response <- shop_responses, card in response.get_cards], value != null))
		",
	},

	on_create: "
	[
	set(shop_responses, map(_load_shop_responses, construct('campaign_card_response', value)))
	]
	",

	on_start_level: "
	add(level.frame_buffer_shaders, [{
		begin_zorder: -1000000,
		end_zorder: 2000,
		shader_info: 'citadel_story_blur',
	}])
	",

	on_being_added: "
	[
	fire_event('start_level'),
	map(level.chars, if(value != me, remove_object(value)));
	spawn('campaign_player_avatar', 0, 0, { _avatar: 'acolyte.png', _avatar_focus: [355,355], _avatar_scale: 0.5, _controller: me, loc: [1,1] } + starting_player,
	[
		set(me._player_avatar, child),
		me.reposition_screen(hex_pos(child.loc), 1),
	]);
	
	[
		add_widgets(),
		map(starting_locations, add_location(value));
		map(starting_regions, add_region(value));
		add_tiles(),
	]
	]",

	on_quit_campaign: "[
		set(title_controller.force_campaign_world_map, true),
		teleport('lobby.cfg', '', 'instant', title_controller),
	]",

	on_message_received: "switch(message.type,
	'game_created',
	[
		set(_fight_start, null),
		if(_fight_start is int and _fight_start > cycle,
		   schedule(_fight_start - cycle, cmd),
		   cmd
		) where cmd = teleport('level1.cfg', '', 'fade', playable)
		  where playable = object_playable('citadel_controller', 336, 372, 0, {
			_mm_client_state: _mm_client_state,
			game_server_address: '',
			game_server_port: 23456,
			game_setup_message: _sent_message,
			session_id: _session_id asserting _session_id != null,
			game_created: true,
			specified_deck: player_deck + ['Wound']*player_wounds,
			specified_reward: { cards: [], current_gold: player_gold, reward_gold: if(scenario.reward_gold != null, scenario.reward_gold, 0) },
			return_callback: me.return_from_game,
			campaign_location: 'Campaign',
			campaign_scenario: 0,
			campaign_sets: campaign_sets,
			_storyline: if(scenario.storyline, obj storyline_base <- object(scenario.storyline), object('storyline_null')),
			_theme: if(theme, class theme<- construct('theme_' + theme), lib.theme) where theme = scenario.theme,
			_music_theme: if(music_theme, music_theme, 'materia') where music_theme = scenario.music_theme,
		  })
	     where scenario = Scenario<- _current_scenario
	]
	) where message = map<- arg.message",

	on_process: "[
		if(_internal_client != null, tbs_process(_internal_client)),
	]",

	
	on_window_resize: "[
		lib.citadel.set_screen_dim(width, height),
		set(level.dimensions, [0,0,width,height]),
	] where width = int :: arg.width, height = int :: arg.height",

	on_enter_level: "
		fire_event('window_resize', {width: level.camera_position[2], height: level.camera_position[3]});
	[
		set(_location_controls, []),
		fire_event('start_level'),
		add(player_wounds, _new_wounds),
		set(_new_wounds, 0),
		add_widgets(),
		add_tiles(),
		add_object(player),
		map(_locations, add_object(value)),
		set(_screen_focus_x, _screen_focus_x),
		set(_screen_focus_y, _screen_focus_y),
	]; add_location_controls(find(level.chars, value is obj campaign_location and value.loc = player.loc))
	; if(_defeated, player_defeat())",

	on_leave_shop: "[
		set(_in_shop, false),
		[remove_object(c) | c <- level.chars, c != me],
		fire_event('enter_level'),
	]",

	on_leave_library: "[
		set(_in_library, false),
		if(find(level.chars, value is obj library_deck_entry) != null,
		   set(player_deck, fold([[c.card.name]*c.count | c <- level.chars, c is obj library_deck_entry], a+b))),
		[remove_object(c) | c <- level.chars, c != me],
		fire_event('enter_level'),
	]",
}
