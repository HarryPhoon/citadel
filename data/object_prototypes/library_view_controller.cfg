{
	id: "library_view_controller",

	is_human: false,
	is_strict: true,
	always_active: true,
	hidden_in_game: true,

	types: {
		CardEntry: "{
			name: string,
			card: class card,
			num_copies: int,
			obj: null|obj card
		}",

		CardGroup: "{
			entries: [CardEntry],
			name: string,
			icon: null|string,
		}",
	},

	properties: {
		controller: { type: "obj library_controller" },

		//the dimensions we use for our display. Don't use the bottom
		//80 pixels of the screen.
		level_width: "int :: level.dimensions[2] - level.dimensions[0]",
		level_height: "int :: level.dimensions[3] - level.dimensions[1]",

		//the left/right side of the 'usable' area -- i.e. cutting off edges
		//to make for a 4:3 display.
		gui_left_edge: "int :: (level_width - (level_height*4)/3)/2",
		gui_right_edge: "int :: level_width - gui_left_edge",
		view_right_edge: "int :: gui_left_edge + lib.citadel.py(860)",

		px: "def(int pixels) ->int lib.citadel.px(pixels)",
		py: "def(int pixels) ->int lib.citadel.py(pixels)",

		_visible_cards: { type: "[CardGroup]", default: [] },

		set_visible_cards: "def([CardGroup] cards) ->commands
		if(_visible_cards != cards, set(_visible_cards, cards); _update_display())",
		_update_display: "def() ->commands null",

		refresh_display: "def() ->commands null",

		scroll_right: "def() ->commands null",
		scroll_left: "def() ->commands null",
		scroll_up: "def() ->commands null",
		scroll_down: "def() ->commands null",

		update_card_quantity: "def(string card_name) ->commands null",
		start_editing_deck: "def() ->commands null",
		end_editing_deck: "def() ->commands null",
	},

	on_type_updated: "
		_update_display()
	",

}
