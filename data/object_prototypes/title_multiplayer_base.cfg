{
	id: "title_multiplayer_base",
	hidden_in_game: true,
	is_strict: true,

	properties: {
		_reconnect_game_button: { type: "null|obj button_controller" },
		_concede_game_button: { type: "null|obj button_controller" },

		reconnect_to_game: "def(int port, int game_session) ->commands title_controller.join_game(TBS_SERVER_ADDRESS, port, game_session)",
		concede_game: "def(int port, int game_session) ->commands title_controller.concede_game(TBS_SERVER_ADDRESS, port, game_session)",

		title_controller: "obj title_controller ::
		  find_or_die(level.chars, value is obj title_controller)",
		
		create_server_status_labels: "def() ->commands if(_server_status_label_value != _server_status_label_key, [
			map(_server_status_labels, remove_object(value)),
			set(_server_status_labels, []),

			if(_display_server_status,
			[
			spawn('label', 100, 100, {
				_halign: 'left',
				_text: if(ctrl.num_users = null, ['Getting server status...'],
				  [str(ctrl.num_users) + ' players online',
				   str(ctrl.num_queued) + ' players queued to play',
				   str(ctrl.num_games) + ' games being played']
				  )
			}, [
				add(me._server_status_labels, [child]),
			]),

			
			if(existing_game_reconnect != has_game_reconnect, [
				remove_object(_reconnect_game_button),
				remove_object(_concede_game_button),
				set(_reconnect_game_button, null),
				set(_concede_game_button, null),

				if(has_game_reconnect, [
					spawn('button_controller', 100, 400, {
						text: 'Reconnect',
						on_click: bind(me.reconnect_to_game, int<- ctrl.game_port, int<- ctrl.game_session),
						_font_size: 24,
					}, [
						set(me._reconnect_game_button, child),
					]),

					spawn('button_controller', 300, 400, {
						text: 'Concede',
						on_click: bind(me.concede_game, int<- ctrl.game_port, int<- ctrl.game_session),
						_font_size: 24,
					}, [
						set(me._concede_game_button, child),
					]),

				]),

			]) where existing_game_reconnect = (_reconnect_game_button != null and find(level.chars, value = _reconnect_game_button) = _reconnect_game_button)
			   where has_game_reconnect = ctrl.game_port != null
			
			]
			),

			set(_server_status_label_key, _server_status_label_value),
		] where ctrl = title_controller)",

		_server_status_labels: { type: "[obj label]", default: [] },
		_server_status_label_key: { type: "any" },

		_server_status_label_value: "any :: [ctrl.num_users, ctrl.num_queued, ctrl.num_games, _display_server_status, ctrl.game_id, ctrl.game_port] where ctrl = title_controller",

		_display_server_status: "bool :: true",

	
	},
}
