{
	id: "matchmaking_base",

	properties: {
		sandbox: "[
			map(level.chars, if(value != me, remove_object(value))),
			set(level.frame_buffer_shaders, []),
		//	spawn('animation_sandbox', { _mm_client_state: _mm_client_state }),
		]",

		_mm_client_state: { type: "class mm_client_state", dynamic_initialization: true },
		mm_client: "object|null :: _mm_client_state.client",
		account_info: "AccountDetails :: _mm_client_state.account_info",
		username: "string :: _mm_client_state.username",

		//selected_deck: { type: "string", default: "" },

		get_server_info: "commands<- if(mm_client != null, [tbs_send(mm_client, {type: 'get_server_info'})])",

		is_online: "bool :: mm_client != null",

		award_cards: "def([string] card_names, int gold) ->commands null",

		get_player_status: "def() ->string 'idle'",

		_current_throttling_baseline: { type: "int|null" },
		_requests_sent: { type: "int", default: 0 },
		_throttled: { type: "bool", default: false },

		_request_server_info: "bool :: true",

		process_matchmaking_connection: "def() ->commands
		execute(me,
		if(mm_client != null and not _throttled, [
			if(mm_client.in_flight = 0, [
				set(lib.citadel.notified_status, [username,get_player_status()]),
				if(throttling_baseline != _current_throttling_baseline, set(_requests_sent, 0)),
				add(_requests_sent, 1),
				tbs_send(mm_client, {type: 'request_updates', status: get_player_status(), info_version: _mm_client_state.account_info_version, state_id: _mm_client_state.known_state_id, request_server_info: _request_server_info}),
				set(_current_throttling_baseline, throttling_baseline),
				if(_requests_sent >= 10, [
					set(_throttled, true),
					schedule(60*30, set(_throttled, false)),
				]),
			] where throttling_baseline = cycle%600,
			
			if([username,get_player_status()] != lib.citadel.notified_status, [
				set(lib.citadel.notified_status, [username,get_player_status()]),
				tbs_send(mm_client, {type: 'status_change', status: get_player_status()})
			])),
			tbs_process(mm_client),
		])
		)",

		//function which tells us if we should notify when a player queues up for multiplayer
		should_notify_multiplayer_queue: "def() ->bool true",

		_last_notify_multiplayer: { type: "int|null" },
		notify_multiplayer_queue: "def(string username) ->commands
		if(should_notify_multiplayer_queue() and ('MULTIPLAYER' in _mm_client_state.account_info.unlocks) and (_last_notify_multiplayer = null or cycle > _last_notify_multiplayer + 500), [
			spawn_notification(username + q( is searching for a multiplayer game right now. Click here to go to the <i>Multiplayer Lobby</i> if you want to play with them!), execute(me, fire_event('go_multiplayer')))
		])",

		notify_challenge: "def(string username) ->commands
		[
		add(lib.citadel.open_challenges, [{user: username, expiry_time: time().unix + 60}]),
		if(should_notify_multiplayer_queue() and not multi_lobby_controller,
			spawn_notification(username + q( has challenged you to a game! Click here to go to the multiplayer lobby to play them.), bind_command(me.click_challenge, username))
		);
		if(multi_lobby_controller, multi_lobby_controller.update_challenges())
		] where multi_lobby_controller = find(level.chars, value is obj multi_lobby_controller)
		",

		click_challenge: "def(string username) ->commands
		[
		debug(['CLICK CHALLENGE', type]),
		if(title_controller != null,
			if(title_controller.get_screen_controller and not title_controller.in_multi_lobby,
				title_controller.transition_screen(; execute(title_controller.get_screen_controller, title_controller.enter_multi(title_controller.get_screen_controller)))
			)
		) where title_controller = find(level.chars, value is obj title_controller)
		]
		",

		spawn_notification: "def(string text, commands on_click=null) ->commands [
			spawn('notification_toast', 0, 0, { _text: text, _on_click: on_click })
		]",

		send_user_command: "def(map msg) ->commands [
			execute(me, tbs_send(object<- mm_client, { type: 'user_operation' } + msg))
		]",

		do_auto_login: "def(string cookie) ->commands [
			debug('TRY auto login'),
			set(_mm_client_state.client, cl),
			execute(me, tbs_send(cl, {
				type: 'auto_login',
				cookie: cookie,
			})),
		] where cl = tbs_client(TBS_SERVER_ADDRESS, TBS_SERVER_PORT, { id: 'matchmake' })",

		complete_login: "def(int session_id, string username, string|null cookie, AccountDetails info, int info_version) ->commands [
			debug('TRY COMPLETE LOGIN: ' + str(session_id)),
			lib.citadel.write_cookie(cookie),

			set(me._mm_client_state, construct('mm_client_state', {
				client: tbs_client(TBS_SERVER_ADDRESS, TBS_SERVER_PORT, {
					session: session_id,
					id: 'matchmake'
				}),
				username: username,
				session_id: session_id,
				account_info_version: info_version,
				account_info: info,
			}
			))
		]",

		connect_relay_server: "def(int session_id) ->commands null",

		update_account_info: "def(AccountDetails info, int info_version) ->commands [
			set(me._mm_client_state.account_info, info),
			set(me._mm_client_state.account_info_version, info_version),

		]; update_player_profile(); update_quests()",

		update_quests: "def() ->commands null",
		update_player_profile: "def() ->commands null",

		handle_matchmaking_heartbeat: "def(map message) ->commands
		[

			if(server_info is map,
			[
				add(_mm_client_state.users_online_update, 1),

				set(_mm_client_state.num_users, int<- server_info.users),
				set(_mm_client_state.num_queued, int<- server_info.users_queued),
				set(_mm_client_state.num_games, int<- server_info.games),
				if(server_info.type != 'delta',
				[
					debug(['UPDATE: FULL', server_info.state_id, _mm_client_state.known_state_id, message]),

					if(message.game_port and me is obj title_controller,
					[
						me.show_reconnection_dialog(int<- message.game_port, int<- message.game_id, int<- message.game_session)
					]
					),

					set(_mm_client_state.users_online, [OnlineUser]<- server_info.user_list),
					set(_mm_client_state.game_servers, [GameServer]<- server_info.servers),
					set(_mm_client_state.known_state_id, int|null<- server_info.state_id),

					set(lib.citadel.global_chat, [ChatMessage]<- server_info.chat);
					if(mp_controller,
					[
						mp_controller.clear_chat_area()
					])
			  		where mp_controller = find(level.chars, value is obj multi_lobby_controller)
				],
				if(find(deltas, value.state_id_basis = _mm_client_state.known_state_id) != null, [
					; [
						add(_mm_client_state.users_online_update, 1),
						debug(['UPDATE: DELTA', map(deltas, [value.state_id_basis, value.state_id]), deltas]),
						if(delta.new_users,
							add(_mm_client_state.users_online, [{id: user, status: 'idle'} | user<- ([string]<- delta.new_users), find(_mm_client_state.users_online, value.id = user) = null])
						),

						if(delta.delete_users,
							set(_mm_client_state.users_online, filter(_mm_client_state.users_online, value.id not in delta.delete_users))
						);

						if(delta.new_servers,
						   add(_mm_client_state.game_servers, [GameServer]<- delta.new_servers)
						);

						if(delta.delete_servers,
							set(_mm_client_state.game_servers, filter(_mm_client_state.game_servers, value.port not in delta.delete_servers))
						),

						if(delta.status_changes is map,
						[
							debug(['STATUS CHANGE MAP', delta.status_changes]),
							map(delta.status_changes, if(entry is map, set(entry.status, value)) where entry = find(_mm_client_state.users_online, value.id = context.key));
							debug(['NEW users_online', _mm_client_state.users_online]),
						]),
						
						set(_mm_client_state.known_state_id, int<- delta.state_id),

						if(delta.chat is list,
							[
							add(lib.citadel.global_chat, [ChatMessage]<- delta.chat);
							if(mp_controller,
								mp_controller.receive_chat_messages([ChatMessage]<- delta.chat)
							)
								
			  				where mp_controller = find(level.chars, value is obj multi_lobby_controller)
							]
						)
					]
					| delta<- deltas, delta.state_id_basis >= _mm_client_state.known_state_id
				], [
					debug('Could not process deltas, known state_id not found')
				]) where deltas = [map]<- server_info.deltas
				)
			]
			),

		] where server_info = map|null<- message.server_info
		",

		matchmaking_handle_message: "def(map message) ->commands [

	switch(message.type,
		'server_info', [
			if(message.bot_types, set(_mm_client_state.bot_types, [string]<- message.bot_types)),
		],
		'heartbeat', [
			handle_matchmaking_heartbeat(message)
		],

		'channel_topic',
		[
		  lib.chat.channel_topic(channel, topic); lib.chat.write(),
		if(w, [
			w.add_message({str: 'Topic changed: ' + topic, channel: channel, color: [0.6,1.0,0.6]})
		])
		]
		  where topic = string<- message.topic
		  where channel = string<- message.channel
		  where w = chat_widget,

		'chat_error', 
		if(w, [
			w.error_message(string<- message.message)
		])
		  where w = chat_widget,

		'chat_message', if(not lib.chat.is_ignored(nick),
		[
		debug(['ADD CHAT', channel or nick]),
		
		if(w, [
			w.add_chat_message(channel or ('@' + lib.chat.nick_display(nick)), msg),
			w.add_chat_message('All', msg, channel),
		], [
			lib.chat.record_offline_message_channel(channel or ('@' + lib.chat.nick_display(nick))),
		]),

		lib.chat.add_chat_message(channel or ('@' + nick), msg); lib.chat.write(),
		])
		  where msg = {message: message_text, nick: nick, timestamp: timestamp, disposition: if(channel = null, 'whisper', privileged, 'dev')}
		  where w = chat_widget
		  where channel = string|null<- message.channel
		  where nick = string<- message.nick
		  where privileged = bool|null<- message.privileged
		  where message_text = string<- message.message
		  where timestamp = int<- message.timestamp,

		'channel_part', if(w, [
		  lib.chat.user_part(channel, nick); lib.chat.write(),
		  if(not lib.chat.is_ignored(nick), w.add_message({str: '* ' + nick + ' has left ' + channel,  color: [0.7,0.7,0.7], channel: channel}))
		])where w = chat_widget
		  where channel = string<- message.channel
		  where nick = string<- message.nick,

		'channel_join',
		[
		  lib.chat.user_join(channel, nick); lib.chat.write(),
		if(w, [
		  if(not lib.chat.is_ignored(nick), w.add_message({str: '* ' + nick + ' has joined ' + channel,  color: [0.7,0.7,0.7], channel: channel}))
		])
		] where w = chat_widget
		  where channel = string<- message.channel
		  where nick = string<- message.nick,

		'channel_joined', [
			lib.chat.set_channel(channel, { messages: [], users: {string->bool}<- message.users, topic: null|string<- message.topic });
			lib.chat.write();
			if(w, [
				w.join_channel(channel);
				if(message.topic != null,
				w.add_message({str: 'Topic for ' + channel + ': ' + (string<- message.topic), channel: channel, color: [0.6,1.0,0.6]})
				)
			]),

			set(_mm_client_state.account_info.chat_channels,
			   (_mm_client_state.account_info.chat_channels or {}) +
			   { (channel): true })
			
		] where channel = string<- message.channel
		  where w = chat_widget,

		'matchmaking_queued', [
		],

		'match_made', [
		],

		'challenge', [
			notify_challenge(string<- message.challenger)
		],

		'request_observe', [
			spawn('notification_toast', 0, 0, { _duration: 720, _text: (string<- message.requester) + ' wants to watch you play', _on_click: null,
			_options: [
			{
				text: 'Allow',
				on_click: def()->commands execute(me, if(mm_client != null, tbs_send(mm_client, {type: 'allow_observe', requester: message.requester}))),
			},
			{
				text: 'Decline',
				on_click: def()->commands execute(me, if(mm_client != null, tbs_send(mm_client, {type: 'deny_observe', requester: message.requester}))),
			}
			]})
		],

		'grant_observe', [
			if(me is obj title_controller,
				me.observe_game({ port: 23458, users: [] }, null, int<- message.relay_session)
			)
		],

		'connect_relay_server', [
			connect_relay_server(int<- message.relay_session),
		],

		'new_cards', [
			add(_mm_client_state.account_info.collection, new_cards),
			award_cards(map(new_cards, value.name), if(new_gold, new_gold, 0)),
			if(new_gold != null, add(_mm_client_state.account_info.gold, new_gold)),
		] where new_cards = [CardInstance]<- message.cards
		  where new_gold = int|null<- message.gold,

		'login_success', [
			complete_login(int<- message.session_id, string<- message.username, string|null<- message.cookie, AccountDetails<- message.info, int<- message.info_version)
		],

		'account_info', [
			update_account_info(AccountDetails<- message.info, int<- message.info_version)
		],

		'auto_login_fail', [
			teleport('titlescreen.cfg', '', 'instant', object_playable('login_controller', 0, 0, 0)),
		],

		'error', [
			if(message.message = 'unknown session', [
				if(cookie != null,
					do_auto_login(cookie),
					teleport('titlescreen.cfg', '', 'instant', object_playable('login_controller', 0, 0, 0))
				) where cookie = lib.citadel.read_cookie()
			],
			debug('Error message from server: ' + str(message.message))),
		],
	)
	]",

	play_interface_sound: "def(string name) ->commands execute(me,
		if(sfx is string, sound(sfx, lib.citadel.sound_volume(sfx)))
		where sfx = lib.citadel.choose_interface_sound(name)
	)
	",

	chat_widget: "null|obj chat_widget :: find(level.chars, value is obj chat_widget)",

	possible_chat_commands: "{string->string} :: {
		'reply': '',
		'join': '',
		'leave': '',
		'me': '',
		'msg': '',
		'ignore': '',
		'unignore': '',
		'whisper': '',
		'who': '',
		'topic': '',
	}",

	is_user_online: "def(string username) ->bool
	find(_mm_client_state.users_online, value.id = user) != null
		where user = lower(username)
	",

	expand_chat_command: "def(string cmd) ->string
	find(possible_commands, value[:size(cmd)] = lower(cmd)) or cmd
		where possible_commands = keys(possible_chat_commands)
	",

	chat_command: "def(obj chat_widget chat, string context, string message) ->commands execute(me, [
	if(message = '', null,
	   commands = null or cmd = 'me',
	   if(mm_client and dest_channel,tbs_send(mm_client, { type: 'chat_message', channel: dest_channel, message: message}))
		
		where dest_channel = if(context[0] = '@', context[1:], context = 'All', find(chat.tabs, value[0] = '#'), context),
	   
	   [
	   if(cmd in ['whisper','reply','msg'],
		if(params is [string,string] and (params[0][0] != '#' or cmd = 'msg'),
		[
		   if(params[0][0] != '#' and is_user_online(string<- params[0]) = false,
			   chat.system_message(params[0] + ' is offline. They will receive your message when they log in.')
			),
		   if(mm_client, tbs_send(mm_client, {type: 'chat_message', channel: params[0], message: params[1]})),
		],
		chat.error_message('Must provide name and message to ' + (string<-cmd) + ' (' + commands[1] + ')'))
	   where params = regex_match(commands[1], '^ *(.+?) (.+)$'),	

	   cmd = 'topic',

	   if(topic_args is [string],
		if(mm_client, tbs_send(mm_client, {type: 'channel_topic', channel: topic_args[0], topic: topic_args[1]})),
		chat.error_message('Format: /topic #channel topic')
	   )
		where topic_args = regex_match(commands[1], '(#[a-zA-Z_-]+) (.+)'),

	   cmd in ['ignore', 'unignore'],
	   if(not args, chat.system_message(if(lib.chat.ignore_list, 'On your ignore list are these obnoxious fellows: ' + fold(lib.chat.ignore_list, a + ' ' + b, ''), 'You have nobody on your ignore list. Apparently you get on with everyone.')),

		map(args, if(cmd = 'ignore', [chat.system_message('Ignoring ' + value), lib.chat.ignore(value)], [if(lib.chat.is_ignored(value), chat.system_message('Unignoring ' + value), chat.error_message(value + ' is not on your ignore list')), lib.chat.unignore(value)])); lib.chat.write()
	   ),

	   cmd = 'who',

	   if(channel = '' or channel[0] != '#',
	      chat.error_message('Can only ask who on #channels (' + channel + ') (' + context + ')'),
		  if(info != null, chat.system_message(if(keys(info.users) = [username], 'You are all alone in ' + channel,
			 str(size(info.users)) + ' users in ' + channel + ' ' + str(size(online_users)) + ' online right now: ' + fold(highlighted_users, a + ' ' + b, '')
			  where highlighted_users = map(info.users, if(is_user_online(key), '*'+lib.chat.nick_display(key)+'*', lib.chat.nick_display(key)))
			  where online_users = filter(info.users, is_user_online(key))
			  where offline_users = filter(info.users, not is_user_online(key))
			 )),
			chat.error_message('You are not in ' + channel))
		)
		where info = lib.chat.get_channel(channel)

	   where channel = commands[1] or context,

	   cmd = 'join',
	   if(regex_match(commands[1],'#[a-zA-Z_-]+'),
		[
		  chat.goto_tab(commands[1]),
		  if(mm_client, tbs_send(mm_client, {type: 'join_channel', channel: commands[1]})),
		],

		  chat.error_message('Command format: /join #channelname')
		),
		
		cmd = 'leave',
	   if(regex_match(commands[1],'#[a-zA-Z_-]+'),
		if(find(chat.tabs, value = commands[1]) = null,
		  chat.error_message('Not in channel ' + commands[1]),

		[
		  if(mm_client, tbs_send(mm_client, {type: 'leave_channel', channel: commands[1]})),
		  chat.leave_channel(commands[1]),
		]),
		  chat.error_message('Command format: /leave #channelname')
		) asserting commands != null,

		chat.error_message('Unknown command')
	)
	]
	where args = if(commands[1], split(commands[1], ' '), [])
	asserting commands is [string]
	)
	where cmd = if(commands is [string], expand_chat_command(commands[0]))
	where commands = (null|[string]<- regex_match(message, '^/([a-zA-Z]+) ?(.*)'))
	])",
	},

	timer_frequency: 5,

	on_go_multiplayer: "teleport('lobby.cfg', '', 'instant', playable)
	  where playable = object_playable('title_controller', 0, 0, 1, {
		_mm_client_state: _mm_client_state,
		_default_section: 2, //multiplayer tab.
	  })",

	on_timer: "process_matchmaking_connection()",

	on_matchmake_connection_error: "
		debug('Error in game server connection')
	",

	on_matchmake_message_received: "
		matchmaking_handle_message(map<- arg.message)
	"

}
