{
	id: "matchmaking_base",
	prototype: ["matchmaking_core"],

	properties: {
		award_cards: "def([string] card_names, int gold) ->commands null",

		matchmaking_handle_module_message: "def(map message) ->commands [
		switch(message.type,
		'new_cards', [
			add(_mm_client_state.account_info.collection, new_cards),
			award_cards(map(new_cards, value.name), if(new_gold, new_gold, 0)),
			if(new_gold != null, add(_mm_client_state.account_info.gold, new_gold)),
		] where new_cards = [CardInstance]<- message.cards
		  where new_gold = int|null<- message.gold,
		'purchase_complete', [
			if(cards is [map] and size(cards) != 0,
				spawn_notification(sprintf(q(Your purchase has been confirmed! <i>%s</i> has been added to your collection.), string<- cards[0]['name']))
			)

		] where cards = message['cards']
		)
		]",

		process_matchmaking_connection: "def() ->commands
			_process_matchmaking_connection_internal();

			_process_stats()
		",		

		_tbs_client_count: { type: "int", default: 0 },

		_process_stats: "def() ->commands
		execute(me,
			if(lib.stats.client,
			[
				if(_tbs_client_count >= 100,
				[
					set(lib.stats.client, null),
					set(_tbs_client_count, 0),
				],
				[
					tbs_process(object<- lib.stats.client),
					add(_tbs_client_count, 1),
				]
				),
			],
			lib.stats.pending,
			[
				set(lib.stats.client, cl),
				tbs_send(cl, {
					user: username,
					data: lib.stats.pending,
				}),
				set(lib.stats.pending, []),
				set(_tbs_client_count, 0),
			]
				where cl = tbs_client('192.168.1.13', 24567, { id: 'stats' })
			)
		)
		",
	},

	events: {
		"+stats_message_received": "
		set(lib.stats.client, null)
		",

		"+matchmake_connection_error": "
			set(lib.stats.client, null)
		",
	},

}
