{
	id: "matchmaking_base",

	properties: {
		_mm_client_state: { type: "class mm_client_state" },
		mm_client: "object|null :: _mm_client_state.client",

		selected_deck: { type: "string", default: "" },

		get_server_info: "commands<- if(mm_client != null, [tbs_send(mm_client, {type: 'get_server_info'})])",

		is_online: "bool :: mm_client != null",

		award_cards: "def([string] card_names) ->commands null",

		process_matchmaking_connection: "def() ->commands if(mm_client != null, [
			if(mm_client.in_flight = 0, tbs_send(mm_client, {type: 'request_updates'})),
			tbs_process(mm_client),
		])",

		do_auto_login: "def(string cookie) ->commands [
			debug('TRY auto login'),
			set(_mm_client_state.client, cl),
			execute(me, tbs_send(cl, {
				type: 'auto_login',
				cookie: cookie,
			})),
		] where cl = tbs_client(TBS_SERVER_ADDRESS, TBS_SERVER_PORT, { id: 'matchmake' })",

		complete_login: "def(int session_id, string username, string|null cookie, AccountDetails info) ->commands [
			debug('TRY COMPLETE LOGIN: ' + str(session_id)),
			lib.citadel.write_cookie(cookie),

			set(me._mm_client_state, construct('mm_client_state', {
				client: tbs_client(TBS_SERVER_ADDRESS, TBS_SERVER_PORT, {
					session: session_id,
					id: 'matchmake'
				}),
				username: username,
				session_id: session_id,
				account_info: info,
			}
			))
		]",

		matchmaking_handle_message: "def(map message) ->commands [

	switch(message.type,
		'server_info', [
			if(message.bot_types, set(_mm_client_state.bot_types, [string]<- message.bot_types)),
		],
		'heartbeat', null,

		'matchmaking_queued', [
		],

		'match_made', [
		],

		'new_cards', [
			add(_mm_client_state.account_info.collection, new_cards),
			award_cards(map(new_cards, value.name)),
		] where new_cards = [CardInstance]<- message.cards,

		'login_success', [
			complete_login(int<- message.session_id, string<- message.username, string|null<- message.cookie, lib.citadel.construct_account(map<- message.info))
		],

		'auto_login_fail', [
			teleport('titlescreen.cfg', '', 'instant', object_playable('login_controller', 0, 0, 0)),
		],

		'error', [
			if(message.message = 'unknown session', [
				if(cookie != null,
					do_auto_login(cookie),
					teleport('titlescreen.cfg', '', 'instant', object_playable('login_controller', 0, 0, 0))
				) where cookie = lib.citadel.read_cookie()
			],
			debug('Error message from server: ' + message.message)),
		],
	)
	]",
	},

	timer_frequency: 5,

	on_timer: "process_matchmaking_connection()",

	on_matchmake_connection_error: "
		teleport('titlescreen.cfg', '', 'instant', object_playable('login_controller', 0, 0, 0))
	",

	on_matchmake_message_received: "
		matchmaking_handle_message(map<- arg.message)
	"

}
