{
id: "storyline_base",
is_strict: true,
always_active: true,

properties: {
	level_width: "int :: level.dimensions[2]",
	level_height: "int :: level.dimensions[3]",

	_mm: "find_or_die(level.chars, value is obj citadel_controller)",
	_controller: "obj citadel_controller :: find_or_die(level.chars, value is obj citadel_controller)",

	_game: "class game :: _controller.state",

	_already_said: { type: "{string -> bool}", default: {}},

	say: "def([string]|string text_str, string done_event='', int delay=20, bool first_call=true) ->commands
	if(first_call = false or done_event = '' or (done_event not in _already_said),
	[
	set(_already_said[done_event], true),

	execute(me,
	if(text = [], [
		if(done_event, fire_event(me, done_event)),
	], [

	 if(delay = 0, cmd, schedule(delay, cmd))
	  where cmd =
		spawn('speech_controller', 0, 0, {

			_text: text[0],
			_avatar: find_or_die(level.chars, value is obj player_avatar and value.player_num = 1),
			_mm: _mm,
			_controller: _controller,
			_on_exit: fire_event(me, 'next_say', {text: text[1:], done_event: done_event}),
			_on_complete: null,
			zorder: 30000,
			_blur: false,
		}),
	]) where text = [string] :: if(text_str is string, [text_str], text_str)
	)
	])",

},

on_next_say: "[
	say(text, done_event, 0, false)
] where done_event = string <- arg.done_event
  where text = [string] <- arg.text",

}
