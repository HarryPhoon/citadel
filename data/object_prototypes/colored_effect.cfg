{
	id: "colored_effect",
	is_strict: true,

	properties: {
		custom_color: { type: "[decimal,decimal,decimal]", default: [0.0,0.0,0.0] },
		use_custom_color: "bool :: custom_color != [0.0,0.0,0.0]",
	},

	shader: {
		fragment: """
		uniform sampler2D u_anura_tex_map;
		uniform bool u_property_use_custom_color;
		uniform vec3 u_custom_color;
		uniform float u_property_alpha;
		varying vec2 v_texcoord;

		vec3 rgb_to_hsv(vec3 c)
		{
			vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
			vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
			vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

			float d = q.x - min(q.w, q.y);
			float e = 1.0e-10;
			return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
		}

		vec3 hsv_to_rgb(vec3 c)
		{
			vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
			vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
			return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
		}

		void main()
		{
			vec4 col = texture2D(u_anura_tex_map, v_texcoord);
			col[3] *= u_property_alpha/255.0;

			if(u_property_use_custom_color) {
				vec3 hsv = rgb_to_hsv(col.rgb);
				hsv[0] = rgb_to_hsv(u_custom_color)[0];
				col.rgb = hsv_to_rgb(hsv);
				
				gl_FragColor = col;
			} else {
				gl_FragColor = col;
			}
		}
		""",
	},
}
