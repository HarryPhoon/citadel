{
	id: "single_lobby_controller_base",
	is_human: true,
	hidden_in_game: true,
	is_strict: true,

	properties: {
		_game_pending: { type: "bool", default: false },
		_commands: { type: "null|commands" },

		title_controller: { type: "obj title_controller" },
		return_controller: { type: "custom_obj" },

		level_width: "int<- level.dimensions[2]",
		level_height: "int<- level.dimensions[3]",

		//the left/right side of the 'usable' area -- i.e. cutting off edges
		//to make for a 4:3 display.
		gui_left_edge: "int :: (level_width - (level_height*4)/3)/2",
		gui_right_edge: "int :: level_width - gui_left_edge",

		pane_left_edge: "int :: gui_right_edge - lib.citadel.py(445)",

		specified_deck: "null|[string] :: null",

		_current_scenario: { type: "null|Scenario" },

		_selected_scenario: "Scenario<- (_current_scenario or lib.json.get_document_map('data/campaign.cfg')['scenarios'][4])",

		_internal_client: { type: "object|null" },
		_session_id: { type: "int|null" },
		_sent_message: { type: "map|null" },

		return_from_game: "def(bool result, null|class game state) ->commands
		[
			set(level.frame_buffer_shaders, []),
			title_controller.transition_screen(
			; [
				add_object(me),
				add_object(title_controller),
				lib.citadel.add_main_background_shader(level),
			],
			false)
		]
		",

		play_game: "def(Scenario selected_scenario) ->commands if(not _game_pending, execute(me, [
			set(_game_pending, true),
			title_controller.transition_screen(
				fire_event(me, 'complete_transition'), true, false
			),

			set(me._internal_client, cl),
			set(me._session_id, sid),
			set(me._sent_message, msg),
			tbs_send(cl, msg),
		] where msg = {
			type: 'create_game',
			game_type: 'citadel',
			starting_units: selected_scenario.starting_units,
			map_dimensions: selected_scenario.map_dimensions,
			map_lanes: selected_scenario.map_lanes,
			player_resources: selected_scenario.player_resources,
			trophies: selected_scenario.trophies,
			users: [{user: title_controller.username, avatar: title_controller.account_info.avatar, session_id: sid}, {user: bot_name, bot_type: bot_type, args: {}, bot_args: bot_args, bot: true, session_id: sid+1, avatar: selected_scenario.avatar}],
			tutorial: selected_scenario.tutorial,
			setup_commands: selected_scenario.setup_commands,
		}
		where cl = tbs_internal_client()
		where sid = int<- time().unix
		where bot_name = selected_scenario.enemy_name
		where bot_type = selected_scenario.bot_type or 'eval'
		where bot_args = (if(args != null, args, {}) where args = selected_scenario.bot_args)

		))",

		create_objects: "def() ->commands null",
	},

	on_process: "[
		if(_internal_client != null, tbs_process(_internal_client)),
	]",

	on_being_added: "
		create_objects()
	",
	on_type_updated: "[map(spawned_children, remove_object(value)); create_objects()]",

	on_message_received: "switch(message.type,
		'game_created',

		set(_commands,
		bind_command(def() ->commands
		[
		set(_game_pending, false),
		set(_commands, null),
		set(level.frame_buffer_shaders, filter(level.frame_buffer_shaders, value.shader_info != 'citadel_background')),
		debug(['XXX: game created session id:', _session_id, ' SCENARIO ', _selected_scenario]),
		set(_session_id, null),
		map(level.chars, remove_object(value)),
		add_object(playable)
		  where playable = object_playable('citadel_controller', 336, 372, 0, {
			_mm_client_state: title_controller.client_state,
			game_server_address: '',
			game_server_port: 23456,
			game_setup_message: _sent_message,
			session_id: _session_id asserting _session_id != null,
			game_created: true,
			selected_deck: title_controller.selected_deck,
			selected_deck_category: title_controller.selected_deck_category,
			return_callback: me.return_from_game,
			specified_deck: specified_deck,
//			campaign_location: _campaign.name,
//			campaign_scenario: selected_scenario_index,
			campaign_sets: if(_selected_scenario.set != null, [_selected_scenario.set], []),
			_storyline: if(_selected_scenario.storyline, obj storyline_base <- object(_selected_scenario.storyline), object('storyline_null')),
			_theme: if(theme, class theme<- construct('theme_' + theme), lib.theme) where theme = _selected_scenario.theme,
			_music_theme: if(music_theme, music_theme, 'materia') where music_theme = _selected_scenario.music_theme,
			victory_unlock: if(unlock not in title_controller.account_info.unlocks, unlock) where unlock = _selected_scenario.unlock,

		  })
		]))
	) where message = map<- arg.message",

	on_complete_transition: "
		if(_commands, [
			if(find(level.chars, value = me) != null, remove_object(me)),
			_commands
		],
				
		[
		if(find(level.chars, value = me) = null, add_object(me)),
		schedule(2, fire_event('complete_transition'))
		]
		)
	",


}
