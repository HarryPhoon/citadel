{

//BLOOD CARDS

  "Swarm Rats": {
		name: "Swarm Rats",
		set: "Scum_of_Marlank",
		rarity: 0,
		type: "creature",
		portrait: "swarm-rats.png",
		cost: 0,
		loyalty_cost: 3,
		school: "@eval BLOOD",
		creature: {
			tags: ['Rat'],
            abilities: ['Marauder'],
			attack: 2,
			life: 2,
			move: 1,
			image_num: 80,
		}
	},
    
    "Plague Rats": {
		name: "Plague Rats",
		set: "Scum_of_Marlank",
		rarity: 0,
		type: "creature",
		portrait: "plague-rats.png",
		cost: 1,
		loyalty_cost: 3,
		school: "@eval BLOOD",
		creature: {
			tags: ['Rat'],
            abilities: ['Marauder'],
			attack: 2,
			life: 1,
			move: 2,
			image_num: 80,
            triggered_abilities: [{
				name: "Pestilence",
				rules: "Creatures and buildings damaged by plauge rats become poisoned.",

				on_deal_damage: "def(class creature creature, class game game, class creature target, int damage) ->commands 
                add(target.status_effects, ['Poisoned'])",
			}],
		}
	},
    
    "Rat Nest": {
		name: "Rat Nest",
		set: "Scum_of_Marlank",
		rarity: 0,
		type: "creature",
		cost: 3,
		loyalty_cost: 8,
		portrait: "rat-nest.png",
		school: "@eval BLOOD",
        flavor_text: "Rats are naturally hoarders. But even they need a place to store their treasures.",
		creature: {
			tags: ['Rat', 'Base'],
			life: 6,
			portrait_y_offset: 30,
			sprite_sheet: 'building',
			is_building: true,
			image_num: 0,
            passive_abilities: [{
                name: "Hoarding",
                rules: "+2 hand size",
				static_effect: "def(class game game, class creature creature) ->commands
				if(creature.controller >= 0,
				   game.players[creature.controller].apply_static_effect(
					(def(class player p, map info) ->commands add(p.card_draw, 2)),
					(def(class player p, map info) ->commands add(p.card_draw, -2)),
					{}))",
			}]
        }
	},
    
    "Ratman Duelist": "Sezear Duelist",
    
    "Sezear Duelist": {
		name: "Sezear Duelist",
		set: "Scum_of_Marlank",
		rarity: 1,
		type: "creature",
		portrait: "ratman-duelist.png",
		cost: 3,
		loyalty_cost: 5,
		school: "@eval BLOOD",
		creature: {
			tags: ['Rat'],
            abilities: ['First Strike'],
			attack: 5,
			life: 5,
			move: 1,
			image_num: 80,
		}
	},
    
    "Ratman Sniper": "Sezear Sniper",
    
    "Sezear Sniper": {
		name: "Sezear Sniper",
		set: "Scum_of_Marlank",
		rarity: 1,
		type: "creature",
		portrait: "ratman-sniper.png",
		cost: 4,
		loyalty_cost: 3,
		school: "@eval BLOOD",
		creature: {
			tags: ['Rat'],
            abilities: ['Reload'],
			attack: 4,
			life: 4,
			move: 1,
			range: 1,
			image_num: 71,		
		}
	},
    
    "Rezixtix: Plague Lord": {
		name: "Rezixtix: Plague Lord",
		set: "Scum_of_Marlank",
		rarity: 2,
		type: "creature",
		portrait: "rezixtix.png",
		cost: 5,
		loyalty_cost: 11,
		school: "@eval BLOOD",
		creature: {
			tags: ['Hero', 'Rat'],
			attack: 6,
			life: 5,
			move: 1,
			image_num: 71,
             passive_abilities: [{
				name: "Aura of Disease",
				rules: "While alive, all fiendly rat creatures gain +3 life and all enemies are poisoned.",
				static_effect: "def(class game game, class creature creature) ->commands
				[   
                    if(creature.controller = target.controller,
				    [if('Rat' in target.tags, target.apply_static_effect('life', 3))], 
				    target.add_status_effect_static_duration('Poisoned'))
				  | target <- game.creatures,
				    target.is_building = false
				]"
			}],
		}
	},

	"Dark Knight": {
		name: "Dark Knight",
		type: "creature",
        set: "Scum_of_Marlank",
		portrait: "dark-knight.png",
		cost: 6,
		school: "@eval BLOOD",
		rarity: 0,
		creature: {
			tags: ['Undead', 'Mounted'],
			attack: 6,
			life: 4,
            resistance: 1,
            move: 2,
			image_num: 19,
            triggered_abilities: [{
				name: "Revenant",
				once: true,
				rules: "When Dark Knight dies, it is resurrected.",

				on_die: "def(class creature creature, class game game) ->commands
				game.summon_creature(
				  lib.citadel.create_creature(creature.name, {
					name: creature.name,
					controller: creature.controller,
					loc: creature.loc,
					card_name: creature.card_name,
					summon_id: creature.summon_id,
					triggered_abilities: filter(lib.citadel.create_creature(creature.name).triggered_abilities, value.name != 'Revenant')
				  })
				)",
			}],
		}
	},

    
    "Vermintide": {
		name: "Vermintide",
		type: "invocation",
        set: "Scum_of_Marlank",
		school: "@eval BLOOD",
		portrait: "thirst-for-blood.png",
		cost: 3,
		loyalty_cost: 1,
		is_response: false,
		rarity: 0,
		is_channeled: true,
		rules: "For each channeled mana, add a 'Swarm Rats' card to your hand up to a maximum of 4.",
		on_play: "def(class game game, class message.play_card info) ->commands
		[
			if (info.channel > 0, (add(player.hand, ['Swarm Rats']))),
            if (info.channel > 1, (add(player.hand, ['Swarm Rats']))),
            if (info.channel > 2, (add(player.hand, ['Swarm Rats']))),
            if (info.channel > 3, (add(player.hand, ['Swarm Rats']))),
		] where player = game.players[game.current_player_index]
		",
	},
    
    //GOLD CARDS
    
        "Cunning Rogue": {
		name: "Cunning Rogue",
		type: "creature",
        set: "Scum_of_Marlank",
		portrait: "cunning-rogue.png",
		cost: 3,
		loyalty_cost: 3,
        rarity: 0,
		school: "@eval GOLD",
		creature: {
			tags: ['Human'],
			attack: 4,
			life: 5,
			move: 1,
            activated_abilities: [
				{
					name: 'Trick',
					cost: 1,
					loyalty_cost: 0,
					school: "@eval GOLD",

					portrait: "school-gold.png",
					rules: "Exhaust Cunning Rogue to switch places with a creature in front or behind him. This can be used as a responce.",
					is_response: true,
                    exhausts_creature: true,

					sound_resolve: 'creatures/wisp-unsummon.wav',
					possible_targets: "def(class game game, class creature creature, [Loc] targets) ->[Loc]|null
						if(targets != [], null,
						   map(filter(game.creatures, value != creature and value.is_building = false and value.loc[0] = creature.loc[0] and abs(value.loc[1] - creature.loc[1])=1 and value.is_valid_target(game, game.nplayer, me)), value.loc)
						)
					",

					on_play: "
					 def(class game game, class message.play_card info) ->commands [
					 	set(creature.loc, info.targets[0]),
						set(game.creature_at_loc_or_die(info.targets[0]).loc, creature.loc),
					] where creature = info.get_creature(game)"
				}
			]
		}
	},
    
    //FAITH CARDS
    
    "Spirit Caller": {
		name: "Spirit Caller",
		type: "creature",
		portrait: "spirit-caller.png",
        set: "Scum_of_Marlank",
		rarity: 1,
		cost: 5,
		loyalty_cost: 2,
		school: "@eval FAITH",
		creature: {
			tags: ['Human', 'Shaman'],
			image_num: 1,
			attack: 2,
			life: 7,
            range: 2,
            move: 1,
            triggered_abilities: [{
				name: "Call",
				rules: "When one of your creature dies, gain 1 mana.",

				on_another_creature_died: "def(class creature creature, class game game, class creature victim) ->commands if(creature.controller != -1 and (not victim.is_building) and (not victim.is_construct) and victim.controller = creature.controller, [
				player.gain_mana_with_hint(game, creature.loc)
			] where player = game.players[creature.controller])",}]
		}
	},  
    
    // CAMPAIGN ONLY CARDS
    
    "Marlank Wall": {
		name: "Marlank Wall",
		rarity: 0,
		type: "creature",
		cost: 2,
		loyalty_cost: 0,
		portrait: "wall-of-stone.png",
		school: "@eval GOLD",
		creature: {
			tags: ["Wall"],
			life: 8,
			resistance: 1,
			portrait_y_offset: 30,
			sprite_sheet: 'building',
			is_building: true,
			image_num: 0,
		}
	},
	
}
