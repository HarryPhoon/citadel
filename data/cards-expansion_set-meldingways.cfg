{

//Aether/Gaea

"White Gryphon": {
		name: "White Gryphon",
		set: "Melding_of_Ways",
		rarity: 0,
		type: "creature",
		portrait: "white-gryphon.png",
		cost: 5,
		school: "@eval [FAITH, FOOD]",
		creature: {
			tags: ['Beast', 'Flying'],
			overlays: [ { image_num: 16 }, { image_num: 12 } ],
			attack: 5,
			life: 6,
			move: 2,
	}
    },
    
    "Youngwood Dryad": {
		name: "Youngwood Dryad",
		set: "Melding_of_Ways",
		rarity: 1,
		type: "creature",
		portrait: "youngwood-dryad.png",
		cost: 4,
		school: "@eval [FAITH, FOOD]",
		creature: {
			tags: ['Faerie', 'Lifebound'],
			overlays: [ { image_num: 16 }, { image_num: 12 } ],
			attack: 1,
			life: 5,
			move: 1,
            triggered_abilities: [{
				name: 'Fertile Feet',
				rules: "When Youngwood Dryad enters or is summoned into a hex without a land/construct, summon a forest there.",
				on_summoned: "def(class creature creature, class game game) ->commands 
                [if(game.construct_at_loc(creature.loc) = null,
                bind_command(game.summon_construct,
			             lib.citadel.create_creature('Forest',
			{
				loc: creature.loc,
			})),
            )]",
            
                on_move: "def(class creature creature, class game game) ->commands
                [
                if(game.construct_at_loc(creature.loc) = null,
                bind_command(game.summon_construct,
			             lib.citadel.create_creature('Forest',
			{
				loc: creature.loc,
			})),
            )]",
		}],
	}},

//Aether/Materia

"Knight Errant": {
		name: "Knight Errant",
		set: "Melding_of_Ways",
		rarity: 0,
		type: "creature",
		portrait: "knight-errant.png",
		cost: 5,
		loyalty_cost: 2,
		school: "@eval [FAITH, GOLD]",
		creature: {
			tags: ['Human', 'Mounted'],
			overlays: [ { image_num: 16 }, { image_num: 12 } ],
			attack: 4,
			life: 7,
            resistance: 1,
			move: 2,
			triggered_abilities: [{
				name: 'Choosen',
				rules: "When Knight Errant is targeted by a spell he gains +2 attack",
				on_card_played: "def(class creature creature, class game game, class player player, class message.play_card info) ->commands
					if(creature.loc in info.targets,
					   add(creature.attack, 2))
				",
		}],
	}
    },
    
    "Fearless Leader": {
		name: "Fearless Leader",
		set: "Melding_of_Ways",
		rarity: 1,
		type: "creature",
		portrait: "fearless-leader.png",
		cost: 5,
		loyalty_cost: 2,
		school: "@eval [GOLD, FAITH]",
		creature: {
			tags: ['Human'],
			overlays: [ { image_num: 16 }, { image_num: 12 } ],
			attack: 7,
			life: 8,
			move: 1,
			triggered_abilities: [{
				name: 'Lead from the front',
				rules: "When you summon an ally in this lane, give it +2/+2",
				on_another_creature_summoned: "def(class creature creature, class game game, class creature new_creature) ->commands
					if(new_creature.loc[0] = creature.loc[0] and new_creature.controller = creature.controller and new_creature != creature,
					   [add(new_creature.attack, 2),
                       add(new_creature.life, 2)])",
		}],
	}
    },
    
    "Grand Alliance": {
		name: "Grand Alliance",
		set: "Melding_of_Ways",
		rarity: 2,
		type: "invocation",
		cost: 0,
		loyalty_cost: 4,
		portrait: "grand-alliance.png",
		school: "@eval [GOLD, FAITH]",
		rules: "If you have an Elf, a Dwarf, and a Human in play, place an alliance headquarters, a Materia/Aether land which provides +2 mana a turn.",
        
        possible_targets: "def(class game game, class creature avatar, [Loc] targets) ->[Loc]|null    
        if(targets=[], if(human and elf and dwarf, 
        fold(map(range(0-(game.rows-1), game.players[game.current_player].construct_loc_in_row(game, value)))), 
        []),null)
        where human = (0<count(game.creatures, value.controller = game.current_player_index and ('Human' in value.tags)))
        where elf = (0<count(game.creatures, value.controller = game.current_player_index and ('Elf' in value.tags)))
        where dwarf = (0<count(game.creatures, value.controller = game.current_player_index and ('Dwarf' in value.tags)))",
        
		
        on_play: "def(class game game, class message.play_card info) ->commands
		[
			bind_command(game.summon_construct,
			             lib.citadel.create_creature('Alliance Headquarters',
			{
				loc: target_construct,
                controller: game.current_player
			})),
		] where target_construct = info.targets[0]",
        
	},
    
    //Token land for Grand Allianace
    "Alliance Headquarters": {
		name: "Alliance Headquarters",
		type: "creature",
		cost: 2,
		loyalty_cost: 0,
		school: "@eval FOOD",
		portrait: "alliance-headquarters.png",
		rules: "+2 income",
		creature: {
			tags: ["Base"],
			is_construct: true,
            portrait: "forest.png",
			image_num: 18,
            
            income: "def(class game game) ->int 2",
		},
	},

//Aether/Sapienza

"Yogi": {
		name: "Yogi",
		set: "Melding_of_Ways",
		rarity: 1,
		type: "creature",
		portrait: "yogi.png",
		cost: 3,
		loyalty_cost: 0,
		school: "@eval [SAPIENZA, AETHER]",
		creature: {
			tags: ['Human'],
			attack: 3,
			life: 3,
			move: 1,
			image_num: 20,

			triggered_abilities: [{
				name: "Pacify",
				rules: "If this creature is killed in combat, the killer loses all movement this turn.",
				on_die: "def(class creature yogi, class game game) ->commands [
					if (yogi.damage_dealt_killed = true,
						map( yogi.hit_by_this_turn(game),
							if (killer is null, [],  [killer.apply_effect_until_end_of_turn('move', -killer.move)])
							where killer = game.creature_by_summon_id(int<- value)
						)
					)
				]",
			},
            {
				name: "Guard",
				rules: "At the start of your turn, Yogi loses its attack until end of turn.",
				on_begin_turn: "def(class creature creature, class game game) ->commands
			             if(game.current_player = creature.controller, creature.apply_effect_until_end_of_turn('attack', -creature.attack))"
            }
            ],
		}
	},

//Aether/Enthropia
    
    	"Fate Weaver": {
		name: "Fate Weaver",
		portrait: "fate-weaver.png",
        set: "Melding_of_Ways",
        cost: 7,
		loyalty_cost: 3,
		school: "@eval [BLOOD, FAITH]",
		rarity: 2,
		creature: {
			tags: ["Avatar"],
            abilities: ['Cover', 'Regeneration'],
			attack: 0,
			life: 2,
			move: 0,
			triggered_abilities: [{
				name: "Spinning Wheel",
				rules: "At the start of your turn your enemy loses life equal to the number of Fate Weavers on the board.",

                on_begin_turn: "def(class creature creature, class game game) ->commands
			             if(game.current_player = creature.controller,
							   add(game.players[(creature.controller+1)%2].life, -(count(game.creatures, value.name ='Fate Weaver'))))",
			}],
		},
	},
	
        	"Angel of Death": {
		name: "Angel of Death",
		portrait: "angel-of-death.png",
        set: "Melding_of_Ways",
        cost: 8,
		loyalty_cost: 4,
		school: "@eval [BLOOD, FAITH]",
        flavor_text: "Death comes. Sometimes as a friend, sometimes as a setback, sometimes it's devestating, but it always comes.",
		rarity: 2,
		creature: {
			tags: ["Avatar"],
            abilities: ['Cover'],
			attack: 10,
			life: 13,
			move: 1,
			activated_abilities: [{
				name: 'Claim',
				cost: 1,
				school: "@eval BLOOD",
				rules: "Sacrifice Angel of Death, destroy target creature.",
                flavor_text: "Now I claim you, as I do all.",
				possible_targets: "def(class game game, class creature creature, [Loc] targets) ->[Loc]|null
					if(targets = [], [c.loc | c<- game.creatures, c != creature])
				",
				on_play: "def(class game game, class message.play_card info) ->commands
				[
					set(target_creature.destroyed, true),
                    set(creature.sacrificed, true),
				] where target_creature = game.creature_at_loc_or_die(info.targets[0])
				  where creature = info.get_creature(game)"
			},
			 ],
		},
	},
//Gaea/Materia

"Baekwall Gargoyle": {
		name: "Baekwall Gargoyle",
		set: "Melding_of_Ways",
		rarity: 0,
		type: "creature",
        portrait: "baekwall-gargoyle.png",
		cost: 4,
		loyalty_cost: 2,
		school: "@eval [GOLD, FOOD]",
		creature: {
			tags: ['Beast', 'Stonebound', 'Flying'],
			attack: 5,
			life: 5,
			move: 1,
            resistance: 1,
            energy: 0,
			initiative: 30,
			image_num: 30,
            on_begin_turn: "def(class game game) ->commands if(game.current_player = me.controller, set(me.energy, 0))",
            activated_abilities: [
				{
					name: 'Enter Stoneform',
					cost: 1,
					school: [1],
					is_responfse: true,
                    is_usable: "def(class game game, class creature creature) ->bool if(creature.energy=0, true, false)",
					rules: "Until the start of your next turn, Baekwall Gargoyle lies in stoneform. This is a reaction.",
					on_play: "def(class game game, class message.play_card info) ->commands [
						set(creature.energy, 1)
					] where creature = info.get_creature(game)"
				}
			],
            passive_abilities: [{
				static_effect: "def(class game game, class creature creature) ->commands 
                [
                if(creature.energy = 1, 
                [creature.apply_static_effect('attack', -creature.attack),
                creature.apply_static_effect('move', -creature.move),
                creature.apply_static_effect('resistance', 4),
                creature.add_ability_static_duration('Regeneration')])
                | target <- game.creatures,
				  (creature = target)
                ]",
				
				name: "Stoneform",
				rules: "While in stoneform, Baekwall Gargoyale loses all attack and move but gains 4 armor and regeneration.",
			}],
		}
	}, //end of Baekwall Gargoyle
    
    "Bronze Dragon": {
		name: "Bronze Dragon",
		set: "Melding_of_Ways",
		rarity: 2,
		type: "creature",
        portrait: "bronze-dragon.png",
		cost: 10,
		loyalty_cost: 3,
		school: "@eval [GOLD, FOOD]",
		creature: {
			tags: ['Dragon'],
			attack: 10,
			life: 12,
            resistance: 2,
			move: 2,
            range: 1,
			initiative: 30,
			image_num: 30,
		}
	},

//Gaea/Sapienza

"Hedge Mage": {
		name: "Hedge Mage",
		set: "Melding_of_Ways",
		rarity: 0,
		type: "creature",
		portrait: "hedge-mage.png",
		cost: 3,
		loyalty_cost: 1,
		school: "@eval [FOOD, SAPIENZA]",
		creature: {
			tags: ['Mage'],
			attack: 3,
			life: 3,
			move: 1,
            passive_abilities: [{
				static_effect: "def(class game game, class creature creature) ->commands
				if(creature.controller >= 0 and game.players[creature.controller].get_resource_level(SAPIENZA) >2,
				   game.players[creature.controller].apply_static_effect(
					(def(class player p, map info) ->commands add(p.card_draw, 1)),
					(def(class player p, map info) ->commands add(p.card_draw, -1)),
					{}))",
				
				name: "Guile",
				rules: "If your Sapienza level is 3 or greater, +1 handsize.",
			},{
				static_effect: "def(class game game, class creature creature) ->commands 
                [
                if(game.players[creature.controller].get_resource_level(FOOD) >2, 
                [creature.apply_static_effect('attack', 2), creature.apply_static_effect('life', 2)])
                | target <- game.creatures,
				  (creature = target)
                ]",
				
				name: "Craft",
				rules: "While your Gaea level is 3 or greater, Hedge mage gains +2/+2",
			}],
        }
	},
    
        "Elixer": {
		name: "Elixer",
		type: "invocation",
        portrait: "elixer.png",
		cost: 3,
		loyalty_cost: 3,
		school: "@eval [FOOD, SAPIENZA]",
		rules: "Gain 5 life.",
		on_play: "def(class game game, class message.play_card info) ->commands
		  add(game.players[game.current_player].life, 5)"
	},

//Gaea/Enthropia

"Devouring Fury": {
		name: "Devouring Fury",
		set: "Melding_of_Ways",
		rarity: 0,
		type: "creature",
		portrait: "devouring-fury.png",
		cost: 7,
		loyalty_cost: 2,
		school: "@eval [FOOD, BLOOD]",
		creature: {
			tags: ['Spirit'],
			attack: 7,
			life: 6,
			move: 1,
            triggered_abilities: [{
				name: "Consume",
				rules: 'At the start of your turn, devouring fury gains life equal to your Gaea level and attack equal to your Enthropia level..',
                on_begin_turn: "def(class creature creature, class game game) ->commands
            [
                    if (game.current_player_index = creature.controller, add(creature.life, game.players[creature.controller].get_resource_level(FOOD))),
                    if (game.current_player_index = creature.controller, add(creature.attack, game.players[creature.controller].get_resource_level(BLOOD)))
            ]"}],
			image_num: 64,
		}
	},
    
        "Slaughterlust": {
		name: "Slaughterlust",
		set: "Reaping_the_Cycle",
		rarity: 1,
		type: "invocation",
        portrait: "slaughterlust.png",
		is_response: false,
		cost: 1,
		loyalty_cost: 2,
		school: "@eval [FOOD, BLOOD]",
		rules: "Give target creature 'When this creature moves after killing a creature, it becomes refreshed and gains 1 move.'",
        possible_targets: "all_creatures_as_possible_targets",
        
		on_play: "def(class game game, class message.play_card info) ->commands
          if(target, add(target.triggered_abilities, 
      [{
            name: 'Slaughterlust',
            rules: 'When this creature makes a kill, it becomes refreshed and gains 1 move..',
            on_kill: 'def(class creature creature, class game game, class creature victim) ->commands 
                [creature.apply_effect_until_end_of_turn(q(move), 1);
                creature.refresh()]',
                
            
    }]), null) where target = game.creature_at_loc_or_die(info.targets[0])"
        },

//Materia/Sapienza

"Rain of Steel": {
		name: "Rain of Steel",
		set: "Melding_of_Ways",
		rarity: 1,
		type: "invocation",
		portrait: "rain-of-steel.png",
		school: "@eval [SAPIENZA, GOLD]",
		cost: 4,
		loyalty_cost: 3,
        
        possible_targets: "all_tiles_as_possible_targets",
		rules: "Target a hex. Inflict 5 damage to creatures and buildings in that hex and adjacent hexes.",
		on_play: "def(class game game, class message.play_card info) ->commands 
        map(game.creatures, creature, 
        if(creature and (not creature.is_building) and (info.targets[0] = creature.loc or game.locs_adjacent(info.targets[0], [int<-creature.loc[0],int<-creature.loc[1],])), [
			creature.inflict_damage(game, 5)
		]))",

		runes: [
		{
			color: 'black',
			points: [[0,100], [0,0], [0,0], [100,100]]
		}
		],
	},

"Tactician": {
		name: "Tactician",
		type: "creature",
        set: "Melding_of_Ways",
		portrait: "tactician.png",
		cost: 6,
		school: "@eval [GOLD, SAPIENZA]",
		rarity: 1,
		creature: {
			tags: ['Human'],
			attack: 5,
			life: 7,
			move: 1,
			image_num: 19,
            activated_abilities: [
				{
					name: 'Shift of Force',
					cost: 2,
					school: "@eval GOLD",
					rules: "Exhaust Tactician and move a creatur you control into to an adjacent lane.",
					exhausts_creature: true,
                    
                    possible_targets: "def(class game game, class creature thisCreature, [Loc] targets) ->[Loc]|null
       if(size(targets)=0, [c.loc | c<- game.creatures, c != thisCreature, c.is_valid_target(game, game.nplayer, me), c.controller = thisCreature.controller],
       if(size(targets)=1, filter(
								game.get_adjacent_locs(targets[0]),
							game.is_loc_on_board(value) and
							value[0] != targets[0] and
							game.creature_at_loc(value) = null),
                            null))",

		on_play: "def(class game game, class message.play_card info) ->commands
		  set(game.creature_at_loc_or_die(info.targets[0]).loc, info.targets[1])",
				}
			]
		}
	},

//Materia/Enthropia

"Black Knight": {
		name: "Black Knight",
		type: "creature",
        set: "Melding_of_Ways",
		portrait: "black-knight.png",
		cost: 6,
		loyalty_cost: 3,
		school: "@eval [GOLD, BLOOD]",
		rarity: 1,
        rules: "Black Knight gains +3 armor +3 and attack while you have no other creature or building in the same lane and your opponent has excatly one creature or building in its lane.",
        flavor_text: "I am loyal to no house. Yet by my strength and steel, yours shall not prosper.",
		creature: {
			tags: ['Human'],
			attack: 8,
			life: 8,
			move: 1,
			image_num: 19,
            static_ability_effect: "if(creature = target and 1= count(game.creatures, value.controller = creature.controller and value.loc[0] = creature.loc[0]) and theirguys = 1, 
            [creature.apply_static_effect('attack', 3),
            creature.apply_static_effect('resistance', 3)]) 
            where theirguys = count(game.creatures, value.controller != creature.controller and value.loc[0] = creature.loc[0])"
		}
	},
    
"Slave Trader": {
		name: "Slave Trader",
		type: "creature",
        set: "Melding_of_Ways",
		portrait: "slave-trader.png",
		cost: 4,
		loyalty_cost: 1,
		school: "@eval [GOLD, BLOOD]",
		rarity: 1,
		creature: {
			tags: ['Human'],
			attack: 4,
			life: 6,
			move: 1,
			image_num: 19,
            triggered_abilities: [{
				name: "Capture",
				rules: "When Slave Trader destroys a creature, if it survives, gain 2 mana and one card.",
				on_kill: "def(class creature creature, class game game, class creature victim) ->commands
                if(not victim.is_building and creature.life > 0, 
                [
                game.players[creature.controller].gain_mana_with_hint(game, creature.loc),
                game.players[creature.controller].gain_mana_with_hint(game, creature.loc),
                game.players[creature.controller].draw_cards(game, 1)
                ])",
		}],
        }
	},

//Sapienza/Enthropia

"Mana Burn": 
    {
		name: "Mana Burn",
		set: "Melding_of_Ways",
		rarity: 1,
		type: "invocation",
		school: "@eval [SAPIENZA, BLOOD]",
		portrait: "mana-burn.png",
		artist: "eleazzaar",
		cost: 0,
		loyalty_cost: 3,
	//	resolve_effect: "fire",
		rules: "Your opponent loses up to 3 mana and takes damage equal to the mana lost.",
		on_play: "def(class game game, class message.play_card info) ->commands
        [
        add(opponent.life, -min(opponent.resources, 3)),
        add(opponent.resources, -min(opponent.resources, 3)),
        ] where opponent = game.players[((game.current_player_index+1)%2)]",
	},

	"Bloodletting": {
		name: "Bloodletting",
		set: "Melding_of_Ways",
		rarity: 1,
		type: "invocation",
		school: "@eval [BLOOD, SCROLLS]",
		portrait: "traced_kukri.png",
		cost: 0,
		loyalty_cost: 2,
		rules: "Lose 5 life, draw 5 cards.",

		on_play: "def(class game game, class message.play_card info) ->commands
		[
			add(caster.life, -5),
			caster.draw_cards(game, 5),
		] where caster = game.players[game.current_player]",
	},
}
