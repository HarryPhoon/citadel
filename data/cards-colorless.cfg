{
	"Magic Shield": {
		name: "Magic Shield",
		type: "spell",
		cost: 2,
		is_response: true,
		school: "@eval COLORLESS",
		rarity: 1,
		//image_num: 72,
		
		rules: "Target creature you control gains +5 armor this turn.",

		possible_targets: "
		  def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
			if(targets = [], [creature.loc | creature <- game.creatures, creature.controller = game.current_player, creature.is_valid_target(game, avatar.controller, me)])
		",
			 
		on_play: "def(class game_state game, class message.play_card info) ->commands
			game.creature_at_loc_or_die(info.targets[0]).apply_effect_until_end_of_turn('armor', 5)
				asserting size(info.targets) = 1
		",
	},
	
	"Slingshot": {
		name: "Slingshot",
		type: "spell",
		school: "@eval COLORLESS",
		rarity: 1,
		cost: 0,
		is_response: false,
		rules: "Add 1 wound to target creature.",
		//flavour_text: "You didn't pack this heavy slingshot all the way to the battle for nothing.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		  add(game.creature_at_loc_or_die(info.targets[0]).life, -1)",

		ai_score: "def(class game_state game, [Loc] targets) ->int
		  if(target.controller = game.current_player_index, 0,
		   if(target.life <= 1, target.ai_value(game)*10, 1)) //Giving it a value ought to make the AI play it, if it hasn't sacrificed it for mana.
				  where target = game.creature_at_loc_or_die(targets[0])",
	},

	"Armageddon": {
		name: "Armageddon",
		type: "spell",
		cost: 10,
		school: "@eval COLORLESS",
		rarity: 2,
		rules: "Destroy all creatures and buildings.",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		  map(game.creatures, creature, [
		    add(game.graveyard, {(creature.summon_id): creature}),
			set(creature.destroyed, true)
		  ])",
	},

	"DebugWin": {
		name: "DebugWin",
		type: "spell",
		cost: 0,
		school: "@eval COLORLESS",
		rarity: 3,
		rules: "Do 3 damage to opponent",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		  [set(player.life, 0) | player <- game.players,
		                         player != game.player_obj]",
	},

	"DebugVictory": {
		name: "DebugVictory",
		type: "spell",
		cost: 0,
		loyalty_cost: 0,
		school: "@eval SCROLLS",
		rarity: -1,
		rules: "you win (debug)",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		  set(game.opponent_obj.life, 0)
		",

	},

	"DebugDefeat": {
		name: "DebugDefeat",
		type: "spell",
		cost: 0,
		loyalty_cost: 0,
		school: "@eval SCROLLS",
		rarity: -1,
		rules: "you lose (debug)",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		  set(game.player_obj.life, 0)
		",

	},

	"Village": {
		name: "Village",
		type: "land",
		cost: 3,
		loyalty_cost: 0,
		school: "@eval COLORLESS",
		rarity: -1,
		portrait: "village.png",
		is_player_ability: true,
		creature: {
			name: 'Village',
			portrait_y_offset: 20,
            tags: ['Settlement'],
			controller: -1,
			is_land: true,
			rules: 'Controller gets +1 card each turn',
			rules_short: ['+1 Card'],
			card_draw: "def(class game_state game) ->int 1",
		},
	},

	"Monument": {
		name: "Monument",
		type: "land",
		cost: 3,
		loyalty_cost: 0,
		school: "@eval FAITH",
		rarity: -1,
		portrait: "school-faith.png",
		artist: "foo",
		is_player_ability: true,
		creature: {
			name: 'Monument',
            tags: ["Shrine"],
			portrait_y_offset: 50,
			portrait_scale: 0.2,
			controller: -1,
			is_land: true,
		},
	},

	"Meditate": {
		name: "Meditate",
		type: "spell",
		cost: 3,
		loyalty_cost: 0,
		school: "@eval COLORLESS",
		rarity: -1,
		rules: "+1 Mana Pool size",
		is_player_ability: true,
		on_play: "def(class game_state game, class message.play_card info) ->commands
			add(game.players[info.player_index].base_income, 1)
		",
	},

	"Study": {
		name: "Study",
		type: "spell",
		cost: 2,
		loyalty_cost: 0,
		school: "@eval COLORLESS",
		rarity: -1,
		rules: "Draw a card",
		is_player_ability: true,
		on_play: "def(class game_state game, class message.play_card info) ->commands
			game.players[info.player_index].draw_cards(game, 1)
		",
	},

    "Wound": {
		name: "Wound",
		rarity: 0,
		type: "spell",
		cost: 0,
		loyalty_cost: 0,
		portrait: "wound.png",
        school: "@eval COLORLESS",
		flavor_text: "Some wounds heal quickly, others fester. Hopefully this one will not prove mortal.",
        rules: "This spell does nothing.",
        
        on_play: "def(class game_state game, class message.play_card info) ->commands []",
	},
}
