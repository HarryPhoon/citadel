{
    "Werewolf": {
		name: "Werewolf",
		type: "creature",
        portrait: "werewolf.png",
		cost: 3,
		school: "@eval FOOD",
		set: "Dawn_to_Dusk",
		rarity: 0,
		creature: {
			tags: ['Wolf', 'Beast'],
            portrait: "werewolf.png",
			attack: 3,
			life: 3,

			passive_abilities: [{
				name: 'Nocturnal',
				rules: "+2/+2 at Night.",
				static_effect: "def(class game_state game, class creature creature) ->commands
				if(game.is_day = false, [
					creature.apply_static_effect('attack', 2),
					creature.apply_static_effect('life_shield', 2),
				])
				",
		}],
		}
	},

	"Prayer to Kala": {
		name: "Prayer to Kala",
		set: "Dawn_to_Dusk",
		rarity: 1,
		type: "spell",
		school: "@eval [ENTROPIA, AETHER]",
		portrait: "hypothermia.png",
		portrait_focus: [413,454],
		portrait_focus_height: 180,
		cost: 2,
		loyalty_cost: 2,
		is_response: true,
		rules: "Target creature gets +3/+3 this turn if it is day and -3/-3 this turn if it is night.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play_on_creature: "def(class game_state game, class creature target_creature) ->commands
		if(game.is_day,
		[
			target_creature.apply_effect_until_end_of_turn('attack', 3),
			target_creature.apply_effect_until_end_of_turn('life_shield', 3),
		],
		[
			target_creature.apply_effect_until_end_of_turn('attack', -3, 'hypothermia_creature_effect'),
			target_creature.apply_effect_until_end_of_turn('life', -3, 'hypothermia_creature_effect'),
		])
		",
		
		ai_score: "def(class game_state game, [Loc] targets) ->int
		if(target.controller = game.current_player_index, -10000,
		if(target.life <= 4, target.ai_value(game)*10, 0))
		where target = game.creature_at_loc_or_die(targets[0])",

		ai_flags: ["@eval AI_CARD_NEVER_TARGET_FRIENDS"],
	},

	"Cultist": {
		name: "Cultist",
		set: "Dawn_to_Dusk",
		rarity: 1,
		type: "creature",
		portrait: "soothsayer.png",
		hue_shift: 0.5,
		portrait_focus: [336,346],
		portrait_focus_width: 360,
		cost: 3,
		loyalty_cost: 0,
		school: "@eval [ENTROPIA, AETHER]",
		creature: {
			game_sounds: "soothsayer",
			attack: 5,
			life: 2,

			triggered_abilities: [{
				name: "Leech",
				rules: "Deals one damage to you at the start of your turn.",

				on_begin_turn: "def(class creature creature, class game_state game) ->commands
					//deal 1 damage to controller at start of turn.
					if(game.current_player_turn_index = creature.controller, [
						add(game.players[creature.controller].life, -1),
						add(game.animation_hints, [construct('animation.player_damage_hint', { type: 'player_damage_hint', target_player: creature.controller, source: creature, amount: 1, intensity: 1, anim_type: 'bloodcord' })]),
					])
				",

			}],

		}
	},

	"Militant Priest": {
		name: "Militant Priest",
		type: "creature",
		set: "Dawn_to_Dusk",
		portrait: "ardent-defender.png",
		cost: 3,
		school: "@eval [AETHER,MATERIA]",
		rarity: 1,
		creature: {
			game_sounds: "warrior_aether",
			attack: 6,
			life: 4,

            passive_abilities: [{
				static_effect: "def(class game_state game, class creature creature) ->commands
				if(creature.controller >= 0,
				   game.players[creature.controller].apply_static_effect(
					(def(class player p, map info) ->commands add(p.card_draw, -1)),
					(def(class player p, map info) ->commands add(p.card_draw, 1)),
					{}))",
				
				name: "Demands",
				rules: "-1 hand size",
			}],
		},
	},

	"Iodian Spellcatcher": {
		name: "Iodian Spellcatcher",
		set: "Dawn_to_Dusk",
		rarity: 1,
		type: "creature",
		portrait: "spell-warden.png",
		hue_shift: 0.5,
		cost: 3,
		school: "@eval MINERVA",

		creature: {
			game_sounds: "magic_user",
			attack: 4,
			life: 3,
			conduit: 2,
		}
	},

	"Keeper of Runes": {
		name: "Keeper of Runes",
		set: "Dawn_to_Dusk",
		rarity: 1,
		type: "creature",
		portrait: "oldric-lord-of-the-hold.png",
		hue_shift: 0.5,
		portrait_focus: [451,198],
		portrait_focus_height: 120,
		cost: 6,
		school: "@eval MATERIA",
		creature: {
			game_sounds: "soldier_blade",
			sound_swish: "heavy",
			sound_impact: "wood",
			abilities: ["Valiant"],
			resistance: 2,
			armor: 2,
			attack: 5,
			life: 5,
		}
	},

	"Eclipse": {
		name: "Eclipse",
		set: "Dawn_to_Dusk",
		rarity: 0,
		type: "spell",
		cost: 0,
		loyalty_cost: 2,
		school: "@eval [ENTROPIA, AETHER]",
		portrait: "festering-wound.png",
		rules: "Day becomes night and night becomes day until end of turn.",
		on_play: "def(class game_state game, class message.play_card info) ->commands
			set(game.eclipse, not game.eclipse)
		",
	},

	"Mass Polymorph": {
		name: "Mass Polymorph",
		set: "Dawn_to_Dusk",
		rarity: 2,
		type: "spell",
		cost: 6,
		loyalty_cost: 4,
		school: "@eval [MINERVA]",
		portrait: "polymorph.png",
		hue_shift: 0.5,
		is_response: false,

		help_strings: ["Transform"],

		rules: "All creatures become 2/2 <i>Giant Frog</i>s.",
		on_play: "def(class game_state game, class message.play_card info) ->commands
			map(game.creatures, [
				set(frog.portrait, 'polymorph.png'),
				value.transform(game, frog),
			]
				where frog = lib.citadel.create_creature('Giant Frog')
			)
		",
	},

	"Seeds of Confusion": {
		name: "Seeds of Confusion",
		set: "Dawn_to_Dusk",
		rarity: 2,
		type: "spell",
		cost: 2,
		loyalty_cost: 1,
		school: "@eval [ENTROPIA, MATERIA]",
		portrait: "anthem-of-battle.png",
		hue_shift: 0.5,
		is_response: false,

		rules: "Enemy creatures move to a random adjacent tile behind them.",
		on_play: "def(class game_state game, class message.play_card info) ->commands

		if(info.card_or_ability != null and player.fully_paid_devotion_cost(info.card_or_ability),
			(confusion(); confusion()),
			confusion()
		)

		where player = game.players[info.player_index]

		where confusion = def() ->commands
		map(creatures,
		; if(target_loc != null, value.set_loc(game, target_loc, 'leap'))
		    where target_loc = choose(avail_adj)
			where avail_adj = filter(backward_adj, game.is_loc_on_board(value) and game.creature_at_loc(value) = null)
			where backward_adj = game.get_adjacent_backward_locs(value.loc, value.controller)
			where adj = game.get_adjacent_locs(value.loc)
		)
		where creatures = sort([c | c <- game.creatures, c.is_building = false, c.controller != game.nplayer], if(game.nplayer != 0, a.loc.y < b.loc.y, a.loc.y > b.loc.y))
		",

	},
}
