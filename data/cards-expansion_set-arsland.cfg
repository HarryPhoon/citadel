{
//Entropia--------------------------------------------------------------------------
	"Death Knight": {
		name: "Death Knight",
		type: "creature",
		set: "Arsland",
		portrait: "school-blood.png",
		cost: 6,
		school: "@eval BLOOD",
		rarity: 0,
		help_strings: ["Devoted X"],		
		creature: {
			attack: 7,
			life: 6,			
            triggered_abilities: [{
				name: "Devoted 4",                  
				rules: "Death Knight gains <i>Revenant</i>",
				on_summoned: "def(class creature creature, class game_state game) ->commands
                [
                    if(game.players[game.current_player_index].get_resource_level(ENTROPIA)>=4,
						
					set(creature.triggered_abilities, 
					[
					construct('triggered_ability', {
						name: 'Revenant',
						once: true,
						rules: q(If Death Knight would die, it is fully restored instead.),
	
						on_die: q^def(class creature creature, class game_state game) ->commands
							if(not game.creature_at_loc(creature.loc), game.summon_creature(
							lib.citadel.create_creature(creature.name, {
								name: creature.name,
								controller: creature.controller,
								loc: creature.loc,
								card_name: creature.card_name,
								summon_id: creature.summon_id,
								triggered_abilities: filter(lib.citadel.create_creature(creature.name).triggered_abilities, value.name != 'Revenant')
							})
						))
						^,
					})
					])
						
					,set(creature.triggered_abilities, [])),
                ]",
            }],
		},

	},
	
	"Sangromancer": {
		name: "Sangromancer",
		type: "creature",
		set: "Arsland",
		portrait: "school-blood.png",
		cost: 4,
		school: "@eval BLOOD",
		rarity: 1,	
		creature: {
			attack: 5,
			life: 4,			
			portrait: "school-blood.png",
			activated_abilities: [
			{
				name: "Drain",
				cost: 2,
				school: "@eval BLOOD",
				portrait: "school-blood.png",		
//				is_instant: true,
				is_response: true,
                uses_action: false,
				rules: "Drain 1 life from an adjacent creature.",
				possible_targets: "
					def(class game_state game, class creature creature, [Loc] targets) ->[Loc]|null
						if(targets = [], filter(
							game.get_adjacent_locs(creature.loc),
							game.is_loc_on_board(value) and
							game.creature_at_loc(value) != null), null)
					",
				on_play: "def(class game_state game, class message.play_card info) ->commands
				[
					add(creature.life, 1),
					add(target_creature.life, -1),
				] where creature = info.get_creature(game)
				  where target_creature = game.creature_at_loc_or_die(info.targets[0])"
			}
			],
		},

	},	
	
	"Cancer Mage": {
		name: "Cancer Mage",
		type: "creature",
		set: "Arsland",
		portrait: "school-blood.png",
		cost: 6,
		school: "@eval BLOOD",
		rarity: 1,	
		creature: {
			attack: 5,
			life: 5,			
			portrait: "school-blood.png",
			activated_abilities: [
			{
				name: "Infect",
				cost: 1,
				school: "@eval BLOOD",
				portrait: "school-blood.png",		
//				is_instant: true,
				is_response: false,
                uses_action: true,
				rules: "Target creature gets poisoned.",
				possible_targets: "all_creatures_as_possible_targets",
				on_play: "def(class game_state game, class message.play_card info) ->commands
				[
					add(target_creature.status_effects, ['Poisoned'])
				] 
				  where target_creature = game.creature_at_loc_or_die(info.targets[0])"
			}],
			triggered_abilities: [{
				name: "Aggravation",
				rules: "At the end of each turn, adjacent poisoned creatures get -1/-2.",
				on_end_turn: "def(class creature creature, class game_state game) ->commands 
				[
				if('Poisoned' in target.status_effects,[
					add(target.life, -2),
					add(target.attack,-1),
				],)
				  | target <- game.creatures,
				    not target.is_building,
					game.locs_adjacent(creature.loc, target.loc)
				]",
			}],

		},

	},		
	
	"Blood Burn": {
		name: "Blood Burn",
		set: "Arsland",
		rarity: 0,
		type: "spell",
		portrait: "school-blood.png",
		cost: 0,
		loyalty_cost: 2,
		school: "@eval BLOOD",
		rules: "Pay 5 life, gain 3 mana.",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		[	
			add(player.life, -5),
            map(range(0,3),player.gain_mana_from_card(game, me)),	
		]
		where player = game.players[info.player_index]",
	},	
	
	"Blightstone": {
		name: "Blightstone",
		type: "creature",
		set: "Arsland",
		cost: 2,
		loyalty_cost: 1,
		school: "@eval BLOOD",
		portrait: "school-blood.png",
		portrait_focus: [552,369],
		portrait_focus_height: 260,
		help_strings: ["Cover"],
		creature: {
			tags: ["Terrain"],
			is_construct: true,
            portrait: "school-blood.png",
			image_num: 18,
			activated_abilities: [
			{
				name: "Blight",
				cost: 1,
				school: "@eval BLOOD",
				is_response: false,
				uses_action: true,
				rules: "Target creature in the lane gets poisoned.",
				possible_targets: "def(class game_state game, class creature creature, [Loc] targets) ->[Loc]|null
					if(targets = [], [c.loc | c<- game.creatures, creature.loc[0]=c.loc[0], c.is_valid_target(game, game.nplayer, me), c.is_construct=false, c.is_building=false])
				",
				on_play: "def(class game_state game, class message.play_card info) ->commands
				[
					add(target_creature.status_effects, ['Poisoned'])
				] where target_creature = game.creature_at_loc_or_die(info.targets[0])"
			},
			],
		},
	},		
	
	"Devil Hound": {
		name: "Devil Hound",
		set: "Arsland",
		rarity: 0,
		cost: 5,
		loyalty_cost: 0,
		school: "@eval BLOOD",
		portrait: "school-blood.png",
		creature: {
			attack: 6,
			life: 5,
			portrait: "school-blood.png",			
			triggered_abilities: [{
				name: "Feed",
				rules: "When you discard a card for the first time in a turn, Devil Hound gains a +1/+1.",
				on_card_discarded: "def(class creature creature, class game_state game, class player player, class card card) ->commands
				if(player.team_index = game.team_index(creature.controller) and (creature.energy = 0),[ 
					creature.apply_effect_until_end_of_turn('energy', 1),
					add(creature.life, 1),
					add(creature.attack,1),
				])",
			}],

		}
	},	
	
	"Suck Blood": {
		name: "Suck Blood",
		set: "Arsland",
		rarity: 0,
		type: "spell",
		is_response: true,
		cost: 3,
		loyalty_cost: 1,
		school: "@eval BLOOD",
		portrait: "school-blood.png",

		help_strings: ["Devoted X"],
		rules: "Target creature lose 3 life.

Devoted 2: You gain 3 life.",

		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands
			[
				add(game.creature_at_loc_or_die(info.targets[0]).life,-3),
				if(game.players[info.player_index].get_resource_level(BLOOD)>=2, add(game.players[info.player_index].life, 3)),
			]	
				asserting size(info.targets) = 1",
	},		
	
	
//Aether------------------------------------------	
	"Chosen Warrior": {
		name: "Chosen Warrior",
		type: "creature",
		set: "Arsland",
		portrait: "school-faith.png",
		cost: 4,
		school: "@eval FAITH",
		rarity: 0,
		help_strings: ["Devoted X"],		
		creature: {
			attack: 5,
			life: 4,			
            triggered_abilities: [{
				name: "Devoted 4",                  
				rules: "Chosen Warrior gets +0/+3 and gains <i>Cover</i>",
				on_summoned: "def(class creature creature, class game_state game) ->commands
                [
                    if(game.players[game.current_player_index].get_resource_level(FAITH)>=4,
					[
						add(creature.abilities, ['Cover']),
						add(creature.life, 3),
					]	
					,),
					
					set(creature.triggered_abilities, [])
                ]",
            }],
		},

	},

	"White Mage": {
		name: "White Mage",
		type: "creature",
		set: "Arsland",
		portrait: "school-faith.png",
		cost: 3,
		school: "@eval FAITH",
		rarity: 1,	
		creature: {
			attack: 4,
			life: 3,			
			activated_abilities: [
			{
				name: "Bless",
				cost: 2,
				school: "@eval FAITH",
				portrait: "school-faith.png",					
//				is_instant: true,
				is_response: true,
				uses_action: true,
				rules: "Let an adjacent creature gain 2 life.",
				possible_targets: "
					def(class game_state game, class creature creature, [Loc] targets) ->[Loc]|null
						if(targets = [], filter(
							game.get_adjacent_locs(creature.loc),
							game.is_loc_on_board(value) and
							game.creature_at_loc(value) != null), null)
					",
				on_play: "def(class game_state game, class message.play_card info) ->commands
				[
					add(target_creature.life, 2),
				] where creature = info.get_creature(game)
				  where target_creature = game.creature_at_loc_or_die(info.targets[0])"
			}
			],
		},	
	},
	
    "Tower of Faith": {
		name: "Tower of Faith",
		type: "creature",
		set: "Arsland",
		cost: 5,
		loyalty_cost: 1,
		school: "@eval FAITH",
		portrait: "school-faith.png",
		portrait_focus: [552,369],
		portrait_focus_height: 260,
		creature: {
			tags: ["Tower"],
			is_construct: true,
			portrait: "school-faith.png",
			passive_abilities: [
			{
                name: 'Censor Heresy',
                rules: "Non Aether cards have 1 more loyalty cost.",
				static_effect: "def(class game_state game, class creature creature) ->commands
				   [
				   game.players[0].add_static_cost_filter(
				     construct('cost_filter', {
						filter_loyalty_cost: 'def(class player p, class card_base card, int cost) ->int
							if ((FAITH in card.school),cost,cost + 1)
						',
					 })
				   ),
				   game.players[1].add_static_cost_filter(
				     construct('cost_filter', {
						filter_loyalty_cost: 'def(class player p, class card_base card, int cost) ->int
							if ((FAITH in card.school),cost,cost + 1)
						',
					 })
				   )
				   ]",
			}
			],
		},
	},	
	
	"Angelic Favor": {
		name: "Angelic Favor",
		set: "Arsland",
		rarity: 0,
		type: "spell",
		is_response: false,
		cost: 3,
		loyalty_cost: 0,
		school: "@eval FAITH",
		portrait: "school-faith.png",
		portrait_focus: [406,526],
		portrait_focus_height: 220,
		help_strings: ["Indestructible", "Devoted X"],
		artist: "lucy",
		rules: "Target friendly creature gets +2/+2.

Devoted 5: Target creature gets Indestructible and an additional +2/+2 this turn.",
		possible_targets: "my_creatures_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		[
			add(creature.attack,2),
			add(creature.life,2),
			if(game.players[game.current_player_index].get_resource_level(FAITH)>=5,
			[
				creature.add_ability_until_end_of_turn('Indestructible'),
				creature.apply_effect_until_end_of_turn('life', 2),
				creature.apply_effect_until_end_of_turn('attack', 2),				
			],) 	
		] 	asserting size(info.targets) = 1
			where creature = game.creature_at_loc_or_die(info.targets[0]),",

	},	
	
	"Temple of Death Angel": {
		name: "Temple of Death Angel",
		set: "Arsland",
		rarity: 2,
		type: "creature",
		hero: true,
		cost: 6,
		loyalty_cost: 0,
		school: "@eval FAITH",
		portrait: "school-faith.png",
		rules: "Gain <b>Energy</b> equal to your devotion to Aether at start of your turn. If the Temple has at least 50 energy, you win.",
		creature: {
			is_construct: true,
			abilities: ['Fragile'],
			triggered_abilities: [{
				name: "Apocalypse",
				rules: "none",
				hidden_on_creature: true,
				on_begin_turn: "def(class creature creature, class game_state game) ->commands
				if(game.current_player_index = creature.controller, [

					if(creature.energy + faith_devotion>= 50,			// the new energy is not applied yet 
					[	add(game.players[(creature.controller+1)%2].life, -1000),
						add(game.animation_hints, [construct('animation.player_damage_hint', { type: 'player_damage_hint', intensity: 1, target_player: (creature.controller+1)%2, source: creature, amount: 100})]),
					]),
					add(creature.energy, faith_devotion),					
				]) where faith_devotion = game.players[game.current_player_index].get_resource_level(FAITH)
				",
			}],
		},
	},	
	

	
//Gaea----------------------------------------------------------------	
	"Rafa Snake": {
		name: "Rafa Snake",
		type: "creature",
		set: "Arsland",
		portrait: "school-food.png",
		cost: 3,
		school: "@eval FOOD",
		rarity: 0,
		help_strings: ["Devoted X"],		
		creature: {
			attack: 4,
			life: 3,		
			abilities: ['Haste'],			
            triggered_abilities: [{
				name: "Devoted 2",                  
				rules: "Rafa Snake gets <i>Feral</i> unless this ability is triggered",
				on_summoned: "def(class creature creature, class game_state game) ->commands
                [
                    if(game.players[game.current_player_index].get_resource_level(FOOD)<2,
						add(creature.abilities, ['Feral'])
					,),	
					set(creature.triggered_abilities, [])
                ]",
            }],
		},
	},		
	
	"Camouflage": {
		name: "Camouflage",
		set: "Arsland",
		rarity: 0,
		type: "spell",
		is_response: true,
		cost: 2,
		loyalty_cost: 0,
		school: "@eval FOOD",
		portrait: "school-food.png",
		portrait_focus: [406,526],
		portrait_focus_height: 220,
		help_strings: ["Cover", "Devoted X"],
		artist: "lucy",
		rules: "Target friendly creature has <i>Cover</i> this turn.

Devoted 4: Target creature has Cover permanently instead.",
		possible_targets: "my_creatures_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands
			if(game.players[info.player_index].get_resource_level(FOOD)<4,
				creature.add_ability_until_end_of_turn('Cover'), 
				add(creature.abilities, ['Cover'])) 	
					asserting size(info.targets) = 1
					where creature = game.creature_at_loc_or_die(info.targets[0]),	

",

		ai_flags: ["@eval AI_CARD_USE_ONLY_TO_SAVE"],
	},	
	
	"Spitter": {
		name: "Spitter",
		type: "creature",
		set: "Arsland",
		portrait: "school-food.png",
		cost: 6,
		school: "@eval FOOD",
		rarity: 1,	
		creature: {
			attack: 7,
			life: 5,			

            triggered_abilities: [{
				name: "Acid Spit",
				rules: "At the start of each turn, Spitter deals 1 damage to adjacent enemy creatures.",
                on_begin_turn: "def(class creature creature, class game_state game) ->commands
			        [
                        map(game.creatures, if((value.controller!=creature.controller) and (not value.is_construct) and (not value.is_building) and game.locs_adjacent(creature.loc, value.loc), [
						value.inflict_damage(game, 1),]))
					]",
            }],  
		},	
	},		
	
	"Awaken the Beast": {
		name: "Awaken the Beast",
		set: "Arsland",
		rarity: 0,
		type: "spell",
		school: "@eval GAEA",
		portrait: "school-food.png",
		is_response: true,
		cost: 3,
		loyalty_cost: 2,
		rules: "Put an <i>Awakened Beast</i> into your hand",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		[			
			set(the_player.hand, the_player.hand + ['Awakened Beast']),
		]where the_player = game.players[info.player_index]",		
	},		
	
	"Awakened Beast": {
		name: "Awakened Beast",
		rarity: 0,
		type: "creature",
		portrait: "school-food.png",

		cost: 3,
		school: "@eval GAEA",
		creature: {
			attack: 9,
			life: 7,
			resistance: 1,
		}
	},	
	
	"Deep Cave": {
		name: "Deep Cave",
		type: "creature",
		set: "Arsland",
		cost: 3,
		loyalty_cost: 0,
		school: "@eval FOOD",
		portrait: "school-food.png",
		portrait_focus: [552,369],
		portrait_focus_height: 260,
		help_strings: ["Cover"],
		rules: "While not engaged, creatures in this tile have <i>Cover</i> and +4 armor.",
		creature: {
			tags: ["Terrain"],
			is_construct: true,
            portrait: "school-food.png",
			image_num: 18,
			static_ability_effect: "if(creature.loc = target.loc and not target.is_construct and (target.targets_attacking(game)=[]), [target.add_ability_static_duration('Cover'),target.apply_static_effect('resistance', 4)])",
		},
	},	
	
//Minerva-----------------------------------------	
	"Aspiring Student": {
		name: "Aspiring Student",
		type: "creature",
		set: "Arsland",
		portrait: "school-scrolls.png",
		cost: 3,
		school: "@eval SCROLLS",
		rarity: 0,
		help_strings: ["Devoted X"],
		creature: {
			attack: 3,
			life: 3,			
            triggered_abilities: [
			{
				name: "Devoted 2",                  
				rules: "Aspiring Student gets +1/+1",
				on_summoned: "def(class creature creature, class game_state game) ->commands
                    if(game.players[game.current_player_index].get_resource_level(SCROLLS)>=2,
					[
						add(creature.life, 1),
						add(creature.attack, 1),
					],)",
            },
			{
				name: "Devoted 5",                  
				rules: "Aspiring Student gets +2/+2",
				on_summoned: "def(class creature creature, class game_state game) ->commands
                [
                    if(game.players[game.current_player_index].get_resource_level(SCROLLS)>=5,
					[
						add(creature.life, 2),
						add(creature.attack, 2),
					]	
					,),	
					set(creature.triggered_abilities, [])
                ]",
            }],
		},

	},		
	
	"Mistcaller": {
		name: "Mistcaller",
		type: "creature",
		set: "Arsland",
		portrait: "school-scrolls.png",
		cost: 5,
		school: "@eval SCROLLS",
		rarity: 1,	
		creature: {
			attack: 4,
			life: 5,			
			activated_abilities: [
			{
				name: "Mist",
				cost: 2,
				school: "@eval SCROLLS",
				portrait: "school-scrolls.png",					
//				is_instant: true,
				is_response: true,
				uses_action: false,
				rules: "Let an adjacent creature get -2/+0 and -2 armor this turn.",
				possible_targets: "
					def(class game_state game, class creature creature, [Loc] targets) ->[Loc]|null
						if(targets = [], filter(
							game.get_adjacent_locs(creature.loc),
							game.is_loc_on_board(value) and
							game.creature_at_loc(value) != null), null)
					",
				on_play: "def(class game_state game, class message.play_card info) ->commands
				[
					game.creature_at_loc_or_die(info.targets[0]).apply_effect_until_end_of_turn('attack', -2),
					game.creature_at_loc_or_die(info.targets[0]).apply_effect_until_end_of_turn('resistance', -2),				
				]asserting size(info.targets) = 1"
			}
			],
		},	
	},	
	
	"Mind Shock": {
		name: "Mind Shock",
		set: "Arsland",
		rarity: 1,
		type: "spell",
		school: "@eval SAPIENZA",
		portrait: "school-scrolls.png",
		cost: 2,
		loyalty_cost: 3,
		rules: "Shuffle your opponent's hand into his deck.",
		
		possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		null",

		on_play: "def(class game_state game, class message.play_card info) ->commands
		[
			set(opponent.deck, shuffle(opponent.deck + opponent.hand)),	
			set(opponent.hand, []),
		] where opponent = game.players[(info.player_index+1)%2]
		",	
	},
	
	"Psychic Blast": {
		name: "Psychic Blast",
		set: "Arsland",
		rarity: 0,
		type: "spell",
		school: "@eval SAPIENZA",
		portrait: "school-scrolls.png",
		is_response: true,
		cost: 1,
		loyalty_cost: 2,
		rules: "Deal X damage to target creature, where X is the size of your hand. Then shuffle your hand into your deck.",
		
		arrow_texture: "effects/psychic-energy.png",		
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		[
			if(info.targets[0][0] = -1,
			//targeting a player
				add(game.players[info.targets[0][1]].life, -damage_amount),

			//targeting a creature
				creature.inflict_damage(game, damage_amount)
					asserting size(info.targets) = 1
					where creature = game.creature_at_loc_or_die(info.targets[0])) where damage_amount=size(the_player.hand),

			set(the_player.deck, shuffle(the_player.deck + the_player.hand)),					
			set(the_player.hand, []),
		]where the_player = game.players[info.player_index]",		
	},	
	
//Materia------------------------------------------	
	"Masterwork Musket": {
		name: "Masterwork Musket",
		set: "Arsland",
		rarity: 0,
		type: "school-gold",
		is_response: false,
		cost: 3,
		loyalty_cost: 0,
		school: "@eval GOLD",
		portrait: "forest.png",
		portrait_focus: [406,526],
		portrait_focus_height: 220,
		help_strings: ["Devoted X"],
		rules: "Target creature summoned this turn gains Range 1.

Devoted 4: Target creature gets +3/+0",
		possible_targets: "equipment_targets",
		_invalid_target_reason: "equipment_invalid_reason",		
		on_play: "def(class game_state game, class message.play_card info) ->commands
		[  
			set(game.creature_at_loc_or_die(info.targets[0]).range, 1),
			if(game.players[game.current_player_index].get_resource_level(GOLD)>=4, add(game.creature_at_loc_or_die(info.targets[0]).attack, 3))
		]	asserting size(info.targets) = 1",
	},	

	"Trained Soldier": {
		name: "Trained Soldier",
		type: "creature",
		set: "Arsland",
		portrait: "school-gold.png",
		cost: 4,
		school: "@eval GOLD",
		rarity: 0,
		help_strings: ["Devoted X"],		
		creature: {
			attack: 5,
			life: 4,		
			resistance: 1,
            triggered_abilities: [{
				name: "Devoted 3",                  
				rules: "Trained Soldier gains 1 armor",
				on_summoned: "def(class creature creature, class game_state game) ->commands
                [
                    if(game.players[game.current_player_index].get_resource_level(GOLD)>=3,
					[
						add(creature.resistance, 1),
						
					]	
					,),
					
					set(creature.triggered_abilities, [])
                ]",
            }],
		},
	},		
	
	"Field Speechman": {
		name: "Field Speechman",
		type: "creature",
		set: "Arsland",
		portrait: "school-gold.png",
		cost: 5,
		school: "@eval GOLD",
		rarity: 1,	
		creature: {
			attack: 6,
			life: 5,			
			activated_abilities: [
			{
				name: "Speech",
				cost: 1,
				school: "@eval GOLD",
				portrait: "forest.png",					
//				is_instant: true,
				is_response: true,
                uses_action: false,
				rules: "Adjacent creatures you control get <i>Valiant</i> this turn",
					
				on_play: "def(class game_state game, class message.play_card info) ->commands 
				[   
				   target.add_ability_until_end_of_turn('Valiant')
				  | target <- game.creatures,
				    not target.is_building,
					target.controller = creature.controller,
					game.locs_adjacent(creature.loc, target.loc)
				]	where creature = info.get_creature(game)",
			}
			],
		},	
	},	
	
	"Supply Station": {
		name: "Supply Station",
		set: "Arsland",
		rarity: 0,
		type: "school-gold",
		cost: 4,
		loyalty_cost: 1,
		school: "@eval GOLD",
		portrait: "school-gold.png",
		portrait_focus: [385,497],
		portrait_focus_width: 200,
		creature: {
			tags: ["Station"],
			is_construct: true,
			portrait_y_offset: 80,
			passive_abilities: [{
				name: "Supply",
				rules: "Friendly creatures in this tile or in adjacent tiles get +1/+1.",
				static_effect: "def(class game_state game, class creature creature) ->commands
				if(creature.controller >=0, [   
                    if(creature.controller = target.controller and (game.locs_adjacent(creature.loc, target.loc) or (creature.loc = target.loc)),
				    [
						target.apply_static_effect('life', 1),
						target.apply_static_effect('attack', 1),
					])
				  | target <- game.creatures,
				    target.is_building = false
				])"
            }],
		}
	},
	
	"Army of One Heart": {
		name: "Army of One Heart",
		set: "Arsland",
		rarity: 1,
		type: "spell",
		school: "@eval GOLD",
		portrait: "school-gold.png",
		cost: 2,
		loyalty_cost: 3,
		rules: "Target a number of adjacent friendly creatures in a chain. Each creature get +X/+X this turn, where X is the number of targets.",
		min_targets: "int :: 1",
		possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
			if(targets = [],
				[creature.loc | creature <- game.creatures, creature.is_valid_target(game, avatar.controller, me), creature.controller = avatar.controller, not creature.is_building],
				if(size(new_targets) > 0, new_targets, null)
			) where new_targets = [creature.loc | creature <- game.creatures, creature.is_valid_target(game, avatar.controller, me), not creature.is_building,      creature.is_valid_target(game, avatar.controller, me), game.locs_adjacent(creature.loc, targets[size(targets)-1]), creature.loc not in targets]
		",

		on_play: "def(class game_state game, class message.play_card info) ->commands
			map(info.targets, 
				[
					creature.apply_effect_until_end_of_turn('attack', size(info.targets)),
					creature.apply_effect_until_end_of_turn('life', size(info.targets)),					
				]
			
			where creature = game.creature_at_loc_or_die(value))",
	},	
	
	
//A cycle of cards that reshuffles ----------------------------------------------------
	"Suffering": {
		name: "Suffering",
		set: "Arsland",
		rarity: 0,
		type: "spell",
        tags: ['Curse'],
		cost: 2,	
		loyalty_cost: 2,
		school: "@eval BLOOD",
		portrait: "school-blood.png",

		rules: "Target creature or player loses 2 life; shuffle this spell into your deck.",

		possible_targets: "all_creatures_and_players_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		[
		game.players[game.current_player].draw_cards(game, 1),
		set(the_player.deck, shuffle(the_player.deck + [lib.citadel.create_card('Suffering')])),
		if(info.targets[0][0] = -1,
		  //targeting a player
		  add(game.players[info.targets[0][1]].life, -2),

		  //targeting a creature
		  add(creature.life, -2)
			asserting size(info.targets) = 1
			where creature = game.creature_at_loc_or_die(info.targets[0]))
		] where the_player = game.players[info.player_index]",
		ai_flags: ["@eval AI_CARD_NEVER_TARGET_FRIENDS"],
	},	
	
	"Enthusiasm": {
		name: "Enthusiasm",
		type: "spell",
		cost: 2,
		loyalty_cost: 2,
		set: "Arsland",
		rarity: 0,
		school: "@eval GOLD",
		portrait: "school-gold.png",
		rules: "Target creature gains +1/+1 and +1 armor; shuffle this spell into your deck",
		possible_targets: "all_creatures_as_possible_targets",

		on_play: "def(class game_state game, class message.play_card info) ->commands
		[
		  add(game.creature_at_loc_or_die(info.targets[0]).attack, 1),
		  add(game.creature_at_loc_or_die(info.targets[0]).life, 1),
		  add(game.creature_at_loc_or_die(info.targets[0]).resistance, 1),	
		  set(the_player.deck, shuffle(the_player.deck + [lib.citadel.create_card('Enthusiasm')])),		  
		] 	asserting size(info.targets) = 1
		where the_player = game.players[info.player_index]",
	},	

	"Vigour": {
		name: "Vigour",
		set: "Arsland",
		rarity: 1,
		type: "spell",
		portrait: "school-food.png",
		cost: 0,
		loyalty_cost: 3,
		school: "@eval FOOD",
		rules: "Gain 2 mana; shuffle this spell into your deck.",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		 [
		   map(range(2), player.gain_mana_from_card(game, me)),
     	   set(player.deck, shuffle(player.deck + [lib.citadel.create_card('Vigour')])),	   
		 ]
		   where player = game.players[game.current_player_index]",
	},	
	
	"Denial": {
		name: "Denial",
		set: "Arsland",
		rarity: 1,
		type: "spell",
		school: "@eval SCROLLS",
		portrait: "school-scrolls.png",
		artist: "eleazzaar",
		cost: 2,
		loyalty_cost: 5,
		is_response: true,
		rules: "Make your opponent's card currently being cast fizzle out; shuffle this spell into your deck.",
		possible_targets: "
		  def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		    if(game.stack = [] or not (game.stack[size(game.stack)-1] is class message.play_card), [], null)
		",

		on_play: "def(class game_state game, class message.play_card info) ->commands
			[
				set(the_player.deck, shuffle(the_player.deck + [lib.citadel.create_card('Denial')])),		
				set(game.stack[size(game.stack)-1].force_fizzle, true)
				asserting game.stack != []
			]
		 where the_player = game.players[info.player_index]",
	},
	
	"Prayer of Endurance": {
		name: "Prayer of Endurance",
		set: "Arsland",
		rarity: 0,
		type: "spell",
		is_response: false,
		cost: 1,
		loyalty_cost: 1,
		school: "@eval FAITH",
		portrait: "school-faith.png",

		rules: "Target creature gets +0/+2; shuffle this spell into your deck",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		  [
		    add(game.creature_at_loc_or_die(info.targets[0]).life, 2),
			set(the_player.deck, shuffle(the_player.deck + [lib.citadel.create_card('Prayer of Endurance')])),					
		  ] asserting size(info.targets) = 1
		   where the_player = game.players[info.player_index]",
	},	
	
//A cycle of cards land destroyers------------------------------------------------------------------------------

	"Landslide": {
		name: "Landslide",
		set: "Arsland",
		type: "spell",
		school: "@eval SCROLLS",
		portrait: "school-scrolls.png",
		cost: 3,
		loyalty_cost: 3,
		is_response: false,
		rarity: 1,
		rules: "Move target land into an adjacent tile, replacing the land in the destination if there is one.",
		possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
			switch(size(targets),
			  0, filter(game.all_locs, game.construct_at_loc(value)),
			  1, if(construct, filter(game.all_locs, game.locs_adjacent(value, construct.loc)), []) where construct = game.construct_at_loc(targets[0]),
			  null)

		",
			
        on_play: "def(class game_state game, class message.play_card info) ->commands 
		[
			if(destination_construct, set(destination_construct.destroyed, true)),
			game.construct_at_loc_or_die(info.targets[0]).set_loc(info.targets[1])
		]
			where construct = game.construct_at_loc(info.targets[0])
			where destination_construct = game.construct_at_loc(info.targets[1])",
	
	},	 
	
	"Converter": {
		name: "Converter",
		set: "Arsland",
		rarity: 1,
		type: "creature",
		portrait: "school-faith.png",
		cost: 4,
		loyalty_cost: 1,		
		school: "@eval FAITH",

		creature: {
			attack: 5,
			life: 5,
			triggered_abilities: [{
                name: 'Convert',
                rules: "The lands this creature moves into become Fragile.",
				on_move_over_construct: "def(class creature creature, class game_state game, class creature land) ->commands
				[
					add(land.abilities, ['Fragile']),
				]
				",
			}],
		},
	},	
	
	"Demolition": {
		name: "Demolition",
		set: "Arsland",
		type: "spell",
		school: "@eval MATERIA",
		portrait: "school-gold.png",
		cost: 0,
		loyalty_cost: 2,
		is_response: false,
		rarity: 0,	
		
		rules: "Destroy a land you control",
		possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(targets = [], [creature.loc | creature <- game.constructs, creature.controller = avatar.controller])",
        on_play: "def(class game_state game, class message.play_card info) ->commands 
			if(construct, set(construct.destroyed, true))
			where construct = game.construct_at_loc(target) 
			where target = info.targets[0],",
	},		
	
	"Plague": {
		name: "Plague",
		set: "Arsland",
		type: "spell",
		school: "@eval BLOOD",
		portrait: "school-blood.png",
		cost: 1,
		loyalty_cost: 3,
		is_response: false,
		rarity: 0,	
		
		rules: "Enchant a land, its controllor lose 1 life at the start of his turns.",
		possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(targets = [], [creature.loc | creature <- game.constructs])",
        on_play: "def(class game_state game, class message.play_card info) ->commands 
			if(construct, add(construct.triggered_abilities, [
			construct('triggered_ability',
			{
				name: 'Plagued',
				rules: q(At the start of your turns, this land deals one damage to you.),

				on_begin_turn: q^def(class creature creature, class game_state game) ->commands
					//deal 1 damage to controller at start of turn.
					if(game.current_player_turn_index = creature.controller, [
						add(game.players[creature.controller].life, -1),
						add(game.animation_hints, [construct('animation.player_damage_hint', { type: 'player_damage_hint', target_player: creature.controller, source: creature, amount: 1, anim_type: 'bloodcord' })]),
					])
				^,

			})]))
		
			where construct = game.construct_at_loc(target)  
			where target = info.targets[0],",
	},			
	
//-------------------------------------------------------------------------------------
	"Dense Woodland": {
		name: "Dense Woodland",
		type: "creature",
        set: "Arsland",
		cost: 4,
		loyalty_cost: 2,
		school: "@eval FOOD",
		portrait: "school-food.png",
		portrait_focus: [552,369],
		portrait_focus_height: 260,
		artist: "sara",
		creature: {
			tags: ["Terrain"],
			is_construct: true,
            portrait: "forest.png",
			image_num: 18,
			activated_abilities: [{
				name: 'Awaken',
				cost: 2,
                loyalty_cost: 2,
				school: "@eval FOOD",
				is_response: false,
				uses_action: true,
				portrait: "treant-defender.png",
				rules: 'Summon an 8/8 immobile Treant Defender that persists till the start of your next turn.',
				possible_targets: "def(class game_state game, class creature corpse, [Loc] targets) ->[Loc]|null
					if(game.creature_at_loc(corpse.loc) != null, [], null)",
				on_play: "def(class game_state game, class message.play_card info) ->commands
				[game.summon_creature(
			    lib.citadel.create_creature('Treant Defender',
				{
					name: 'Treant Defender',
					controller: creature.controller,
					loc: creature.loc
			    }))] where creature = info.get_creature(game)",
			}],
		},
	},
    "Treant Defender":
    {
		name: "Treant Defender",
        portrait: "treant-defender.png",
		rarity: 0,
		type: "creature",
		cost: 5,
		loyalty_cost: 0,
		school: "@eval COLORLESS",
		creature: {
			tags: ['Treant'],
            portrait: "treant-defender.png",	
			attack: 8,
			life: 8,
			move: 0,
			triggered_abilities: [{
				name: "Hibernation",
				rules: "At the start of your turn, <i>Treant Defender</i> is sacrificed.",

				on_begin_turn: "def(class creature creature, class game_state game) ->commands
					if(game.current_player_turn_index = creature.controller, [
						set(creature.sacrificed, true)
					])
				",

			}],			
		},
	},	

}
            