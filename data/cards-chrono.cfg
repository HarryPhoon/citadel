//   Special credit to Phanterm for these card concepts.
//
//   Entropia + Minerva = Chrono. Shadowdeck focus. Loves milling self for
//   crazy effects. Deadly when decked.
//
//   Chrono meaning "Time".
//   Chrono is the fuel of decay in all things (Entropia), and
//   the unstoppable force which mocks those scholars who might hungrily
//   seek out immortality. (Minerva)
//
//     CARD                  |   CODE |    ART | FLAVOR |
//                           |        |        |   TEXT |
//     ----------------------+--------+--------+--------+
//     Mad Theorist          |--------|--------|        |
//     Dark Future           |--------|--------|        |
//     Vanteblacken          |--------|--------|        |
//     Alter Ego             |--------|++++++++|        |
//     Noumenon              |++++++++|--------|        |
//     Reunion Pact          |--------|--------|        |
//     Doomsday Clockwork    |........|........|        |
//     Herald of Jurex       |        |        |        |
//     Proof of Service      |        |        |        |
//     World Eater           |        |        |        |
//     Sandcatcher Shrine    |        |        |        |
//     Infinite              |        |        |        |
//     Thirteenth Hour       |        |        |        |
//     Hollow Dimension      |        |        |        |
//     Endmother Jurex       |        |        |        |
//
//   Key
//
//     '      ' -+-> CODE -+-> Completely pending.
//               `-> ART -'
//
//     '......' -+-> CODE -> Sketch, or even simply a skeleton.
//               `-> ART -> **Super early** placeholder art.
//
//     '------' -+-> CODE -> Started, early WIP, absolutely not finished.
//               `-> ART -> _Complete_ placeholder art.
//
//     '++++++' -+-> CODE -> Completed, or late WIP. Subject to changes by
//               |           peers.
//               `-> ART -> Sketch???
//
//     '######' -+-> CODE -> Accomplished, or post peer review.
//               `-> ART -> Final art???

{

/*

Some placeholder artwork:

light-elemental.png
altar-of-storms.png
thought-steal.png
thieves-guild.png
library.png
jaded-runesmith.png

*/

"Mad Theorist": {
	name: "Mad Theorist",
	set: "cascadence",
	type: "creature",
	is_response: false,
	cost: 4,
	rarity: 0,
	loyalty_cost: 0,
	school: "@eval [ENTROPIA, MINERVA]",
	tags: ["Chrono"],
	portrait: "jaded-runesmith.png",  //   TODO custom art.
// 	artist: "artist_TODO",  //   TODO
// 	flavor_text: "flavor_text_TODO",  //   TODO
	is_channeled: false,
	creature: {
		game_sounds: "spellcaster_male",
		attack: 5,
		life: 3,
		tags: ['Human'],
		triggered_abilities: [{
			name: "Mad Theorist",
			rules: "Once per turn after moving, draw a card and discard a card.",
			on_move: "def(class creature creature, class game_state game) ->commands [
				if(creature.effects_tracking['Mad Theorist'] != game.turn, [
					[ set(creature.effects_tracking['Mad Theorist'], game.turn),
					  add(game.player_obj.creature_avatar.effects_tracking['Mad Theorist'], 1),
					  game.player_obj.draw_cards(game, 1) 
					];
					game.add_delayed_commands([
						if(game.player_obj.hand and nchoice, game.set_current_choice({
							text: if(nchoice=1, 'Select which card you will discard',
								sprintf('Select which %d cards you will discard', nchoice)),
							options: game.player_obj.hand,
							num_choices: nchoice,
							on_card_chosen: q^def(class game_state game, class card_base card, int tag) ->commands [
								if(card.shadow, game.shadow_card_damage(game.player_obj, card)),
								game.player_obj.force_discard(game, [card]),
								add(game.player_obj.creature_avatar.effects_tracking['Mad Theorist'], -1)
							]^,
						   })
						) where nchoice=game.player_obj.creature_avatar.effects_tracking['Mad Theorist']
					])
				])
			]",
		}],
	},
},

"Dark Future": {
	name: "Dark Future",
	set: "cascadence",
	rarity: 0,
	type: "spell",
	is_instant: false,
	cost: 3,
	loyalty_cost: 0,
	school: "@eval [ENTROPIA, MINERVA]",
	tags: ["Chrono"],
	portrait: "thought-steal.png",
	rules: "Target player depletes 5 cards.",
	possible_targets: "all_players_as_possible_targets",
	on_play: "def(class game_state game, class message.play_card info) ->commands
		[ // FIXME: Discard animation is not showing when played on self
			if(info.choices=null, [
				set(info.choices, [n+size(player.hand)| n<- [4,3,2,1,0]]),
				player.draw_cards(game, 5);
				game.add_delayed_commands(; me.on_play(game, info))
			], // else if
			info.choices=[], null,
			// else
		 	[[player.discard_visible(game, card),
			  if(card.shadow, game.shadow_card_damage(player, card)),
			  set(info.choices, info.choices[1:])
			];[
			  set(player.hand, filter(player.hand, value != card)),
			  bind_command(me.on_play, game, info)
			]] where card=player.hand[info.choices[0]]
			  asserting info.choices
			) // end if
		] where player=game.players[info.targets[0].y]
	",
},

"Vanteblacken": {
	name: "Vanteblacken",
	set: "cascadence",
	rarity: 0,
	type: "spell",
	is_response: true,
	cost: 4,
	loyalty_cost: 0,
	school: "@eval [ENTROPIA, MINERVA]",
	tags: ["Chrono"],
	portrait: "light-elemental.png",
	rules: "Deal 4 damage to target creature or 2 damage to target player. \n<b>Eternal&emdash;</b>While you have no cards in your deck, deals double damage.",
	ai_flags: ["@eval AI_CARD_NEVER_TARGET_FRIENDS"],
	possible_targets: "all_creatures_and_players_as_possible_targets",
	sound_windup: "spells/spell-windup-knife-in-the-dark.wav",
	sound_resolve: "gameplay/spell_chain_lightning.wav",
	resolve_launch: { type: "entropia_launch" },
	resolve_impact: { type: "lightning_impact" },
	resolve_effect: "impact",
	on_play: "def(class game_state game, class message.play_card info) ->commands
	[
		inflict(2 * mult_creature * mult_eternal),
//		add(game.animation_hints, construct('animation.' + anim_type, {
//			type: anim_type,
//			particle_type: 'pain_zero',
//		} + if(target_player, {
//			target_player: target_player_index,
//		}, /* else */ {
//			creature: c, target: c, sound: null,
//			delay: 0, reverse_path: false,
//			zorder: -900
//		}))),
	] where inflict=if(target_player, target_player.inflict_damage_cannot_kill,
		def(int amount) ->commands [game.creature_at_loc_or_die(info.targets[0]).inflict_damage(game, amount)])
	  where mult_creature=if(target_player, 1, 2)
	  where mult_eternal=if(find(player.deck, not value.shadow), 1, 2)
	  where player=game.players[info.player_index]
	  where target_player=if(info.targets[0].x = -1, game.players[info.targets[0].y])
	",
},

"Alter Ego": {
	name: "Alter Ego",
	set: "cascadence",
	rarity: 0,
	type: "spell",
	is_instant: false,
	cost: 2,
	loyalty_cost: 1,
	school: "@eval [ENTROPIA, MINERVA]",
	tags: ["Chrono"],
	portrait: "astral-walk.png",
	rules: "Select any creature <font size='-4'>(ignores Cover)</font>. Add a shadow card copy of it to your deck.",
	possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(targets = [], [creature.loc | creature <- game.creatures, creature.card_name, not creature.is_building])",
	on_play: "def(class game_state game, class message.play_card info) ->commands
	[
		let new_card=lib.citadel.create_card(string <- target.card_name); [
			set(new_card.shadow, true),
			set(player.deck, [new_card] + player.deck),
			// add(game.animation_hints, [construct('animation.TODO', { })])
		]
	] where target=game.creature_at_loc_or_die(info.targets[0]),
		player=game.players[info.player_index]
	",
},

"Noumenon": {
	name: "Noumenon",
	set: "cascadence",
	rarity: 0,
	type: "spell",
	is_instant: true,
	cost: 0,
	loyalty_cost: 1,
	school: "@eval [ENTROPIA, MINERVA]",
	tags: ["Chrono"],
	portrait: "nihil.png",
	rules: "Draw a shadow card copy of a random card discarded this game.",
	possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(sum(map(game.players, size(value.discard_pile))), null, [])",
	custom_reason_cannot_cast: "def(class game_state game, class creature avatar) ->null|string
		  if(sum(map(game.players, size(value.discard_pile))), null, 'There are no discards')",
	on_play: "def(class game_state game, class message.play_card info) ->commands
	[
		let new_card=lib.citadel.create_card(
			choose(map(flatten(map(game.players, value.discard_pile)), value.name))
		); [[
			set(new_card.shadow, true),
			set(player.deck, [new_card] + player.deck),
		]; [
			player.draw_cards(game, 1)
		]]
	] where player=game.players[info.player_index]
	",
},

"Reunion Pact": {
	name: "Reunion Pact",
	set: "cascadence",
	rarity: 0,
	type: "spell",
	is_response: true,
	is_channeled: false,
	cost: 3,
	loyalty_cost: 0,
	school: "@eval [ENTROPIA, MINERVA]",
	tags: ["Chrono"],
	portrait: "thieves-guild.png",
	rules: "Choose 2 or more of your creatures with the same card name. Return them to your hand, but with base cost 1 less than normal.",
	min_targets: "int :: 2",
	possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		if(targets=[],
		/*then*/if(my_creatures=[] or (int<- max([count(my_creatures_names, value=name)|name<- unique(my_creatures_names)])) < 2,
			/*then*/[ /* No valid targets */ ],
			/*else*/[c.loc|c<- my_creatures, count(my_creatures_names, value=c.card_name) > 1]
			) where my_creatures_names=[c.card_name|c<- my_creatures, c.card_name],
		/*else*/if(more_creatures,
			/*then*/[c.loc|c<- more_creatures]
			) where more_creatures=[c|c<- my_creatures, c.loc not in targets, c.card_name=target_name]
			  where target_name=game.creature_at_loc_or_die(targets[0]).card_name
		) where my_creatures=[c|c<- game.creatures, c.card_name, not c.is_building, c.controller=avatar.controller]",
	on_play: "def(class game_state game, class message.play_card info) ->commands
	[
		map(target_creatures, [
			set(creature.obliterated, true),
			add(player.hand,
				[ lib.citadel.create_card(string<- creature.card_name, alter_dict) ]
			) where alter_dict=if(reduced_cost is null, {}, {cost: reduced_cost})
			  where reduced_cost=if(creature.base_card, max(0,(int<- creature.base_card.cost)-1))
		] where creature=value);
		map(reverse(player.hand)[0:size(target_creatures)], value.set_dirty())
	] where target_creatures=[game.creature_at_loc_or_die(target_loc)|target_loc<- info.targets],
		player=game.players[info.player_index]
	",
},

"Doomsday Clockwork": {
	name: "Doomsday Clockwork",
	set: "cascadence",
	rarity: 0,
	type: "creature",
	is_response: false,
	cost: 5,
	loyalty_cost: 0,
	school: "@eval [ENTROPIA, MINERVA]",
	tags: ["Chrono"],
	portrait: "altar-of-storms.png",
	is_channeled: false,
	creature: {
		attack: 3,
		life: 4,
		tags: ['Spirit','Construct'],
		triggered_abilities: [{
			name: "Doomsday Toll",
			rules: "Whenever you play a shadow card, deal 5 damage divided among random enemies.",
			on_card_played: "def(class creature creature, class game_state game, class player player, class message.play_card info) ->commands [
				if(creature.controller = info.player_index and info.card != null and info.card.shadow, [
					let attacks_var={};
					map(range(5), [;
						add(attacks[target], 1)
						where target=choose(possible_targets)
						where possible_targets=([game.players[(info.player_index+1)%2]]
						 + [c|c<- game.creatures,
//							  c not in attacks or attacks[c] < (c.life + c.armor), // Prevent overkilling. Too efficient?
							  c.controller != info.player_index and c.alive ])
						where attacks=({class player|class creature -> int}<- attacks_var)
					]); map(attacks, [;
						game.state_based_actions(); 
						if(key is class player, [
							game.log_message('Doomsday Toll: '+str(value)+' damage to player '+str(key.player_index)),
							key.inflict_damage_cannot_kill(value)
						], [
							game.log_message('Doomsday Toll: '+str(value)+' damage to creature '+str(key.summon_id)),
							key.inflict_damage(game, value)
						])
					]) where attacks=({class player|class creature -> int}<- attacks_var),
				])
			]",
		}],
	},
},


}
