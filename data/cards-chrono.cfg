//   Special credit to Phanterm for these card concepts.
//
//   Entropia + Minerva = Chrono. Shadowdeck focus. Loves milling self for
//   crazy effects. Deadly when decked.
//
//   Chrono meaning "Time".
//   Chrono is the fuel of decay in all things (Entropia), and
//   the unstoppable force which mocks those scholars who might hungrily
//   seek out immortality. (Minerva)
//
//     CARD                  |   CODE |    ART | FLAVOR |
//                           |        |        |   TEXT |
//     ----------------------+--------+--------+--------+
//     Mad Theorist          |--------|--------|        |
//     Dark Future           |--------|--------|        |
//     Vanteblacken          |++++++++|--------|        |
//     Alter Ego             |--------|--------|        |
//     Noumenon              |++++++++|--------|        |
//     Reunion Pact          |--------|--------|        |
//     Doomsday Clockwork    |........|........|        |
//     Herald of Jurex       |--------|--------|        |
//     Proof of Service      |++++++++|--------|        |
//     World Eater           |++++++++|--------|        |
//     Sandcatcher Shrine    |--------|........|        |
//     Infiknight            |++++++++|--------|        |
//     Thirteenth Hour       |--------|--------|        |
//     Hollow Dimension      |++++++++|........|        |
//     Endmother Jurex       |++++++++|--------|        |
//
//   Key
//
//     '      ' -+-> CODE -+-> Completely pending.
//               `-> ART -'
//
//     '......' -+-> CODE -> Sketch, or even simply a skeleton.
//               `-> ART -> **Super early** placeholder art.
//
//     '------' -+-> CODE -> Started, early WIP, absolutely not finished.
//               `-> ART -> _Complete_ placeholder art.
//
//     '++++++' -+-> CODE -> Completed, or late WIP. Subject to changes by
//               |           peers.
//               `-> ART -> Sketch???
//
//     '######' -+-> CODE -> Accomplished, or post peer review.
//               `-> ART -> Final art???

{

"Mad Theorist": {
	name: "Mad Theorist",
	set: "cascadence",
	type: "creature",
	is_response: false,
	cost: 4,
	rarity: 0,
	loyalty_cost: 0,
	school: "@eval [ENTROPIA, MINERVA]",
	tags: ["Chrono"],
	portrait: "jaded-runesmith.png",  //   TODO custom art.
// 	artist: "artist_TODO",  //   TODO
// 	flavor_text: "flavor_text_TODO",  //   TODO
	is_channeled: false,
	creature: {
		game_sounds: "spellcaster_male",
		attack: 5,
		life: 3,
		tags: ['Human'],
		triggered_abilities: [{
			name: "Mad Theorist",
			rules: "Once per turn after moving, draw a card and discard a card.",
			on_move: "def(class creature creature, class game_state game) ->commands [
				if(creature.effects_tracking['Mad Theorist'] != game.turn, [
					[ set(creature.effects_tracking['Mad Theorist'], game.turn),
					  add(game.player_obj.creature_avatar.effects_tracking['Mad Theorist'], 1),
					  game.player_obj.draw_cards(game, 1) 
					];
					game.add_delayed_commands([
						if(game.player_obj.hand and nchoice, game.set_current_choice({
							text: if(nchoice=1, 'Select which card you will discard',
								sprintf('Select which %d cards you will discard', nchoice)),
							options: game.player_obj.hand,
							num_choices: nchoice,
							on_card_chosen: q^def(class game_state game, class card_base card, int tag) ->commands [
								if(card.shadow, game.shadow_card_damage(game.player_obj, card)),
								game.player_obj.force_discard(game, [card]),
								add(game.player_obj.creature_avatar.effects_tracking['Mad Theorist'], -1)
							]^,
						   })
						) where nchoice=game.player_obj.creature_avatar.effects_tracking['Mad Theorist']
					])
				])
			]",
		}],
	},
},

"Dark Future": {
	name: "Dark Future",
	set: "cascadence",
	rarity: 0,
	type: "spell",
	is_instant: false,
	cost: 3,
	loyalty_cost: 0,
	school: "@eval [ENTROPIA, MINERVA]",
	tags: ["Chrono"],
	portrait: "thought-steal.png",
	rules: "Target player depletes 5 cards.",
	possible_targets: "all_players_as_possible_targets",
	on_play: "def(class game_state game, class message.play_card info) ->commands
		[ // FIXME: Discard animation is not showing when played on self
			if(info.choices=null, [
				set(info.choices, [n+size(player.hand)| n<- [4,3,2,1,0]]),
				player.draw_cards(game, 5);
				game.add_delayed_commands(; me.on_play(game, info))
			], // else if
			info.choices=[], null,
			// else
		 	[[player.discard_visible(game, card),
			  set(player.hand, filter(player.hand, value != card)),
			  if(card.shadow, game.shadow_card_damage(player, card)),
			  set(info.choices, info.choices[1:])
			];[
			  game.state_based_actions();
			  bind_command(me.on_play, game, info)
			]] where card=player.hand[info.choices[0]]
			  asserting info.choices
			) // end if
		] where player=game.players[info.targets[0].y]
	",
},

"Vanteblacken": {
	name: "Vanteblacken",
	set: "cascadence",
	rarity: 0,
	type: "spell",
	is_response: true,
	cost: 4,
	loyalty_cost: 0,
	school: "@eval [ENTROPIA, MINERVA]",
	tags: ["Chrono"],
	portrait: "light-elemental.png",
	rules: "Deal 4 damage to target creature or 2 damage to target player. \n<b>Eternal&emdash;</b>While you have no cards in your deck, deals double damage.",
	ai_flags: ["@eval AI_CARD_NEVER_TARGET_FRIENDS"],
	possible_targets: "all_creatures_and_players_as_possible_targets",
	sound_windup: "spells/spell-windup-knife-in-the-dark.wav",
	sound_resolve: "gameplay/spell_chain_lightning.wav",
	resolve_launch: { type: "entropia_launch" },
	resolve_impact: { type: "lightning_impact" },
	resolve_effect: "impact",
	on_play: "def(class game_state game, class message.play_card info) ->commands
	[
		inflict(2 * mult_creature * mult_eternal),
//		add(game.animation_hints, construct('animation.' + anim_type, {
//			type: anim_type,
//			particle_type: 'pain_zero',
//		} + if(target_player, {
//			target_player: target_player_index,
//		}, /* else */ {
//			creature: c, target: c, sound: null,
//			delay: 0, reverse_path: false,
//			zorder: -900
//		}))),
	] where inflict=if(target_player, target_player.inflict_damage_cannot_kill,
		def(int amount) ->commands [game.creature_at_loc_or_die(info.targets[0]).inflict_damage(game, amount)])
	  where mult_creature=if(target_player, 1, 2)
	  where mult_eternal=if(find(player.deck, not value.shadow), 1, 2)
	  where player=game.players[info.player_index]
	  where target_player=if(info.targets[0].x = -1, game.players[info.targets[0].y])
	",
},

"Alter Ego": {
	name: "Alter Ego",
	set: "cascadence",
	rarity: 0,
	type: "spell",
	is_instant: false,
	cost: 2,
	loyalty_cost: 1,
	school: "@eval [ENTROPIA, MINERVA]",
	tags: ["Chrono"],
	portrait: "astral-walk.png",
	rules: "Select any creature <font size='-4'>(ignores Cover)</font>. Add a shadow card copy of it to your deck.",
	possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(targets = [], [creature.loc | creature <- game.creatures, creature.card_name, not creature.is_building])",
	on_play: "def(class game_state game, class message.play_card info) ->commands
	[
		let new_card=lib.citadel.create_card(string <- target.card_name); [
			set(new_card.shadow, true),
			set(player.deck, [new_card] + player.deck),
			// add(game.animation_hints, [construct('animation.TODO', { })])
		]
	] where target=game.creature_at_loc_or_die(info.targets[0]),
		player=game.players[info.player_index]
	",
},

"Noumenon": {
	name: "Noumenon",
	set: "cascadence",
	rarity: 0,
	type: "spell",
	is_instant: true,
	cost: 0,
	loyalty_cost: 1,
	school: "@eval [ENTROPIA, MINERVA]",
	tags: ["Chrono"],
	portrait: "nihil.png",
	rules: "Draw a shadow card copy of a random card discarded this game.",
	possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(sum(map(game.players, size(value.discard_pile))), null, [])",
	custom_reason_cannot_cast: "def(class game_state game, class creature avatar) ->null|string
		  if(sum(map(game.players, size(value.discard_pile))), null, 'There are no discards')",
	on_play: "def(class game_state game, class message.play_card info) ->commands
	[
		let new_card=lib.citadel.create_card(
			choose(map(flatten(map(game.players, value.discard_pile)), value.name))
		); [[
			set(new_card.shadow, true),
			set(player.deck, [new_card] + player.deck),
		]; [
			player.draw_cards(game, 1)
		]]
	] where player=game.players[info.player_index]
	",
},

"Reunion Pact": {
	name: "Reunion Pact",
	set: "cascadence",
	rarity: 0,
	type: "spell",
	is_response: true,
	is_channeled: false,
	cost: 3,
	loyalty_cost: 0,
	school: "@eval [ENTROPIA, MINERVA]",
	tags: ["Chrono"],
	portrait: "thieves-guild.png",
	rules: "Choose 2 or more of your creatures with the same card name. Return them to your hand, but with base cost 0.",
	min_targets: "int :: 2",
	possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		if(targets=[],
		/*then*/if(my_creatures=[] or (int<- max([count(my_creatures_names, value=name)|name<- unique(my_creatures_names)])) < 2,
			/*then*/[ /* No valid targets */ ],
			/*else*/[c.loc|c<- my_creatures, count(my_creatures_names, value=c.card_name) > 1]
			) where my_creatures_names=[c.card_name|c<- my_creatures, c.card_name],
		/*else*/if(more_creatures,
			/*then*/[c.loc|c<- more_creatures]
			) where more_creatures=[c|c<- my_creatures, c.loc not in targets, c.card_name=target_name]
			  where target_name=game.creature_at_loc_or_die(targets[0]).card_name
		) where my_creatures=[c|c<- game.creatures, c.card_name, not c.is_building, c.controller=avatar.controller]",
	on_play: "def(class game_state game, class message.play_card info) ->commands
	[
		map(target_creatures, [
			set(creature.obliterated, true),
			add(player.hand,
				[ lib.citadel.create_card(string<- creature.card_name, alter_dict) ]
			) where alter_dict=if(reduced_cost is null, {}, {cost: reduced_cost})
//			  where reduced_cost=if(creature.base_card, max(0,(int<- creature.base_card.cost)-1))
			  where reduced_cost=0
		] where creature=value);
		map(reverse(player.hand)[0:size(target_creatures)], value.set_dirty())
	] where target_creatures=[game.creature_at_loc_or_die(target_loc)|target_loc<- info.targets],
		player=game.players[info.player_index]
	",
},

"Doomsday Clockwork": {
	name: "Doomsday Clockwork",
	set: "cascadence",
	rarity: 0,
	type: "creature",
	is_response: false,
	cost: 5,
	loyalty_cost: 0,
	school: "@eval [ENTROPIA, MINERVA]",
	tags: ["Chrono"],
	portrait: "altar-of-storms.png",
	is_channeled: false,
	creature: {
		attack: 3,
		life: 4,
		tags: ['Spirit','Construct'],
		triggered_abilities: [{
			name: "Doomsday Toll",
			rules: "Whenever you play a shadow card, deal 5 damage divided among random enemies.",
			on_card_played: "def(class creature creature, class game_state game, class player player, class message.play_card info) ->commands [
				if(creature.controller = info.player_index and info.card != null and info.card.shadow, [
					let attacks_var={};
					map(range(5), [;
						add(attacks[target], 1)
						where target=choose(possible_targets)
						where possible_targets=([game.players[(info.player_index+1)%2]]
						 + [c|c<- game.creatures,
//							  c not in attacks or attacks[c] < (c.life + c.armor), // Prevent overkilling. Too efficient?
							  c.controller != info.player_index and c.alive ])
						where attacks=({class player|class creature -> int}<- attacks_var)
					]); map(attacks, [;
						game.state_based_actions(); 
						if(key is class player, [
							game.log_message('Doomsday Toll: '+str(value)+' damage to player '+str(key.player_index)),
							key.inflict_damage_cannot_kill(value)
						], [
							game.log_message('Doomsday Toll: '+str(value)+' damage to creature '+str(key.summon_id)),
							key.inflict_damage(game, value)
						])
					]) where attacks=({class player|class creature -> int}<- attacks_var),
				])
			]",
		}],
	},
},

"Herald of Jurex" : {
	name: "Herald of Jurex",
	set: "cascadence",
	rarity: 1,
	type: "creature",
	is_response: false,
	cost: 4,
	loyalty_cost: 1,
	school: "@eval [ENTROPIA, MINERVA]",
	tags: ["Chrono"],
	portrait: "dread.png",
	is_channeled: false,
	creature: {
		attack: 6,
		life: 6,
		game_sounds: "troll",
		tags: ['Horror'],
		passive_abilities: [{
			name: "Negative Shell",
			rules: "When Herald of Jurex is summoned it starts with 0 energy. The lower your life becomes, the more energy it stores up.",
			hidden_on_creature: true,
			deferred: true,
			static_effect: "def(class game_state game, class creature creature) ->commands [
				if(not tracking_var, set(creature.effects_tracking['Negative Shell'], tracking),
				// else if
				creature.controller != tracking.controller, [ 
					set(tracking.controller, creature.controller),
					set(tracking.baseline, game.players[creature.controller].life) ],
				// else if
				not tracking.used, set(creature.energy, max(creature.energy, life_lost))
					where life_lost=(int<- tracking.baseline) - game.players[creature.controller].life)
			] where tracking={controller:int,baseline:int,used:bool}<- if(tracking_var, tracking_var, {
						controller: creature.controller,
						baseline: game.players[creature.controller].life,
						used: false,
					})
			  where tracking_var=creature.effects_tracking['Negative Shell']",
		}],
		activated_abilities: [{
			name: "Deplete Shell",
			rules: "You gain X life by depleting X cards, where X is the amount of stored energy.",
			once_ever: true,
			cost: 0,
			school: "@eval [ENTROPIA, MINERVA]",
//			ai_value: 2.0,
			portrait: "heiroglyph-of-the-sun.png",
			hue_shift: 0.19,
			is_response: true,
			sound_resolve: 'creatures/wisp-unsummon.wav',
			possible_targets: "def(class game_state game, class creature creature, [Loc] targets) ->[Loc]|null
				if(amount, null, [])
				where amount = max(creature.energy, life_lost)
			  	where life_lost=if(baseline, (int<- baseline) - game.players[creature.controller].life, 0)
			  	where baseline=if(tracking_var is map, tracking_var['baseline'])
				where tracking_var=creature.effects_tracking['Negative Shell']",
			custom_reason_cannot_cast: "def(class game_state game, class creature avatar) ->null|string
				'No energy stored'",
			on_play: "def(class game_state game, class message.play_card info) ->commands 
			[if(info.choices=null, [
				set(info.choices, [n+size(player.hand)| n<- reverse(range(amount))]),
				add(player.life, amount),
				set(creature.effects_tracking['Negative Shell']['used'], true),
				set(creature.energy, amount),
				player.draw_cards(game, amount);
				game.add_delayed_commands(; me.on_play(game, info))
			] where amount = max(creature.energy, life_lost)
			  where life_lost=if(baseline, (int<- baseline) - game.players[creature.controller].life, 0)
			  where baseline=if(tracking_var is map, tracking_var['baseline'])
			  where tracking_var=creature.effects_tracking['Negative Shell'],
			// else if
			info.choices=[], set(creature.energy, 0),
			// else
		 	[[player.discard_visible(game, card),
			  if(card.shadow, game.shadow_card_damage(player, card)),
			  set(info.choices, info.choices[1:])
			];[
			  set(player.hand, filter(player.hand, value != card)),
			  bind_command(me.on_play, game, info)
			]] where card=player.hand[info.choices[0]]
			   asserting info.choices
			)] where player = game.players[creature.controller]
			   where creature = info.get_creature(game)",
		}],
	},
},

"Proof of Service": {
	name: "Proof of Service",
	set: "cascadence",
	rarity: 1,
	type: "spell",
	is_instant: true,
	cost: 4,
	loyalty_cost: 0,
	school: "@eval [ENTROPIA, MINERVA]",
	tags: ["Chrono"],
	portrait: "tactical-maneuver.png",
	rules: "Draw 5 cards from your deck. They become shadow cards.",
	on_play: "def(class game_state game, class message.play_card info) ->commands
	[ player.draw_cards(game, 5);
	  [ set(card.shadow, true)|card<- reverse(player.hand)[0:5] ]
	] where player=game.players[info.player_index]
	",
},

"World Eater" : {
	name: "World Eater",
	set: "cascadence",
	rarity: 1,
	type: "creature",
	is_response: false,
	cost: 2,
	loyalty_cost: 2,
	hue_shift: 0.253,
	school: "@eval [ENTROPIA, MINERVA]",
	tags: ["Chrono"],
	portrait: "green-adder.png",
	is_channeled: false,
	creature: {
		attack: 2,
		life: 5,
		tags: ['Serpent'],
		game_sounds: "green_adder",
		passive_abilities: [{
			name: "World Eater",
			rules: "At the end of your turns, discard your hand. World Eater gets +1/+0 for each card discarded this way.",
			static_effect: "def(class game_state game, class creature creature) ->commands [
				if('World Eater' not in tracking, [
					set(tracking['World Eater'], []),
					add(avatar.triggered_abilities,
					[ construct('triggered_ability', {
						name: 'World Eater',
						on_end_turn: q^def(class creature avatar, class game_state game) ->commands [
							if(avatar.controller = player.player_index and tracking['World Eater'], [
								[ add((class creature<- c).attack, size(player.hand))
								| c<- map(tracking['World Eater'], game.creature_by_summon_id(int<- value)),
								  c != null and c.controller=avatar.controller and c.alive
								],
								[ game.shadow_card_damage(player, card)
								| card<- player.hand, card.shadow
								],
								player.force_discard(game, player.hand),
							]) where tracking=player.creature_avatar.effects_tracking 
						] where player = game.players[^+ avatar.controller +q^]
                        			^,
					})])
				]) where tracking=avatar.effects_tracking
				   where avatar=game.players[creature.controller].creature_avatar
				;([
					game.players[creature.controller].apply_static_effect(apply_fcn, remove_fcn, {summon_id: creature.summon_id})
				] where apply_fcn = def(class player player, map m) ->commands 
					if(m['summon_id'] not in player.creature_avatar.effects_tracking['World Eater'],
						add(player.creature_avatar.effects_tracking['World Eater'], [ m['summon_id'] ])),
				  remove_fcn = def(class player player, map m) ->commands [;[
//player.game.log_message(sprintf('World Eater: in remove_fcn, creature=%d, player=%d, tracking=%s', m['summon_id'], player.player_index, str(player.creature_avatar.effects_tracking['World Eater']))),
					set(player.creature_avatar.effects_tracking['World Eater'],
						filter(player.creature_avatar.effects_tracking['World Eater'], value != m['summon_id']))]])
			]",
		}],
	},
},

"Infiknight" : {
	name: "Infiknight",
	set: "cascadence",
	rarity: 1,
	type: "creature",
	is_response: false,
	cost: 6,
	loyalty_cost: 0,
	hue_shift: 0.482,
	school: "@eval [ENTROPIA, MINERVA]",
	tags: ["Chrono"],
	portrait: "black-knight.png",
	is_channeled: false,
	creature: {
		attack: 5,
		life: 5,
		game_sounds: "soldier_mace",
		sound_swish: "heavy",
		sound_impact: "wood",
		tags: ['Warrior'],
		passive_abilities: [{
			name: "Eternal",
			rules: "While you have no cards in your deck, this card has +5/+5.",
			hidden_on_creature: false,
			static_effect: "def(class game_state game, class creature creature) ->commands [
				if(not find(player.deck, not value.shadow), [
					creature.apply_static_effect('attack', 5),
					creature.apply_static_effect('life_shield', 5),
				])
			] where player=game.players[creature.controller]",
		}],
	},
},

"Sandcatcher Shrine" : {
	name: "Sandcatcher Shrine",
	set: "cascadence",
	rarity: 1,
	type: "land",
	is_response: false,
	cost: 2,
	loyalty_cost: 0,
	school: "@eval [ENTROPIA, MINERVA]",
	tags: ["Chrono"],
	portrait: "labryinth.png",
	is_channeled: false,
	creature: {
		tags: ["Shrine"],
		abilities: ["Fragile"],
		is_land: true,
		triggered_abilities: [{
			hidden_on_creature: true,
			hidden_on_card: true,
			on_card_discarded: "def(class creature land, class game_state game, class player player, class card card) ->commands [
				if(player.player_index = land.controller and card.shadow, [
					add(land.energy, 1),
					game.state_based_actions();
					if(land.energy >= 2, [
						add(player.life, land.energy / 2),
						set(land.energy, land.energy % 2),
					])
				])
			]",
			on_card_played: "def(class creature land, class game_state game, class player player, class message.play_card info) ->commands [
				if(info.card, on_card_discarded(land, game, player, info.card)),
			]",
			on_end_turn: "def(class creature land, class game_state game) ->commands [
				if(game.current_player_index=land.controller,  [
					set(land.effects_tracking['Shifting of Sands'], map(player.hand, value._uuid)),
//game.log_message('Shifting Sands: on end turn, handsize='+str(size(player.hand)))
				] where player=game.players[land.controller]
				)
			]",
			on_begin_turn: "def(class creature land, class game_state game) ->commands
			[if(game.current_player_index=land.controller,
				if(amount > 0 and ([int]<- shrines)[0]=land.summon_id, [
//game.log_message(sprintf('Shifting Sands: on begin turn, amount=%d handsize=%d tracking=%d shrines=%s', amount, size(player.hand), size(land.effects_tracking['Shifting of Sands']), str(shrines))),
					player.draw_cards(game, amount);
					game.add_delayed_commands([
						//FIXME: discard animation not showing
						let cards=filter(player.hand, value._uuid not in tracking)[0:amount];
						[
							if(size(cards)<amount, game.log_message(sprintf('Shifting Sands: found %d cards to deplete but expected %d...handsize=%d tracking=%d shrines=%s', size(cards), amount, size(player.hand), size(tracking), str(shrines)))),
							[ game.shadow_card_damage(player, card)| card<- cards, card.shadow],
							player.force_discard(game, cards);
							game.state_based_actions()
						]
					] where tracking=[string]<- find([land.effects_tracking['Shifting of Sands'], []], value != null))
				]) where amount=if(shrines, size(shrines), 0)
				   where shrines=player.creature_avatar.effects_tracking['Sandcatcher Shrine']
				   where player=game.players[land.controller]
			)]",
		}],
		passive_abilities: [{
			name: "Shifting of Sands",
			rules: "Gain 1 life for every 2 shadow cards you play or discard. At the beginning of each turn, deplete 1 card.",
			static_effect: "def(class game_state game, class creature land) ->commands 
			[if(land.controller >= 0, [
				[ game.players[land.controller].apply_static_effect(apply_fcn, remove_fcn, {summon_id: land.summon_id})
				] where apply_fcn = def(class player player, map m) ->commands 
					if(player.creature_avatar.effects_tracking['Sandcatcher Shrine'] is null,
						set(player.creature_avatar.effects_tracking['Sandcatcher Shrine'], [ m['summon_id'] ]),
					   m['summon_id'] not in player.creature_avatar.effects_tracking['Sandcatcher Shrine'],
						add(player.creature_avatar.effects_tracking['Sandcatcher Shrine'], [ m['summon_id'] ]))
				  where remove_fcn = def(class player player, map m) ->commands [;[
					set(player.creature_avatar.effects_tracking['Sandcatcher Shrine'],
						filter(player.creature_avatar.effects_tracking['Sandcatcher Shrine'], value != m['summon_id']))]]
			])]",
		}],
	},
},

"Thirteenth Hour": {
	name: "Thirteenth Hour",
	set: "cascadence",
	rarity: 2,
	type: "spell",
	is_instant: true,
	cost: 6,
	loyalty_cost: 2,
	school: "@eval [ENTROPIA, MINERVA]",
	tags: ["Chrono"],
	portrait: "mal-ravanal.png",
	rules: "Choose a card to search for in your deck. Deplete from the top of your deck 13 times or until you draw that card.",
	possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(size(p.deck) + size(p.original_deck) > 0, null, []) where p=game.players[avatar.controller]",
	custom_reason_cannot_cast: "def(class game_state game, class creature avatar) ->null|string
		  if(size(p.deck) + size(p.original_deck) > 0, null, 'Deck is empty') where p=game.players[avatar.controller]",
	on_play: "def(class game_state game, class message.play_card info) ->commands
	[if(info.choices=null, [
		game.set_current_choice({
			card: me,
			info: info,
			text: 'Choose which card will be sought',
			options: map(unique_cards, construct('choice.card', {card: value, tag: index})),
		}),
	 ], // else
	 set(player.creature_avatar.effects_tracking['Thirteenth Hour'], []); [
		if(seek_card, [
			player.draw_cards(game, seek_index+1);
			add(player.creature_avatar.effects_tracking['Thirteenth Hour'], reverse(player.hand)[1:seek_index+1])
		] where seek_index=index(player.deck, seek_card),
		// else if
		size(player.deck) >= 13, [
			player.draw_cards(game, 13);
			add(player.creature_avatar.effects_tracking['Thirteenth Hour'], reverse(player.hand)[:13])
		], // else
		player.draw_cards(game, 13); [
			if(rhand_seek, [
				add(player.creature_avatar.effects_tracking['Thirteenth Hour'], reverse(player.hand)[rindex+1:13]),
				set(player.deck, reverse(reverse(player.hand)[0:rindex]) + player.deck),
				set(player.hand, reverse(reverse(player.hand)[0:rindex+1] + reverse(player.hand)[13:]))
			] where rindex=index(reverse(player.hand), rhand_seek),
			/*else*/add(player.creature_avatar.effects_tracking['Thirteenth Hour'], reverse(player.hand)[:13]))
		] where rhand_seek=find(reverse(player.hand)[:13], value.name=seek_name));
		//FIXME: draw and discard animations are buggy
		game.add_delayed_commands([
			[ game.shadow_card_damage(player, card)| card<- ([class card]<- player.creature_avatar.effects_tracking['Thirteenth Hour']), card.shadow],
			player.force_discard(game, reverse([class card]<- player.creature_avatar.effects_tracking['Thirteenth Hour'])),
			set(player.creature_avatar.effects_tracking['Thirteenth Hour'], remove_from_map(player.creature_avatar.effects_tracking, 'Thirteenth Hour'));
			game.state_based_actions()
		])
	 ] where seek_card=find(player.deck[:13], value.name=seek_name)
	   where seek_name=unique_cards[info.choices[0]].name
	)] where unique_cards = [class card]<- map(unique(map(extended_deck, value.name)), find(extended_deck, value.name=context.value))
	// If less than 13 cards are in the deck, then use the whole original_deck to determine choices
	   where extended_deck=if(size(player.deck) >= 13, player.deck,
		player.deck + [lib.citadel.create_card(n)|n<- unique(player.original_deck), not find(player.deck, value.name=n)])
	   where player=game.players[info.player_index]",
},

"Hollow Dimension": {
	name: "Hollow Dimension",
	set: "cascadence",
	rarity: 2,
	type: "land",
	is_response: false,
	cost: 8,
	loyalty_cost: 0,
	school: "@eval [ENTROPIA, MINERVA]",
	tags: ["Chrono"],
	portrait: "crystal-of-5planes.png",
	hue_shift: 0.217647,
	luminance_multiplier: 0.717648,
	saturation_multiplier: 1.294118,
	is_channeled: false,
	creature: {
		abilities: ["Fragile"],
		is_land: true,
		passive_abilities: [{
			name: "Hollow Dimension",
			icon: 'plus-mana.png',
			rules: "Your mana cannot be reduced below X, for as long as you have X more cards in your hand than in your deck <font size='-4'>(not including shadow cards in your deck)</font>.",
			deferred: true,
			static_effect: "def(class game_state game, class creature creature) ->commands 
				if(creature.controller >= 0, [
					set(creature.energy, diff),
					if(diff > 0 and player.resources < diff, set(player.resources, diff)),
				] where diff=size(player.hand) - count(player.deck, not value.shadow)
				  where player=game.players[creature.controller]
				)
			",
		}],
	},
},

"Endmother Jurex": {
	name: "Endmother Jurex",
	set: "cascadence",
	rarity: 2,
	type: "creature",
	is_response: false,
	cost: 10,
	loyalty_cost: 2,
	hue_shift: 0.394116,
	luminance_multiplier: 0.905884,
	saturation_multiplier: 1.788234,
	school: "@eval [ENTROPIA, MINERVA]",
	tags: ["Chrono"],
	portrait: "spirit-of-intellect.png",
	creature: {
		attack: 1,
		life: 1,
		hero: true,
		game_sounds: "wisp",
		sound_impact: "ethereal",
		tags: ['Avatar'],
		rules: "Gets +2/+2 and +1 resistance for each shadow card played this game.",
		triggered_abilities: [{
			name: "Endmother Jurex",
			rules: "Gets +2/+2 and +1 resistance for each shadow card played this game. \n<b>Eternal&emdash;</b>While you have no cards in your deck, your creatures have Haste and First Strike.",
			hidden_on_card: true,
			hidden_on_creature: false,
			on_card_played: "def(class creature creature, class game_state game, class player player, class message.play_card info) ->commands 
				if(info.card != null and info.card.shadow, [
					add(creature.attack, 2),
					add(creature.life, 2),
					add(creature.resistance, 1),
				])
			",
			on_summoned: "def(class creature creature, class game_state game) ->commands 
				if(n > 0, [
					add(creature.attack, 2*n),
					add(creature.life, 2*n),
					add(creature.resistance, n),
				]) where n=game.num_shadow_cards_played
			",

		}],
		passive_abilities: [{
			name: "Eternal",
			rules: "While you have no cards in your deck, your creatures have Haste and First Strike.",
			hidden_on_creature: true,
			static_effect: "def(class game_state game, class creature creature) ->commands 
				if(not find(player.deck, not value.shadow), [[
					c.add_ability_static_duration('Haste'),
					c.add_ability_static_duration('First Strike'),
				]| c<- game.creatures, c.controller=creature.controller, c.is_regular_creature
				]) where player=game.players[creature.controller]
			",
		}],
	},
},

}
