{

    //BLOOD CARDS

    "Memory Eater": {
		name: "Memory Eater",
		set: "Reaping_the_Cycle",
		rarity: 1,
		type: "creature",
		portrait: "memory-eater.png",
		cost: 5,
		loyalty_cost: 2,
		school: "@eval BLOOD",
		creature: {
			tags: ['Horror'],
			attack: 4,
			life: 4,
			move: 1,
            triggered_abilities: [{
				name: "Consume",
				rules: "Whenever you discard a card, Memory Eater 1 attack and 1 life.",
				on_card_discarded: "def(class creature creature, class game game, class player player, class card card) ->commands
				if(player = game.players[creature.controller], 
                [
                add(creature.life, 1),
                add(creature.attack, 1),
                ])",
			}],
		}
	},
    
    "Demanding Devlings": {
		name: "Demanding Devlings",
		set: "Reaping_the_Cycle",
		type: "creature",
		portrait: "demanding-devlings.png",
		cost: 2,
		loyalty_cost: 0,
		school: "@eval BLOOD",
		creature: {
			tags: ['Imp'],
            abilities: ['Marauder'],
			attack: 6,
			life: 3,
			move: 1,
			image_num: 71,
            passive_abilities: [{
				static_effect: "def(class game game, class creature creature) ->commands
				if(creature.controller >= 0,
				   game.players[creature.controller].apply_static_effect(
					(def(class player p, map info) ->commands add(p.card_draw, -1)),
					(def(class player p, map info) ->commands add(p.card_draw, 1)),
					{}))",
				
				name: "Demands",
				rules: "-1 hand size",
			}]
		}		
	},
    
    	"Stygian Waters": {
		name: "Stygian Waters",
		set: "Reaping_the_Cycle",
		rarity: 2,
		cost: 2,
		loyalty_cost: 0,
		portrait: "stygian-waters.png",
		school: "@eval BLOOD",
		flavor_text: "To pass to the land of the dead, each soul must pay a small fee.",
		creature: {
			tags: ["Altar"],
			image_num: 12,
			portrait_scale: 0.12,
			portrait_y_offset: 40,
			is_construct: "true",
			triggered_abilities: [{
				name: "Collect",
				rules: "When your opponent discards a card, Stygian Waters gains a point. ",
				on_card_discarded: "def(class creature creature, class game game, class player player, class card card) ->commands
				if(player.team_index != game.team_index(creature.controller), add(creature.energy, 1))",
			}],

			activated_abilities: [
			{
				name: 'Pay Out',
				cost: 0,
				school: "@eval BLOOD",
				portrait: "school-blood.png",
				rules: "Convert all points into mana, and pay the same amount of life.",
				exhausts_creature: false,

				on_play: "def(class game game, class message.play_card info) ->commands [
					owner.gain_mana_from_card_overload(game, me, amount),
					add(creature.energy, -amount),
					add(owner.life, -amount)
				]
					where amount = min(min(creature.energy, owner.life - 1), owner.calculate_income(game) - owner.resources) // prevent suicide, prevent overcharging the mana bar
					where owner = game.players[creature.controller]
					where creature = info.get_creature(game)
				",
			},
			],
		}
	},
    
    //FAITH CARDS
    
    "Shield of Memories": {
		name: "Shield of Memories",
		set: "Reaping_the_Cycle",
		rarity: 0,
		type: "invocation",
        portrait: "shield-of-memories.png",
		is_response: false,
		cost: 0,
		loyalty_cost: 2,
		school: "@eval FAITH",
		rules: "Until end of turn, target gets 'Everytime you discard a card, this creature gains +1 life, +1 armor.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands creature.add_triggered_ability_until_end_of_turn({
				name: 'Shield of Memories',
				rules: 'When a card is discarded, this creature gains 1 life and 1 armor.',
				on_card_discarded: 'def(class creature creature, class game game, class player player, class card card) ->commands
                [add(creature.life, 1), add(creature.resistance, 1)]'
			})
			asserting size(info.targets) = 1
			where creature = game.creature_at_loc_or_die(info.targets[0])",
        },
    
    //GOLD CARDS
    
    
        "Elven Condatiare": {
		name: "Elven Condatiare",
		set: "Reaping_the_Cycle",
		type: "creature",
		portrait: "elven-condatiare.png",
		cost: 4,
		loyalty_cost: 1,
		school: "@eval GOLD",
		creature: {
			tags: ['Elf'],
			attack: 7,
			life: 6,
			move: 1,
			image_num: 71,
            passive_abilities: [{
				static_effect: "def(class game game, class creature creature) ->commands
				if(creature.controller >= 0,
				   game.players[creature.controller].apply_static_effect(
					(def(class player p, map info) ->commands add(p.card_draw, -1)),
					(def(class player p, map info) ->commands add(p.card_draw, 1)),
					{}))",
				
				name: "Fee of Service",
				rules: "-1 hand size",
			}]
		}		
	},
    
    "Student of Kilmorph": "Peddler",
    
	"Peddler": {
		name: "Peddler",
		set: "Reaping_the_Cycle",
		rarity: 1,
		type: "creature",
		portrait: "oldrics-guard.png",
		cost: 4,
		school: "@eval GOLD",
		rules: "+1 mana/turn",
		flavor_text: "Kilmorph teaches economy, and opportunism.",
		creature: {
			tags: ['Dwarf', 'Merchant'],
			attack: 3,
			life: 4,
			move: 1,
			image_num: 71,

			income: "def(class game game) ->int 1",
		}
	},
    
    "Scrap Tinker": {
		name: "Scrap Tinker",
		set: "Reaping_the_Cycle",
		rarity: 0,
		type: "creature",
		portrait: "scrap_tinker.png",
		cost: 3,
		loyalty_cost: 0,
		school: "@eval GOLD",
		creature: {
			tags: ['Gnome'],
			attack: 1,
			life: 5,
			move: 1,
            triggered_abilities: [{
				name: "Tinkering",
				rules: "Whenever you discard a card, Scrap Tinker gains 2 attack until end of turn.",
				on_card_discarded: "def(class creature creature, class game game, class player player, class card card) ->commands
				if(player = game.players[creature.controller], creature.apply_effect_until_end_of_turn('attack', 2))
				",
			}],
		}
	},
    
    "Queiligan, the Merchant Prince": {
		name: "Queiligan, the Merchant Prince",
		set: "Reaping_the_Cycle",
		rarity: 2,
		type: "creature",
		portrait: "merchant-prince.png",
		cost: 5,
		loyalty_cost: 3,
		school: "@eval GOLD",
		hero: true,
		creature: {
			tags: ['Human', 'Lord', 'Merchant'],
			attack: 6,
			life: 5,
			move: 1,
            triggered_abilities: [{
				name: "Planning",
				rules: "Whenever you discard a card, Queiligan gains armor equal to your Materia level until the beginning of your next turn.",
				
                on_card_discarded: "def(class creature creature, class game game, class player player, class card card) ->commands
				if(player = game.players[creature.controller], add(creature.energy, player.get_resource_level(GOLD)))",
                
                on_begin_turn: "def(class creature creature, class game game) ->commands 
                [
                    if (game.current_player_index = creature.controller, set(creature.energy, 0)),
                ]",
			}],
            passive_abilities: [{
				static_effect: "def(class game game, class creature creature) ->commands
				creature.apply_static_effect('resistance', creature.energy)",
                hidden_on_creature: true,
                //hidden_on_card: true,
			}]
		}
	},
    
    //FOOD CARDS
    
    "Zerkx, the Cyclekeeper":
    {
		name: "Zerkx, the Cyclekeeper",
		set: "Reaping_the_Cycle",
		rarity: 1,
		type: "creature",
        portrait: "zerkx-cyclekeeper.png",
		cost: 3,
		loyalty_cost: 0,
		school: "@eval FOOD",
        hero: true,
		creature: {
			tags: ['Guardian'],
			attack: 3,
			life: 5,
			move: 1,
			triggered_abilities: [{
				name: "Reap the Cycle",
				rules: "When an opponent discards a card, you draw a card and Zerkx gains one attack.",
				on_card_discarded: "def(class creature creature, class game game, class player player, class card card) ->commands
				if(player.team_index != game.team_index(creature.controller),
                [
					game.players[creature.controller].draw_cards(game, 1),
                    add(creature.attack, 1)
				])",
			}],
		},
	},
    
    "Quicksilver Unicorn":
    {
		name: "Quicksilver Unicorn",
		set: "Reaping_the_Cycle",
        portrait: "quicksilver-unicorn.png",
		rarity: 1,
		type: "creature",
		cost: 4,
		loyalty_cost: 0,
		school: "@eval FOOD",
		flavor_text: "It's a strange creature. One moment slow and majestic, the next as fast as starlight.",
		creature: {
			tags: ['Beast', 'Fae'],
			attack: 6,
			life: 2,
			move: 1,
			triggered_abilities: [{
				name: "Quicksilver",
				rules: "When an opponent discards a card, Quicksilver Unicorn gains +1 move.",
				on_card_discarded: "def(class creature creature, class game game, class player player, class card card) ->commands
				if(player.team_index != game.team_index(creature.controller),
                [
					add(creature.move, 1)
				])",
			}],
		},
	},
    
    
    "Gilbane Hatching Ground": {
		name: "Gilbane Hatching Ground",
		type: "creature",
        set: "core",
		cost: 5,
		school: "@eval FOOD",
		portrait: "gilbane-spider.png",
		creature: {
			tags: ["Terrain"],
			is_construct: true,
            portrait: "gilbane-spider.png",
			image_num: 18,
            activated_abilities: [{
				name: 'Hatch',
				cost: 1,
                loyalty_cost: 2,
				school: "@eval FOOD",
				is_response: false,
				exhausts_creature: false,
				rules: 'If this location is empty, summon a colourless 3/3 Gilbane Spider here.',
				possible_targets: "def(class game game, class creature corpse, [Loc] targets) ->[Loc]|null
					if(game.creature_at_loc(corpse.loc) != null, [], null)",
				on_play: "def(class game game, class message.play_card info) ->commands
				[game.summon_creature(
			    lib.citadel.create_creature('Gilbane Spider',
				{
					name: 'Gilbane Spider',
					controller: creature.controller,
					loc: creature.loc
			    }))] where creature = info.get_creature(game)",
			}],
		},
	},
    
    //token for hatching grounds
    "Gilbane Spider": {
		name: "Gilbane Spider",
		rarity: 0,
		type: "creature",
		portrait: "gilbane-spider.png",
		cost: 1,
		loyalty_cost: 1,
		school: "@eval COLORLESS",
		creature: {
			tags: ['Beast', 'Spider'],
            portrait: "gilbane-spider.png",
            sound_summoned: "creatures/summon-skeleton.wav",
			attack: 3,
			life: 3,
			move: 1,
		}		
	},
    
    "Faerie Woods": {
		name: "Faerie Woods",
		type: "creature",
        set: "Reaping_the_Cycle",
		cost: 3,
		loyalty_cost: 2,
		school: "@eval FOOD",
		portrait: "faerie-woods.png",
		creature: {
			tags: ["Terrain"],
			is_construct: true,
			image_num: 18,
            triggered_abilities: [
            {
				name: "Magic of the Land",
				rules: "When any other player plays a card, gain 2 mana.",
				on_card_played: "def(class creature creature, class game game, class player player, class message.play_card info) ->commands 
                if(info.player_index != creature.controller, 
                [game.players[creature.controller].gain_mana_with_hint(game, creature.loc),
                game.players[creature.controller].gain_mana_with_hint(game, creature.loc)])",
            }],
		},
	},
    
    //SCROLL CARDS
    
    "Morgan the Entrancer": {
		name: "Morgan the Entrancer",
		set: "Reaping_the_Cycle",
		type: "creature",
		portrait: "morgan-the-entrancer.png",
		cost: 5,
		loyalty_cost: 3,
		school: "@eval SAPIENZA",
        hero: true,
		creature: {
			tags: ['Human', 'Sorceror'],
            abilities: ['Reload'],
			attack: 7,
			life: 5,
			move: 1,
            range: 1,
			image_num: 71,
            passive_abilities: [{
				static_effect: "def(class game game, class creature creature) ->commands
				if(creature.controller >= 0,
				   game.players[(creature.controller+1)%2].apply_static_effect(
					(def(class player p, map info) ->commands add(p.card_draw, -1)),
					(def(class player p, map info) ->commands add(p.card_draw, 1)),
					{}))",
				
				name: "Befuddlement",
				rules: "Your opponent has -1 hand size.",
			}]
		}		
	},
    
    //MIXED CARDS
    
    "Omen": {
		name: "Omen",
		rarity: 1,
        set: "Reaping_the_Cycle",
		type: "creature",
		portrait: "omen.png",
		cost: 3,
		loyalty_cost: 0,
		school: "@eval [FAITH, BLOOD]",
		creature: {
			tags: ['Phantom'],
			attack: 1,
			life: 1,
			move: 2,
			image_num: 21,
            
			triggered_abilities: [{
				name: "Sign",
				rules: "When Omen dies, your opponent gains a jynx card which clutters their hand.",

				on_die: "def(class creature creature, class game game) ->commands
				add(game.players[(creature.controller +1)%2].hand, ['Jynx'])",
			}],
		}
	},

    ////'token' card for Omen.
    "Jynx": {
		name: "Jynx",
		rarity: 0,
		type: "invocation",
		cost: 5,
		loyalty_cost: 0,
        school: "@eval COLORLESS",
		flavor_text: "You feel fate dragging you down.",
        rules: "This spell does nothing.",
        
        on_play: "def(class game game, class message.play_card info) ->commands []",
	},
    
    "Lamars Castle of Dreams": {
		name: "Lamars Castle of Dreams",
		rarity: 0,
		type: "creature",
        set: "Reaping_the_Cycle",
		portrait: "lamars-castle-of-dreams.png",
		cost: 5,
		loyalty_cost: 1,
        hero: true,
		school: "@eval [FAITH, SAPIENZA]",
		creature: {
			attack: 0,
			life: 12,
            resistance: 2,
			move: 0,
			image_num: 21,
            is_building: true,
			triggered_abilities: [{
				name: "Harvest Dreams",
				rules: "When an opponent discards a card, You gain 2 life.",
				on_card_discarded: "def(class creature creature, class game game, class player player, class card card) ->commands
				if(player.team_index != game.team_index(creature.controller), [
					if(creature.controller >= 0, add(game.players[creature.controller].life, 2))
				])",
			}],
		}
	},
	
}
