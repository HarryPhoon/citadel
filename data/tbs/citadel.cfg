{
	handlers: {
		create: "[
			debug(['TTT: ', msg.starting_units]),
		   // create a new game
		   set(game.players, players),
		   set(doc, game),


		]
		 where players =		 
			 map(msg.users,
			        construct('player',
			            {
							game: game,
							player_index: index,
							name: string<- msg.users[index].user,
							avatar: if(msg.users[index].avatar, msg.users[index].avatar,
							  if(db_info and db_info.info, db_info.info.avatar)
							  where db_info = if(db_client, db_client.get('user:' + msg.users[index].user)))
							  or 'goddess.png',
						}
						+ if(msg.player_resources is int, {base_income: msg.player_resources}, {})
			          ))

		  where game =

		      construct('game', {
				 starting_units: msg.starting_units,
				 tutorial: if(msg.tutorial != null, construct(msg.tutorial), construct('tutorial')),
		         players: [],

				 } + if(msg.map_dimensions is [int,int], {rows: msg.map_dimensions[0], columns: msg.map_dimensions[1], lanes: msg.map_lanes}, {}) +
						        if(msg.trophies is [[int]], {trophies: msg.trophies}, {}))
		",
		
		//set(doc, { users: msg.users, tutorial: msg.tutorial, map_dimensions: msg.map_dimensions, map_lanes: msg.map_lanes, trophies: msg.trophies, starting_units: msg.starting_units, player_resources: msg.player_resources })]",

		start: "[
			debug('DO RECREATE GAME'),
			//already have a game, so recreate/restart.
			set(game.players, players),
			set(doc, game),
			seed_rng(),
		]
		where players = map(doc.players, construct('player', {
					game: game,
					player_index: value.player_index,
					name: value.name,
					avatar: value.avatar,
				}))
		where game = construct('game', {
				players: [],

				starting_units: doc.creatures + doc.constructs,
				tutorial: doc.tutorial,
				rows: doc.rows,
				columns: doc.columns,
				lanes: doc.lanes,
				trophies: doc.trophies,
			})
		",
	
		add_bot: "[
		  add(me.state_id, 1),
		  debug('ADD BOT: ' + state_id + ' ' + size(bots)),
		  add(bots, [{
			session_id: session_id,
			script: [{
				session_id: session_id,
				send: {
					type: 'request_updates'
				}
			}],

			on_create: 'set(data, construct(q(bot_' + bot_type + '), {session_id: ${session_id}, args: ' + str(args) + ' or {}} + ( ' + str(bot_args) + ' or {})))',
			on_message: q(data.handle_message(message, me)),

		}]),
		debug('ADD BOT')]",

		message: "[
		 //handle_errors(
		 switch(message.type,
		  'submit_deck',
		  if(message.force or not doc.players[player].deck,
		  [
		  debug('SERVER GOT submit_deck: ' + str(player)),
		  add(me.state_id, 1),
		  set(doc.players, doc.players[:player] + [ new_player ] + doc.players[player+1:]),
		  doc.player_init(new_player)
		  ] where new_player =
		    construct('player',
			  {
				 game: doc,
				 player_index: player,
				 deck: shuffled_deck[4:],
				 hand: shuffled_deck[0:4],
				 deck_submitted: true,
				 base_income: doc.players[player].base_income + if(player%2 = 0, 0, 1),
				 resources: doc.players[player].base_income + if(player%2 = 0, 0, 1),
				 name: doc.players[player].name,
				 avatar: doc.players[player].avatar,
			  } where shuffled_deck = doc.tutorial.get_deck(player, shuffle(map(message.deck, value)))
			)),
		  'concede', [
			add(me.state_id, 1),
		  	doc.concede(player),
			if(player = 0, set(tbs_game.winner, 1), player = 1, set(tbs_game.winner, 0)),
		  ],
		  'moves', [


		  if(doc.team_index(player) = doc.current_player and message.state_id = state_id, [
			 add(me.state_id, 1),
		     doc.process_moves(map(message.moves, construct('message.' + value.type, value))),

			 bind_command(def(game, tbs_game) if(doc.winner_index != null, set(tbs_game.winner, doc.winner_index)), doc, me),
			],
			 debug('REJECTING MESSAGE FROM PLAYER ' + player + ' STATE ID ' + message.state_id + ' BECAUSE WE ARE PLAYER ' + doc.current_player + ' WITH STATE ID ' + state_id))
		  ]
		),
		 //error handling
		 /*
		 [
		   debug('ERROR WHILE PROCESSING MESSAGE: ' + context.message.type + ': ' + error_msg),
		   context.doc.log_message('Server encountered error when processing ' + message.type)
		 ]
		)
		*/ 
		 ]",

		player_disconnected: "[
			add(me.state_id, 1),
			doc.concede(players_disconnected[0]),
			if(players_disconnected[0] = 0, set(tbs_game.winner, 1), players_disconnected[0] = 1, set(tbs_game.winner, 0)),
		]",

		transform: "[set(message.nplayer, nplayer)]",
	}
}
