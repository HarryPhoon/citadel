{
	"Ilz Apprentice": {
		name: "Ilz Apprentice",
		type: "creature",
		cost: 2,
		loyalty_cost: 0,
		school: 4,
		creature: {
			tags: ['Human'],
			attack: 1,
			life: 2,
			move: 2,
			image_num: 9
		}
	},

	"Acolyte": {
		name: "Acolyte",
		type: "creature",
		cost: 2,
		loyalty_cost: 1,
		school: 4,
		rules: "When you cast Acolyte, draw a card.",
		on_play: "def(game, info) [
		  me.do_summons(game, info),
		  game.players[game.current_player].draw_cards(game, 1)
		]",
		creature: {
			tags: ['Human'],
			attack: 1,
			life: 2,
			move: 2,
			image_num: 20
		}
	},

	"Mystic Scholar": {
		name: "Mystic Scholar",
		type: "creature",
		cost: 2,
		loyalty_cost: 2,
		school: 4,
		creature: {
			abilities: [
				{
					name: 'Consume',
					cost: 1,
					school: 4,
					rules: "Sacrifice Mystic Scholar, draw 2 cards",
					on_play: "def(game, creature, info) [
						set(creature.destroyed, true),
						game.players[creature.controller].draw_cards(game, 2)
					]"
				}
			],
			tags: ['Human'],
			attack: 1,
			life: 2,
			move: 2,
			image_num: 20
		}
	},

	"Golem": {
		name: "Golem",
		type: "creature",
		cost: 4,
		loyalty_cost: 2,
		school: 4,
		creature: {
			abilities: [
				{
					name: 'Rebuild',
					cost: 2,
					school: 4,
					rules: "Fully heal Golem",
					on_play: "def(game, creature, info) [
						set(creature.wounds, 0)
					]"
				}
			],
			tags: ['Construct'],
			attack: 4,
			life: 4,
			move: 1,
			image_num: 61
		}
	},

	"Fireball": {
		name: "Fireball",
		type: "spell",
		school: 4,
		cost: 3,
		loyalty_cost: 3,
		rules: "Deal 3 damage to target creature",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(game, info) add(creature.wounds, 3)
			asserting creature != null
			asserting size(info.targets) = 1
			where creature = game.creature_at_loc(info.targets[0])"
	},

	"Blink": {
		name: "Blink",
		type: "spell",
		school: 4,
		cost: 1,
		loyalty_cost: 3,
		is_response: true,
		
		rules: "Target creature is moved to target lane",

		possible_targets: "def(game, nplayer, targets)
		  if(targets = [],
			 [creature.loc | creature <- game.creatures, creature.is_valid_target(game, nplayer, me), not creature.is_building],
			 if(size(targets) = 1,
				[[row, targets[0][1]] | row <- range(game.rows), game.creature_at_loc([row, targets[0][1]]) = null]
			 ))",
		on_play: "def(game, info)
		  set(game.creature_at_loc(info.targets[0]).loc, info.targets[1])"
	},

	"Astral Walk": {
		name: "Astral Walk",
		type: "spell",
		school: 4,
		cost: 2,
		loyalty_cost: 3,
		is_response: true,
		
		rules: "Target creature is moved to a vacant tile up to two spaces ahead or behind",

		possible_targets: "def(game, nplayer, targets)
		  if(targets = [],
			 [creature.loc | creature <- game.creatures, creature.is_valid_target(game, nplayer, me), not creature.is_building],
			 if(size(targets) = 1,
			   filter([[targets[0][0], targets[0][1]+col] | col <- [-2,-1,1,2]],
				      game.is_loc_on_board(value) and
					  game.creature_at_loc(value) = null)
			 ))",
		on_play: "def(game, info)
		  set(game.creature_at_loc(info.targets[0]).loc, info.targets[1])"
	},

	"Library": {
		name: "Library",
		type: "creature",
		cost: 2,
		loyalty_cost: 2,
		school: 4,
		creature: {
			tags: ["Library"],
			life: 3,
			is_building: true,
			image_num: 5,
			summoning_time: 3,
			abilities: [
				{
					name: 'Study',
					cost: 1,
					loyalty_cost: 0,
					exhausts_creature: true,
					school: 4,
					rules: "Draw a card",
					on_play: "def(game, creature, info) [
						game.players[creature.controller].draw_cards(game, 1)
					]"
				}
			]
		}
	},
	
	"Polymorph": {
		name: "Polymorph",
		type: "spell",
		cost: 2,
		loyalty_cost: 1,
		school: 4,
		is_response: true,
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(game, info) [game.summon_creature(construct('creature', {
			name: 'Giant Frog',			
			tags: ['Giant Frog', 'Animal'],
			school: 4, 
			attack: 3,
			controller: target.controller,
			life: 3,
			move: 2,
			initiative: 20,
			image_num: 73,
			loc: info.targets[0],
			})), set(target.destroyed, true)]
			asserting target != null
			asserting size(info.targets) = 1
			where target = game.creature_at_loc(info.targets[0])
		",
	},

	"Charge!": {
		name: "Charge!",
		type: "spell",
		cost: 2,
		loyalty_cost: 1,
		school: 4,
		rules: "Target creature gains Charge",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(game, info) add(game.creature_at_loc(info.targets[0]).abilities, ['Charge'])
					asserting game.creature_at_loc(info.targets[0]) != null
					asserting size(info.targets) = 1",
	},
	
	"Council of Seven": {
		name: "Council of Seven",
		type: "spell",
		school: 4,
		cost: 4,
		loyalty_cost: 3,
		rules: "Discard your hand. Draw seven cards.",
		possible_targets: "def(game, nplayer, targets) null",
		on_play: "def(game, info) [
			game.player_obj.discard_cards(range(size(game.player_obj.hand))),
			game.player_obj.draw_cards(game, 7)
		]",
	},
	
	"Confusion": {
		name: "Confusion",
		type: "spell",
		school: 4,
		is_response: true,
		cost: 3,
		loyalty_cost: 3,
		rules: "Gain control of target creature this turn",
		possible_targets: "enemy_creatures_as_possible_targets",
		on_play: "def(game, info) [set(creature.controller, game.current_player_index),
			set(creature.can_enter_endzone, false),
			creature.add_triggered_ability_until_end_of_turn({
				on_end_turn: 'def(creature, game) [set(creature.controller, args.original_controller), 
					set(creature.can_enter_endzone, args.original_enter_endzone)]',
				args: { original_controller: creature.controller, original_enter_endzone: creature.can_enter_endzone }
			})]
			asserting creature != null
			asserting size(info.targets) = 1
			where creature = game.creature_at_loc(info.targets[0])",
	},
	
	"Humboldt's Curse": {
		name: "Humboldt's Curse",
		type: "spell",
		school: 4,
		is_response: true,
		cost: 2,
		loyalty_cost: 2,
		rules: "Target's movement is reduced by 1",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(game, info) add(creature.move, -1)
					asserting creature != null
					asserting size(info.targets) = 1
					where creature = game.creature_at_loc(info.targets[0])",
	},
	
	"Humboldt's Trick": {
		name: "Humboldt's Trick",
		type: "spell",
		school: 4,
		is_response: true,
		cost: 3,
		loyalty_cost: 2,
		rules: "Target's movement is increased by 1, Target's attack is reduced by 2",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(game, info) [add(creature.move, 1), add(creature.attack, -2)]
					asserting creature != null
					asserting size(info.targets) = 1
					where creature = game.creature_at_loc(info.targets[0])",
	},
	
	"Rolland's Little Helper": {
		name:  "Rolland's Little Helper",
		type: "creature",
		school: 4,
		cost: 3,
		loyalty_cost: 2,
		creature: {
			abilities: [
				{
					name: 'Sacrafice',
					school: 4,
					rules: "Little Helper dies, Draw a card",
					on_play: "def(game, creature, info) [
						game.player_obj.draw_cards(game,1), 
						set(creature.destroyed, true), 
						add(game.graveyard, {(creature.summon_id): creature})]",
				}
			],
			tags: ['Arcane'],
			attack: 3,
			life: 3,
			move: 2,
			image_num: 49
		}
		
	},
}
