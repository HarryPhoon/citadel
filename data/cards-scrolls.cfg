{
// Heroes
	"Eji, the Summoner": {
		name: "Eji, the Summoner",
		set: "core",
		rarity: 2,
		type: "creature",
		portrait: "eji-the-summoner.png",
		cost: 8,
		loyalty_cost: 4,
		school: "@eval SAPIENZA",
		hero: true,
		creature: {
			tags: ['Human'],
			attack: 8,
			life: 8,
			move: 1,
            energy: 1,
			sprite_sheet: "mages",
			image_num: 8,
            
            triggered_abilities: [{
                name: ' Master Summoner',
                rules: "The first creature you summon each turn (and the immediately after summoning him) costs nothing. ",
				on_card_played: "def(class creature creature, class game game, class player player, class message.play_card info) ->commands
					if(player.player_index = creature.controller and info.card and info.card.creature and not (map<- info.card.creature).is_construct, 
					   [
                            set(creature.energy, 0)
                       ])
				",
			}],
                
            on_begin_turn: "def(class game game) ->commands
			             if(game.current_player_index = me.controller,
							 set(me.energy, 1))",
                             
			passive_abilities: [{
                name: 'Riftweaver',
                rules: "You may summon creatures adjacent to Eji.",
				static_effect: "def(class game game, class creature creature) ->commands
				if(creature.controller >= 0 and creature.energy > 0,
				   game.players[creature.controller].add_static_cost_filter(
				     construct('cost_filter', {
						filter_cost: q(def(class player p, class card_base card, int cost) ->int
						   if(card.creature and not card.creature.is_construct, 0, cost)),
					})))",

				allows_summoning: "def(class game game, class creature creature, class creature target) ->[Loc]
					if(not target.is_construct, 
						filter(game.all_locs, (game.locs_adjacent(value, creature.loc) or value = creature.loc) and game.creature_at_loc(value) = null), 
						[])
				",
			}],
		}
	},

// Basic foot soldiers

	"Cunning Wisp": {
		name: "Cunning Wisp",
		set: "core",
		rarity: 1,
		type: "creature",
		cost: 3,
		artist: "lucy",
		loyalty_cost: 0,
		portrait: "cunningwisp.png",
		school: "@eval SAPIENZA",
		is_response: true,
		creature: {
			sound_summoned: "creatures/summon-wisp.wav",
			sound_death: "creatures/death-wisp.wav",
			attack: 4,
			life: 1,
			move: 1,

			portrait_x_offset: 90,
			portrait_y_offset: 280,
			portrait_scale: 0.6,

			activated_abilities: [
				{
					name: 'Switch',
					cost: 1,
					loyalty_cost: 0,
					school: "@eval SAPIENZA",
					portrait: "cunningwisp.png",
					rules: "Cunning Wisp exchanges position with another creature you control.",
					is_response: true,
					sound_resolve: 'creatures/wisp-unsummon.wav',
					possible_targets: "def(class game game, class creature creature, [Loc] targets) ->[Loc]|null
						if(targets != [], null,
						   map(filter(game.creatures, value != creature and value.is_building = false and value.controller = creature.controller), value.loc)
						)
					",

					on_play: "
					 def(class game game, class creature creature, class message.play_ability info) ->commands [
					 	creature.set_loc(info.targets[0]),
						game.creature_at_loc_or_die(info.targets[0]).set_loc(creature.loc),
					]"
				}
			]
		}
	},
		
	"Ilz Apprentice": {
		name: "Ilz Apprentice",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "ilz-apprentice.png",
		cost: 2,
		loyalty_cost: 0,
		school: "@eval SAPIENZA",
		creature: {
			tags: ['Human', 'Mage'],
			attack: 3,
			life: 4,
			move: 1,
			image_num: 9
		}
	},

	"Acolyte": {
		name: "Acolyte",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "acolyte.png",
		artist: "lucy",
		cost: 3,
		loyalty_cost: 0,
		school: "@eval SAPIENZA",
		rules: "When you cast Acolyte, draw a card.",
		on_play: "def(class game game, class message.play_card info) ->commands [
		  me.do_summons(game, info),
		  game.players[game.current_player].draw_cards(game, 1)
		]",
		creature: {
			tags: ['Human', 'Mage'],
			portrait_y_offset: 210,
			portrait_scale: 0.6,
            
			attack: 3,
			life: 3,
			move: 1,
		}
	},

	//This is more of a demo of 'enter the battlefield' abilities than
	//a serious card. Feel free to do it up / add it if you like it but
	//note that no serious thought has been put into its balance or gameplay
	//so far.
	"Mage's Apprentice": {
		name: "Mage's Apprentice",
		rarity: 0,
		type: "creature",
		cost: 4,
		loyalty_cost: 0,
		school: "@eval SAPIENZA",
		rules: "When Mage's Apprentice enters the battlefield it deals 2 damage to a target creature.",

		creature: {
			tags: ['Human', 'Mage'],

			triggered_abilities: [{
				name: "Magic Missile",
				rules: "When Mage's Apprentice enters the battlefield, you may deal 2 damage to a target enemy creature.",
				on_summoned: "def(class creature creature, class game game) ->commands
					//Note: using trigger_ability_cast() allows the player to
					//not use the ability. Use trigger_ability_cast_mandatory()
					//to require them to use it if possible.
					game.trigger_ability_cast(creature, {
						name: 'Magic Missile',
						cost: 0,
						school: SAPIENZA,
						rules: q(Deal 2 damage to a target creature),
						possible_targets: q(enemy_creatures_as_possible_targets),

						on_play: q(def(class game game, class creature creature, class message.play_ability info) ->commands
						  target.inflict_damage(game, 2)
						  asserting size(info.targets) = 1
						  where target = game.creature_at_loc_or_die(info.targets[0]))
					})
				",
			}],
            
			attack: 3,
			life: 3,
			move: 1,
		}
	},

	"Mystic Scholar": {
		name: "Mystic Scholar",
		set: "core",
		rarity: 1,
		type: "creature",
		portrait: "mystic-scholar.png",
		cost: 5,
		loyalty_cost: 0,
		school: "@eval SAPIENZA",
		creature: {
			activated_abilities: [
				{
					name: 'Study',
					cost: 1,
                    exhausts_creature: true,
					school: "@eval SAPIENZA",
					rules: "Exhaust this creature, draw a card",
					on_play: "def(class game game, class creature creature, class message.play_ability info) ->commands [
						game.players[creature.controller].draw_cards(game, 1)
					]"
				}
			],
			tags: ['Human', 'Mage'],
			attack: 5,
			life: 6,
			move: 1,
			image_num: 20
		}
	},
    
    "Spirit of Intellect": {
		name: "Spirit of Intellect",
		set: "core",
		rarity: 1,
		type: "creature",
		portrait: "spirit-of-intellect.png",
		cost: 4,
		loyalty_cost: 1,
		school: "@eval SAPIENZA",
		creature: {
			tags: ['Spirit'],
			attack: 0,
			life: 5,
			move: 1,
            passive_abilities: [{
				static_effect: "def(class game game, class creature creature) ->commands
				if(creature.controller >= 0,
				   game.players[creature.controller].apply_static_effect(
					(def(class player p, map info) ->commands add(p.card_draw, 1)),
					(def(class player p, map info) ->commands add(p.card_draw, -1)),
					{}))",
				
				name: "Adviser",
				rules: "+1 hand size",
			},{
				static_effect: "def(class game game, class creature creature) ->commands
				[creature.apply_static_effect('attack', size(game.players[creature.controller].hand))
                | target <- game.creatures,
				  (creature = target)
                ]",
				
				name: "Power in Knowledge",
				rules: "Spirit of Intellect gains attack equal to the number of cards in your hand.",
			}],
			image_num: 20
		}
	},

// Mid range creature
	
	"Flesh Golem": {
		name: "Flesh Golem",
		set: "core",
		rarity: 1,
		type: "creature",
		portrait: "golem.png",
		cost: 5,
		loyalty_cost: 1,
		school: "@eval SAPIENZA",
		creature: {
								sound_summoned: "creatures/summon-flesh-golem.wav",
					sound_death: "creatures/death-flesh-golem.wav",
			activated_abilities: [
				{
					name: 'Re-make',
					cost: 2,
					school: [1,4],
					is_response: false,
					rules: "Destroy Flesh Golem and summon a new Flesh Golem in its place.",
					is_usable: "def(class game game, class creature creature) ->bool true",
					on_play: "def(class game game, class creature creature, class message.play_ability info) ->commands [
						set(creature.destroyed, true),
						game.summon_creature(construct('creature', {
							name: 'Flesh Golem',
							tags: ['Construct', 'Golem'],
							school: SAPIENZA,
							attack: 8,
							controller: creature.controller,
							life: 8,
							move: 1,
                            portrait: creature.portrait,
							initiative: 20,
							image_num: 75,
							loc: creature.loc,
							activated_abilities: creature.activated_abilities,
							}))
					]"
				}
			],
			tags: ['Construct', 'Golem'],
			attack: 8,
			life: 8,
			move: 1,
			image_num: 75
		}
	},
    
    	"Channeler": {
		name: "Channeler",
		set: "core",
		rarity: 1,
		type: "creature",
		portrait: "channeler.png",
		cost: 4,
		loyalty_cost: 2,
		school: "@eval SAPIENZA",
        flavor_text: "Once power can be channeled, it becomes fluid: flexable and conservable.",
		creature: {
			tags: ['Human', 'Mage'],
			attack: 4,
			life: 7,
			move: 1,
			sound_summoned: "creatures/summon-dark-emissary.wav",
			sound_death: "creatures/death-dark-emissary.wav",
			initiative: 20,
			image_num: 43,
			
			activated_abilities: [
			{
				name: "Draw Power",
				cost: 1,
				school: "@eval SAPIENZA",
				is_response: true,
				rules: "Take half of a friendly creatures attack.",
				possible_targets: "def(class game game, class creature creature, [Loc] targets) ->[Loc]|null
					if(targets = [], [c.loc | c<- game.creatures, c != creature, c.controller = creature.controller])
				",
				on_play: "def(class game game, class creature creature, class message.play_ability info) ->commands
				[
					add(creature.attack, (target_creature.attack/2)),
                    add(target_creature.attack, -(target_creature.attack/2)),
				] where target_creature = game.creature_at_loc_or_die(info.targets[0])"
			},
            {
				name: "Channel Power",
				cost: 2,
				school: "@eval SAPIENZA",
				is_response: true,
				rules: "Give half your attack to a friendly creature.",
				possible_targets: "def(class game game, class creature creature, [Loc] targets) ->[Loc]|null
					if(targets = [], [c.loc | c<- game.creatures, c != creature, c.controller = creature.controller])
				",
				on_play: "def(class game game, class creature creature, class message.play_ability info) ->commands
				[
					add(target_creature.attack, (creature.attack/2)),
                    add(creature.attack, -(creature.attack/2)),
				] where target_creature = game.creature_at_loc_or_die(info.targets[0])"
			},
			],
		}
	},
    
        "Pyromancer": {
		name: "Pyromancer",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "pyromancer.png",
		cost: 3,
		loyalty_cost: 3,
		school: "@eval SAPIENZA",
        flavor_text: "Love is fire, but some love fire more.",
		creature: {
			tags: ['Human', 'Mage'],
            abilities: ['Reload'],
			attack: 3,
			life: 4,
            range: 1,
			move: 1,
			initiative: 20,
			image_num: 43,
			
			activated_abilities: [
			{
				name: "Blast",
				cost: 2,
				school: "@eval SAPIENZA",
				is_response: true,
				exhausts_creature: true,
				rules: "Exhaust Pyromancer, inflict 3 damage to target creature or building.",
				possible_targets: "def(class game game, class creature creature, [Loc] targets) ->[Loc]|null
					if(targets = [], [c.loc | c<- game.creatures, c != creature, c.is_valid_target(game, game.nplayer, me)])
				",
				on_play: "def(class game game, class creature creature, class message.play_ability info) ->commands
				[
					target_creature.inflict_damage(game, 3),
				] where target_creature = game.creature_at_loc_or_die(info.targets[0])"
			},
			],
		}
	},
	
	"Blink Mage": {
		name: "Blink Mage",
		set: "core",
		rarity: 0,
		type: "creature",
		cost: 6,
		loyalty_cost: 0,
		school: "@eval SAPIENZA",
		portrait: "blink-mage.png",
		creature: {
			activated_abilities: [
				{
					name: 'Blink',
					sound_resolve: 'teleport.wav',
					cost: 1,
					school: ["@eval SAPIENZA"],
					is_response: true,
					rules: "Blink Mage blinks to the opposite lane, if a space is available",
					possible_targets: "def(class game game, class creature creature, [Loc] targets) ->[Loc]|null
						if(targets = [], if(game.creature_at_loc(target_loc) = null, [target_loc], []), null)
						where target_loc = [game.rows - creature.loc[0] - 1, creature.loc[1]]
					",
					on_play: "def(class game game, class creature creature, class message.play_ability info) ->commands [
						set(creature.loc, info.targets[0])
					]"
				}
			],
			tags: ['Human', 'Mage'],
			attack: 7,
			life: 7,
			move: 1,
			image_num: 75
		}
	},

//Spells

	"Translocate": {
		name: "Translocate",
		set: "core",
		rarity: 2,
		type: "invocation",
		school: "@eval SAPIENZA",
		portrait: "translocate.png",
		artist: "eleazzaar",
		cost: 4,
		loyalty_cost: 4,
		is_response: true,
		rules: "Two target creatures exchange ownership and location. Exhaust the creatures.",
		possible_targets: "def(class game game, int nplayer, [Loc] targets) ->[Loc]|null
		  if(size(targets) >= 2, null,
			 if(res != null, filter(res, value not in targets))
		     where res = all_creatures_as_possible_targets(game, nplayer, []))
		",
		on_play: "def(class game game, class message.play_card info) ->commands
		[
			a.set_loc(b.loc, 'move'),
			b.set_loc(a.loc, 'move'),
			set(a.controller, b.controller),
			set(b.controller, a.controller),
            add(a.status_effects, ['Exhausted']),
            add(b.status_effects, ['Exhausted']),
		] where a = game.creature_at_loc_or_die(info.targets[0])
		  where b = game.creature_at_loc_or_die(info.targets[1])
		",
	},

	"Tactical Blunder": {
		name: "Tactical Blunder",
		set: "core",
		rarity: 0,
		type: "invocation",
		school: "@eval SAPIENZA",
		portrait: "tactical-blunder.png",
		artist: "eleazzaar",
		cost: 1,
		loyalty_cost: 2,
		is_response: true,
		rules: "Change the summoning location of target creature currently being summoned.",
		possible_targets: "def(class game game, int nplayer, [Loc] targets) ->[Loc]|null
		  if(targets != [], null, 
			 if(summoning and summoning.card, summoning.card.possible_targets(game, summoning.player_index, []), [])
			 where summoning = class message.play_card|null <-
			    find(reverse(game.stack), is_creature(value)))
		     where is_creature = overload(
			 	def(class message.play_card info) ->bool
				  info.card.type = 'creature' and
				  info.card != null and
				  (
				  creature_obj != null and
				  creature_obj.is_construct = false and
				  creature_obj.is_building = false
				  where creature_obj = info.card.creature_object) and
				  size(info.targets) = 1
				    asserting info.card,
				def(any info) ->bool false
			 )",
		on_play: "def(class game game, class message.play_card info) ->commands
		  set(summoning.targets, info.targets)
			 where summoning = class message.play_card <-
			   find(reverse(game.stack), is_creature(value))
		     where is_creature = overload(
			 	def(class message.play_card info) ->bool info.card.type = 'creature' and size(info.targets) = 1
				   asserting info.card,
				def(any info) ->bool false
			 )",

	},

	"Eji's Cunning": {
		name: "Eji's Cunning",
		set: "core",
		rarity: 1,
		type: "invocation",
		school: "@eval SAPIENZA",
		portrait: "ejis-cunning.png",
		artist: "eleazzaar",
		cost: 2,
		loyalty_cost: 3,
		is_response: true,
		rules: "Change the targets of an invocation that is being cast.",
		possible_targets: "def(class game game, int nplayer, [Loc] targets) ->[Loc]|null
			if(size(game_stack) = 0 or not (back(game_stack) is class message.play_card)
			   or (card_being_played = null or card_being_played.type != 'invocation'
			       where card_being_played = (class message.play_card <- back(game_stack)).card),
			[],
			card.possible_targets(game, msg.player_index, targets)
			where card = class card <- msg.card
			where msg = class message.play_card <- back(game_stack))

			//get the game stack, but if we ourselves are the card on top of the game stack,
			//we should pop ourselves off.
			where game_stack = if(our_stack_index = -1, game.stack, game.stack[:our_stack_index])
			where our_stack_index = index(game.stack, our_stack_frame)
			where our_stack_frame = find(game.stack, if(value is class message.play_card, (class message.play_card <- value).card = me, false))
		",

		on_play: "def(class game game, class message.play_card info) ->commands
		  set(msg.targets, info.targets)
			where card = class card <- msg.card
			where msg = class message.play_card <- back(game.stack)
		",
	},
    
    "Haste": {
		name: "Haste",
		set: "core",
		rarity: 0,
		type: "invocation",
		cost: 5,
		loyalty_cost: 2,
		portrait: "haste.png",
		school: "@eval SAPIENZA",
		rules: "Target creature gains haste, +1 movement, and first strike until end of turn.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands
          [
		    target.add_ability_until_end_of_turn('Haste'),
            target.add_ability_until_end_of_turn('First Strike'),
            target.apply_effect_until_end_of_turn('move', 1),
		  ]
		   where target = game.creature_at_loc_or_die(info.targets[0])",

	},

	"Scry": {
		name: "Scry",
		set: "core",
		rarity: 0,
		type: "invocation",
		school: "@eval SAPIENZA",
		portrait: "scry.png",
		artist: "eleazzaar",
		cost: 0,
		loyalty_cost: 3,
		rules: "Look at the top 3 cards of your deck, put one of them into your hand and the rest on the bottom of your deck.",
		on_play: "def(class game game, class message.play_card info) ->commands
		  game.scry(3, {card: me}, info)",
	},
    
	"Endless Studies": {
		name: "Endless Studies",
		set: "core",
		rarity: 0,
		type: "invocation",
		artist: "lucy",
		portrait: "endless-studies.png",
		school: "@eval SAPIENZA",
		is_cantrip: true,
		cost: 0,
		loyalty_cost: 2,
		rules: "Draw two cards.",
		on_play: "def(class game game, class message.play_card info) ->commands
		  game.players[game.current_player].draw_cards(game, 2)",
	},
    
	"Fireball": {
		name: "Fireball",
		set: "core",
		rarity: 0,
		type: "invocation",
		school: "@eval SAPIENZA",
		portrait: "fireball.png",
		artist: "lucy",
		cost: 3,
		loyalty_cost: 2,
	//	resolve_effect: "fire",
		rules: "Deal six damage to target creature or player.",
		possible_targets: "all_creatures_and_players_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands
		if(info.targets[0][0] = -1,
		  //targeting a player
		  add(game.players[info.targets[0][1]].life, -6),

		  //targeting a creature
		  creature.inflict_damage(game, 6)
			asserting size(info.targets) = 1
			where creature = game.creature_at_loc_or_die(info.targets[0]))"
	},
    
    "Chain Lightning": {
		name: "Chain Lightning",
		set: "core",
		rarity: 1,
		type: "invocation",
		school: "@eval SAPIENZA",
		portrait: "chain-lightning.png",
		artist: "eleazzaar",
		cost: 2,
		loyalty_cost: 3,
	//	resolve_effect: "fire",
		rules: "Target a creature, then continue to target creatures adjacent to the last targeted creature until there are no targets. Inflict 3 damage to each target.s",
		possible_targets: "def(class game game, int nplayer, [Loc] targets) ->[Loc]|null
		  if(targets = [],
			 [creature.loc | creature <- game.creatures, creature.is_valid_target(game, nplayer, me), not creature.is_building],
			 if(size(new_targets) > 0, new_targets, null))	 
             where new_targets = [creature.loc | creature <- game.creatures, creature.is_valid_target(game, nplayer, me), not creature.is_building, creature.is_valid_target(game, nplayer, me), game.locs_adjacent(creature.loc, targets[size(targets)-1]), creature.loc not in targets]
             ",
        
		on_play: "def(class game game, class message.play_card info) ->commands
		  map(info.targets, creature.inflict_damage(game, 3)
  where creature = game.creature_at_loc_or_die(value))",
	},

	"Hailstorm": {
		name: "Hailstorm",
		set: "core",
		type: "invocation",
		portrait: "hail-storm.png",
		artist: "eleazzaar",
		school: "@eval SAPIENZA",
		cost: 0,
		loyalty_cost: 1,
		rules: "Inflict 1 damage to all creatures.",
		on_play: "def(class game game, class message.play_card info) ->commands map(game.creatures, creature, if((not creature.is_construct) and (not creature.is_building), [
			creature.inflict_damage(game, 1,)]))",

		runes: [
		{
			color: 'black',
			points: [[0,100], [0,0], [0,0], [100,100]]
		}
		],
	},


	"Counter Spell": {
		name: "Counter Spell",
		set: "core",
		rarity: 0,
		type: "invocation",
		school: "@eval SAPIENZA",
		portrait: "counter-spell.png",
		artist: "eleazzaar",
		cost: 1,
		loyalty_cost: 6,
		is_response: true,
		rules: "Make your opponent's spell currently being cast fizzle out",
		possible_targets: "
		  def(class game game, int nplayer, [Loc] targets) ->[Loc]|null
		    if(game.stack = [] or not (game.stack[size(game.stack)-1] is class message.play_card), [], null)
		",

		on_play: "def(class game game, class message.play_card info) ->commands
			set(game.stack[size(game.stack)-1].force_fizzle, true)
			asserting game.stack != []
		",
	},

	"Astral Walk": {
		name: "Astral Walk",
		set: "core",
		rarity: 1,
		type: "invocation",
		school: "@eval SAPIENZA",
		portrait: "astral-walk.png",
		artist: "eleazzaar",
		cost: 2,
		loyalty_cost: 3,
		is_response: true,
		
		rules: "Move target creature one tile forwards or backwards.",

		possible_targets: "
		  def(class game game, int nplayer, [Loc] targets) ->[Loc]|null
		  if(targets = [],
			 [creature.loc | creature <- game.creatures, creature.is_valid_target(game, nplayer, me), not creature.is_building],
			 if(size(targets) = 1,
			   filter([[targets[0][0], targets[0][1]+col] | col <- [-1,1]],
				      game.is_loc_on_board(value) and
					  game.creature_at_loc(value) = null)
			 ))",
		on_play: "def(class game game, class message.play_card info) ->commands
		  set(game.creature_at_loc_or_die(info.targets[0]).loc, info.targets[1])"
	},
	
	"Polymorph": {
		name: "Polymorph",
		set: "core",
		rarity: 1,
		type: "invocation",
		cost: 3,
		loyalty_cost: 1,
		school: "@eval SAPIENZA",
		portrait: "polymorph.png",
		artist: "eleazzaar",
		is_response: true,
		rules: "Transform target creature into a 2/2 <i>Giant Frog</i>.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands target.transform(game, lib.citadel.create_creature('Giant Frog'))
			asserting size(info.targets) = 1
			where target = game.creature_at_loc_or_die(info.targets[0])
		",
	},

//Constructs

	"Library": {
		name: "Library",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "library.png",
		cost: 3,
		loyalty_cost: 0,
		school: "@eval SAPIENZA",
		creature: {
			portrait_y_offset: 50,
			portrait_scale: 0.4,
			tags: ["Library"],
			life: 6,
			is_construct: true,
			image_num: 8,
			passive_abilities: [{
				static_effect: "def(class game game, class creature creature) ->commands
				if(creature.controller >= 0,
				   game.players[creature.controller].apply_static_effect(
					(def(class player p, map info) ->commands add(p.card_draw, 1)),
					(def(class player p, map info) ->commands add(p.card_draw, -1)),
					{}))",
				
				name: "Archives",
				rules: "+1 hand size",
			}]
		}
	},

	"House of Meditation": {
		name: "House of Meditation",
		set: "core",
		rarity: 0,
		type: "creature",
		portrait: "greatlibrary.png",
		cost: 2,
		loyalty_cost: 0,
		school: "@eval SAPIENZA",
		rules: "When you cast House of Meditation, draw a card",
		on_play: "def(class game game, class message.play_card info) ->commands [
		  me.do_summons(game, info),
		  game.players[game.current_player].draw_cards(game, 1)
		]",
		creature: {
			portrait_y_offset: 50,
			portrait_scale: 0.4,
			is_construct: true,
		}
	},

	"Great Library of Turim": {
		name: "Great Library of Turim",
		set: "core",
		rarity: 2,
		type: "creature",
		portrait: "greatlibrary.png",
		artist: "lucy",
		cost: 6,
		loyalty_cost: 0,
		school: "@eval SAPIENZA",
		rules: "Whenever you cast a spell, draw a card.",
		creature: {
			portrait_y_offset: 50,
			portrait_scale: 0.4,
			tags: ["Library"],
			life: 6,
			is_construct: true,
			image_num: 8,
			triggered_abilities: [{
				name: 'Study',
				rules: 'Whenever you cast a spell, draw a card.',
				on_card_played: "def(class creature creature, class game game, class player player, class message.play_card info) ->commands
					if(player.player_index = creature.controller,
					   player.draw_cards(game, 1))
				",
			}],
		}
	},
    
    "Mistlands": {
		name: "Mistlands",
		type: "creature",
        set: "core",
		cost: 2,
		loyalty_cost: 0,
		school: "@eval SAPIENZA",
		portrait: "mistlands.png",
		rules: "Non-Sapienza creatures in this tile have -2 attack.",
		creature: {
			tags: ["Terrain"],
			is_construct: true,
            portrait: "mistlands.png",
			image_num: 18,
			static_ability_effect: "if(creature.loc = target.loc and not target.is_construct and (not SAPIENZA in target.school), target.apply_static_effect('attack', -2))",
		},
	},

//Veiling Glyph is the card

    "Veiling Glyph": {
		name: "Veiling Glyph",
		set: "core",
		rarity: 1,
		type: "invocation",
        portrait: "veiling-glyph.png",
		is_response: false,
        tags: ['Rune'],
		cost: 3,
		loyalty_cost: 4,
		school: "@eval SAPIENZA",
		rules: "Place a Veiling Ward construct with fragile. Allies on or adjacent to it gain cover.",
		possible_targets: "def(class game game, int nplayer, [Loc] targets) ->[Loc]|null
		  if(targets = [],
			   filter(game.all_locs, (game.is_loc_on_board(value) and
					  game.creature_at_loc(value) = null and
                      value not in game.players[(nplayer+1)%2].summoning_locs(game, construct('creature', {name: 'Wolf', school: FOOD, image_num: 5}))
                      )), null
                      )",
		   on_play: "def(class game game, class message.play_card info) ->commands
		   map(info.targets, game.summon_creature(
		   lib.citadel.create_creature('Veiling Ward', {
			name: 'Veiling Ward',
			controller: game.current_player,
			loc: value,
            })))"
	},
    
    
	"Veiling Ward": {
		name: "Veiling Ward",
		type: "creature",
		portrait: "veiling-glyph.png",
		cost: 3,
		loyalty_cost: 4,
		school: "@eval SAPIENZA",
		rarity: 0,
		creature: {
			tags: ['Ward'],
			abilities: ['Fragile'],
            static_ability_effect: "if((creature.loc = target.loc or game.locs_adjacent(creature.loc, target.loc)) and (not target.is_construct) and (target.controller = creature.controller), target.add_ability_static_duration('Cover'))",
		}
	},

	"Altar of Storms": {
		name: "Altar of Storms",
		type: "creature",
		portrait: "altar-of-storms.png",
		cost: 6,
		school: "@eval SAPIENZA",
		creature: {
			tags: ['Altar'],
			portrait_scale: 0.5,
			is_construct: true,
			image_num: 12,

			triggered_abilities: [{
				name: 'Static Charge',
				rules: 'Whenever you cast a spell, deal one damage to each enemy creature adjacent to any target of the spell.',
				on_card_played: "def(class creature altar, class game game, class player player, class message.play_card info) ->commands
				[
					if(player.player_index = altar.controller and info.targets[0][0] != -1, //and is_sapienza_spell,
						if(game.creature_at_loc(info.targets[0]) != null,
							map( filter( game.all_locs, find(info.targets, game.locs_adjacent(value,loc)) != null where loc = value),
								if (target != null and target.controller != altar.controller,
									add(target.life, -1))
								where target = game.creature_at_loc(value))))
					//where is_sapienza_spell = info.card != null and (info.card.school = altar.school or altar.school in info.card.school)
				]",
			}],
		}
	},

"Mage Tower": {
		name: "Mage Tower",
		set: "core",
		rarity: 1,
		type: "creature",
		cost: 2,
		loyalty_cost: 1,
		portrait: "mage-tower.png",
		artist: "stephenwang",
		school: "@eval SAPIENZA",
		is_channeled: true,
		rules: "One charge for each channeled mana. When you play <i>Mage Tower</i>, imprint it with up to three invocations from your hand.",
		on_play: "def(class game game, class message.play_card info) ->commands
			if(size(current_choices) = min(3, size(invocations)),
			do_summons(game, info),

			if(invocations, game.set_current_choice({
				card: me,
				info: info,
				text: 'Choose which invocation to imprint',
				options: filter(map(invocations, if(index not in current_choices, construct('choice.card', {
					card: value,
					tag: index,
				}))), value != null)
			}))

			)
			where current_choices = info.choices or []
			where invocations = filter(game.player_obj.hand, value.type = 'invocation')
		",

		creature: {
			is_construct: true,
            tags: ['Tower'],
			on_summoned: "def(class game game) ->commands [
				set(energy, channel),

				map(choices,
					add(me.activated_abilities, [{
						name: 'Invoke ' + card.name,
						portrait: card.portrait,
						portrait_focus: card.portrait_focus,
						school: card.school,
						rules: q(Draw <i>) + card.name + q(</i> into your hand.),
						hidden_on_creature: true,
						on_play: q(def(class game game, class creature creature, class message.play_ability info) ->commands
						[
							add(game.player_obj.hand, [string<- settings.card]),
							add(creature.energy, -1)
						]
						),

						possible_targets: q(def(class game game, class creature creature, [Loc] targets) ->[Loc]|null
							if(creature.energy > 0, null, [])
						),

						settings: { card: card.name },
					}])
					where card = invocations[value]
				)
				where invocations = filter(game.player_obj.hand, value.type = 'invocation')
			]
			",

			activated_abilities: [{
				name: 'Invoke',
				cost: 0,
				school: "@eval SCROLLS",
				rules: "Pay one charge. Draw a copy of an imprinted card.",
				hidden_from_activating: true,
			}]
		}
	},
    
        "Zupadins Moving Castle": {
		name: "Zupadins Moving Castle",
		rarity: 2,
		type: "creature",
        set: "core",
		portrait: "zupadins-moving-castle.png",
		cost: 8,
		loyalty_cost: 3,
        hero: true,
		school: "@eval SAPIENZA",
		creature: {
			attack: 6,
            range: 1,
            abilities: ['Reload'],
			life: 10,
            resistance: 3,
			move: 0,
			image_num: 21,
            is_building: true,
            activated_abilities: [
				{
					name: 'Relocate',
					cost: 2,
					school: "@eval GOLD",
					rules: "Exhaust Zupadins Moving Castle and move it to an adjacent hex.",
					exhausts_creature: true,

					possible_targets: "
					 def(class game game, class creature creature, [Loc] targets) ->[Loc]|null
						if(targets = [], filter(
								game.get_adjacent_locs(creature.loc),
							game.is_loc_on_board(value) and
							game.creature_at_loc(value) = null), null)
					",

					on_play: "def(class game game, class creature creature, class message.play_ability info) ->commands [
						set(creature.loc, info.targets[0])
					] asserting size(info.targets) = 1",
				}
			]
		}
	},

///// END OF MAIN SET, RANDOM/CANDIDATE CARDS BELOW //////


	"Blink": {
		name: "Blink",
		set: "core",
		type: "invocation",
		school: "@eval SAPIENZA",
		portrait: "blink.png",
		artist: "eleazzaar",
		cost: 2,
		loyalty_cost: 3,
		is_response: true,
		
		rules: "Move target creature to the same column in target lane.",

		possible_targets: "
		 def(class game game, int nplayer, [Loc] targets) ->[Loc]|null
		  if(targets = [],
			 [creature.loc | creature <- game.creatures, creature.is_valid_target(game, nplayer, me), not creature.is_building],
			 if(size(targets) = 1,
				[[row, targets[0][1]] | row <- range(game.rows), game.is_loc_on_board([row, targets[0][1]]), game.creature_at_loc([row, targets[0][1]]) = null]
			 ))",
		on_play: "def(class game game, class message.play_card info) ->commands
		  set(game.creature_at_loc_or_die(info.targets[0]).loc, info.targets[1])"
	},

	"Divine the Future": {
		name: "Divine the Future",
		type: "invocation",
		school: "@eval SAPIENZA",
		cost: 2,
		loyalty_cost: 3,
		rules: "Look at the top 5 cards of your deck, discard them or put them back.",
		on_play: "def(class game game, class message.play_card info) ->commands if(info.choices, [
			if(info.choices[0] = 1, [
				map(game.player_obj.deck[:5],
				    game.player_obj.discard_visible(game, lib.citadel.create_card(value))),
				set(game.player_obj.deck, game.player_obj.deck[5:]),
			])
		],
		 if(game.player_obj.no_cards_to_draw, null,
		 [
		 	set(game.player_obj.deck, cards.deck),
		 	set(game.player_obj.discard_pile, cards.discard_pile),
			game.set_current_choice({
				card: me,
				info: info,
				text: 'Choose whether to discard the cards',
				options:
				map(cards.deck[:depth],
				construct('choice.card', {
					card: value,
					tag: -1,
				})) +
				
				[
				construct('choice.button', {
					tag: 0,
					text: 'Keep',
				}),
				construct('choice.button', {
					tag: 1,
					text: 'Discard',
				})
				]
			}),
		 ] where cards = game.player_obj.guarantee_deck_size(game, depth))
		) where depth = 5
		",
	},

	"Ejalah, the Summoner": {
		name: "Ejalah, the Summoner",
		type: "creature",
		portrait: "ejalah-the-summoner.png",
		cost: 4,
		loyalty_cost: 4,
		school: "@eval SAPIENZA",
		rules: "You may summon creatures in tiles adjacent to Ejalah",
		creature: {
			tags: ['Mage'],
			attack: 8,
			life: 8,
			move: 1,
			image_num: 0,
			sprite_sheet: "mages",
			allows_summoning: "def(class game game, class creature target) ->[Loc]
			if(not target.is_construct,
			  filter(game.all_locs, (game.locs_adjacent(value, loc)) and
			         game.creature_at_loc(value) = null), [])",
		}
	},

	"Golem": "Flesh Golem",

	"Giant Frog": {
		name: "Giant Frog",
		type: "creature",
		cost: 2,
		loyalty_cost: 1,
		school: "@eval SAPIENZA",
		creature: {
			tags: ['Frog'],
			attack: 2,
			life: 2,
			move: 1,
			image_num: 73
		}
	},

	"Charge!": {
		name: "Charge!",
		type: "invocation",
		cost: 2,
		loyalty_cost: 1,
		school: "@eval SAPIENZA",
		rules: "Target creature gains Charge.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands add(game.creature_at_loc_or_die(info.targets[0]).abilities, ['Charge'])
					asserting size(info.targets) = 1",
	},
	
	"Council of Seven": {
		name: "Council of Seven",
		type: "invocation",
		school: "@eval SAPIENZA",
		cost: 4,
		loyalty_cost: 3,
		rules: "Discard your hand, draw seven cards.",
		on_play: "def(class game game, class message.play_card info) ->commands [
			game.player_obj.discard_cards(game, range(size(game.player_obj.hand))),
			game.player_obj.draw_cards(game, 7)
		]",
	},
	
	"Confusion": {
		name: "Confusion",
		type: "invocation",
		school: "@eval SAPIENZA",
		is_response: true,
		cost: 3,
		loyalty_cost: 3,
		rules: "You gain control of target creature this turn. This creature cannot enter the endzone this turn.",
		possible_targets: "enemy_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands
		 [set(creature.controller, game.current_player_index),
			set(creature.can_enter_endzone, false),
			creature.add_triggered_ability_until_end_of_turn({
				on_end_turn: 'def(class creature creature, class game game) ->commands [set(creature.controller, int<- args.original_controller), 
					set(creature.can_enter_endzone, args.original_enter_endzone)]',
				args: { original_controller: creature.controller, original_enter_endzone: creature.can_enter_endzone }
			})]
			asserting size(info.targets) = 1
			where creature = game.creature_at_loc_or_die(info.targets[0])",
	},
	
	"Humboldt's Curse": {
		name: "Humboldt's Curse",
		type: "invocation",
		school: "@eval SAPIENZA",
		is_response: true,
		cost: 2,
		loyalty_cost: 1,
		rules: "Target creature gets &-;&1;&move;.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play_on_creature: "def(class game game, class creature target) ->commands [add(target.move, -1)]",
	},
	
	"Humboldt's Trick": {
		name: "Humboldt's Trick",
		type: "invocation",
		school: "@eval SAPIENZA",
		is_response: true,
		cost: 3,
		loyalty_cost: 2,
		rules: "Target creature gets &+;&1;&move; and &-;&2;&attack;.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands [add(creature.move, 1), add(creature.attack, -2)]
					asserting size(info.targets) = 1
					where creature = game.creature_at_loc_or_die(info.targets[0])",
	},
	
	"Rolland's Little Helper": {
		name:  "Rolland's Little Helper",
		type: "creature",
		school: "@eval SAPIENZA",
		cost: 3,
		loyalty_cost: 2,
		creature: {
			activated_abilities: [
				{
					name: 'Sacrifice',
					school: "@eval SAPIENZA",
					is_response: true,
					cost: 2,
					rules: "Sacrifice this creature, draw 3 cards.",
					on_play: "def(class game game, class creature creature, class message.play_ability info) ->commands [
						game.player_obj.draw_cards(game,3), 
						set(creature.destroyed, true)]",
				}
			],
			tags: ['Arcane'],
			attack: 6,
			life: 6,
			move: 1,
			image_num: 49
		}
		
	},

	"Read Mind": {
		name: "Read Mind",
		type: "invocation",
		cost: 0,
		loyalty_cost: 3,
		school: "@eval SAPIENZA",
		rules: "Look at your opponent's hand.\nYou gain +&1;&mana;.",

		on_play: "def(class game game, class message.play_card info) ->commands if(info.choices, null, [
		add(game.player_obj.resources, 1),
		if(game.opponent_obj.hand, game.set_current_choice({
			card: me,
			info: info,
			text: q(Look at your opponent's hand. Click a card when they're done.),
			options: map(game.opponent_obj.hand, construct('choice.card', {
				card: value,
				tag: index,
			}))
		}))])",
	},
	
	"Tower of Levitation": {
		name: "Tower of Levitation",
		type: "creature",
		cost: 3,
		loyalty_cost: 4,
		school: 4,
		rules: "Creatures you control in this lane have the ability: 'Levitate: This creature gains Flying this turn.'",
		creature: {
			tags: ["Tower"],
			life: 6,
			is_construct: true,
			image_num: 5,
			static_ability_effect: "if(creature != target and creature.controller = target.controller and creature.loc[0] = target.loc[0], 
				target.add_ability_static_duration({
					name: 'Levitate',
					cost: 2,
					school: 4,					
					is_response: true,
					rules: 'Gain Flying until the end of the turn',
					is_usable: 'def(class game game, class creature creature) ->bool not (q(Flying) in creature.abilities)',
					on_play: 'def(class game game, class creature creature, message.play_ability info) ->commands creature.add_ability_until_end_of_turn(q(Flying))'
				})
			)",
		}
	},
	
	"Golem Foundry": {
		name: "Golem Foundry",
		type: "creature",
		cost: 2,
		loyalty_cost: 2,
		school: 4,
		rules: "At the end of your turn, Golem Foundry gains &+;&1;&energy; if it has &0;&exhaust;.\nAt the beginning of your turn, if Golem Foundry has &3;&energy;, sacrifice it, summon a 5/5/1 'Iron Golem' creature in its place.",
		creature: {
			tags: ['Construct', 'Foundry'],
			life: 6,
			is_construct: true,
			image_num: 5,
			on_end_turn: "def(class game game) ->commands
				if(game.current_player_index = controller and not is_exhausted,
					add(me.energy, 1)
			)",
			on_begin_turn: "def(class game game) ->commands
			  if(me.energy = 3 and game.current_player_index = controller, [
				set(me.destroyed, true),
				game.summon_creature(construct('creature', {
					name: 'Iron Golem',			
					tags: ['Construct', 'Golem'],
					abilities: ['Haste'],
					school: 4, 
					attack: 10,
					controller: game.current_player_index,
					life: 10,
					move: 1,
					initiative: 20,
					image_num: 76,
					loc: me.loc,
				}))
			])",
		},
	},
	
	"Duff's Device": {
		name: "Duff's Device",
		type: "invocation",
		cost: 3,
		loyalty_cost: 3,
		school: 4,
		rules: "Creatures on Duff's Device can move to other Duff's Devices.",
		possible_targets: "def(class game game, int nplayer, [Loc] targets) -> [Loc]|null
		   if(size(targets) = 2, null,
		      filter(game.players[nplayer].summoning_locs(game, construct('creature', {name: q(Duff's Device), school: 4, is_construct: true, life: 6, image_num: 5})),
			         not (value in targets)))",
		on_play: "def(class game game, class message.play_card info) ->commands
		 map(info.targets, game.summon_construct(construct('creature', {
			name: q(Duff's Device),
			tags: ['Construct', q(Duff's Device)],
			school: 4,
			life: 6,
			controller: game.current_player,
			loc: value,
			image_num: 5,
			is_construct: true,
			static_ability_effect: q(if(creature != target and creature.controller = target.controller and creature.loc[0] = target.loc[0], 
				target.add_ability_static_duration({
					name: 'Teleport',
					cost: 3,
					school: 4,					
					is_response: true,
					exhausts_creature: true,
					rules: q(Teleport to another lane with a Duff's device in it),
					is_usable: q(def(class game game, class creature creature) ->bool
					   not ('Exhausted' in creature.status_effects)),
					possible_targets: q(def(class game game, class creature creature, [Loc] targets) ->[Loc]|null
						if(targets = [], [[construct.loc[0], creature.loc[1]] | construct <- game.creatures, 
							q(Duff's Device) in construct.tags, 
							construct.controller = game.current_player_index, 
							creature.loc[0] != construct.loc[0], 
							game.creature_at_loc([construct.loc[0], creature.loc[1]]) = null]
						)
					),
					on_play: q(def(class game game, class creature creature, message.play_ability info) ->commands set(creature.loc, info.targets[0]) asserting size(info.targets) = 1),
				})
			))
		})))"
	},

	"Maxims and Arrows": {
		name: "Maxims and Arrows",
		type: "invocation",
		cost: 2,
		loyalty_cost: 3,
		school: "@eval SAPIENZA",
		rarity: 0,
		rules: "Target creature gets a wound and &+;&1;&resist; for each &scrolls; creature you control.",
		possible_targets: "all_creatures_as_possible_targets",

		on_play_on_creature: "def(class game game, class creature target) ->commands
			[add(target.life, -scrolls), add(target.resistance, scrolls)]
			where scrolls = count(game.creatures, value.controller = game.current_player_index and (SAPIENZA in value.school))
		",
	},

	"Changing of Seasons": {
		name: "Changing of Seasons",
//		set: "core",
		rarity: 1,
		type: "invocation",
		portrait: "changing-of-seasons.png",
		cost: 6,
		loyalty_cost: 3,
		school: "@eval SCROLLS",
		rules: "Summon three cunning wisps.",
		possible_targets: "
		def(class game game, int nplayer, [Loc] targets) ->[Loc]|null
		   if(size(targets) = 3, null,
		      filter(game.players[nplayer].summoning_locs(game, construct('creature', {name: 'Cunning Wisp', school: SCROLLS, image_num: 5})),
			         not (value in targets)))",
		on_play: "def(class game game, class message.play_card info) ->commands
		  map(info.targets, game.summon_creature(
		   lib.citadel.create_creature('Cunning Wisp', {
			name: 'Cunning Wisp',
			controller: game.current_player,
			loc: value,
			portrait: 'cunningwisp.png',
			// XXX: why is this portait line ^ necessary?
		})))"
	},
}
