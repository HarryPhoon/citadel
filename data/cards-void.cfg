//   Special credit to Phanterm for these card concepts.
//
//   Void = Aether + Entropia = Void. Graveyard focus. Loves spells that
//   transport creatures to and from the graveyard -- any graveyard...
//
//     CARD                  |   CODE |    ART | FLAVOR |
//                           |        |        |   TEXT |
//     ----------------------+--------+--------+--------+
//     Shriequalize          |        |        |        |
//     Revel Witch           |        |        |        |
//     Ressurect             |        |        |        |
//     Catacombs             |        |        |        |
//     Bury Alive            |++++++++|++++++++|        |
//     Ghost Writer          |        |        |        |
//     Vengeful Posession    |        |        |        |
//     Lost Affluent         |        |        |        |
//     Gate to Nowhere       |        |        |        |
//     Zangried, First Dead  |        |        |        |
//
//   Key
//
//     '      ' -+-> CODE -+-> Completely pending.
//               `-> ART -'
//
//     '......' -+-> CODE -> Sketch, or even simply a skeleton.
//               `-> ART -> **Super early** placeholder art.
//
//     '------' -+-> CODE -> Started, early WIP, absolutely not finished.
//               `-> ART -> _Complete_ placeholder art.
//
//     '++++++' -+-> CODE -> Completed, or late WIP. Subject to changes by
//               |           peers.
//               `-> ART -> Sketch???
//
//     '######' -+-> CODE -> Accomplished, or post peer review.
//               `-> ART -> Final art???

{

"Bury Alive": {
	name: "Bury Alive",
	set: "cascadence",
	type: "spell",
	is_response: false,
	cost: 4,
	rarity: 0,
	loyalty_cost: 1,
	school: "@eval [AETHER, ENTROPIA]",
	portrait: "curse.png",  //   TODO custom art.
// 	artist: "artist_TODO",  //   TODO
// 	flavor_text: "flavor_text_TODO",  //   TODO
	rules: "Destroy target creature. It returns to its owner's hand at the end of the turn.",
	ai_flags: ["@eval AI_CARD_NEVER_TARGET_FRIENDS"],
	possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		if(targets = [], 
			[creature.loc | creature <- game.creatures, not creature.is_building, not creature.indestructible, creature.is_valid_target(game, avatar.controller, me)])
	",
	on_play: "def(class game_state game, class message.play_card info) ->commands
	[
		set(creature.destroyed, true),
		add(game.players[info.player_index].creature_avatar.triggered_abilities,
		[ construct('triggered_ability', {
			name: 'Bury Alive',
			once: true,
			unique_id: trigger_id,
//			particle_effects for owner avatar until end of turn? // TODO
			on_end_turn: q^def(class creature avatar, class game_state game) ->commands [
				if(corpse, game.return_from_graveyard_to_hand(corpse)),
				trigger(avatar),
			] where corpse = game.graveyard[^+ creature.summon_id + q^]
                        ^,
		  })
		]),
	] where creature = game.creature_at_loc_or_die(info.targets[0]),
	        trigger_id = generate_uuid()",
},

"Ghost Writer": {
	name: "Ghost Writer",
	set: "cascadence",
	rarity: 1,
	type: "creature",
	portrait: "mal-ravanal.png", //   TODO custom art.
// 	artist: "artist_TODO",  //   TODO
// 	flavor_text: "flavor_text_TODO",  //   TODO
	cost: 5,
	loyalty_cost: 0,
	school: "@eval [AETHER, ENTROPIA]",
	creature: {
		game_sounds: "ghostly_creature",
		tags: ["Undead"],
		attack: 5,
		life: 6,
		move: 1,
		triggered_abilities: [{
			name: "Tome of the Tomb",
			icon: 'trigger-death.png',
			rules: "While Ghost Writer is in your graveyard, the cost of Undead creatures is 1 less.",
			on_die: "def(class creature creature, class game_state game) ->commands
			[if('Tome of the Tomb' not in map(avatar.passive_abilities, value.name),
				add(avatar.passive_abilities,
				[ construct('passive_ability', {
					name: 'Tome of the Tomb',
//			particle_effects while a Ghost Writer is in your graveyard? // TODO			
					static_effect: q^def(class game_state game, class creature creature) ->commands
					[ if(active, game.players[creature.controller].add_static_cost_filter(
						construct('cost_filter', {
							filter_cost: 'def(class player p, class card_base card, int cost) ->int
							if(card.creature_object and (q(Undead) in card.creature_object.tags),
								max(0, cost-1),
								cost
							)',						
						})
					))] where active=filter(game.graveyard,
						value.controller=creature.controller
						and value.name='Ghost Writer')^,
				})])
			)] where avatar = game.players[creature.controller].creature_avatar",
		}],
	},
},

}
