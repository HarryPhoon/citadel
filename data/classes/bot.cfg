{
	properties: {
		session_id: { variable: true, default: 0 },

		score_summons: "def(game, card, loc)
		 (
		 	//score for there being an unowned glyph with no other creature
			//claiming it.
			if(nearest_unowned_glyph != null,
			   if(find(game.creatures,
					   value.loc[0] = loc[0] and
					   value.loc[1] >= nearest_unowned_glyph[1]) = null,
					   nearest_unowned_glyph[1]*10, 0), 0)
		 )
			  where nearest_glyph = choose(filter(keys(game.villages), value[0] = loc[0]), value[1])
			  where nearest_unowned_glyph = choose(filter(keys(game.villages), value[0] = loc[0] and game.villages[value].owner != game.current_player), value[1])
		",

		playable_creatures: "def(game) filter(player.hand, value.type = 'creature' and player.can_afford(value.school, value.cost, value.loyalty_cost) and (value.is_response or game.response_phase = 0) and value.possible_targets(game, game.nplayer, [])) where player = game.players[game.nplayer]",

		possible_summons: "def(game) fold(map(playable_creatures(game),
		   map(value.possible_targets(game, game.nplayer, []),
		       [context.value, value])),
			   a+b, [])",

		best_summons: "def(game) choose(possible_summons(game),
		          score_summons(game, value[0], value[1]))",

		handle_message: "def(message, bot) [
		  if(message.type = 'game' and message.state.players[message.state.nplayer].deck = null,
			//submit our deck to the server.
			add(bot.script, [{
				session_id: session_id,
				send: {
					type: 'submit_deck',
					deck: get_document('data/ai-deck.cfg'),
				}
			}]),

			if(message.type = 'game' and message.state.nplayer = message.state.current_player,
			     if(playable_creatures(message.state),
				  add(bot.script, [{
					session_id: session_id,
					send: {
						type: 'play_card',
						index: index(hand, summons[0])
						        asserting find(hand, summons[0]) | summons,
						targets: [summons[1]],
					}
				where summons = best_summons(message.state)
				where hand = message.state.players[message.state.nplayer].hand,
				  }]),
				  add(bot.script, [{
					session_id: session_id,
					send: {
						type: 'end_turn'
					}
				  }])),
				  add(bot.script, [{
					session_id: session_id,
					send: {
						type: 'request_updates'
					}
				  }])
			))
		]",
	}
}
