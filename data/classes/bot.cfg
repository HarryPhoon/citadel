{
	properties: {
		session_id: { variable: true, default: 0 },

		args: { variable: true, type: "map" },

		score_land: "def(class game game, map play_info, class card card, Loc loc) ->int
		(
			0
		)",

		score_summons: "def(class game game, map play_info, class card card, Loc loc) ->int
		 (
		 	//score for there being an unowned glyph with no other creature
			//claiming it.
			if(nearest_unowned_glyph != null,
			   if(find(game.creatures,
					   value.loc[0] = loc[0] and
					   value.loc[1] >= nearest_unowned_glyph[1]) = null,
					   nearest_unowned_glyph[1]*10, 0), 0)
		 )
			  where nearest_glyph = choose([village.loc | village <- game.villages, village.loc[0] = loc[0]], value[1])
			  where nearest_unowned_glyph = choose([village.loc | village <- game.villages, village.loc[0] = loc[0], village.controller = -1], value[1])
		",

		score_spell: "def(class game game, map play_info, class card card, [Loc] targets) ->int card.ai_score(game, targets)",

		score_play: "def(class game game, map play_info, class card card, [Loc] targets) if(card.creature and size(targets) = 1,
		   if(card.creature.is_construct,
		    score_land(game, play_info, card, targets[0]),
		    score_summons(game, play_info, card, targets[0])
		   ),
		  score_spell(game, play_info, card, targets))",

		calculate_card_play: "def(class game game, map play_info, class card card, [Loc] current_targets=[]) -> class bot.CardPlay|null
		  if(targets = [], null,
			if(targets = null, construct('bot.CardPlay', {
					card: card,
					targets: current_targets,
					score: score_play(game, play_info, card, current_targets),
					game: game,
				}),
				calculate_card_play(game, play_info, card, current_targets + [best_target])
			  where best_target = choose(targets, score_play(game, play_info, card, current_targets + [value]))
			))
		  where targets = card.possible_targets(game, game.nplayer, current_targets)
		",

		calculate_discard: "def(class game game) -> int|null

		if(game.in_response_phase = false and size(player.hand) > player.calculate_card_draw(game) - 2,
			if(most_expensive != null and player.calculate_cost(most_expensive) > player.calculate_income(game)+1,
				index(player.hand, most_expensive))
			where most_expensive = choose(player.hand, player.calculate_cost(value))
		)
		
		where player = game.players[game.nplayer]",

		get_best_play: "def(class game game) -> class bot.CardPlay|null
		 if(plays,
		 if(best_combo and size(best_combo) >= 1,
			plays[best_combo[0]], null)
		  where best_combo = choose(combinations, fold(map(value, decimal<- plays[value].score), a+b))
		  where player = game.players[game.nplayer]
		  where combinations = playable_combinations(game, plays)
		 )
		  where plays = calculate_plays(game, play_info)
		  where play_info = calculate_play_info(game)",

		calculate_plays: "def(class game game, map play_info, [class card]|null hand=null)
		           ->{class card -> class bot.CardPlay}|null
		    fold(filter(map(playable_cards(game, hand), if(info, {(value): info}, null) where info = calculate_card_play(game, play_info, value)), value != null), a+b asserting a and b)",

		calculate_play_info: "def(class game game) ->map {}",

		playable_combinations: "def(class game game, map plays_map, [class card] play=[], int existing_cost=0) -> [[class card]]
		   map(candidates, play + [value]) + fold(map(candidates, playable_combinations(game, plays_map, play + [value], existing_cost + player.calculate_cost(value))), a+b)
		   where candidates = [class card]<- filter(player.hand[starting_index:],
		    (not (value in play)) and
		    (player.resources - existing_cost) >= player.calculate_cost(value) and
			plays_map[value] != null and
			value.possible_targets(game, game.nplayer, []) != [])
		   where starting_index = if(play = [], 0, index(player.hand, play[size(play)-1])+1)
		   where player = game.players[game.nplayer]
		",

		playable_cards: "def(class game game, [class card]|null hand) ->[class card]
		  filter(player_hand,
		   player.resources >=
		   player.actual_cost(value.school, value.cost, value.loyalty_cost) and
		   (value.is_response or (not game.in_response_phase)) and
		   value.possible_targets(game, game.nplayer, []) != [])
		        where player_hand = if(hand != null, hand, player.hand)
		        where player = game.players[game.nplayer]",

		//utilities
		lane_has_neutral_towers: "def(class game game, int nlane) ->bool find(game.creatures, value.loc[0] = nlane and value.controller = -1) != null",

		lane_has_neutral_glyphs: "def(class game game, int nlane) ->bool find(game.constructs, value.loc[0] = nlane and value.controller = -1) != null",
		lane_has_enemy_glyphs: "def(class game game, int nlane) ->bool find(game.constructs, value.loc[0] = nlane and value.controller != -1 and value.controller != game.nplayer) != null",
		lane_has_my_glyphs: "def(class game game, int nlane) ->bool find(game.constructs, value.loc[0] = nlane and value.controller = game.nplayer) != null",

		lane_empty: "def(class game game, int nlane) find(game.creatures, value.loc[0] = nlane) = null",
		enemy_creatures_in_lane: "def(class game game, int nlane) ->[class creature] filter(game.creatures, value.loc[0] = nlane and value.controller != -1 and value.controller != game.current_player_index)",
		friendly_creatures_in_lane: "def(class game game, int nlane) ->[class creature] filter(game.creatures, value.loc[0] = nlane and value.controller = game.current_player_index)",
		enemy_constructs_in_lane: "def(class game game, int nlane) ->[class creature] filter(game.constructs, value.loc[0] = nlane and value.controller != -1 and value.controller != game.current_player_index)",
		friendly_constructs_in_lane: "def(class game game, int nlane) ->[class creature] filter(game.constructs, value.loc[0] = nlane and value.controller = game.current_player_index)",

		is_phase_my_combat: "def(class game game) ->bool
		  game.precombat_phase > 0 and
		  (game.nplayer = game.current_player_index)",

		is_phase_their_combat: "def(class game game) ->bool
		  game.precombat_phase > 0 and
		  (game.nplayer != game.current_player_index)",

		is_phase_my_before_combat: "def(class game game) ->bool
		  (not game.in_response_phase) and game.has_unresolved_combat",

		is_phase_my_after_combat: "def(class game game) ->bool
		  (not game.in_response_phase) and game.has_unresolved_combat = false and
		  game.nplayer = game.current_player_index",

		is_in_response_to_their_spell: "def(class game game) ->bool
		  game.stack != []",

		request_updates: "def(object bot, int|null state_id=null) -> commands
		[
		  debug('BOT: request_updates: ' + str(session_id)),
		  add(bot.script, [{
			session_id: session_id,
			send: {
				type: 'request_updates',
				state_id: if(state_id != null, state_id, _last_state_id),
			}
		  }])
		]
		",

		_last_state_id: { default: -1, type: "int" },

		handle_message: "def(map message, object bot)
		[
			debug('BOT: FFL message type: ' + message.type),
			if(message.type = 'game',
			   handle_game_message(message, bot),
			   request_updates(bot)

			)
		]
		",

		handle_game_message: "def(class message.game message, object bot) [
		  set(_last_state_id, message.state_id),
		  debug('BOT: handle game message: ' + str(message.state_id)),
		  if(message.state.players[message.state.nplayer].deck_submitted = false asserting message.state.players | message,
			[
			debug('BOT SUBMIT DECK: ' + deck),
			//submit our deck to the server.
			add(bot.script, [{
				session_id: session_id,
				send: {
					type: 'submit_deck',
					deck: deck,
				}
			}])
			],

			if(choice and choice.player_index = message.state.nplayer,
			send_moves(message, bot, [{
				type: 'make_choice',
				choice: 0,
			}]),

			if(message.state.nplayer = message.state.current_player,
				handle_game_message_internal(message, bot),
				request_updates(bot, message.state_id)

			)) where choice = message.state.current_choice)
		]",

		handle_game_message_internal: "def(class message.game message, object bot)
		    if(summons and summons.score > 0 and (not should_wait(message.state, summons)),
				  send_moves(message, bot,
					[
						{
							type: 'play_card',
							index: hand_index,
							player_index: message.state.nplayer,
							targets: summons.targets,
						}
					]
				where hand_index = (index(player.hand, summons.card) asserting find(player.hand, value = summons.card) | summons)
				  ),

				  if(discard_card != null,
				     send_discard(message, bot, discard_card),
				     end_turn(message, bot)
				  ) where discard_card = calculate_discard(message.state)
				  )
				where summons = get_best_play(message.state)
				where player = message.state.players[message.state.nplayer],
		",

		should_wait: "def(class game game, class bot.CardPlay best_play) ->bool
		  if(is_phase_my_after_combat(game), false, choose_to_wait(game, class card<- best_play.card))
		",

		choose_to_wait: "def(class game game, class card card) ->bool
		  false
		",

		send_discard: "def(class message.game message, object bot, int card_index) send_moves(message, bot, [{
			type: 'discard_card',
			player_index: message.state.nplayer,
			index: card_index,
		}])",

		end_turn: "def(class message.game message, object bot) send_moves(message, bot, [{type: 'end_turn', player_index: message.nplayer, keep: []}])",

		send_moves: "def(class message.game message, object bot, [map] moves) [
				  add(bot.script, [{
					session_id: session_id,
					send: {
						type: 'moves',
						state_id: message.state_id,
						moves: moves
					}
				  }])
		]",

		deck: "[string]<- get_document('data/ai-deck.cfg')"
	},

	classes: {
		CardPlay: {
			card: { type: 'class card' },
			targets: { type: '[Loc]' },
			score: { type: 'int' },
			game: { type: 'class game' },
		}
	},
}
