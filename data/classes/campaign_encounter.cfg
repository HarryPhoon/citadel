//This class contains the data for an encounter within the campaign
//mode of the game. An encounter consists of an image, some text,
//and options for the player. When the player selects an option,
//the choose_option function will execute, which will implement the
//outcome for that option.
{
	title: { type: "string" },

	//The image to display. TODO: We might want to have image manipulation
	//like panning/zooming/animation/color modification/etc.
	image: { type: "string" },

	image_focus_x: { type: "decimal", default: 400.0 },
	image_focus_y: { type: "decimal", default: 200.0 },
	image_zoom: { type: "decimal", default: 1.0 },

	next_image_focus_x: { type: "null|decimal" },
	next_image_focus_y: { type: "null|decimal" },
	next_image_zoom: { type: "null|decimal" },

	image_animate_time: { type: "int", default: 20 },
	image_animate_easing: { type: "null|function(decimal)->decimal" },

	image_transition: { type: "null|enum {fade}", init: "enum fade" },
	image_transition_time: { type: "int", default: 20 },

	//The main text to display.
	text: { type: "string", default: "" },

	//The scenario to make the player face. This will generally start as
	//null, set it to a scenario in choose_option when the option they
	//have chosen will cause them to enter a fight.
	scenario: { type: "null|Scenario" },

	//A list of the possible options the player can click.
	options: { type: "[string]" },

	//A tag we can easily use for the current state. Allows us to distinguish
	//between different options where needed.
	tag: { type: "string", default: "start" },

	//any random vars to store.
	vars: { type: "{string -> any}", default: {} },

	//Set this to true in choose_option when the encounter is done
	//and should be closed.
	finished: { type: "bool", default: false },

	quest_id: { type: "null|string" },

	min_quest_progress: { type: "int", default: 0 },
	max_quest_progress: { type: "int", default: 100 },

	filter_encounter: "def() ->bool true",

	//The function that controls what happens when an encounter option
	//is chosen. It can modify the image/text/scenario/options/finished fields
	//as needed. It gets access to the title_controller object which has
	//access to everything in the game so it can modify whatever it needs
	//to to get its thing done.
	choose_option: "def(obj title_controller ctrl, string option) ->commands
	  null
	",

	win_battle: "def(obj title_controller ctrl) ->commands
	  null
	",

	lose_battle: "def(obj title_controller ctrl) ->commands
	  null
	",
}
