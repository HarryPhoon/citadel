{
	properties: {
		name: { type: "string" },
		loc: { type: "Loc" },
		borders: { type: "[Loc]" },
		radius: { type: "int", default: 12 },
		music: { type: "string|null" },

		generate_random_encounter: "def() ->null|Scenario
			null
		",
		encounter_chance: { type: "decimal", default: 0.0 },

		player_move: "def(obj story_campaign_controller controller, Loc loc) ->commands [
			if(controller.get_location(loc) = null and find(controller.get_adjacent_locs_on_board(loc), controller.get_location(value) != null) = null and (1d1000)*0.001 < encounter_chance,
			  if(encounter,
				if(locs,
					(
				    (
					controller.add_location(
					{
						title: q(Encounter),
						flavor_text: q(),
						_avatar: encounter.portrait,
						_avatar_scale: encounter.portrait_scale,
						_avatar_focus: encounter.portrait_translate,
						loc: target_loc,
						encounter: encounter asserting encounter is Scenario,
						info: {
							handle_defeat: q(def(obj story_campaign_controller controller) ->commands controller.remove_location(_obj.loc)),
						}
					}
					)
					;
					controller.force_fight(target_loc, Scenario<- location.encounter, location.info)
					 where location = obj campaign_location<- controller.get_location(target_loc)
					)
					asserting controller.get_location(target_loc) = null
					)
					where target_loc = choose(locs)
				)
				where locs = filter(controller.get_adjacent_locs_on_board(loc), controller.get_location(value) = null and find(controller.get_adjacent_locs_on_board(value), controller.get_location(value) != null) = null and value != controller.player.previous_loc)
			  )
				where encounter = generate_random_encounter()
			)
		]",
	}
}
