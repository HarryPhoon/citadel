{
properties: {
	base_score: "int :: 0",
	win_fight_modifier: "int :: 10",
	draw_fight_modifier: "int :: 0",
	lose_fight_modifier: "int :: -10",
	lane_with_ally: "int :: -10",
	empty_lane: "int :: 0",
	lane_length_modifier: "int :: 0",
	lane_ally_seal_modifier: "int :: 0",
	lane_enemy_seal_modifier: "int :: 0",

	score: "def(class game_state game, map play_info, class card card, Loc loc) ->int
		base_score +
		if(enemy != null,
		   if(outcome < 0,
		      lose_fight_modifier,
			  outcome > 0,
			  win_fight_modifier,
			  draw_fight_modifier
		   ) where outcome = lib.bot_utils.fight_outcome(game, card.creature_object asserting card.creature_object != null, enemy),
		0) +
		if(friend != null, lane_with_ally, 0) +
		if(enemy = null and friend = null, empty_lane, 0) +
		game.lanes[loc[0]].length*lane_length_modifier +
		game.trophies[game.current_team_index%size(game.trophies)][loc[0]]*lane_ally_seal_modifier +
		game.trophies[game.current_team_index%size(game.trophies)][loc[0]]*lane_enemy_seal_modifier
		where enemy = lib.bot_utils.enemy_in_lane(game, loc)
		where friend = lib.bot_utils.ally_in_lane(game, loc)
	",
}
}
