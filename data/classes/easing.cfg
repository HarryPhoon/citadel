{
	points: {
		type: "[CurvePoint]",
		init: "[{x: 0.0, y: 0.0}, {x: 1.0, y: 1.0}]",
	},

	_cache: { type: "object", init: "create_cache(1)" },
	_raw_points: "[decimal] :: query_cache(_cache, null, points_along_curve(map(points, if(value.t = null, [value.x,value.y,_get_tangent(index)], [value.x,value.y,value.t])), 256))",

	_get_gradient: "def(CurvePoint a, CurvePoint b) ->decimal
		(b.y - a.y) / (b.x - a.x)
	",

	_get_tangent: "def(int n) ->decimal
	if(grad_a is decimal and grad_b is decimal, (grad_a + grad_b)/2.0, grad_a is decimal, grad_a, grad_b is decimal, grad_b, 0.0)
		where grad_a = if(n > 0, _get_gradient(points[n-1], points[n]), null)
		where grad_b = if(n < size(points)-1, _get_gradient(points[n], points[n+1]))
	",

	fn: "def(decimal r) ->decimal
	if(r < 0.0 or r > 1.0, 0.0,
		p[bot]*ratio + p[top]*(1.0-ratio)
	)
		where ratio = pos - bot
		where top = ceil(pos)
		where bot = floor(pos)
		where pos = r*decimal(size(p)-1)
		where p = _raw_points
	",

	curves: "[string] :: map(_curves, key)",
	get_curve: "def(string name) ->class easing
		class easing<- _curves[name]
	",

	get: "def(string name) ->function(decimal)->decimal
		get_curve(name).fn
	",

	add_curve: "def(string name, [CurvePoint] curve) ->commands
		_write_curves(_curves + {(name): construct('easing', {points: curve})})
	",

	_revision: { type: "int", default: 1 },

	_curves: "{string -> class easing} ::
	query_cache(global_cache(1), _revision,
	{string -> class easing}<-
	fold(
	map(
		{string -> [CurvePoint]}<- (get_document('data/easings.cfg', ['null_on_failure']) or {}),
		{(key): construct('easing', {points: value})}
	), a+b, {})
	)
	",

	_write_curves: "def({string -> class easing} curves) ->commands
	    add(_revision, 1);
		write_document('data/easings.cfg', {string -> [CurvePoint]} <- fold(map(curves, {(key): value.points}), a+b, {}), ['game_dir'])
	",
}
