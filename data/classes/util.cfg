{

properties: {
	tokenize_search_terms: 'def(string s) ->[string]
		if(s = q(), [],
		   regex_match(s, q(^ +.*)),
		   tokenize_search_terms(regex_replace(s, q(^ +), q())),

		if(quote_match != null,
		   [quote_match[0]] + tokenize_search_terms(quote_match[1]),

		   if(match != null,
			[match[0]] + tokenize_search_terms(match[1]),
			[]
		   )

		   where match = null|[string]<- regex_match(s, q(^([^ ]+)(.*)))
		)

		where quote_match = null|[string]<- regex_match(s, q(^"([^"]*)"(.*)))
		)

	',

	utf8_to_ascii: "def(string s) ->string lib.gui.utf8_to_ascii(s)",
	ascii_to_markup: "def(string s) ->string lib.gui.ascii_to_markup(s)",
},

classes: {
	playing_activated_ability: {
		creature: { type: "class creature" },
		ability: { type: "class card_base" },
	},
}
}
