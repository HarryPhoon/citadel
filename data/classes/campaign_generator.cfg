{
	//Called when we want to generate a new encounter. Right now we
	//just choose a random scenario from the list of scenarios in
	//data/encounters/encounters.cfg.
	//In the future we want to do things like avoid
	//repeating the same encounter, look at the user's account details
	//for level info etc. But for now it can be simple.
	generate_encounter: "def() ->class campaign_encounter
	if(MODULE_OPTIONS.campaign_encounter,
		find_or_die(possible_encounters, value.title = MODULE_OPTIONS.campaign_encounter),

		get_modified_object(choose(mundane_encounters*2 + quest_encounters*(1+_streak_mundane_encounters)), def(class campaign_encounter e)->commands null)
		where quest_encounters = filter(filtered_encounters, value.quest_id != null)
		where mundane_encounters = if(MODULE_OPTIONS.campaign_quest != null, [], filter(filtered_encounters, value.quest_id = null))
		where filtered_encounters =
		  filter(possible_encounters,
		       (MODULE_OPTIONS.campaign_quest = null or MODULE_OPTIONS.campaign_quest = value.quest_id) and
		       (
		         value.quest_id = null or
				 (
				  progress >= value.min_quest_progress and progress <= value.max_quest_progress
				  
				  where progress = (lib.citadel.campaign_quest_progress[value.quest_id] or 0)
				 )
		       )
			   and value.filter_encounter()
		  )
	)
	",

	_streak_mundane_encounters: { default: 0, type: "int" },

	record_enter_encounter: "def(class campaign_encounter encounter) ->commands [
		if(encounter.quest_id = null,
		   add(_streak_mundane_encounters, 1),
		   set(_streak_mundane_encounters, 0)
		)
	]",

	possible_encounters: "[class campaign_encounter] :: query_cache(global_cache(1), null, map([map]<- get_document('data/encounters/encounters.cfg'), construct('campaign_encounter', value)))",
}
