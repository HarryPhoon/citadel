/**

Crypt 
 -Played spells
 -Lands that were destroyed or played on top of by another land 
 -Creatures that died

Disappear from the game
 -Discarded cards
 -Creatures that ascend
 -Obliterated
 -Starting creatures/lands that started without a controller, when destroyed
 -Dead creatures/lands that had no card_name (There should be none of these)

*/

{properties: {
	list:   { variable: true, type: "[class crypt.entry]", default: [], access: "private"  },
	add_creature: "def(class creature creature) ->commands
		if((not creature.obliterated) and creature.summoner >= 0 and creature.card_name,
			add(me.list, [ construct('crypt.entry', {
				card: lib.citadel.create_card(creature.card_name),
				creature: creature,
				owner: creature.summoner
			})])
		)",
	add_played_card: "def(class message.play_card info) ->commands
		if(not info.ability,
			me.add_card( class card<- card, info.player_index )
		) where card = class card_base<- info.ability_obj or info.card",
	add_card: "def(class card card, int owner) ->commands
		if((not card.creature) and owner >= 0,
			add(me.list, [ construct('crypt.entry', {
				card: card,
				owner: owner
			})])
		)",
	cards_of: "def(class player player) ->[class card]
		[v.card | v<- me.list, player.omnigraveyard or v.owner=player.player_index]",
}, classes: {
	entry: {properties: {
		card:     { variable: true, type: "class card" }, // this may not have the same _uuid as original
		creature: { variable: true, type: "null|class creature", default: null  }, // dead creature, if any
		owner:    { variable: true, type: "int"  }, // whose crypt is this in? 
	                                                    // typically the one whose deck the card came from
	}}
}}

