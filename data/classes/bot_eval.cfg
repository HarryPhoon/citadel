{
	bases: ["bot"],

	properties: {
	get_possible_plays_for_card: "def(class game_state game, class card card, [Loc] current=[]) ->[PossiblePlay]
		if(possible = null, [{card: card, targets: current}],
		   fold(map(possible, get_possible_plays_for_card(game, card, current + [value])), a+b, []))

		where possible = if(
		   //for lands, we only want the AI to summon near our side of the board.
		   all_possible != null and card.creature and card.creature.is_construct and current = [],
		   [Loc] :: filter(all_possible, find(all_possible, value[0] = context.value[0] and if(game.nteam = 0, value[1] < context.value[1], value[1] > context.value[1])) = null),

		   //if the card has flags which easily filter out targets do that here.
		   all_possible != null and card.ai_flags,
		   
		   filter_save
		   where filter_save = if(AI_CARD_USE_ONLY_TO_SAVE in card.ai_flags, if(game.stack = [], [], filter(filter_friends, target_creature != null and target_creature.controller = game.nplayer and find(game.stack, (context.value in value.targets) and value.player_index != game.nplayer) where target_creature = game.creature_at_loc(value))), filter_friends)
		   where filter_friends = if(AI_CARD_NEVER_TARGET_FRIENDS in card.ai_flags, filter(filter_enemies, target_creature = null or target_creature.controller != game.nplayer where target_creature = game.creature_at_loc(value)), filter_enemies)
		   where filter_enemies = if(AI_CARD_NEVER_TARGET_ENEMIES in card.ai_flags, filter(all_possible, target_creature = null or target_creature.controller = game.nplayer where target_creature = game.creature_at_loc(value)), all_possible),

		   all_possible)
		where all_possible = card.possible_targets(game, game.players[game.nplayer].creature_avatar, current)
	",

	get_candidate_plays_for_card: "def(class game_state game, class card card) ->[{score: int, play: PossiblePlay}]
		if(possible = [], [], [choose(scored_plays, value.score)])
		where scored_plays = map(possible, {score: eval_game_state(
		    if(card.ai_eval_end_of_turn,
			   _advance_to_end(play_state), play_state)
			   where play_state = simulate_play_card(game, card, value.targets)
		), play: value})
		where possible = get_possible_plays_for_card(game, card)
	",

	get_possible_plays_for_ability: "def(class game_state game, class creature creature, class card_base ability, [Loc] current=[]) ->[PossiblePlay]
	  if(possible = null, [{ability: ability, creature: creature, targets: current}],
		 fold(map(possible, get_possible_plays_for_ability(game, creature, ability, current + [value])), a+b, []))
		where possible = ability.possible_targets(game, creature, current)
	",

	get_candidate_plays_for_ability: "def(class game_state game, class creature creature, class card_base ability) ->[{score: int, play: PossiblePlay}]
		if(possible = [], [], [choose(scored_plays, value.score)])
		where scored_plays = map(possible, {score: eval_game_state(
			if(ability.ai_eval_end_of_turn,
			   _advance_to_end(play_state), play_state)
				where play_state = simulate_play_ability(game, creature, ability, value.targets)
		), play: value})
		where possible = get_possible_plays_for_ability(game, creature, ability)
	",

	get_possible_plays: "def(class game_state game) ->[PossiblePlay]
		map(sort(fold(map(unique_playable, get_candidate_plays_for_card(game, value)), a+b, []), a.score > b.score)[:4], value.play) +
		map(sort(fold(map(unique_abilities, get_candidate_plays_for_ability(game, value.creature, value.ability)), a+b, []), a.score > b.score)[:4], value.play)

		where unique_playable = filter(playable, find(playable, value.name = context.value.name and value > context.value) = null)
		where playable = playable_cards(game)

		where unique_abilities = playable_abilities(game)
	",

	choose_best_play: "def(class game_state game, int ndepth=0) ->{score: int, play: PossiblePlay|null}
	    dump(['CHOOSE FROM:', timed_out, if(res.play and (PossiblePlay<- res.play).card, [(class card<- (PossiblePlay<- res.play).card).name, (PossiblePlay<- res.play).targets], null), res.score, map(options, {score: value.score, name: if(play != null and play.card != null, play.card.name)} where play = null|PossiblePlay<- value.play)], res)
	    
		where res = choose(options, if(value.play = null, 10, 0) + (int<- value.score))
		
		where options = if(ndepth >= 3 or timed_out, [], map(get_possible_plays(game), { play: value, score: choose_best_play(if(value.card != null, simulate_play_card(game, value.card, value.targets), simulate_play_ability(game, value.creature asserting value.creature != null, value.ability asserting value.ability != null, value.targets)), ndepth+1).score })) + [pass_move]
		where pass_move = { play: null, score: if(is_phase_after_combat(game), eval_game_state(_advance_to_end(game)), choose_best_play(_do_end_turn_until_my_next_phase(game), ndepth).score) }
		where timed_out = has_timed_out()
	",

	_advance_to_end: "def(class game_state game) ->class game_state
		_advance_to_end_internal(game, game.nturn+2)
	",

	_advance_to_end_internal: "def(class game_state game, int nturn_target) ->class game_state
		if(game.nturn < nturn_target, _advance_to_end_internal(_do_end_turn(game), nturn_target), game)
	",

	_do_end_turn_until_nplayer: "def(class game_state game, int nplayer) ->class game_state
	if(game.nplayer = nplayer, game, _do_end_turn_until_nplayer(_do_end_turn(game), nplayer))
	",

	_do_end_turn_until_my_next_phase: "def(class game_state game) ->class game_state
		_do_end_turn_until_nplayer(_do_end_turn(game), game.nplayer)
	",

	_do_end_turn: "def(class game_state game) ->class game_state
		get_modified_object(game, def(class game_state g) g.end_turn())
	",

	simulate_play_card: "def(class game_state game, class card card, [Loc] targets) ->class game_state
		get_modified_object(game, def(class game_state g) ->commands [
		  g.players[g.nplayer].spend(card),
		  set(g.players[g.nplayer].hand, filter(g.players[g.nplayer].hand, value != game_card) where game_card = find(g.players[g.nplayer].hand, value.name = card.name)),
		  g.resolve_card(
		    construct('message.play_card', {
				index: 0,
				player_index: g.current_player_index,
				card: card,
				targets: targets,
			}))
		])
	",

	simulate_play_ability: "def(class game_state game, class creature creature, class card_base ability, [Loc] targets) ->class game_state
		get_modified_object(game, def(class game_state g) ->commands [
			g.players[g.nplayer].spend(ability),
			g.resolve_card(
				construct('message.play_card', {
					player_index: g.current_player_index,
					creature: creature.summon_id,
					ability: ability.name,
					ability_obj: ability,
					targets: targets,
				}))
		])
	",

	get_best_play: "def(class game_state game) -> class bot.CardPlay|null
	if(game.in_unrespondable_phase = false,
	    if(play.play = null, null,
		construct('bot.CardPlay', {
		   card: play.play.card,
		   creature: play.play.creature,
		   ability: play.play.ability,
		   targets: play.play.targets,
		   score: 100,
		   game: game,
		}))
		where play = eval_with_timeout(500, choose_best_play(game))
	)
	",

	eval_game_state: "def(class game_state game) ->int
		eval_player(game, game.players[game.nplayer]) -
		eval_player(game, game.players[(game.nplayer+1)%2]) +
		sum(map(game.creatures, if(game.team_index(value.controller) = game.nplayer, 1, -1) * eval_creature(game, value))) +
		sum(map(game.constructs, if(game.team_index(value.controller) = game.nplayer, 1, -1) * eval_land(game, value))) +
		eval_loyalty(game, game.players[game.nplayer])
	",

	eval_player: "def(class game_state game, class player player) ->int
		if(player.life <= 0, -1000, 0) +
		if(player.life <= 20, player.life*15, player.life*6+180) +
		player.calculate_income(game)*15 +
		player.calculate_card_draw(game)*15 +
		player.resources*1
	",

	eval_land: "def(class game_state game, class creature creature) ->int
		if(creature.base_card, int<- creature.base_card.cost, 1)*10 +
		count(game.creatures, value.loc[0] = creature.loc[0] and value.controller = creature.controller) -
		count(game.creatures, value.loc[0] = creature.loc[0] and value.controller != creature.controller) -
		count(game.constructs, value != creature and value.loc[0] = creature.loc[0])
	",
	
	eval_loyalty: "def(class game_state game, class player player) ->int
		sum(map([GAEA,SAPIENZA,AETHER,MATERIA,ENTROPIA],if(player.get_resource_level(value) = 0 , 0,
														   player.get_resource_level(value) = 1 , 10,
														   player.get_resource_level(value) = 2 , 20,
														   player.get_resource_level(value) = 3 , 25,
																								  30)))
	",

	eval_creature: "def(class game_state game, class creature creature) ->int
	dump(['EVAL CREATURE', creature.name, creature.loc, result], result)
	where result =
		creature.life*4 + creature.attack*6 +
		if('Poisoned' in creature.status_effects, -8, 0) +
		if(enemy != null, lib.bot_utils.fight_outcome(game, creature, enemy)*10, 0) +

		//clear path to trophy
		if(creature.move > 0 and find(game.creatures, value.loc[0] = creature.loc[0] and sign(value.loc[1] - creature.loc[1]) = creature.direction_moving) = null,
		 (enemy_trophy*if(space_from_end = 0, 6, space_from_end = 1, 5, space_from_end = 2, 3, 2)
		 where space_from_end = if(creature.direction_moving < 0, creature.loc[1] - lane.begin, lane.begin + lane.length - creature.loc[1] - 1)),
		 0)
		
		  where lane = game.lanes[creature.loc[0]]
		  where enemy_trophy = game.trophies[(creature.controller+1)%2][creature.loc[0]]
		  where enemy = find(game.creatures, value.loc[0] = creature.loc[0] and game.team_index(value.controller) != game.team_index(creature.controller))
	",


	auto_discard_card: "def(class game_state game, class card card) ->bool
	if((AI_CARD_BUILD_DEVOTION in card.ai_flags) and
	   player.get_resource_level(card.first_school) > 2, true,
	   false
	)
	where player = game.players[game.nplayer]
	",

	card_keep_priority: "def(class game_state game, class card card) ->int
	//Spells that save a creature get high priority if we can cast them,
	//and we have a creature, very low priority otherwise.
	if(AI_CARD_SAVES in card.ai_flags,
	   if(player.resources >= cost and count(game.creatures, value.controller = game.nplayer) >= 3, 10, -10), 

	   //Creatures that are castable next turn get high priority.
	   //The more expensive the creature the higher priority.
	   //Uncastable creatures get low priority.
	   card.creature_object != null,
	   if(cost <= player.calculate_income(game)+1, cost, 0),
	   0
	)

	where cost = player.calculate_cost(card)
	where player = game.players[game.nplayer]
	",

	calculate_discard: "def(class game_state game) ->int|null
	if(player.hand = [] or me.no_discards, null,
	   auto_discard != null, index(player.hand, auto_discard),
	  if(size(player.hand) >= player.calculate_card_draw(game)-1 or
		 income <= 5 and find(player.hand, value.creature_object != null and value.cost <= income+1) = null,
	     index(player.hand, choose(player.hand, -10*card_keep_priority(game, value) + (-1)*player.calculate_cost(value))),
	
	  if(player.calculate_cost(most_expensive) >= income+2 or
	     count(player.hand, value.type != 'spell') + (player.calculate_card_draw(game) - size(player.hand)) < 2,
	   index(player.hand, most_expensive)
	  ))
		where most_expensive = choose(player.hand, player.calculate_cost(value))
		where income = player.calculate_income(game)
		where ncards = player.calculate_card_draw(game)
	)   where auto_discard = find(player.hand, auto_discard_card(game, value))
	    where player = game.players[game.nplayer]
	",

	calculate_targets_for_free_ability: "def(class game_state game, class creature creature, class card_base ability, bool is_mandatory) -> null|[Loc]
		if(plays, if(best_play.score > eval_game_state(_advance_to_end(game)) or is_mandatory, best_play.play.targets) where best_play = choose(plays, value.score))
		where plays = get_candidate_plays_for_ability(game, creature, ability)
	",

	_simulate_choice: "def(class game_state game, class choice choice, int nchoice) ->class game_state
		get_modified_object(game, def(class game_state g) g.make_choice(nchoice, choice.get_tag_from_index(nchoice)))
	",

	make_choice: "def(class game_state game, class choice choice) ->int
	choose(range(size(choice.options)), eval_game_state(_simulate_choice(game, choice, value)))
	",
	},
}
