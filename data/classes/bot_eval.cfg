{
	bases: ["bot"],

	properties: {
	get_possible_plays_for_card: "def(class game game, class card card, [Loc] current=[]) ->[PossiblePlay]
		if(possible = null, [{card: card, targets: current}],
		   fold(map(possible, get_possible_plays_for_card(game, card, current + [value])), a+b, []))
		where possible = card.possible_targets(game, game.players[game.nplayer].creature_avatar, current)
	",

	get_candidate_plays_for_card: "def(class game game, class card card) ->[{score: int, play: PossiblePlay}]
		if(possible = [], [], [choose(scored_plays, value.score)])
		where scored_plays = map(possible, {score: eval_game_state(
		    if(card.ai_eval_end_of_turn,
			   _advance_to_end(play_state), play_state)
			   where play_state = simulate_play_card(game, card, value.targets)
		), play: value})
		where possible = get_possible_plays_for_card(game, card)
	",

	get_possible_plays_for_ability: "def(class game game, class creature creature, class activated_ability ability, [Loc] current=[]) ->[PossiblePlay]
	  if(possible = null, [{ability: ability, creature: creature, targets: current}],
		 fold(map(possible, get_possible_plays_for_ability(game, creature, ability, current + [value])), a+b, []))
		where possible = ability.possible_targets(game, creature, current)
	",

	get_candidate_plays_for_ability: "def(class game game, class creature creature, class activated_ability ability) ->[{score: int, play: PossiblePlay}]
		if(possible = [], [], [choose(scored_plays, value.score)])
		where scored_plays = map(possible, {score: eval_game_state(
			if(ability.ai_eval_end_of_turn,
			   _advance_to_end(play_state), play_state)
				where play_state = simulate_play_ability(game, creature, ability, value.targets)
		), play: value})
		where possible = get_possible_plays_for_ability(game, creature, ability)
	",

	get_possible_plays: "def(class game game) ->[PossiblePlay]
		map(sort(fold(map(unique_playable, get_candidate_plays_for_card(game, value)), a+b, []), a.score > b.score)[:4], value.play) +
		map(sort(fold(map(unique_abilities, get_candidate_plays_for_ability(game, value.creature, value.ability)), a+b, []), a.score > b.score)[:4], value.play)

		where unique_playable = filter(playable, find(playable, value.name = context.value.name and value > context.value) = null)
		where playable = playable_cards(game)

		where unique_abilities = playable_abilities(game)
	",

	choose_best_play: "def(class game game, int ndepth=0) ->{score: int, play: PossiblePlay|null}
	    dump(['CHOOSE FROM:', timed_out, if(res.play and (PossiblePlay<- res.play).card, (class card<- (PossiblePlay<- res.play).card).name, null), res.score, map(options, {score: value.score, name: if(play != null and play.card != null, play.card.name)} where play = null|PossiblePlay<- value.play)], res)
	    
		where res = choose(options, if(value.play = null, 10, 0) + (int<- value.score))
		
		where options = if(ndepth >= 3 or timed_out, [], map(get_possible_plays(game), { play: value, score: choose_best_play(if(value.card != null, simulate_play_card(game, value.card, value.targets), simulate_play_ability(game, value.creature asserting value.creature != null, value.ability asserting value.ability != null, value.targets)), ndepth+1).score })) + [pass_move]
		where pass_move = { play: null, score: if(is_phase_after_combat(game), eval_game_state(_do_end_turn(game)), choose_best_play(_do_end_turn(game), ndepth).score) }
		where timed_out = has_timed_out()
	",

	_advance_to_end: "def(class game game) ->class game
		if(is_phase_after_combat(game), _do_end_turn(game), _advance_to_end(_do_end_turn(game)))
	",

	_do_end_turn: "def(class game game) ->class game
		get_modified_object(game, def(class game g) g.end_turn())
	",

	simulate_play_card: "def(class game game, class card card, [Loc] targets) ->class game
		get_modified_object(game, def(class game g) ->commands [
		  g.players[g.nplayer].spend(card),
		  set(g.players[g.nplayer].hand, filter(g.players[g.nplayer].hand, value != game_card) where game_card = find(g.players[g.nplayer].hand, value.name = card.name)),
		  g.resolve_card(
		    construct('message.play_card', {
				index: 0,
				player_index: g.current_player_index,
				card: card,
				targets: targets,
			}))
		])
	",

	simulate_play_ability: "def(class game game, class creature creature, class activated_ability ability, [Loc] targets) ->class game
		get_modified_object(game, def(class game g) ->commands [
			g.players[g.nplayer].spend(ability),
			g.resolve_card(
				construct('message.play_card', {
					player_index: g.current_player_index,
					creature: creature.summon_id,
					ability: ability.name,
					ability_obj: ability,
					targets: targets,
				}))
		])
	",

	get_best_play: "def(class game game) -> class bot.CardPlay|null
	    if(play.play = null, null,
		construct('bot.CardPlay', {
		   card: play.play.card,
		   creature: play.play.creature,
		   ability: play.play.ability,
		   targets: play.play.targets,
		   score: 100,
		   game: game,
		}))
		where play = eval_with_timeout(500, choose_best_play(game))
	",

	eval_game_state: "def(class game game) ->int
		eval_player(game, game.players[game.nplayer]) -
		eval_player(game, game.players[(game.nplayer+1)%2]) +
		(game.players[game.nplayer].life - game.players[(game.nplayer+1)%2].life)*10 +
		sum(map(game.creatures, if(game.team_index(value.controller) = game.nplayer, 1, -1) * eval_creature(game, value))) +
		sum(map(game.constructs, if(game.team_index(value.controller) = game.nplayer, 1, -1) * eval_land(game, value)))
	",

	eval_player: "def(class game game, class player player) ->int
		if(player.life <= 0, -1000, 0) +
		player.life*5 +
		player.calculate_income(game)*10 +
		player.calculate_card_draw(game)*5
	",

	eval_land: "def(class game game, class creature creature) ->int
		count(game.creatures, value.loc[0] = creature.loc[0] and value.controller = creature.controller) -
		count(game.creatures, value.loc[0] = creature.loc[0] and value.controller != creature.controller) -
		count(game.constructs, value != creature and value.loc[0] = creature.loc[0])
	",

	eval_creature: "def(class game game, class creature creature) ->int
		creature.life*4 + creature.attack*6 +
		if(enemy != null, lib.bot_utils.fight_outcome(game, creature, enemy)*10, 0) +

		//clear path to trophy
		if(creature.move > 0 and find(game.creatures, value.loc[0] = creature.loc[0] and sign(value.loc[1] - creature.loc[1]) = creature.direction_moving) = null,
		 (enemy_trophy*if(space_from_end = 0, 5, space_from_end = 1, 4, space_from_end = 2, 3, 2)
		 where space_from_end = if(creature.direction_moving < 0, creature.loc[1] - lane.begin, lane.begin + lane.length - creature.loc[1] - 1)),
		 0)
		
		  where lane = game.lanes[creature.loc[0]]
		  where enemy_trophy = game.trophies[(creature.controller+1)%2][creature.loc[0]]
		  where enemy = find(game.creatures, game.team_index(value.controller) != game.team_index(creature.controller))
	",

	calculate_discard: "def(class game game) ->int|null
	if(player.hand = [], null,
	  if(player.calculate_cost(most_expensive) >= income+3 or
	     count(player.hand, value.type != 'invocation') + (player.calculate_card_draw(game) - size(player.hand)) < 2,
	   index(player.hand, most_expensive)
	  )
		where most_expensive = choose(player.hand, player.calculate_cost(value))
		where income = player.calculate_income(game)
		where ncards = player.calculate_card_draw(game)
	)   where player = game.players[game.nplayer]
	",

	},
}
