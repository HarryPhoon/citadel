{
	bases: ['card_base'],
	properties: {
		unique_id: { variable: true, type: 'int|null' },

		type: { variable: true, default: 'ability' },

		exhausts_creature: { variable: true, default: false },

		hidden_on_creature: { type: "bool", default: false },
		hidden_from_activating: { type: "bool", default: false },

		rules: { variable: true, default: 'RULE ABILITY TEXT NEEDED' },
		rules_text: "string :: rules",

		is_response: { variable: true, default: false },

		is_usable: "def(class game game, class creature creature) ->bool true",


		possible_targets: "def(class game game, class creature creature, [Loc] targets) ->[Loc]|null null",

		all_creatures_as_possible_targets: "def(class game game, class creature my_creature, [Loc] targets) ->[Loc]|null
		  if(targets = [], [creature.loc | creature <- game.creatures, not creature.is_building, creature.is_valid_target(game, creature.controller, me)])",

		enemy_creatures_as_possible_targets: "def(class game game, class creature my_creature, [Loc] targets) ->[Loc]|null
		  if(targets = [], [creature.loc | creature <- game.creatures, not creature.is_building, creature.controller != my_creature.controller, creature.is_valid_target(game, creature.controller, me)])",


		targets_valid: "def(class game game, class creature creature, [Loc] targets, [Loc] existing=[]) ->bool
		  if(possible = null, targets = [], if(possible = [], false,
		   (targets[0] in possible) and
		   targets_valid(game, creature, targets[1:], existing + [targets[0]])))
			where possible = possible_targets(game, creature, existing)
		",

		on_cast: "def(class game game, class message.play_card info) ->commands
			null
		",

		on_play: "def(class game game, class creature creature, class message.play_ability info) ->commands null",

		on_pay_cost: "def(class game game, class creature creature, class message.play_ability info) ->commands null",

		rules_text_widgets: "def(int scale) ->list
			[{
				type: 'label',
				color: 'black',
				size: 10*scale,
				font: card_font,
				text: rules,
			}]
		",

		runes: { default: [], type: "[map]" }
	}
}
