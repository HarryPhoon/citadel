{
	bases: ['card_base'],
	properties: {
		type: { variable: true, default: 'ability' },

		hidden_on_creature: { type: "bool", default: false },
		hidden_from_activating: { type: "bool", default: false },

		rules_text: "string :: rules",

		targets_valid: "def(class game_state game, class creature creature, [Loc] targets, [Loc] existing=[]) ->bool
		  if(possible = null, targets = [], if(possible = [], false,
			targets != [] and
		   (targets[0] in possible) and
		   targets_valid(game, creature, targets[1:], existing + [targets[0]])))
			where possible = possible_targets(game, creature, existing)
		",

		on_cast: "def(class game_state game, class message.play_card info) ->commands
			null
		",

		record_animation: "def(class game_state game, int nplayer, class message.play_card info, int stack_id) -> commands
		add(game.animation_hints, [construct('animation.play_card_hint',
			{
				type: 'play_ability',
				card: me,
				player: nplayer,
				targets: [info.get_creature(game).loc] + info.targets,
				stack_id: stack_id,
				info: info,
			}
		)])",
	}
}
