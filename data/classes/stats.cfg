{
	pending: {
		type: "[
		{
			table: string,
			rows: [[string|int|decimal|bool|null]],
		}
		]",

		default: []
	},

	send_stats: "def(string table_name, [string|int|decimal|bool|null] row) ->commands
	if(existing,
		add(existing.rows, [row]),
		add(pending, [{
			table: table_name,
			rows: [row],
		}]),
	)
		where existing = find(pending, value.table = table_name)
	",

	client: { type: "null|object" },

	load_num: { type: "int", default: 0 },

	tables: { type: "{string -> [map]}", default: {} },

	games: { type: "{string -> StatsGame}", default: {} },

	games_by_date: { type: "{string -> [StatsGame]}", default: {} },

	get_game_date: "def(StatsGame game) ->string
		sprintf('%02d%02d%02d', t.year, t.month, t.day)
		where t = time(game.begin_time)
	",

	finish_loading: "def() ->commands
		add(load_num, 1);
		set(games, {});

		map([map]<- tables['game'],

		if(action = 'start',
			; set(games[uuid], {
				uuid: uuid,
				user: user,
				begin_time: timestamp,
				is_online: bool<- record['is_online'],
				turns: [],
			  }),
		   action = 'finish',
		    ; if(game, [
				set(game.end_time, timestamp),
				set(game.victory, bool<- record['victory']),
			]) where game = games[uuid]
		)
		
		where timestamp = int<- record['timestamp']
		where user = string<- record['user']
		where uuid = string<- record['uuid']
		where action = string<- record['action']
		where record = value
		);

		map([map]<- tables['play_card'],
		if(game != null and turn != null,
			;
			if(turn not in game.turns, add(game.turns, [turn]))
		)

		where game = games[game_uuid]
		where turn = int|null<- record['turn']
		where timestamp = int<- record['timestamp']
		where game_uuid = string<- record['game_uuid']
		where record = value
		);

		set(games, fold(map(filter(games, size(value.turns) >= 3), {(value.uuid): value}), a+b, {}));
		set(games_by_date,
			fold(
				map(unique_dates,
					{ (value): filter(values(games), get_game_date(value) = context.value)}
				), a+b, {}
			)
		)
		where unique_dates = unique(sort(map(games, get_game_date(value))))
	",
}
