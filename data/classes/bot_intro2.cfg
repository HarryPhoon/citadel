{
	bases: ["bot"],

	properties: {

	score_play: "def(class game game, map play_info, class card card, [Loc] targets) ->int
		  if(card.name = 'Hypothermia' and game.in_response_phase = false,
		  if(target_creature.controller = game.current_player_index, -1000, 0) +
		  if(target_creature.life > 4, -1000, 0) +
		  100
		  where target_creature = game.creature_at_loc_or_die(targets[0]),
		0) +

		if(card.name = 'Vampire' and find(game.players[0].visible_discard_pile, value.name = 'Cover') != null,
		   100 +
		   if(find(game.creatures, value.name = 'Cave Troll' and value.loc[1] = targets[0][1]) != null, 100, 0) +
		   if(find(game.creatures, value.name = 'Green Adder' and value.loc[1] = targets[0][1]) != null, 200, 0),
		  0) +

	  if(card.name = 'Knife in the Dark' and game.in_response_phase = false,
		 if(target_creature.name = 'Cave Troll' and game.is_loc_on_board([target_creature.loc[0], target_creature.loc[1]-1]) and game.is_loc_on_board([target_creature.loc[0], target_creature.loc[1]-2]) = false, 100, 0)
		  where target_creature = game.creature_at_loc_or_die(targets[0]), 0)

	",

	get_best_play: "def(class game game) -> class bot.CardPlay|null

	if(plays != null,
	if(result != null,
		result + {discards: filter(map(player.hand, if(value = result.card, null, index)), value != null)}
	)
	where result = choose(filter(values(plays), value.score > 0), value.score)
	)

	where player = game.players[game.current_player_index]
	where plays = calculate_plays(game, play_info)
	where play_info = calculate_play_info(game)",


	should_wait: "def(class game game, class bot.CardPlay best_play) ->bool
	  false",
	
	deck: "[string]<- default_deck",

	default_deck: "[string]<- ['Disciple']*30",

	}
}
