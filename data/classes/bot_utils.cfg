{
properties: {
	fight_outcome: "def(class game_state game, class creature a, class creature b) -> int
	dump(['EVAL FIGHT', a.name, b.name, a_kills_b, b_kills_a, result], result)
	where result =
		if(b_kills_a and b.is_ranged, -1,
		   a_kills_b and a.is_ranged, 1,
		if(a_kills_b and ((not b_has_first_strike) or a_has_first_strike or (not b_kills_a)), 1, 0) -
		if(b_kills_a and ((not a_has_first_strike) or b_has_first_strike or (not a_kills_b)), 1, 0)
		)
		where a_has_first_strike = 'First Strike' in a.abilities
		where b_has_first_strike = 'First Strike' in b.abilities
		where a_kills_b = a_attack >= b.life + b.resistance
		where b_kills_a = b_attack >= a.life + a.resistance
		where a_attack = a.attack
		where b_attack = b.attack
		where a_has_reload = ('Ranged' in a.abilities)
		where b_has_reload = ('Ranged' in b.abilities)
		where range = abs(a.loc[1] - b.loc[1])
	",

	enemy_in_lane: "def(class game_state game, Loc loc) ->class creature|null
	  find(game.creatures,
	       game.team_index(value.controller) != game.team_index(game.current_player_index) and
		   value.loc[0] = loc[0])
	",

	ally_in_lane: "def(class game_state game, Loc loc) ->class creature|null
	  find(game.creatures,
	       game.team_index(value.controller) = game.team_index(game.current_player_index) and
		   value.loc[0] = loc[0])
	",

}
}
