{
	properties: {

		_internal_id: { type: 'string|null' },
		internal_id: "string :: if(_internal_id != null, _internal_id, name)",
		name: { variable: true, type: 'string' },
		cost: { variable: true, default: 0, type: 'int' },
		loyalty_cost: { variable: true, default: 0, type: 'int' },
		additional_cost: "def(class player player) ->int 0",
		school: { variable: true, default: 0, type: '[int]', set_type: '[int]|int', set: "if(value is int, set(me._data, [value]), set(me._data, value))" },
		first_school: "int :: if(school is int, school, school[0])",
		school_list: "[int] :: if(school is int, [school], school)",
		type: { variable: true, default: 'creature', type: 'string' },

		tags: { type: "[string]", get: "_data + if(creature_object != null, creature_object.tags, [])" },

		is_player_ability: { variable: true, default: false, type: 'bool' },

		is_channeled: { variable: true, default: false, type: 'bool' },

		flavor_text: { type: "string|null", variable: true },

		settings: { type: "map", default: {} },

		portrait: { type: "string|null", variable: true },
		portrait_focus: { type: "[int,int]|null" },

		animation_sequence: { type: "[CardAnim]", default: [] },

		//a unique id a card gets when drawn.
		draw_id: { variable: true, default: -1, type: 'int' },

		ai_patterns: "def(class game game, [Loc] targets) ->[string|null] []",
		ai_flags: { variable: true, type: '[int]', default: [] },

		//if true then any AI evaluation of this card's candidate moves
		//will involve playing the game state forward until end of turn
		//rather than just cast-and-eval. Is more expensive but is useful
		//for things like spells which might have subtle effects on
		//the game state and influence combat.
		ai_eval_end_of_turn: "bool :: type = 'invocation'",

		ai_score: "def(class game game, [Loc] targets) ->int 0",

		creature_object: { variable: true, default: null, type: 'class creature|null' },
		creature: { variable: true, default: null, type: 'map|null' },

		card_font: "string :: lib.font.regular_font",

		rules_text_widgets: "def(int scale) ->list []",

		rules_text_font_size: "int :: 12",

		rules_text: "string :: ''",

		rules_tips: "[{ title: string, text: string }] :: []",

		hero: { variable: true, default: false },

		is_response: { variable: true, default: false },

		//cantrip cards cannot be responded to.
		is_cantrip: { variable: true, type: "bool", default: false },

		runes: { default: [], type: "[map]" },

		resolve_effect: { type: "string", default: "" },

		//Sounds
		sound_resolve: { type: "string", default: "" },
		sound_fizzle: { type: "string", default: "" },
		sound_windup: { type: "string|null" },

		windup_sound: "string :: ''",
		
		text_color: { type: "[decimal,decimal,decimal]", default: [1,1,1] },

		background_color_top: "{ red: decimal, green: decimal, blue: decimal }::
		  { red: 0.25, green: 0.32, blue: 0.44 }",

		background_color_bot: "{ red: decimal, green: decimal, blue: decimal }::
		  { red: 0.05, green: 0.05, blue: 0.1 }",

		exhausts_creature: { default: false },

		on_cast: "def(class game game, class message.play_card info) ->commands null",

		on_pay_cost: "def(class game game, class message.play_card info) ->commands null",

		on_play: "def(class game game, class message.play_card info) ->commands null",
		
		possible_targets: "def(class game game, class creature avatar, [Loc] targets) ->[Loc]|null null",

		targets_valid: "def(class game game, class creature avatar, [Loc] targets, [Loc] existing=[]) ->bool true",

		record_animation: "def(class game game, class message.play_card info, int stack_id) -> commands null",

	}
}
