{
	properties: {

		user_info: { type: "map", default: {} },

		//used only for activated abilities.
		unique_id: { variable: true, type: 'int|null' },

		is_usable: "def(class game game, class creature creature) ->bool true",

		_internal_id: { type: 'string|null' },
		internal_id: "string :: if(_internal_id != null, _internal_id, name)",
		name: { variable: true, type: 'string' },
		cost: { variable: true, default: 0, type: 'int' },
		loyalty_cost: { variable: true, default: 0, type: 'int' },
		additional_cost: "def(class game game, class player player) ->int 0",
		school: { variable: true, default: 0, type: '[int]', set_type: '[int]|int', set: "if(value is int, set(me._data, [value]), set(me._data, value))" },
		first_school: "int :: if(school is int, school, school[0])",
		school_list: "[int] :: if(school is int, [school], school)",
		type: { variable: true, default: 'creature', type: 'string' },

		tags: { type: "[string]", get: "_data + if(creature_object != null, creature_object.tags, [])" },

		plays_on_stack: "true",

		is_player_ability: { variable: true, default: false, type: 'bool' },

		is_channeled: { variable: true, default: false, type: 'bool' },
		default_channeled_mana: { variable: true, default: 0, type: "int" },

		flavor_text: { type: "string|null", variable: true },

		settings: { type: "map", default: {} },

		portrait: { type: "string|null", variable: true },
		portrait_focus: { type: "[int,int]|null" },
		portrait_focus_width: { type: "int|null" },
		portrait_focus_height: { type: "int|null" },

		animation_sequence: { type: "[CardAnim]", default: [] },

		//a unique id a card gets when drawn.
		draw_id: { variable: true, default: -1, type: 'int' },

		ai_patterns: "def(class game game, [Loc] targets) ->[string|null] []",
		ai_flags: { variable: true, type: '[int]', default: [] },

		//if true then any AI evaluation of this card's candidate moves
		//will involve playing the game state forward until end of turn
		//rather than just cast-and-eval. Is more expensive but is useful
		//for things like spells which might have subtle effects on
		//the game state and influence combat.
		ai_eval_end_of_turn: "bool :: type = 'invocation'",

		ai_score: "def(class game game, [Loc] targets) ->int 0",

		creature_object: { variable: true, default: null, type: 'class creature|null' },
		creature: { variable: true, default: null, type: 'map|null' },

		card_font: "string :: lib.font.regular_font",

		rules: { variable: true, default: '' },


		rules_text_font_size: "int :: 12",

		rules_text: "string :: ''",

		rules_tips: "[{ title: string, text: string }] ::
			  map(if(creature_object, creature_object.abilities, []) + help_strings, {
				title: value,
				text: string<- (help[value] asserting value in help | value)
				  where help = lib.json.get_document_map('data/help-abilities.cfg'),
			  })
			
		",


		help_strings: { type: "[string]", default: [] },

		hero: { variable: true, default: false },

		is_response: { variable: true, default: false },
		is_instant: { variable: true, default: false },

		resolve_effect: { type: "string", default: "" },

		//Sounds
		sound_resolve: { type: "string", default: "" },
		sound_fizzle: { type: "string", default: "" },
		sound_windup: { type: "string|null" },

		windup_sound: "string :: ''",
		
		text_color: { type: "[decimal,decimal,decimal]", default: [1,1,1] },

		background_color_top: "{ red: decimal, green: decimal, blue: decimal }::
		  { red: 0.25, green: 0.32, blue: 0.44 }",

		background_color_bot: "{ red: decimal, green: decimal, blue: decimal }::
		  { red: 0.05, green: 0.05, blue: 0.1 }",

		uses_action: { default: false },

		on_cast: "def(class game game, class message.play_card info) ->commands null",

		on_pay_cost: "def(class game game, class message.play_card info) ->commands null",

		on_play: "def(class game game, class message.play_card info) ->commands null",
		
		possible_targets: "def(class game game, class creature avatar, [Loc] targets) ->[Loc]|null null",

		targets_valid: "def(class game game, class creature avatar, [Loc] targets, [Loc] existing=[]) ->bool true",

		record_animation: "def(class game game, class message.play_card info, int stack_id) -> commands null",

		my_buildings_as_possible_targets: "def(class game game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(targets = [], [creature.loc | creature <- game.creatures, creature.is_building, creature.controller = avatar.controller, creature.is_valid_target(game, avatar.controller, me)])",
          
        all_creatures_and_buildings_as_possible_targets: "def(class game game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(targets = [], [creature.loc | creature <- game.creatures, creature.is_valid_target(game, avatar.controller, me)])",

		all_buildings_as_possible_targets: "def(class game game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(targets = [], [creature.loc | creature <- game.creatures, creature.is_building, creature.is_valid_target(game, avatar.controller, me)])",

		enemy_buildings_as_possible_targets: "def(class game game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(targets = [], [creature.loc | creature <- game.creatures, creature.is_building, creature.controller != avatar.controller, creature.is_valid_target(game, avatar.controller, me)])",
		  
		my_creatures_as_possible_targets: "def(class game game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(targets = [], [creature.loc | creature <- game.creatures, not creature.is_building, creature.controller = avatar.controller, creature.is_valid_target(game, avatar.controller, me)])",

  		enemy_creatures_as_possible_targets: "def(class game game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(targets = [], [creature.loc | creature <- game.creatures, not creature.is_building, creature.controller != avatar.controller, creature.is_valid_target(game, avatar.controller, me)])",

		all_creatures_and_players_as_possible_targets: "def(class game game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(targets = [], [creature.loc | creature <- game.creatures, not creature.is_building, creature.is_valid_target(game, avatar.controller, me)] +
		                [[-1, player.player_index] | player <- game.players])",

		all_creatures_as_possible_targets: "def(class game game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(targets = [], [creature.loc | creature <- game.creatures, not creature.is_building, creature.is_valid_target(game, avatar.controller, me)])",

		all_tiles_as_possible_targets: "def(class game game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(targets = [], game.all_locs)",

        all_players_as_possible_targets: "def(class game game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(targets = [], [[-1, player.player_index] | player <- game.players])",
	}
}
