{
	chamber_type: { type: "null|CrawlChamberType" },
	player_deck: { type: "[string]", default: "@eval ['Peasant']*7 + ['Rally']*3" },
	player_gold: { type: "int", default: 100 },

	player_life: { type: "int", default: 80 },
	player_max_life: { type: "int", default: 80 },

	campaign_victories: { type: "{string->int}", default: {} },

	schools: { type: "[int]" },

	gold_rewards: "def() ->int 10 + 1d10",

	generate_rewards: "def() ->[string]
	map(schools,
		items[index].name
		where items = filter(all_cards, value.school = [school] and value.rarity = rarity)
		where rarity = if(rarity_roll < 80, 0, rarity_roll < 97, 1, 2)
		where rarity_roll = if(chamber_type in [enum crawl_elite, enum crawl_treasure], 1d70+30, 1d100)
		where school = value
	) 
		where all_cards = shuffle(lib.citadel.get_card_objects_in_set('core'))
	",

	generate_shop_inventory: "def() ->[{card: string, price: int}]
		map([ {school: school, rarity: rarity} |
		      school <- schools, rarity <- range(3) ],
		{card: items[index%size(items)].name, price: if(rarity = 0, 20+1d20, rarity = 1, 50+1d50, 100+1d100)}
		where items = filter(all_cards, value.school = [school] and value.rarity = rarity)
		where rarity = value.rarity
		where school = value.school
		)
		where all_cards = shuffle(lib.citadel.get_card_objects_in_set('core'))
	",
}
