{
	bases: ['message_base'],
	properties: {
		type: { variable: true, default: 'message', type: 'string' },

	},

classes: [
{
	play_card_base: { bases: ['message'], properties: {
		player_index: { variable: true, type: 'int' },
		stack_id: { variable: true, type: 'int', default: 0 },
		choices: { variable: true, type: 'null|[int]' },
		targets: { variable: true, type: '[Loc]' },
		force_fizzle: { variable: true, type: 'bool', default: false },
		channel: { variable: true, type: 'int', default: 0 },

		respondable: { variable: true, type: 'bool', default: true },

		//will only be non-null if it's a play_card.
		card: { variable: true, type: 'class card|null' },

		//index in hand, -1 if it's an ability/not in hand
		index: { variable: true, type: 'int', default: -1 },

		//ability fields.
		creature: { variable: true, type: 'int', default: -1 },
		ability: { variable: true, type: 'string', default: '' },
		ability_obj: { type: 'class card_base|null' },
		free_ability: { type: 'bool', default: false },
		get_creature: "def(class game_state game) ->class creature if(creature != -1, game.permanent_by_summon_id_or_die(creature), game.players[player_index].creature_avatar)",

		card_uuid: "string :: if(card != null, card._uuid, ability_obj != null, ability_obj._uuid, '')",

		card_or_ability: "null|class card_base :: (card or ability_obj)",
	} },
},
{
	end_turn: { bases: ['message'], properties: {
		player_index: { variable: true, type: 'int' },
		keep: { variable: true, type: '[int]' },
	} },

	move_creature: { bases: ['message'], properties: {
		player_index: { variable: true, type: 'int' },
		creature_uuid: { variable: true, type: 'string' },
	} },

	make_choice: { bases: ['message'], properties: {
		choices: {
			type: "[{
				index: int,
				choice: int,
			}]",
		},
	} },

	play_ability: { bases: ['message.play_card_base'], properties: {
	} },

	play_card: { bases: ['message.play_card_base'], properties: {
	} },

	discard_card: { bases: ['message'], properties: {
		player_index: { variable: true, type: 'int' },
		index: { variable: true, type: 'int' },
	} },

	undo_discard: { bases: ['message'], properties: {
		player_index: { variable: true, type: 'int' },
	} },

	debug: { bases: ['message'], properties: {
		exe: { variable: true, type: 'string' },
	} },

	game: { bases: ['message'], properties: {
		id: { type: 'int' },
		server_time: { type: 'int|null' },
		log: { type: 'string' },
		state_id: { type: 'int' },
		state: { type: 'class game_state' },
		nplayer: { type: 'int' },
		game_type: { type: 'string|null' },
		users: { type: '[map]|null' },
		started: { type: 'bool|int' },
		players: { type: '[string]' },
		observer: { type: 'bool', default: false },
		serialized_objects: { type: 'map', default: {} },
		observers: { type: "[string]" },
	} },
}]
}
