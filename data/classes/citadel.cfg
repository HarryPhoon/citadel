{
	basic_avatars: "[string] :: query_cache(global_cache(1), 0, [string]<- keys(lib.json.get_document_map('data/avatars.cfg')))",
	actual_card_name: "def(string name) ->string if(info is string, lib.citadel.actual_card_name(info), name)
	  where info = string|map<- lib.json.get_document_map('data/cards.cfg')[name]",
	base_card_name: "def(string name) ->string regex_replace(name, '#.*', '')",
	is_variation: "def(string name) ->bool strstr(name, '#') != 0",

	create_offline_account: "def() ->AccountDetails {
		collection: map(lib.citadel.get_cards_in_set('core')*3, generate_card_instance(value)),
		avatar: basic_avatars[0],
		unlocks: ['CAMPAIGN'],
		campaign_scenario: 0,
	}",

	construct_account: "def(map info) ->AccountDetails
	{
		collection: [CardInstance]<- info.collection,
		games_played: int|null<- info.games_played,
		avatar: string<- if(info.avatar is string, info.avatar, lib.citadel.basic_avatars[0]),
		unlocks: if('unlocks' in info, [string] <- info['unlocks'], ['CAMPAIGN']),
		campaign_scenario: if(info.campaign_scenario is int, int<- info.campaign_scenario, 0),
	}
	",

	generate_card_instance: "def(string name) ->CardInstance
	  {
		id: generate_uuid(),
		name: name,
	  }",

	create_card: "def(string name) ->class card
	  if(info is string,
		 lib.citadel.create_card(info),
		    construct('card', if(is_variation(name),
			   (map<- lib.json.get_document_map('data/cards.cfg')[lib.citadel.base_card_name(name)]) + info + {_internal_id: name},
			   info))
	    )
			where info = string|map<-
			             lib.json.get_document_map('data/cards.cfg')[name]",
	create_creature: "def(string name, map options={}) ->class creature construct('creature', (map<- create_card(name).creature) + options)",

	get_cards_in_set: "def(string card_set) ->[string] map(filter(lib.json.get_document_map('data/cards.cfg'), value is map and value['set'] = card_set), string<- key)",

	school_info: "[SchoolInfo]<- get_document('data/schools.cfg')",

	preferences: {
		init: "get_document('citadel-preferences.cfg', ['null_on_failure', 'user_preferences_dir']) or {}",
		set: "[set(_data, value), write_document('citadel-preferences.cfg', value)]",
		type: "map",
	},

	num_times_tip_shown: "def(string key) ->int
		if(tips_map is map, if(res is int, res, 0) where res = tips_map[key], 0)
		where tips_map = preferences['tips_shown']",
	
	tip_shown: "def(string key) ->commands [
		set(me.preferences, me.preferences + {tips_shown: if(tips_map is map, tips_map, {}) + {(key): num_times_tip_shown(key)+1} where tips_map = preferences['tips_shown']})
	]",

	get_decks: "def() ->DeckMap
	DeckMap<-
	  (get_document('user-decks.cfg', ['null_on_failure', 'user_preferences_dir']) or
	   get_document('data/default-user-decks.cfg'))",
	
	sound_volume: "def(string fname) ->decimal
	if(fname in volumes, volumes[fname], 1.0)
	  where volumes = {string -> decimal}<- get_document('data/sound-volume.cfg')",

	lookup_icon: "def(string key) -> string|null
	  switch(key,
		'gold', 'school-gold.svg',
		'blood', 'school-blood.svg',
		'food', 'school-food.svg',
		'scrolls', 'school-scrolls.svg',
		'faith', 'school-faith.svg',
		null)
	",
	
	map_markup: "def(string s) ->string
	if(strstr(s, '.svg') != 0, s,
		if(icon != null, '&images/icons/' + icon + ';', key)
		where icon = lookup_icon(key)
		where key = s[1:size(s)-1]
	)",

	process_markup: "def(string s) ->string
	 if(pos = -1, s,
	    if(end_pos = -1, s,
		  s[:pos] + map_markup(tail[:end_pos+1]) + process_markup(tail[end_pos+1:]))
				where end_pos = strstr(s[pos:], ';') - 1
				where tail = s[pos:]
		)
	  where pos = strstr(s, '&') - 1
	",

	zorder: "def(string key) ->int
	  result asserting result is int
	  where result = zorder_map[key]
	  where zorder_map = {
		status_label: 1200,
		card_highlight: 1100,
		card_stack_base: 1101,
		card_play: 2000,
		board_shader: 100,
		avatars: 300,
		hud: 1000,
		card_in_hand_base: 900,
		card_in_graveyard_base: 800,
		status_icon: 850,
		xp_objects: 600,
		life_labels: 700,
		winner_dialog: 500,
		mana_symbols: 1050,
	}",

	button_color_scheme: { type: "{normal: Color, depressed: Color, focus: Color, text_normal: Color, text_depressed: Color, text_focus: Color}",
	  default: {
		normal: [0,140,114,255],
		depressed: [168,64,30],
		focus: [168,64,30],
		text_normal: [158,216,166],
		text_depressed: [255,176,59],
		text_focus: [255,176,59],
	} },

	ability_info: "{string -> {text: string, icon: string, scaling: decimal}} ::
	{
		'Haste': { text: 'HASTE', icon: 'haste.svg', scaling: 1.3 },
		'Cover': { text: 'COVER', icon: 'cover.svg', scaling: 1.1 },
	}",

	card_cache: { type: "object", initialize: "create_cache(1024)" },
	native_card_sizes: { type: "[decimal]", default: [0.8,1.0,2.0], set: "
		if(value != _data, [set(_data, value), set(card_cache, create_cache(1024))])
	" },
}
