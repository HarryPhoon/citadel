{
	get_rarity_name: "def(int index) ->string ['common', 'uncommon', 'rare', 'legendary'][index]",

	basic_avatars_info: "[{id: string, name: string}] :: query_cache(global_cache(1), 0, map(lib.json.get_document_map('data/avatars.cfg'), {id: string<- key, name: string<- value.name} asserting value is map))",
	basic_avatars: "[string] :: ['acolyte.png', 'goddess.png', 'deephelm-explorer.png', 'mercenary.png', 'rihns-anointed.png','soothsayer.png', 'blink-mage.png']",
	card_exists: "def(string name) ->bool|int (name in (map<- get_document('data/cards.cfg')))",
	actual_card_name: "def(string name) ->string if(info is string, lib.citadel.actual_card_name(info), name)
	  where info = string|map<- doc[name]
	  asserting name in doc | ['Could not find card', name]
	  where doc = map<- get_document('data/cards.cfg')",
	base_card_name: "def(string name) ->string regex_replace(name, '#.*', '')",
	is_variation: "def(string name) ->bool strstr(name, '#') != 0",

	construct_account: "def(map info) ->AccountDetails
	{
		display_name: string|null<- info.display_name,
		email: string|null<- info.email,
		collection: [CardInstance]<- info.collection,
		games_played: int|null<- info.games_played,
		avatar: string<- if(info.avatar is string, info.avatar, lib.citadel.basic_avatars[0]),
		unlocks: if('unlocks' in info, [string] <- info['unlocks'], ['CAMPAIGN']),
		campaign_scenario: if(info.campaign_scenario is int, int<- info.campaign_scenario, null),
		campaign_location: if(info.campaign_location is string, string<- info.campaign_location, null),
		campaign_progress: if(info.campaign_progress is {string -> int}, {string -> int} <- info.campaign_progress, {}),

		decks: if(info.decks is DeckMap, DeckMap <- info.decks, DeckMap<- get_document('data/default-user-decks.cfg')),
		quests: if(info.quests is list, [Quest] <- info.quests, []),

		privileged: if(info.privileged is bool, bool <- info.privileged),

		gold: if(info.gold is int, int <- info.gold, 0),
	}
	",

	generate_card_instance: "def(string name) ->CardInstance
	  {
		id: generate_uuid(),
		name: name,
	  }",
	
	is_known_card: "def(string name) ->bool
		name in (map<- get_document('data/cards.cfg'))",
	
	get_card_info: "def(string name) ->map
	(
	if(info is string, lib.citadel.get_card_info(info),
	   if(is_variation(name), lib.citadel.get_card_info(lib.citadel.base_card_name(name)) + info, info)
	)

	asserting (info is string|map) | ['Unknown card', name]
	)
	where info = (map<- get_document('data/cards.cfg'))[name]",

	create_card: "def(string name, map args={}) ->class card
	  construct('card', deep_copy(get_card_info(name) + args))
	",

	create_creature: "def(string name, map options={}) ->class creature construct('creature', (map<- create_card(name).creature) + options)",

	card_gold_cost: "def(class card card) ->int
	switch(card.rarity, 0, 10, 1, 20, 2, 50, 100)
	",

	get_card_objects_in_set: "def(string card_set) ->[class card]
	  query_cache(global_cache(32), card_set, map(get_cards_in_set(card_set), create_card(value)))",
	
	get_all_card_objects: "def() ->[class card]
	  query_cache(global_cache(1), null, map(get_cards_matching({}), create_card(value)))",
	  
	get_incomplete_art_cards: "def() ->[string]

	filter(get_cards_in_set('core'), value not in complete)
	
	where complete = get_complete_art_cards()
	",
	
	get_complete_art_cards: "def() ->[string] map(filter(lib.json.get_document_map('data/cards.cfg'), value is map and value.artist is string and value.artist != 'eleazzaar'), string<- key)",

	get_cards_in_set: "def(string card_set) ->[string] map(filter(lib.json.get_document_map('data/cards.cfg'), value is map and (value['set'] = card_set or card_set = '*' and value['set'] != null)), string<- key)",
	get_cards_matching: "def({string ->any} query) ->[string] map(filter(lib.json.get_document_map('data/cards.cfg'), value is map and find(query_keys, query[value] != card[value]) = null where card = value), string <- key)
	  where query_keys = keys(query)",

	school_info: "[SchoolInfo]<- get_document('data/schools.cfg')",

	preferences: {
		init: "get_document('citadel-preferences.cfg', ['null_on_failure', 'user_preferences_dir']) or {}",
		set: "[set(_data, value), write_document('citadel-preferences.cfg', value)]",
		type: "map",
	},

	num_times_tip_shown: "def(string key) ->int
		if(tips_map is map, if(res is int, res, 0) where res = tips_map[key], 0)
		where tips_map = preferences['tips_shown']",
	
	tip_shown: "def(string key) ->commands [
		set(me.preferences, me.preferences + {tips_shown: if(tips_map is map, tips_map, {}) + {(key): num_times_tip_shown(key)+1} where tips_map = preferences['tips_shown']})
	]",
	
	sound_volume: "def(string fname) ->decimal
	if(fname in volumes, volumes[fname], 1.0)
	  where volumes = {string -> decimal}<- get_document('data/sound-volume.cfg')",

	lookup_icon: "def(string key) -> string|null
	  switch(key,
		'gold', 'school-gold.svg',
		'blood', 'school-blood.svg',
		'food', 'school-food.svg',
		'scrolls', 'school-scrolls.svg',
		'faith', 'school-faith.svg',
		null)
	",
	
	map_markup: "def(string s) ->string
	if(strstr(s, '.svg') != 0, s,
		if(icon != null, '&images/icons/' + icon + ';', key)
		where icon = lookup_icon(key)
		where key = s[1:size(s)-1]
	)",

	process_markup: "def(string s) ->string
	 if(pos = -1, s,
	    if(end_pos = -1, s,
		  s[:pos] + map_markup(tail[:end_pos+1]) + process_markup(tail[end_pos+1:]))
				where end_pos = strstr(s[pos:], ';') - 1
				where tail = s[pos:]
		)
	  where pos = strstr(s, '&') - 1
	",

	zorder: "def(string key) ->int
	  result asserting result is int
	  where result = zorder_map[key]
	  where zorder_map = {
		chat_gui: 20000,
		card_stack_base: 2000,
		debug_labels: 1300,
		status_label: 1200,
		card_highlight: 1100,
		card_play: 3000,
		seals: -20,
		board_shader: -50,
		game_log: 400,
		avatars: 300,
		hud: 200,
		card_in_hand_base: 900,
		card_in_graveyard_base: 800,
		status_icon: 200,
		xp_objects: 600,
		life_labels: 700,
		winner_dialog: 500,
		mana_symbols: 1050,
		card_tips: 2000,
	}",

	button_color_scheme: { type: "{normal: Color, depressed: Color, focus: Color, text_normal: Color, text_depressed: Color, text_focus: Color}",
	  default: {
		normal: [0,140,114,255],
		depressed: [168,64,30],
		focus: [168,64,30],
		text_normal: [158,216,166],
		text_depressed: [255,176,59],
		text_focus: [255,176,59],
	} },

	library_color_scheme: { type: "{normal: Color, depressed: Color, focus: Color, text_normal: Color, text_depressed: Color, text_focus: Color}",
	  default: {
		normal: [26,26,26,255],
		depressed: [168,64,30],
		focus: [168,64,30],
		text_normal: [196,196,196],
		text_depressed: [255,176,59],
		text_focus: [255,176,59],
	} },


	ability_info: "{string -> {text: string, icon: string, scaling: decimal}} ::
	{
		'Haste': { text: 'HASTE', icon: 'haste.svg', scaling: 1.3 },
		'Cover': { text: 'COVER', icon: 'cover.svg', scaling: 1.1 },
	}",

	card_cache: { type: "object", initialize: "create_cache(1024)" },
	native_card_sizes: { type: "[decimal]", default: [0.3,0.5,1.0,1.5,2.0,2.5,3.0] },

	read_cookie: "def() ->string|null 
	  if(doc is map, string|null<- doc[USERNAME + ':' + TBS_SERVER_ADDRESS])
	  where doc = get_document('citadel_cookie', ['null_on_failure', 'user_preferences_dir'])",
	
	write_cookie: "def(string|null cookie)
	  write_document('citadel_cookie', if(doc, doc, {}) + { (USERNAME + ':' + TBS_SERVER_ADDRESS): cookie })
	  where doc = get_document('citadel_cookie', ['null_on_failure', 'user_preferences_dir'])",
	

	set_screen_dim: "def(int w, int h) [
		set(screen_width, w),
		set(screen_height, h),
	]",

	set_screen_dimensions: "def(level lvl) [
		set(screen_width, lvl.dimensions[2]),
		set(screen_height, lvl.dimensions[3]),
	]",

	screen_width: { type: "int", init: "SCREEN_WIDTH" },
	screen_height: { type: "int", init: "SCREEN_HEIGHT" },

	px: "def(int pixels) ->int if(res%2 = 1, res+1, res) where res = int((decimal(pixels)*decimal(screen_width))/1440.0)",
	py: "def(int pixels) ->int if(res%2 = 1, res+1, res) where res = int((decimal(pixels)*decimal(screen_height))/900.0)",

	py_scale: "decimal(screen_height)/900.0",

	dpx: "def(decimal pixels) ->decimal pixels*screen_width/1440.0",
	dpy: "def(decimal pixels) ->decimal pixels*screen_height/900.0",

	render_frame: "def(cairo_callable c, int w, int h, cairo_commands cmd, map|null m=null, map args={}) ->frame
	build_animation(
	{
		fbo: c.render(ww, hh, cmd, m),
		id: 'fbo',
		image: 'fbo',
		x: 0, y: 0, w: ww, h: hh,
		frames: 1, scale: 1,
		no_remove_alpha_borders: true,
	} + args
	) where ww = if(round_to_even(w) != w, w+1, w)
	  where hh = if(round_to_even(h) != h, h+1, h)",

	get_card_adjustment: "def(string card_name, string adjustment, decimal default_value) ->decimal
		if(adj, if(adjustment in adj, decimal<- adj[adjustment], default_value), default_value)
		where adj = card_adjustments[card_name]
	",
	
	card_adjustments: {
		type: "{string -> {string -> decimal}}",
		init: "get_document('data/cards-adjustments.cfg', ['null_on_failure', 'user_preferences_dir']) or
		       get_document('data/cards-adjustments.cfg')",
		set: "[set(_data, value), write_document('data/cards-adjustments.cfg', value)]",
	},

	tutorials: "[class rival] :: query_cache(global_cache(1), null, map([map]<- get_document('data/tutorials.cfg'), construct('rival', value)))",
	rivals: "[class rival] :: query_cache(global_cache(1), null, map([map]<- get_document('data/rivals.cfg'), construct('rival', value)))",

	is_release: "bool :: MODULE_OPTIONS.universe = 'rel'",
	is_devel: "bool :: MODULE_OPTIONS.universe = 'dev'",

	choose_interface_sound: "def(string sound_name) ->string|null
	if(res is string, 'interface/' + res)
	where res = choose(filter(files, lower(value[:size(sound_name)]) = sound_name))
		where files = query_cache(global_cache(1), 0, get_files_in_dir('sounds/interface'))
	",

	add_main_background_shader: "def(level level) ->commands
		if(find(level.frame_buffer_shaders, value.shader_info = 'citadel_background') = null,
			add(level.frame_buffer_shaders, [{
				begin_zorder: -1000000,
				end_zorder: -10000,
				shader_info: 'citadel_background',
			}])
		)
	",

	//the last status we have told the server we are using.
	//[username,status]
	notified_status: { type: "null|[string,string]" },

	global_chat: { type: "[ChatMessage]", default: [] },

	_get_next_non_clashing_name: "def(string name) ->string
		if(num, regex_replace(name, '\\(' + str(num) + '\\)$', '(' + str(num+1) + ')'), name + ' (2)')
		where num = if(current_num is [string], int(current_num[0]))
		where current_num = regex_match(name, '.*\\((\\d+)\\)')
	",

	_find_non_clashing_name: "def(string name, DeckMap m) ->string
	if(name not in m, name, _find_non_clashing_name(_get_next_non_clashing_name(name), m))
	",

	get_non_clashing_deck_name: "def(string deck_name, DeckMap decks, null|string original_deck_name=null) ->string
		if(deck_name = original_deck_name, deck_name,
			if(deck_name not in decks, deck_name,
			   _find_non_clashing_name(deck_name, decks)
			)
		)
	",

	open_challenges: { type: "[{ user: string, expiry_time: int}]", default: [] },

	server_time_delta: { type: "int", default: 0 },
}
