{
	create_card: "def(string name) ->class card construct('card', lib.json.get_document_map('data/cards.cfg')[name])",
	create_creature: "def(string name, map options={}) ->class creature construct('creature', (map<- create_card(name).creature) + options)",

	school_info: "[SchoolInfo]<- get_document('data/schools.cfg')",

	get_decks: "def() ->DeckMap
	DeckMap<-
	  (get_document('user-decks.cfg', ['null_on_failure', 'user_preferences_dir']) or
	   get_document('data/default-user-decks.cfg'))",
	
	sound_volume: "def(string fname) ->decimal
	if(fname in volumes, volumes[fname], 1.0)
	  where volumes = {string -> decimal}<- get_document('data/sound-volume.cfg')",

	lookup_icon: "def(string key) -> string|null
	  switch(key,
		'gold', 'white-tower.svg',
		'blood', 'death-skull.svg',
		'food', 'vine-leaf.svg',
		'scrolls', 'open-book.svg',
		'faith', 'open-book.svg',
		null)
	",
	
	map_markup: "def(string s) ->string
	if(strstr(s, '.svg') != 0, s,
		if(icon != null, '&images/icons/' + icon + ';', key)
		where icon = lookup_icon(key)
		where key = s[1:size(s)-1]
	)",

	process_markup: "def(string s) ->string
	 if(pos = -1, s,
	    if(end_pos = -1, s,
		  s[:pos] + map_markup(tail[:end_pos+1]) + process_markup(tail[end_pos+1:]))
				where end_pos = strstr(s[pos:], ';') - 1
				where tail = s[pos:]
		)
	  where pos = strstr(s, '&') - 1
	"
}
