{
	card: { type: "obj card", set: "[set(_data, value), calculate_sequence(value.card_type.animation_sequence)]" },

	portrait: "string<- card.card_type.portrait",
	portrait_path: "string :: 'images/portraits/' + portrait",

	calculate_sequence: "def([CardAnim] sequence) ->commands [
		set(num_cycles, sum(map(sequence, value.cycles)))
	]",

	num_cycles: { type: "int", default: 1 },

	calculate_anim: "def(int cycle_num) ->{zoom: decimal, focus: [decimal,decimal], cross_fade: {zoom: decimal, focus: [decimal,decimal], ratio: decimal}|null}
	{
		zoom: mix(anim.start_zoom, anim.end_zoom, ratio),
		focus: [
			mix(anim.start_focus[0], anim.end_focus[0], ratio), 
			mix(anim.start_focus[1], anim.end_focus[1], ratio), 
		],

		cross_fade: if(cycles_left < cross_fade_length,
		{
			zoom: fade.zoom,
			focus: fade.focus,
			ratio: decimal(cross_fade_length - cycles_left)/decimal(cross_fade_length)
		} where fade = calculate_anim(cycle_num + cycles_left))

	}
		where ratio = decimal(ncycle)/decimal(anim.cycles)
		where cycles_left = anim.cycles - ncycle
		where ncycle = if(nindex = 0, cycle, cycle - prev_cycles)
		where prev_cycles = sum(map(card.card_type.animation_sequence[:nindex], value.cycles))
	    where nindex = index(card.card_type.animation_sequence, anim)
		where anim = find_or_die(card.card_type.animation_sequence, cycle < sum(map(card.card_type.animation_sequence[:index+1], value.cycles)))
		where cycle = cycle_num%num_cycles
		where cross_fade_length = 12
	",



}
