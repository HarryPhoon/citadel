//Triggered abilities -- abilities that take effect when an event occurs.
// Contrast with static abilities (always in effect) or activated abilities
// (in effect when the controller chooses).
//
// To add a new trigger, e.g. make being passed over by another creature
// trigger something... add to the creature class:
// on_moved_over: "def(game, other_creature) null"
// add to the triggered ability class:
// on_moved_over: "def(creature, game, other_creature) null"
//
// Note how the triggered_ability class has to take an extra argument which
// is the creature. When we want to trigger this event, do this:
//
// creature.fire_event('on_moved_over', [game, creature_passing_over])
//
// Then on_moved_over will be called in the creature class and in all
// triggered_abilities for that class.
//
// This is how we'd make the Mausoleum offer lifegain:
//
// add(creature.triggered_abilities, [{
//    name: 'Regeneration',
//    rules: 'Gain 1 life at the start of turn',
//    notes: 'Gained from Mausoleum',
//    on_begin_turn: 'def(creature, game) add(creature.wounds, -1)'
// }])
{
	properties: {
		unique_id: { variable: true },
		
		name: { variable: true },
		rules: { variable: true },

		//might put notes about how the triggered ability was added here
		//e.g. "Regeneration given by Mausoleum" to tell the player
		//how the ability was given.
		notes: { variable: true },

		on_summoned: "def(creature, game) null",

		on_deal_damage: "def(creature, game, target, damage) null",
		on_attacked: "def(creature, game, attacker, damage) null",

		on_kill: "def(creature, game, victim) null",
		on_another_creature_died: "def(creature, game, victim) null",
		on_die: "def(creature, game) null",

		on_reach_endzone: "def(creature, game) null",

		on_begin_turn: "def(creature, game) null",
		on_end_turn: "def(creature, game) null",
		
		on_moved_over: "def(creature, game, other_creature) null",

		on_move: "def(creature, game) null",
	}
}
