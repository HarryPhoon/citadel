{
	server_only: true,

properties: {
	matchmake: "def([MatchmakingInfo] info) ->[int]|null
	  if(value != null,
		[first_index, second_index]
	    where second_index = index(info[first_index+1:], sorted[index(sorted, value)+1]) + first_index + 1
	    where first_index = index(info, value)
      )
	    where value = find(sorted, index+1 < size(sorted) and sorted[index+1].type = value.type)
		where sorted = sort(info, a.type < b.type)
	",

	new_account_cards: "{string -> int} ::
	  fold(map(new_cards /*lib.citadel.get_cards('core')*/, {(value): 3}), a+b)

	  where new_cards = ['Disciple', 'Dawn Obelisk', 'Heal', 'Inquisition', q(Rihn's Anointed), q(Rihn's Martyr), 'Rokh', 'Smite the Defilers', 'Temple Guard', 'Weakness',
	     'Cover', 'Darkwood Denizen', 'Furious Rampage', 'Green Adder', 'Wolf Rider']
	",

	create_account: "def(map msg) ->AccountDetails
	{
		collection:
		fold(map(new_account_cards, map(range(value), {
			id: generate_uuid(),
			name: card_name,
		}) where card_name = key), a+b),

		avatar: 'endless-studies.png',
		unlocks: ['CAMPAIGN'],
		campaign_progress: {},
	}
	",

	handle_request: "def(matchmaking_server server, map msg) ->commands
	  switch(msg.type,
			'set_avatar',
			[
			server.db_client.read_modify_write('user:' + str(msg.user),
			  def(any info) ->any
			    if(info != null,
				  (map<- info) + {info: account + {avatar: string<- msg.avatar}} where account = lib.citadel.construct_account(map<- (map<- info)['info'])))
			],

			'set_campaign_location',

			[
			debug(['ZZZ: set_campaign_location: ', msg.campaign_location]),
			server.db_client.read_modify_write('user:' + str(msg.user),
			  def(any info) ->any
			    if(info != null,
				  (map<- info) + {info: account + {campaign_location: string<- msg.campaign_location}} where account = lib.citadel.construct_account(map<- (map<- info)['info'])))
					
			],

			'finish_bot_game',
			[
			server.db_client.read_modify_write('user:' + str(msg.user),
			      def(any info) ->any
				    if(info != null,
						(map<- info) + {
					      info: account + {
						      collection: account.collection + reward_cards
						  } + if(msg.unlock is string and find(account.unlocks, value = msg.unlock) = null, {
						   unlocks: account.unlocks + [msg.unlock]
					}, {}) +
					     if(msg.campaign_scenario is int and msg.campaign_scenario >= (account.campaign_progress[msg.campaign_location] or 0), {
							campaign_progress: account.campaign_progress + {
								(msg.campaign_location): (account.campaign_progress[msg.campaign_location] or 0) + 1,
							}
						}, {}),
					  }
			  where account = lib.citadel.construct_account(map<- (map<- info)['info'])
			)),

			set(server.response, {type: 'new_cards', cards: reward_cards }),
			] where reward_cards = if(msg.victory = true and msg.campaign_sets,
			   map(calculate_card_rewards(account, [string]<- msg.campaign_sets), lib.citadel.generate_card_instance(value)), [])
			  where account = lib.citadel.construct_account(map<- (map<- server.db_client.get('user:' + str(msg.user)))['info']),

			set(server.response, {type: 'error', message: 'Unknown request type'})
	  )
	",

	calculate_card_rewards: "def(AccountDetails account, [string] sets) ->[string]

	map(card_instances, value.name)
	where card_instances =
		if(candidates_common,
		   candidates_common[:4] + if(1d3 = 1, candidates_uncommon[:1] + candidates_rare[:1], candidates_uncommon[:2]),
		   candidates_uncommon[:2] + candidates_rare[:1])

		where candidates_rare =
		  shuffle(filter(candidates, value.rarity = 2))
		where candidates_uncommon =
		  shuffle(filter(candidates, value.rarity = 1))
		where candidates_common =
		  shuffle(filter(candidates, value.rarity = 0))
		where candidates =
		  fold(map(sets, filter(lib.citadel.get_card_objects_in_set(value), count(account.collection, value.name = context.value.name) < 3)), a+b)
	",
}
}
