{
	server_only: true,

properties: {
	matchmake: "def([MatchmakingInfo] info) ->[int]|null
	  if(value != null,
		[first_index, second_index]
	    where second_index = index(info[first_index+1:], sorted[index(sorted, value)+1]) + first_index + 1
	    where first_index = index(info, value)
      )
	    where value = find(sorted, index+1 < size(sorted) and sorted[index+1].type = value.type)
		where sorted = sort(info, a.type < b.type)
	",

	new_account_cards: "{string -> int} ::
	  fold(map(new_cards /*lib.citadel.get_cards('core')*/, {(value): 3}), a+b)

	  where new_cards = ['Disciple', 'Dawn Obelisk', 'Heal', 'Inquisition', q(Rihn's Anointed), q(Rihn's Martyr), 'Rokh', 'Smite the Defilers', 'Temple Guard', 'Weakness',
	     'Cover', 'Darkwood Denizen', 'Furious Rampage', 'Green Adder', 'Wolf Rider']
	",

	create_account: "def(map msg) ->AccountDetails
	{
		collection:
		fold(map(new_account_cards, map(range(value), {
			id: generate_uuid(),
			name: card_name,
		}) where card_name = key), a+b),

		avatar: 'endless-studies.png',
		unlocks: ['CAMPAIGN'],
		campaign_progress: {},
		decks: DeckMap<- get_document('data/default-user-decks.cfg'),
	}
	",

	read_account: "def(map info) ->AccountDetails
		lib.citadel.construct_account(info)
	",

	handle_request: "def(matchmaking_server server, map msg, string user_id, AccountDetails account_info) ->commands
	  switch(msg.type,
			'set_avatar',
			[
			set(account_info.avatar, string<- msg.avatar),
			server.write_account(user_id),
			],

			'set_campaign_location',

			[
			set(account_info.campaign_location, string<- msg.campaign_location),
			server.write_account(user_id),
			],

			'set_decks',

			[
			set(account_info.decks, DeckMap<- msg.decks),
			server.write_account(user_id),
			set(server.response, {type: 'ok'})
			],

			'finish_bot_game',
			[
			add(account_info.collection, reward_cards),

			if(msg.unlock is string and find(account_info.unlocks, value = msg.unlock) = null,
			   add(account_info.unlocks, [string<-  msg.unlock])),

			if(msg.campaign_scenario is int and msg.campaign_scenario >= (account_info.campaign_progress[msg.campaign_location] or 0),
			[
			   set(account_info.campaign_progress[msg.campaign_location], (account_info.campaign_progress[msg.campaign_location] or 0) + 1)
			]
			),

			server.write_account(user_id),

			set(server.response, {type: 'new_cards', cards: reward_cards }),

			] where reward_cards = if(msg.victory = true and msg.campaign_sets,
			   map(calculate_card_rewards(account_info, [string]<- msg.campaign_sets), lib.citadel.generate_card_instance(value)), []),

			set(server.response, {type: 'error', message: 'Unknown request type'})
	  )
	",

	calculate_card_rewards: "def(AccountDetails account, [string] sets) ->[string]

	map(card_instances, value.name)
	where card_instances =
		if(candidates_common,
		   candidates_common[:4] + if(1d3 = 1, candidates_uncommon[:1] + candidates_rare[:1], candidates_uncommon[:2]),
		   candidates_uncommon[:2] + candidates_rare[:1])

		where candidates_rare =
		  shuffle(filter(candidates, value.rarity = 2))
		where candidates_uncommon =
		  shuffle(filter(candidates, value.rarity = 1))
		where candidates_common =
		  shuffle(filter(candidates, value.rarity = 0))
		where candidates =
		  fold(map(sets, filter(lib.citadel.get_card_objects_in_set(value), count(account.collection, value.name = context.value.name) < 3)), a+b)
	",
}
}
