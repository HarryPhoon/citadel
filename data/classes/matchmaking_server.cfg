{
	server_only: true,

properties: {
	new_account_cards: "{string -> int} ::
	  fold(map(lib.citadel.get_cards_in_set('core'), {(value): 3}), a+b)
	",

	create_account: "def(map msg) ->AccountDetails
	{
		collection:
		fold(map(new_account_cards, map(range(value), {
			id: generate_uuid(),
			name: card_name,
		}) where card_name = key), a+b),

		avatar: 'endless-studies.png',
		unlocks: ['CAMPAIGN'],
		campaign_progress: {},
	}
	",

	handle_request: "def(matchmaking_server server, map msg) ->commands
	  switch(msg.type,
			'set_avatar',
			[
			server.db_client.read_modify_write('user:' + str(msg.user),
			  def(any info) ->any
			    if(info != null,
				  (map<- info) + {info: account + {avatar: string<- msg.avatar}} where account = lib.citadel.construct_account(map<- (map<- info)['info'])))
			],

			'set_campaign_location',

			[
			server.db_client.read_modify_write('user:' + str(msg.user),
			  def(any info) ->any
			    if(info != null,
				  (map<- info) + {info: account + {campaign_location: string<- msg.campaign_location}} where account = lib.citadel.construct_account(map<- (map<- info)['info'])))
					
			],

			'finish_bot_game',
			[
			server.db_client.read_modify_write('user:' + str(msg.user),
			      def(any info) ->any
				    if(info != null,
						(map<- info) + {
					      info: account + {
						      collection: account.collection + [reward_card]
						  } + if(msg.unlock is string and find(account.unlocks, value = msg.unlock) = null, {
						   unlocks: account.unlocks + [msg.unlock]
					}, {}) +
					dump(['XXX', account.campaign_progress[msg.campaign_location], msg.campaign_scenario],
					     if(msg.campaign_scenario is int and msg.campaign_scenario >= (account.campaign_progress[msg.campaign_location] or 0), {
							campaign_progress: account.campaign_progress + {
								(msg.campaign_location): (account.campaign_progress[msg.campaign_location] or 0) + 1,
							}
						}, {})),
					  }
						where account = lib.citadel.construct_account(map<- (map<- info)['info'])
			)),

			set(server.response, {type: 'new_cards', cards: [reward_card]}),
			] where reward_card = lib.citadel.generate_card_instance(choose(lib.citadel.get_cards_in_set('core'))),

			set(server.response, {type: 'error', message: 'Unknown request type'})
	  )
	",
}
}
