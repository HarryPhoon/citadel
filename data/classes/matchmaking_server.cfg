{
	server_only: true,

properties: {
	new_account_cards: "{string -> int} :: {
		'Wolf Rider': 3,
		'Goblin Marauder': 3,
		'Wolf': 3,
		'Goblin Sapper': 3,
		'Green Adder': 3,
		'Minotaur': 2,
		'Goblin King': 1,
		'Cave Troll': 1,
		'Call of the Pack': 1,
		q(Nature's Blessing): 3,
		'Outsmart the Guards': 2,
		'Furious Rampage': 2,
		'Cover': 3,
		'Intense Warfare': 1,

		q(King's Rider): 2,
		q(Dwarvish Warrior): 3,
		q(Thunderer): 3,
		q(Dwarvish Armourer): 3,
		q(Barracks): 2,
		q(Wall of Stone): 3,
		q(Guard Post): 2,
		q(Oldric's Trap): 2,
		q(Armed to the Teeth): 2,
		q(Toughness): 3,
		q(Tactical Maneuver): 2,
		q(Bazaar): 1,
		q(Market): 3,
	}",

	create_account: "def(map msg) ->AccountDetails
	{
		collection:
		fold(map(new_account_cards, map(range(value), {
			id: generate_uuid(),
			name: card_name,
		}) where card_name = key), a+b),

		avatar: choose(lib.citadel.basic_avatars),
	}
	",

	construct_account: "def(map info) ->AccountDetails
	{
		collection: [CardInstance]<- info.collection,
		games_played: int|null<- info.games_played,
		avatar: if(info.avatar is string, info.avatar, lib.citadel.basic_avatars[0]),
	}
	",

	handle_request: "def(matchmaking_server server, map msg) ->commands
	  switch(msg.type,
			'finish_bot_game',
			[
			server.db_client.read_modify_write('user:' + str(msg.user),
			      def(any info) ->any
				    if(info != null,
						(map<- info) + {info: account + {collection: account.collection + [reward_card]}}
						where account = construct_account((map<- info)['info'])
			)),

			set(server.response, {type: 'new_cards', cards: [reward_card]}),
			] where reward_card = lib.citadel.generate_card_instance(choose(lib.citadel.get_cards_in_set('core'))),

			set(server.response, {type: 'error', message: 'Unknown request type'})
	  )
	",
}
}
