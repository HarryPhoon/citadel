{
	properties: {
		name: "'Player ' + (player_index+1)",
		player_index: { variable: true },
		deck: { variable: true },
		hand: { variable: true },

		life: { variable: true, default: 3 },

		begin_turn: "def(game) me.add_resources({0: 2} +
		  fold(map(range(1,6), { (value): count(game.villages, value.owner = player_index and value.type = context.value) - resources[value] } ), a+b) )",

		draw_cards: "def(ncards) if(num_cards > 0, [
		         add(me.hand, deck[:num_cards]),
		         set(me.deck, deck[num_cards:])
			]) where num_cards = min(ncards, size(deck))",

		add_resources: "def(m) set(me.resources, fold(map(range(6), {(value): m[value] + resources[value]}), a+b))",

		resources_sparse: "filter(resources, value)",
		resources: { variable: true, default: "@eval fold(map(range(6), {(value): 0}), a+b)" },

		can_afford: "def(resource_type, resource_quantity) if(resource_type = 0, resource_quantity <= resources[0], resource_quantity <= resources[resource_type] + resources[0])",

		spend: "def(resource_type, resource_quantity)
		   if(resources[resource_type] >= resource_quantity,
		      add(self.resources, {(resource_type): resources[resource_type] - resource_quantity}),
			  add(self.resources, {(resource_type): 0, 0: resources[0] - (resource_quantity - resources[resource_type])}))",

		summoning_locs: "def(game)
		  [[row,column] | row <- range(game.rows), game.creature_at_loc([row, column]) = null] where column = if(player_index = 0, 0, game.columns-1)",

		has_possible_response: "def(game)
		  //do we have a response card we can play?
		  find(hand, value.is_response and can_afford(value.school, value.cost)) != null or

		  //do we have a response ability we can play?
		  find(game.creatures,
		       value.controller = player_index and
		       find(value.activated_abilities,
			        value.is_response and can_afford(value.school, value.cost)) != null) != null
		",
	},

	test: [
		{ command: "set(vars.player, construct('player', {}))" },
		{ command: "add(vars.player.resources, {0: 2, 2: 5, 4: 3})",
		  assert: "vars.player.resources = {0: 2, 1: 0, 2: 5, 3: 0, 4: 3, 5: 0}" },
		{ assert: "vars.player.can_afford(0, 2)" },
		{ assert: "not vars.player.can_afford(0, 3)" },
		{ assert: "vars.player.can_afford(1, 2)" },
		{ assert: "not vars.player.can_afford(1, 3)" },
		{ assert: "vars.player.can_afford(2, 7)" },
		{ assert: "not vars.player.can_afford(2, 8)" },
		{ assert: "vars.player.can_afford(3, 2)" },
		{ assert: "not vars.player.can_afford(3, 3)" },
		{ assert: "vars.player.can_afford(4, 5)" },
		{ assert: "not vars.player.can_afford(4, 6)" },

		{ command: "vars.player.spend(2, 3)",
		  assert: "vars.player.resources = {0: 2, 1: 0, 2: 2, 3: 0, 4: 3, 5: 0}",
		  message: "vars.player.resources" },

		{ command: "vars.player.spend(4, 4)",
		  assert: "vars.player.resources = {0: 1, 1: 0, 2: 2, 3: 0, 4: 0, 5: 0}" },

		{ command: "vars.player.spend(1, 1)",
		  assert: "vars.player.resources = {0: 0, 1: 0, 2: 2, 3: 0, 4: 0, 5: 0}" },
		{ command: "vars.player.add_resources({0: 2, 2: 4})",
		  assert: "vars.player.resources = {0: 2, 1: 0, 2: 6, 3: 0, 4: 0, 5: 0}" },
	
	]
}
