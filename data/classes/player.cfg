{
	properties: {
		name: "'Player ' + (player_index+1)",
		player_index: { variable: true },
		deck: { variable: true },

		//hand can be set as actual card objects, or as strings, which
		//will result in card objects being built.
		hand: { set: "
		  set(private.hand, map(value, if(is_string(value),
		   construct('card', get_document('data/cards.cfg')[value]), value)))",
				variable: true },

		life: { variable: true, default: 3 },

		begin_turn: "def(game) add(me.resources, 2)",

		draw_cards: "def(ncards) if(num_cards > 0, [
		         add(me.hand, deck[:num_cards]),
		         set(me.deck, deck[num_cards:])
			]) where num_cards = min(ncards, size(deck))",

		level_up: "def(school) if(school != 0, add(me.resource_level, {(school): resource_level[school]+1}))",

		resource_level: { variable: true, default: {}, type: 'map' },
		resources: { variable: true, default: 0, type: 'int' },

		actual_cost: "def(resource_type, cost, loyalty_cost)
		    cost + max(0, loyalty_cost - resource_level[resource_type])",

		can_afford: "def(resource_type, cost, loyalty_cost)
		    resources >= actual_cost(resource_type, cost, loyalty_cost)",

		spend: "def(resource_type, cost, loyalty_cost)
		  add(me.resources, -actual_cost(resource_type, cost, loyalty_cost))",

		summoning_locs: "def(game)
		  [[row,column] | row <- range(game.rows), game.creature_at_loc([row, column]) = null] where column = if(player_index = 0, 0, game.columns-1)",

		has_possible_response: "def(game)
		  //do we have a response card we can play?
		  find(hand, value.is_response and can_afford(value.school, value.cost, value.loyalty_cost)) != null or

		  //do we have a response ability we can play?
		  find(game.creatures,
		       value.controller = player_index and
		       find(value.activated_abilities,
			        value.is_response and can_afford(value.school, value.cost, value.loyalty_cost)) != null) != null
		",
	},

	test: [
		{ command: "set(vars.player, construct('player', {}))" },
		{ command: "add(vars.player.resources, 5)",
		  assert: "vars.player.resources = 5" },
		{ assert: "vars.player.can_afford(1, 3, 2)" },
		{ assert: "not vars.player.can_afford(1, 3, 3)" },

		{ command: "vars.player.spend(1, 1, 2)",
		  assert: "vars.player.resources = 2",
		  message: "vars.player.resources" },

		{ assert: "not vars.player.can_afford(1, 1, 2)" },

		{ command: "vars.player.level_up(1)",
		  assert: "vars.player.can_afford(1, 1, 2)" }
	]
}
