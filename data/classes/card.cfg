{
	constructor: "if(creature != null,
	              [
				  set(creature, creature + {name: name, school: school, hero: hero}),
				  set(creature_object, construct('creature', creature + {name: name, school: school})),
				  ])",

	properties: {
		name: { variable: true, type: 'string' },
		type: { variable: true, default: 'creature', type: 'string' },
		cost: { variable: true, default: 0, type: 'int' },
		loyalty_cost: { variable: true, default: 0, type: 'int' },
		school: { variable: true, default: 0, type: ['list','int'], set: "if(is_int(value), set(private.school, [value]), set(private.school, value))" },
		initiative: { variable: true, default: 100, type: 'int' },

		//a unique id a card gets when drawn.
		draw_id: { variable: true, default: 0, type: 'int' },

		is_response: { variable: true, default: false },

		plays_on_stack: "true",

		creature: { variable: true, default: null },
		creature_object: { variable: true, default: null },
		rules: { variable: true, default: '' },

		hero: { variable: true, default: false },

		ai_score: "def(game, targets) 0",

		card_font: "'RobotoCondensed-Light'",

		rules_text_widgets: "def(scale)
		 if(creature,
		  (fold(
		   map(creature_short_abilities, [label_base + {
			 text: value + if(index = size(creature_short_abilities)-1, '\n', ''),
			 size: 12*scale,
			 tooltip: value + ': ' + get_document('data/help-abilities.cfg')[value],
		   }]),
		   a + [label_base + {text: ', ', size: 12*scale}] + b, []) +

		   map(creature_long_abilities, [
		      map(range(value.cost), singleton('gui_widgets').resource_image(context.value.school[0], scale*14)),
		      label_base + {text: ': ' + value.rules + '\n'}
		   ])

			
		     where creature_short_abilities =
			   [a | a <- creature_object.abilities, is_string(a)],
			       creature_long_abilities =
			   [a | a <- creature_object.abilities, not is_string(a)]
				   ),
			 []
			) + singleton('gui_widgets').parse_markup_into_widgets(rules, 10*scale)


			where label_base = {
					type: 'label',
					color: 'black',
					size: 10*scale,
					font: card_font,
			   }
		",

		rules_text: "
		   fold(filter(creature_short_abilities + [rules] + creature_long_abilities, value), a+'\n'+b, '')
		     where creature_short_abilities =
			   [a | a <- creature.abilities, is_string(a)],

			       creature_long_abilities =
			[a.rules | a <- creature.abilities, not is_string(a)]",

		targets_valid: "def(game, nplayer, targets, existing=[])
		    if(possible = null, targets = [], if(possible = [], false,
				(targets[0] in possible) and
				targets_valid(game, nplayer, targets[1:], existing + [targets[0]])))
			where possible = possible_targets(game, nplayer, existing)
		",

		my_buildings_as_possible_targets: "def(game, nplayer, targets)
		  if(targets = [], [creature.loc | creature <- game.creatures, creature.is_building, creature.controller = nplayer, creature.is_valid_target(game, nplayer, me)])",

		all_buildings_as_possible_targets: "def(game, nplayer, targets)
		  if(targets = [], [creature.loc | creature <- game.creatures, creature.is_building, creature.is_valid_target(game, nplayer, me)])",

		enemy_buildings_as_possible_targets: "def(game, nplayer, targets)
		  if(targets = [], [creature.loc | creature <- game.creatures, creature.is_building, creature.controller != nplayer, creature.is_valid_target(game, nplayer, me)])",
		  
		my_creatures_as_possible_targets: "def(game, nplayer, targets)
		  if(targets = [], [creature.loc | creature <- game.creatures, not creature.is_building, creature.controller = nplayer, creature.is_valid_target(game, nplayer, me)])",

  		enemy_creatures_as_possible_targets: "def(game, nplayer, targets)
		  if(targets = [], [creature.loc | creature <- game.creatures, not creature.is_building, creature.controller != nplayer, creature.is_valid_target(game, nplayer, me)])",

		all_creatures_as_possible_targets: "def(game, nplayer, targets)
		  if(targets = [], [creature.loc | creature <- game.creatures, not creature.is_building, creature.is_valid_target(game, nplayer, me)])",

		possible_targets: "def(game, nplayer, targets)
		   if(creature != null and targets = [],
				if(creature.is_construct,

					//buildings are built in a vacant village we own.
					[village | village <- keys(game.villages),
					           game.creature_at_loc(village) = null,
							   game.villages[village].owner = nplayer,
							   game.villages[village].level >= creature.level] +
					game.players[nplayer].summoning_locs(game, creature),

					game.players[nplayer].summoning_locs(game, creature)
                  ) )",
		do_summons: "def(game, info)
		   if(creature != null, summon_fn(construct('creature',
		     creature + {card_name: name, controller: game.current_player, loc: info.targets[0]}))
				  where summon_fn = if(creature.is_construct, game.summon_construct, game.summon_creature))
				  asserting size(info.targets) = 1",

		on_play_on_creature: "null", //def(game, target_creature)

		on_play: "def(game, info) if(type = 'spell',
		    if(on_play_on_creature,
			  (on_play_on_creature(game, target)
			     asserting target
			     where target = game.creature_at_loc(info.targets[0]))
				 asserting size(info.targets) = 1 | info.targets),
		    do_summons(game, info))",
		record_animation: "def(game, info, stack_id)
		if(true or type = 'spell', add(game.animation_hints, [
			{
				type: 'play_card',
				card_type: name,
				player: game.current_player,
				targets: info.targets,
			} + if(plays_on_stack, {stack_id: stack_id}, {})
		]))"
	}
}
