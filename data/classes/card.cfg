{
	bases: ['card_base'],
	constructor: "if(creature != null,
	              [
				  set(creature, creature + {name: name, school: school, hero: hero}),
				  set(creature_object, construct('creature', creature + {name: name, school: school})),
				  ])",

	properties: {
		initiative: { variable: true, default: 100, type: 'int' },
		rarity: { variable: true, default: 0, type: 'int' },
		set: { type: "string|null" },

		token: { type: 'bool', default: false },

		plays_on_stack: "true",

		rules: { variable: true, default: '' },

		ai_score: "def(class game game, [Loc] targets) ->int 0",

		windup_sound: "string :: switch(first_school,
		  COLORLESS, 'spells/Spell-windup2.wav',
		  GOLD, 'spells/spell-windup-gold.wav',
		  BLOOD, 'spells/spell-windup-blood.wav',
		  FOOD, 'spells/Spell-windup2.wav',
		  SCROLLS, 'spells/Spell-windup2.wav',
		  FAITH, 'spells/spell-windup-faith.wav')",

		rules_text_widgets: "def(int scale) ->list
		 if(creature and creature_object,
		  (fold(
		   map(creature_short_abilities, [label_base + {
			 text: value + if(index = size(creature_short_abilities)-1, '\n', ''),
			 size: 12*scale,
			 tooltip: value + ': ' + lib.json.get_document_map('data/help-abilities.cfg')[value],
		   }]),
		   a + [label_base + {text: ', ', size: 12*scale}] + b, []) +

		   map(creature_long_abilities, [
		      singleton('gui_widgets').parse_markup_into_widgets(value.name + ': ' + if(value.cost > 0, 'Pay ' + str(value.cost) + ', ', '') + value.rules + '\n', 10*scale)
		   ])

			
		     where creature_short_abilities =
			   [a | a <- creature_object.abilities],
			       creature_long_abilities =
			   [a | a <- creature_object.activated_abilities]
				   ),
			 []
			) + singleton('gui_widgets').parse_markup_into_widgets(rules, 10*scale)


			where label_base = {
					type: 'label',
					color: 'black',
					size: 10*scale,
					font: card_font,
			   }
		",

		rules_text: "string <-
		   fold(filter(creature_short_abilities + [rules] + creature_rules + creature_long_abilities, value), a+'\n'+b, '')
		     where creature_rules = [string]<-
			   if(creature_object and creature_object.resistance > 0, [str(creature_object.resistance) + ' Armor'], []) +
			   if(creature_object and creature_object.range > 0, [str(creature_object.range) + ' Range'], []) +
			   if(creature_object and creature_object.move != 1, [str(creature_object.move) + ' Movement'], []) +
			   if(creature_object and creature_object.rules is string, [creature_object.rules], [])
		     where creature_short_abilities = [string]<-
			   if(creature_object, [a | a <- creature_object.abilities], []),

			       creature_long_abilities = [string]<-
			   if(creature_object,
				  [a.name + ': ' + if(a.cost > 0, 'Pay ' + str(a.cost) + '; ', '') + a.rules | a <- creature_object.activated_abilities], [])",

		targets_valid: "def(class game game, int nplayer, [Loc] targets, [Loc] existing=[])
		    if(possible = null, targets = [], if(possible = [] or targets = [], false,
				(targets[0] in possible) and
				targets_valid(game, nplayer, targets[1:], existing + [targets[0]])))
			where possible = possible_targets(game, nplayer, existing)
		",

		my_buildings_as_possible_targets: "def(class game game, int nplayer, [Loc] targets) ->[Loc]|null
		  if(targets = [], [creature.loc | creature <- game.creatures, creature.is_building, creature.controller = nplayer, creature.is_valid_target(game, nplayer, me)])",

		all_buildings_as_possible_targets: "def(class game game, int nplayer, [Loc] targets) ->[Loc]|null
		  if(targets = [], [creature.loc | creature <- game.creatures, creature.is_building, creature.is_valid_target(game, nplayer, me)])",

		enemy_buildings_as_possible_targets: "def(class game game, int nplayer, [Loc] targets) ->[Loc]|null
		  if(targets = [], [creature.loc | creature <- game.creatures, creature.is_building, creature.controller != nplayer, creature.is_valid_target(game, nplayer, me)])",
		  
		my_creatures_as_possible_targets: "def(class game game, int nplayer, [Loc] targets) ->[Loc]|null
		  if(targets = [], [creature.loc | creature <- game.creatures, not creature.is_building, creature.controller = nplayer, creature.is_valid_target(game, nplayer, me)])",

  		enemy_creatures_as_possible_targets: "def(class game game, int nplayer, [Loc] targets) ->[Loc]|null
		  if(targets = [], [creature.loc | creature <- game.creatures, not creature.is_building, creature.controller != nplayer, creature.is_valid_target(game, nplayer, me)])",

		all_creatures_and_players_as_possible_targets: "def(class game game, int nplayer, [Loc] targets) ->[Loc]|null
		  if(targets = [], [creature.loc | creature <- game.creatures, not creature.is_building, creature.is_valid_target(game, nplayer, me)] +
		                [[-1, player.player_index] | player <- game.players])",

		all_creatures_as_possible_targets: "def(class game game, int nplayer, [Loc] targets) ->[Loc]|null
		  if(targets = [], [creature.loc | creature <- game.creatures, not creature.is_building, creature.is_valid_target(game, nplayer, me)])",

		all_tiles_as_possible_targets: "def(class game game, int nplayer, [Loc] targets) ->[Loc]|null
		  if(targets = [], game.all_locs)",

		possible_targets: "def(class game game, int nplayer, [Loc] targets) ->[Loc]|null
		   if(creature != null and targets = [],
				if(creature.is_construct,

					game.players[nplayer].summoning_locs(game, creature),

					game.players[nplayer].summoning_locs(game, creature)
                  ) )",
		do_summons: "def(class game game, class message.play_card info) ->commands
		   if(creature != null, summon_fn(construct('creature',
		     creature + {card_name: name, controller: game.current_player, loc: info.targets[0]}))
				  where summon_fn = if(creature.is_construct, game.summon_construct, game.summon_creature))
				  asserting size(info.targets) = 1",

		on_play_on_creature: "def(class game game, class creature target_creature) ->commands null",

		on_cast: "def(class game game, class message.play_card info) ->commands null",

		on_pay_cost: "def(class game game, class message.play_card info) ->commands null",

		on_play: "def(class game game, class message.play_card info) ->commands
		 if(type = 'invocation',
		   if(size(info.targets) = 1,
		    if(target_creature,
			  on_play_on_creature(game, target_creature))
			     where target_creature = game.creature_at_loc(info.targets[0])),
		    do_summons(game, info))",
		record_animation: "def(class game game, class message.play_card info, int stack_id)
		add(game.animation_hints, [construct('animation.play_card_hint',
			{
				type: 'play_card',
				card: me,
				player: game.current_player,
				targets: info.targets,
				stack_id: stack_id
			}
		)])",
	}
}
