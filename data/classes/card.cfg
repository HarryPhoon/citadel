{
	constructor: "if(creature != null,
	              [
				  set(creature, creature + {name: name, school: school}),
				  set(creature_object, construct('creature', creature + {name: name, school: school})),
				  ])",

	properties: {
		name: { variable: true, type: 'string' },
		type: { variable: true, default: 'creature', type: 'string' },
		cost: { variable: true, default: 0, type: 'int' },
		loyalty_cost: { variable: true, default: 0, type: 'int' },
		school: { variable: true, default: 0, type: 'int' },
		initiative: { variable: true, default: 100, type: 'int' },

		is_response: { variable: true, default: false },

		creature: { variable: true, default: null },
		creature_object: { variable: true, default: null },
		rules: { variable: true, default: '' },

		card_font: "'RobotoCondensed-Light'",

		rules_text_widgets: "def(scale)
		 if(creature,
		  (fold(
		   map(creature_short_abilities, [label_base + {
			 text: value + if(index = size(creature_short_abilities)-1, '\n', ''),
			 size: 12*scale,
			 tooltip: value + ': ' + get_document('data/help-abilities.cfg')[value],
		   }]),
		   a + [label_base + {text: ', ', size: 12*scale}] + b, []) +

		   map(creature_long_abilities, [
		      map(range(value.cost), singleton('gui_widgets').resource_image(context.value.school, scale*14)),
		      label_base + {text: ': ' + value.rules + '\n'}
		   ])

			
		     where creature_short_abilities =
			   [a | a <- creature.abilities, is_string(a)],
			       creature_long_abilities =
			[a | a <- creature.abilities, not is_string(a)]
				   ),
			 []
			) + [label_base + {text: rules}]


			where label_base = {
					type: 'label',
					color: 'black',
					size: 10*scale,
					font: card_font,
			   }
		",

		rules_text: "
		   fold(filter(creature_short_abilities + [rules] + creature_long_abilities, value), a+'\n'+b, '')
		     where creature_short_abilities =
			   [a | a <- creature.abilities, is_string(a)],

			       creature_long_abilities =
			[a.rules | a <- creature.abilities, not is_string(a)]",

		possible_targets: "def(game, nplayer, targets)
		   if(creature != null and targets = [],
				if(creature.is_building,

					//buildings are built in a vacant village we own.
					[village | village <- keys(game.villages),
					           game.creature_at_loc(village) = null,
							   game.villages[village].owner = nplayer,
							   game.villages[village].level >= creature.level],

					game.players[nplayer].summoning_locs(game)
                  ) )",

		on_play: "def(game, info)
		   if(creature != null, game.summon_creature(construct('creature',
		     creature + {controller: game.current_player, loc: info.targets[0]}))
				  asserting size(info.targets) = 1)
		"
	}
}
