{
	bases: ['card_base'],
	constructor: "if(creature != null,
	              [
				  set(creature, creature + {name: name, school: school, hero: hero}),
				  set(creature_object, construct('creature', creature + {name: name, school: school})),
				  ])",

	properties: {
		rarity: { variable: true, default: 0, type: 'int' },
		set: { type: "string|null" },

		artist: { type: "string|null" },

		get_artist: "Artist|null :: if(artist != null,
						if (artist_record != null,
							Artist <- artist_record,
							dump('Card: <' + name + '>: Could not find artist: ' + artist, null))
						where artist_record = lib.json.get_document_map('data/artists.cfg')[artist])",

		token: { type: 'bool', default: false },

		windup_sound: "string :: if(sound_windup != null, sound_windup,
		switch(first_school,
		  COLORLESS, 'gameplay/spell-windup-colorless',
		  GOLD, 'gameplay/spell-windup-materia',
		  BLOOD, 'gameplay/spell-windup-entropia',
		  FOOD, 'gameplay/spell-windup-gaea',
		  SCROLLS, 'gameplay/spell-windup-minerva',
		  FAITH, 'gameplay/spell-windup-aether'))",

		matches_search: "def([string] words) ->bool
			find(words, me.matches_search_word(value) = false) = null
		",

		matches_search_word: "def(string word) ->bool
		find(if(get_artist, [get_artist.name], []) + [name, type_text, rules_text] + tags + map(school, string<- ENGLISH_SCHOOL_NAMES[value]), regex_match(lower(value), word)) != null
		",

		_markup_rules: "def(string text) ->string
			regex_replace(text, '([-+]?)([0-9X])/([-+]?)([0-9X])', q(<nobr><font tag='attack'> $1$2 </font><font tag='life'> $3$4 </font></nobr>))
		",

		rules_text_font_size: "int ::
			if(longest_line < 12, 16, 12)
			where longest_line = max([0] + map(split(rules_text, '\n'), size(value)))
		",

		rules_text: "string <-
		_markup_rules(
		   fold(filter(if(creature_short_abilities, [fold(creature_short_abilities, a+', '+b)], []) + [rules] + creature_rules + creature_long_abilities, value), a+'\n'+b, '')
		  )
		     where creature_rules = [string]<-
			   if(creature_object and creature_object.rules is string, [creature_object.rules], [])
		     where creature_short_abilities = [string]<-
			   if(creature_object and creature_object.resistance > 0, [str(creature_object.resistance) + ' Armor'], []) +
			   if(creature_object and creature_object.range > 0, [str(creature_object.range) + ' Range'], []) +
			   if(is_channeled, ['Channeled'], []) +
			   if(creature_object, [a | a <- creature_object.abilities], []),

			       creature_long_abilities = [string]<-
			   if(creature_object,
				  [if(a.uses_action, q( <font tag='circle' size='+1'><b>A</b></font>), q()) +
				   q( <font tag='circle' size='+1'><b>) + str(a.cost) + q(</b></font>) +
					q( <b>) + a.name + if(a.is_response, q(&emdash;<i>Response</i>), q()) + q(&emdash;</font>) + a.rules | a <- creature_object.activated_abilities] +
				  [q( <font tag='circle' size='+1'><b>P</b></font> ) + q( <b>) + a.name + '&emdash;</b>' + a.rules | a <- creature_object.passive_abilities] +
				  [q( <font tag='circle' size='+1'><b>T</b></font> ) + if(a.once, q( <font size='-4'>(once)</font> ), q( )) + q(<b>) + a.name + '&emdash;</b>' + a.rules | a <- creature_object.triggered_abilities, not a.hidden_on_creature], [])",

		targets_valid: "def(class game game, class creature avatar, [Loc] targets, [Loc] existing=[]) ->bool
		if(min_targets is int and targets = [] and size(existing) >= min_targets,
			true,
		    if(possible = null, targets = [], if(possible = [] or targets = [], false,
				(targets[0] in possible) and
				targets_valid(game, avatar, targets[1:], existing + [targets[0]])))
			where possible = possible_targets(game, avatar, existing)
		)
		",

		possible_targets: "def(class game game, class creature avatar, [Loc] targets) ->[Loc]|null
		   if(creature != null and targets = [],
					game.players[avatar.controller].summoning_locs(game, creature)
                  )",
		do_summons: "def(class game game, class message.play_card info) ->commands
		   if(creature != null, summon_fn(construct('creature',
		     creature + {card_name: name, controller: game.current_player, loc: info.targets[0], channel: info.channel, choices: info.choices}))
				  where summon_fn = if(creature.is_construct, game.summon_construct, game.summon_creature))
				  asserting size(info.targets) = 1",

		on_play_on_creature: "def(class game game, class creature target_creature) ->commands null",

		on_play: "def(class game game, class message.play_card info) ->commands
		 if(type = 'spell',
		   if(size(info.targets) = 1,
		    if(target_creature,
			  on_play_on_creature(game, target_creature))
			     where target_creature = game.creature_at_loc(info.targets[0])),
		    do_summons(game, info))",
		record_animation: "def(class game game, int nplayer, class message.play_card info, int stack_id) -> commands
		add(game.animation_hints, [construct('animation.play_card_hint',
			{
				type: 'play_card',
				card: me,
				player: nplayer,
				targets: info.targets,
				stack_id: stack_id,
				info: info,
			}
		)])",

		original_hand_card: { type: "bool", default: false },
	},
/*
	lua: {
		init: "
			print('hi from lua!!')
		"
	},
*/
}
