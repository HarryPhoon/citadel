{
	constructor: "if(creature != null,
	              [
				  set(creature, creature + {name: name, school: school}),
				  set(creature_object, construct('creature', creature + {name: name, school: school})),
				  ])",

	properties: {
		name: { variable: true },
		type: { variable: true, default: 'creature' },
		cost: { variable: true, default: 0 },
		school: { variable: true, default: 0 },
		initiative: { variable: true, default: 100 },

		creature: { variable: true, default: null },
		creature_object: { variable: true, default: null },
		rules: { variable: true, default: '' },

		rules_text: "
		   fold(filter(creature_short_abilities + [rules] + creature_long_abilities, value), a+'\n'+b, '')
		     where creature_short_abilities =
			   [a | a <- creature.abilities, is_string(a)],

			       creature_long_abilities =
			[a.rules | a <- creature.abilities, not is_string(a)]",

		possible_targets: "def(game, nplayer, targets)
		   if(creature != null and targets = [],
				if(creature.is_building,

					//buildings are built in a vacant village we own.
					[village | village <- keys(game.villages), game.creature_at_loc(village) = null and game.villages[village].owner = nplayer],

					//creatures are built on the first column.
				     [[row,column] | row <- range(game.rows), game.creature_at_loc([row, column]) = null] where column = if(nplayer = 0, 0, game.columns-1)
					) )",

		on_play: "def(game, info)
		   if(creature != null, game.summon_creature(construct('creature',
		     creature + {controller: game.current_player, loc: info.targets[0]}))
				  asserting size(info.targets) = 1)
		"
	}
}
