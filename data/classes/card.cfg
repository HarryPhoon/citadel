{
	bases: ['card_base'],
	constructor: "if(creature != null,
	              [
				  set(creature, creature + {name: name, school: school, hero: hero}),
				  set(creature_object, construct('creature', creature + {name: name, school: school})),
				  ])",

	properties: {
		rarity: { variable: true, default: 0, type: 'int' },
		set: { type: "string|null" },

		artist: { type: "string|null" },

		get_artist: "Artist|null :: if(artist != null,
						if (artist_record != null,
							Artist <- artist_record,
							dump('Card: <' + name + '>: Could not find artist: ' + artist, null))
						where artist_record = lib.json.get_document_map('data/artists.cfg')[artist])",

		token: { type: 'bool', default: false },

		windup_sound: "string :: if(sound_windup != null, sound_windup,
		switch(first_school,
		  COLORLESS, 'spells/Spell-windup2.wav',
		  GOLD, 'spells/spell-windup-gold.wav',
		  BLOOD, 'spells/spell-windup-blood.wav',
		  FOOD, 'spells/spell-windup-food.wav',
		  SCROLLS, 'spells/Spell-windup-scrolls.wav',
		  FAITH, 'spells/spell-windup-faith.wav'))",

		rules_tips: "[{ title: string, text: string }] ::
			if(creature and creature_object,
			  map(creature_object.abilities, {
				title: value,
				text: string<- (help[value] asserting value in help | value)
				  where help = lib.json.get_document_map('data/help-abilities.cfg'),
			  }),
			  []
			)
		",

		rules_text_widgets: "def(int scale) ->list
		 if(creature and creature_object,
		  (fold(
		   map(creature_short_abilities, [label_base + {
			 text: value + if(index = size(creature_short_abilities)-1, '\n', ''),
			 size: 12*scale,
			 tooltip: value + ': ' + str(lib.json.get_document_map('data/help-abilities.cfg')[value]),
		   }]),
		   a + [label_base + {text: ', ', size: 12*scale}] + b, []) +

		   map(creature_long_abilities, [
		      singleton('gui_widgets').parse_markup_into_widgets(value.name + ': ' + if(value.cost > 0, 'Pay ' + str(value.cost) + ', ', '') + value.rules + '\n', 10*scale)
		   ])

			
		     where creature_short_abilities =
			   [a | a <- creature_object.abilities],
			       creature_long_abilities =
			   [a | a <- creature_object.activated_abilities]
				   ),
			 []
			) + singleton('gui_widgets').parse_markup_into_widgets(rules, 10*scale)


			where label_base = {
					type: 'label',
					color: 'black',
					size: 10*scale,
					font: card_font,
			   }
		",

		rules_text_font_size: "int ::
			if(longest_line < 12, 16, 12)
			where longest_line = max([0] + map(split(rules_text, '\n'), size(value)))
		",

		rules_text: "string <-
			if(is_channeled, 'Channeled\n', '') +
			
		   fold(filter(creature_short_abilities + [rules] + creature_rules + creature_long_abilities, value), a+'\n'+b, '')
		     where creature_rules = [string]<-
			   if(creature_object and creature_object.resistance > 0, [str(creature_object.resistance) + ' Armor'], []) +
			   if(creature_object and creature_object.range > 0, [str(creature_object.range) + ' Range'], []) +
			   if(creature_object and creature_object.move != 1 and creature_object.is_construct = false and creature_object.is_building = false, [str(creature_object.move) + ' Movement'], []) +
			   if(creature_object and creature_object.rules is string, [creature_object.rules], [])
		     where creature_short_abilities = [string]<-
			   if(creature_object, [a | a <- creature_object.abilities], []),

			       creature_long_abilities = [string]<-
			   if(creature_object,
				  [q( <font tag='circle' size='+1'><b>A</b></font>) + q(  <b>) + a.name + ': ' + str(a.cost) + q(&emdash;</font>) + a.rules | a <- creature_object.activated_abilities] +
				  [q( <font tag='circle' size='+1'><b>P</b></font>) + q(  <b>) + a.name + '&emdash;</b>' + a.rules | a <- creature_object.passive_abilities] +
				  [q( <font tag='circle' size='+1'><b>T</b></font>) + if(a.once, q(  <font size='-4'>(once)</font> ), q(  )) + q(<b>) + a.name + '&emdash;</b>' + a.rules | a <- creature_object.triggered_abilities], [])",

		targets_valid: "def(class game game, class creature avatar, [Loc] targets, [Loc] existing=[]) ->bool
		dump(['targets_valid', name, game.nplayer, targets, result], result)
		    where result = if(possible = null, targets = [], if(possible = [] or targets = [], false,
				(targets[0] in possible) and
				targets_valid(game, avatar, targets[1:], existing + [targets[0]])))
			where possible = possible_targets(game, avatar, existing)
		",

		possible_targets: "def(class game game, class creature avatar, [Loc] targets) ->[Loc]|null
		   if(creature != null and targets = [],
				if(creature.is_construct,

					game.players[avatar.controller].summoning_locs(game, creature),

					game.players[avatar.controller].summoning_locs(game, creature)
                  ) )",
		do_summons: "def(class game game, class message.play_card info) ->commands
		   if(creature != null, summon_fn(construct('creature',
		     creature + {card_name: name, controller: game.current_player, loc: info.targets[0], channel: info.channel, choices: info.choices}))
				  where summon_fn = if(creature.is_construct, game.summon_construct, game.summon_creature))
				  asserting size(info.targets) = 1",

		on_play_on_creature: "def(class game game, class creature target_creature) ->commands null",

		on_play: "def(class game game, class message.play_card info) ->commands
		 if(type = 'invocation',
		   if(size(info.targets) = 1,
		    if(target_creature,
			  on_play_on_creature(game, target_creature))
			     where target_creature = game.creature_at_loc(info.targets[0])),
		    do_summons(game, info))",
		record_animation: "def(class game game, class message.play_card info, int stack_id) -> commands
		add(game.animation_hints, [construct('animation.play_card_hint',
			{
				type: 'play_card',
				card: me,
				player: game.current_player,
				targets: info.targets,
				stack_id: stack_id
			}
		)])",

		original_hand_card: { type: "bool", default: false },
	}
}
