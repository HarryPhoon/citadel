{
	bases: ["bot"],

	properties: {

	score_play: "def(class game game, map play_info, class card card, [Loc] targets) ->int
		if(card.name = 'Hypothermia' and game.in_response_phase = false,
		  if(target_creature.controller = game.current_player_index, -1000, 0) +
		  if(target_creature.life > 4, -1000, 0) +
		  if(game.is_loc_on_board([targets[0][0], targets[0][1]+1]) = false, 100, 0) +
		  if(game.is_loc_on_board([targets[0][0], targets[0][1]+2]) = false, 100, 0) +
		  if(game.is_loc_on_board([targets[0][0], targets[0][1]-1]), 100, 0) +
		  
		  //don't cast Hypothermia if we are already blocking the creature
		  if(find(game.creatures, value.controller = 1 and value.loc[0] = targets[0][0]) != null, -1000, 0) +

		  if(game.players[0].visible_discard_pile != [] or game.players[1].visible_discard_pile != [], 100, 0)
		  where target_creature = game.creature_at_loc_or_die(targets[0]),

		  card.name = 'Green Adder' and (find(game.players[0].visible_discard_pile, value.name = 'Heal') != null or game.players[1].life < 40),
		  if(scores = [] or find(game.creatures, value.controller = 1 and value.loc[0] = targets[0][0]) != null, -1000, 1000 - min(scores))
			where scores = map(filter(game.creatures, value.controller = 0 and value.loc[0] = targets[0][0]),
		      abs(targets[0][1] - value.loc[1])),
		0)
	",

	get_best_play: "def(class game game) -> class bot.CardPlay|null

	if(plays != null, result
	where result = choose(filter(values(plays), value.score > 0), value.score)
	)

	where player = game.players[game.current_player_index]
	where plays = calculate_plays(game, play_info)
	where play_info = calculate_play_info(game)",


	should_wait: "def(class game game, class bot.CardPlay best_play) ->bool
	  false",
	
	deck: "[string]<- default_deck",

	default_deck: "[string]<- ['Disciple']*30",

	}
}
