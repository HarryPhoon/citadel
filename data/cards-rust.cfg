//"Rust" cards for Phanterm's set.
{
	"Oxidize": {
		name: "Oxidize",
		type: "spell",
		set: "rust",
		rarity: 0,
		school: "@eval [MATERIA, ENTROPIA]",
		portrait: "translocate.png",
		hue_shift: 0.1,
		is_response: false,
		cost: 2,
		loyalty_cost: 2,
		rules: "Target land gets <i>Fragile</i>, or target land with Fragile is destroyed.",
		possible_targets: "all_lands_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		if('Fragile' in land.abilities,
			set(land.destroyed, true),
			add(land.abilities, ['Fragile'])
		)
			where land = game.land_at_loc_or_die(info.targets[0])
		",
	},

	//utility card (not available in any set) used for Neglect
	"Ruin": {
		name: "Ruin",

		rarity: 0,
		type: "creature",
		cost: 0,
		loyalty_cost: 0,
		portrait: "wall-of-stone.png",
		hue_shift: 0.5,
		school: "@eval MATERIA",
		creature: {
			life: 3,
			attack: 0,
			is_building: true,
		},
	},

	"Neglect": {
		name: "Neglect",
		set: "rust",
		school: "@eval [MATERIA, ENTROPIA]",
		cost: 2,
		loyalty_cost: 1,
		rarity: 0,
		is_response: true,
		portrait: "translocate.png",
		hue_shift: 0.2,
		help_strings: ["Transform"],
		subcard_tips: ["Ruin"],

		resolve_effect: 'popup',
		resolve_delay: 12,
		resolve_impact: { type: 'polymorph_impact' },
		resolve_launch: { type: 'polymorph_launch' },

		rules: "Transform target building into a <i>Ruin</i>.",
		possible_targets: "all_buildings_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		[
			set(ruin.portrait, 'wall-of-stone.png'),
			target.transform(game, ruin),
		]
		where ruin = lib.citadel.create_creature('Ruin')
		where target = game.creature_at_loc_or_die(info.targets[0])
		",

		ai_flags: ["@eval AI_CARD_NEVER_TARGET_FRIENDS"],

	},

	//TODO: add a graphical effect to this. It works otherwise though.
	"Smogscreen": {
		name: "Smogscreen",
		set: "rust",
		school: "@eval [MATERIA, ENTROPIA]",
		cost: 2,
		loyalty_cost: 1,
		rarity: 0,
		is_response: false,
		portrait: "translocate.png",
		hue_shift: 0.3,
		rules: "Creatures, buildings, and lands on target tile cannot be targeted until the beginning of your next turn.",

		possible_targets: "all_tiles_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		[
		//add a passive ability to the player's avatar which makes all
		//creatures and lands in the tile have Untargetable.
		add(game.players[game.current_player].creature_avatar.passive_abilities, [
		{
			unique_id: unique_id,
			static_effect: q(def(class game_state game, class creature creature) ->commands
				map(entities,
					value.add_ability_static_duration('Untargetable')
				)
				where entities = if(creature, [creature], []) + if(land, [land], [])
				where creature = game.creature_at_loc(loc)
				where land = game.land_at_loc(loc)

				where loc = (Loc<- info)
			),

			info: info.targets[0],
		}
		]),

		//add a triggered ability that triggers on the start of the next
		//turn which removes the above passive ability.
		add(game.players[game.current_player].creature_avatar.triggered_abilities, [
		{
			unique_id: unique_id,
			once: true,
			on_begin_turn: q(def(class creature creature, class game_state game) ->commands
			if(game.current_player = creature.controller, [
				//remove this ability
				trigger(creature),
				set(creature.passive_abilities, filter(creature.passive_abilities, value.unique_id != me.unique_id)),
			])
			),
		}
		])
		]
		where unique_id = generate_uuid()
		",
	},


}
