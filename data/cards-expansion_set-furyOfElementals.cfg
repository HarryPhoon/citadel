{

//Aether

    "Water Elemental": {
		name: "Water Elemental",
		set: "Fury_of_Elementals",
		rarity: 1,
		type: "creature",
		portrait: "water-elemental.png",
		cost: 4,
		loyalty_cost: 1,
        is_channeled: true,
        
		school: "@eval FAITH",
		creature: {
            sound_summoned: "creatures/summon-flesh-golem.wav",
            sound_death: "creatures/death-flesh-golem.wav",
			tags: ['Elemental', 'Waterbound'],
			attack: 3,
			life: 5,
			move: 1,
			image_num: 75,
            
            triggered_abilities: [{
				name: "Timeless Depths",
				rules: "Gains 1 life per mana spent on channeling.
When damage is dealt to it, The damage is not enough to kill it, it heals the equal to the amount of damage.",
				on_summoned: "def(class creature creature, class game game) ->commands
                [
                    add(creature.life, creature.channel),
                ]",
                on_damaged: "def(class creature creature, class game game, int damage) ->commands
                    if (creature.life>damage, add(creature.life, damage))",
            }],
		}
	},

"Shrine of the Ancestors": {
		name: "Shrine of the Ancestors",
		set: "Fury_of_Elementals",
		rarity: 0,
		type: "creature",
		portrait: "shrine-of-ancestors.png",
		cost: 4,
		loyalty_cost: 1,
		school: "@eval FAITH",
		creature: {
			tags: ["Shrine"],
			is_construct: true,
			image_num: 4,
            triggered_abilities: [{
				name: "Venerate",
				rules: "When another creature you control dies, this shrine gains +1 energy. At the start of your turn, creatures on the shrine gain life equal to the amount of energy on the shrine.",

				on_another_creature_died: "def(class creature creature, class game game, class creature victim) ->commands if(victim.controller=creature.controller, add(creature.energy, 1))",
                on_begin_turn: "def(class creature creature, class game game) ->commands
			             if(game.creature_at_loc(creature.loc) and game.current_player = creature.controller,
							 if(not enhanced.is_building, add(enhanced.life, creature.energy)))
                             where enhanced = game.creature_at_loc_or_die(creature.loc)",
			}],
		}
	},
    
    "Softhand": {
		name: "Softhand",
		set: "Fury_of_Elementals",
		rarity: 0,
		type: "creature",
		portrait: "softhand.png",
		cost: 2,
		loyalty_cost: 0,
		school: "@eval FAITH",
		creature: {
			tags: ['Elf'],
			image_num: 25,
			attack: 0,
			life: 4,
			move: 1,
                
                passive_abilities: [{
				name: "Healing Touch",
				rules: "Softhand and allied creatures adjacent to Softhand gain 1 life each time they take damage.",
				static_effect: "def(class game game, class creature creature) ->commands
				[   
                    if(creature.controller = target.controller,
				    [target.add_triggered_ability_static_duration({
					name: q(Healing),
                    hidden_on_creature: true,
					rules: 'When this creature takes damage, it gains 1 life.',
					on_damaged: 'def(class creature creature, class game game, int damage) ->commands
						if(damage > 0, add(creature.life, 1))
					',
					})])
				  | target <- game.creatures,
				    target.is_building = false and (game.locs_adjacent(creature.loc, target.loc) or creature.loc = target.loc)
				]",
                hidden_on_creature: false,
			}],
            activated_abilities: [{
					name: 'Cure Affliction',
					cost: 1,
					loyalty_cost: 0,
					school: "@eval FAITH",

					portrait: "school-faith.png",
					rules: "Remove all stacks of poison from an adjacent creature. Is a responce.",
					is_response: true,

					sound_resolve: 'creatures/wisp-unsummon.wav',
					possible_targets: "def(class game game, class creature creature, [Loc] targets) ->[Loc]|null
						if(targets != [], null,
						   map(filter(game.creatures, value != creature and value.is_building = false and game.locs_adjacent(creature.loc, value.loc) and value.is_valid_target(game, game.nplayer, me)), value.loc)
						)
					",

					on_play: "
					 def(class game game, class message.play_card info) ->commands [
					 	set(target.status_effects, filter(target.status_effects, not value in ['Poisoned'])),
                        set(target.static_status_effects, filter(target.static_status_effects, not value in ['Poisoned']))
                        //without this second note, static_status_effects wouldn't be reapplied.
					] where target = game.creature_at_loc_or_die(info.targets[0])"
				}],
		}
	},
    
    "Tester": {
		name: "Tester",
		type: "creature",
		set: "Fury_of_Elementals",
		rarity: 1,
		portrait: "tester.png",
		cost: 2,
        loyalty_cost: 1,
        is_channeled: true,
        flavor_text: "I am not an avatar of justice. She is blind and impartial. I am Trial and it is my purpose to advocate your failure.",
		school: "@eval FAITH",
		creature: {
			tags: ['Avatar', 'Darkbound'],
			overlays: [ { image_num: 25 } ],
			attack: 2,
			life: 2,
			move: 1,
            channel: 0,
            triggered_abilities: [{
				name: "Seek Weakness",
				rules: "For each mana channeled, Tester gains +1/+1.
If tester is summoned in a lane where the enemy seal is broken, it gains haste.
If tester enters the enemy citadel, he deals additional damage equal to his attack to the enemy player.",

				on_summoned: "def(class creature creature, class game game) ->commands 
                [add(creature.life, creature.channel),
                 add(creature.attack, creature.channel),
                 if(game.trophies[(creature.controller +1)%2][creature.loc[0]] = 0, 
					add(creature.abilities, ['Haste']))
                    ]",
                
                on_reach_endzone: "def(class creature creature, class game game) ->commands
                    add(game.players[(creature.controller+1)%2].life, -(creature.attack))",
            }],
			image_num: 35
		}
	},
    
    "Cloud Zephyr": {
		name: "Cloud Zephyr",
		type: "creature",
		set: "Fury_of_Elementals",
		rarity: 1,
		portrait: "cloud-zephyr.png",
		cost: 2,
        is_channeled: true,
		school: "@eval FAITH",
		creature: {
			tags: ['Elemental', 'Waterbound', 'Flying'],
			overlays: [ { image_num: 25 } ],
			attack: 3,
			life: 3,
			move: 1,
            channel: 0,
            triggered_abilities: [{
				name: "Breath of the Sky",
				rules: "When summoned, all of your flying creatures gain 1 life per mana channeled.",

				on_summoned: "def(class creature creature, class game game) ->commands 
                    map(game.creatures, if(value.controller = creature.controller and 'Flying' in value.tags, add(value.life, creature.channel)))",
                    }],
            passive_abilities: [{
				name: "Gentle Veil",
				rules: "Flying creatures adjacent to Cloud Zephyr gain Cover.",
				static_effect: "def(class game game, class creature creature) ->commands
                [   
                    if(game.locs_adjacent(creature.loc, target.loc),
				    [target.add_ability_static_duration('Cover')])
				  | target <- game.creatures,
				    'Flying' in target.tags
				]",
			}],
			image_num: 35
		}
	},
    
        "Light Elemental": {
		name: "Light Elemental",
		type: "creature",
		set: "Fury_of_Elementals",
		rarity: 1,
		portrait: "light-elemental.png",
		cost: 4,
		loyalty_cost: 2,
        is_channeled: true,
		school: "@eval FAITH",
		creature: {
			tags: ['Elemental', 'Lifebound'],
            abilities: ['Regeneration'],
			overlays: [ { image_num: 25 } ],
			attack: 5,
			life: 3,
			move: 1,
            triggered_abilities: [{
				name: "New Light",
				rules: "When summoned, each ally in the lane gains life equal to double the amount channeled.",
				on_summoned: "def(class creature creature, class game game) ->commands
                    map(game.creatures, if(game.current_player_index = value.controller and (not value.is_construct) and (not value.is_building) and value.loc[0] = creature.loc[0], [
			add(value.life, creature.channel*2),
		]))",
            }],
			image_num: 35
		}
	},
    
    "Furnace of Adversity": {
		name: "Furnace of Adversity",
		//set: "Fury_of_Elementals",
		rarity: 2,
		type: "invocation",
		cost: 7,
		loyalty_cost: 0,
		portrait: "furnace-of-adversity.png",
		school: "@eval FAITH",
		is_response: true,
		rules: "This card is deappreciated.
        
        Until end of turn, all of your creatures gain the following ability: 'When this creature deals damage, it gains life equal to your aether level. When this creature takes damage, it gais attack equal to your aether level'.",
        flavor_text: "If you are willing to submit yourself to the furnace, the refiners fire will remake you stronger and more capable.",
		
        on_play: "def(class game game, class message.play_card info) ->commands 
        map(game.creatures, creature, if(info.player_index = creature.controller and (not creature.is_construct) and (not creature.is_building), 
        [
			creature.add_triggered_ability_until_end_of_turn({
				name: 'Furnace of Adversity',
				rules: 'When this creature deals damage, it gains life equal to your Aether level. When this creature takes damage, it gains attack equal to your Aether level.',
				on_damaged: 'def(class creature creature, class game game, int damage) ->commands
                    if (damage>0, add(creature.attack, game.players[creature.controller].get_resource_level(FAITH)))',
                on_deal_damage: 'def(class creature creature, class game game, class creature target, int damage) ->commands
                    if (damage>0, add(creature.life, game.players[creature.controller].get_resource_level(FAITH)))',
			})
		]))",

		ai_flags: "@eval [AI_CARD_SAVES]"

	},

//Gaea

    "Wood Elemental": {
		name: "Wood Elemental",
		set: "Fury_of_Elementals",
		rarity: 1,
		type: "creature",
		portrait: "wood-elemental.png",
		cost: 4,
		loyalty_cost: 2,
        is_channeled: true,
        
		school: "@eval FOOD",
		creature: {
            sound_summoned: "creatures/summon-flesh-golem.wav",
            sound_death: "creatures/death-flesh-golem.wav",
            abilities: ['Regeneration'],
			tags: ['Elemental', 'Lifebound'],
			attack: 4,
			life: 3,
			move: 1,
			image_num: 75,
            
            triggered_abilities: [{
				name: "Overgrowth",
				rules: "Gains 1 attack per mana spent on channeling.
Wood Elemental gains a lvl of regeneration if it starts an enemy turn in a Gaea land.",
				on_summoned: "def(class creature creature, class game game) ->commands
                [
                    add(creature.attack, creature.channel),
                ]",
                on_begin_turn: "def(class creature creature, class game game) ->commands
			        [
                         if (game.current_player_index != creature.controller and 0< count(game.permanents, value.is_construct and value.loc = creature.loc and (FOOD in value.school)), add(creature.abilities, ['Regeneration'])),
                    ]",
            }],            
		}
	},
    
    "Salamander": {
		name: "Salamander",
		set: "Fury_of_Elementals",
		rarity: 1,
		type: "creature",
		portrait: "salamander.png",
		cost: 5,
        is_channeled: true,
        
		school: "@eval FOOD",
		creature: {
            sound_summoned: "creatures/summon-flesh-golem.wav",
            sound_death: "creatures/death-flesh-golem.wav",
			tags: ['Elemental', 'Beast', 'Firebound'],
			attack: 6,
			life: 6,
			move: 1,
			image_num: 75,
            
            triggered_abilities: [{
				name: "Intense Heat",
				rules: "For each mana channeled, non-Firebound creatures adjacent to Salamander lose 1 life at the start of each turn.",
                on_begin_turn: "def(class creature creature, class game game) ->commands
			        [
                         map(game.creatures, if((not 'Firebound' in value.tags) and (not value.is_construct) and (not value.is_building) and game.locs_adjacent(creature.loc, value.loc), [
			add(value.life, -creature.channel),
		]))]",
            }],            
		}
	},
    
        "Youngwood Dryad": {
		name: "Youngwood Dryad",
		set: "Fury_of_Elementals",
		rarity: 1,
		type: "creature",
		portrait: "youngwood-dryad.png",
		cost: 4,
		school: "@eval FOOD",
		creature: {
			tags: ['Elemental', 'Lifebound'],
			overlays: [ { image_num: 16 }, { image_num: 12 } ],
			attack: 1,
			life: 5,
			move: 1,
            triggered_abilities: [{
				name: 'Fertile Feet',
				rules: "When Youngwood Dryad enters or is summoned into a hex without a land/construct, summon a forest there.",
				on_summoned: "def(class creature creature, class game game) ->commands 
                [if(game.construct_at_loc(creature.loc) = null,
                bind_command(game.summon_construct,
			             lib.citadel.create_creature('Forest',
			{
				loc: creature.loc,
			})),
            )]",
            
                on_move: "def(class creature creature, class game game) ->commands
                [
                if(game.construct_at_loc(creature.loc) = null,
                bind_command(game.summon_construct,
			             lib.citadel.create_creature('Forest',
			{
				loc: creature.loc,
			})),
            )]",
		}],
	}},

//Materia

"Stone Elemental": {
		name: "Stone Elemental",
		type: "creature",
		set: "Fury_of_Elementals",
		rarity: 1,
		portrait: "stone-elemental.png",
		portrait_focus: [409,208],
		portrait_focus_height: 260,
		artist: "lisanguyen",
		cost: 4,
		loyalty_cost: 1,
        is_channeled: true,
		school: "@eval GOLD",
		creature: {
			tags: ['Elemental', 'Stonebound'],
			overlays: [ { image_num: 25 } ],
			attack: 4,
			life: 7,
			move: 1,
            triggered_abilities: [{
				name: "Rock Solid",
				rules: "Gains 1 armor per mana spent on channeling.",
				on_summoned: "def(class creature creature, class game game) ->commands
                [
                    add(creature.resistance, creature.channel),
                ]",
            }],
			image_num: 35
		}
	},
    
    
    //DAVEPLSFIX: the rules describe the intended behavior, throws an assert failure when played.
    
    "Earthsplitter Collosus": {
		name: "Earthsplitter Collosus",
		type: "creature",
		//set: "Fury_of_Elementals",
		rarity: 1,
		portrait: "earthsplitter-collosus.png",
		portrait_focus: [409,208],
		portrait_focus_height: 260,
		cost: 11,
		loyalty_cost: 3,
        is_channeled: true,
		school: "@eval GOLD",
        flavor_text: "A bronze avatar of destruction. Harsh enough to sunder kingdoms.",
		creature: {
			tags: ['Elemental', 'Giant', 'Stonebound'],
			overlays: [ { image_num: 25 } ],
			attack: 14,
			life: 14,
			move: 1,
            triggered_abilities: [{
				name: "Earthspliter",
				rules: "When summoned, Target a number of hexes equal to the mana channeled. Destroy all lands in them.",

				on_summoned: "def(class creature creature, class game game) ->commands
					game.trigger_ability_cast(creature, {
						name: 'Earthspliter',
						cost: 0,
						school: GOLD,
						rules: q(Target a number of hexes equal to the mana channeled. Destroy all lands in them.),
                        possible_targets: q(def(class game game, class creature avatar, [Loc] targets) ->[Loc]|null
		                  if(size(targets) < avatar.channel, game.all_locs, null)),
						
                        on_play: q(def(class game game, class message.play_card info) ->commands
		                  map(range(size(info.targets)), if(construct, set(construct.destroyed, true))
			              where construct = game.construct_at_loc(info.targets[value])))
					       })"}],
			image_num: 35,
		}
	},

//Sapienza

        "Shock Zephyr": {
		name: "Shock Zephyr",
		type: "creature",
		set: "Fury_of_Elementals",
		rarity: 1,
		portrait: "shock-zephyr.png",
		cost: 4,
        loyalty_cost: 1,
        is_channeled: true,
		school: "@eval SAPIENZA",
		creature: {
			tags: ['Elemental', 'Firebound', 'Flying'],
			overlays: [ { image_num: 25 } ],
			attack: 6,
			life: 4,
			move: 1,
            channel: 0,
            triggered_abilities: [{
				name: "Wrath of the Sky",
				rules: "When summoned, you may inflict damage equal to the mana channeled to target player or creature.",

				on_summoned: "def(class creature creature, class game game) ->commands
					game.trigger_ability_cast(creature, {
						name: 'Wrath of the Sky',
						cost: 0,
						school: SAPIENZA,
						rules: q(Deal damage equal to the amount channeled to target creature or player.),
                        possible_targets: 'all_creatures_and_players_as_possible_targets',
						on_play: q(def(class game game, class message.play_card info) ->commands
		                  if(info.targets[0][0] = -1,
		                  //targeting a player
		                  add(game.players[info.targets[0][1]].life, -(info.get_creature(game)).channel),

		                  //targeting a creature
		                  creature.inflict_damage(game, (info.get_creature(game)).channel)
			              asserting size(info.targets) = 1
			              where creature = game.creature_at_loc_or_die(info.targets[0])))
					       })"}],
			image_num: 35
		}
	},
    
        "Undine": {
		name: "Undine",
		type: "creature",
		set: "Fury_of_Elementals",
		rarity: 0,
		portrait: "undine.png",
		cost: 3,
        is_channeled: true,
		school: "@eval SCROLLS",
		creature: {
			tags: ['Elemental', 'Waterbound'],
			overlays: [ { image_num: 25 } ],
			attack: 4,
			life: 4,
			move: 1,
            passive_abilities: [{
				name: "Dampening Calm",
				rules: "Non-waterbound creatures adjacent to undine lose attack equal to the amount of mana channeled.",
				static_effect: "def(class game game, class creature creature) ->commands
                [   
                    if(game.locs_adjacent(creature.loc, target.loc),
				    [target.apply_static_effect('attack', -creature.channel)])
				  | target <- game.creatures,
				    not 'Waterbound' in target.tags
				]",
			}],
			image_num: 35
		}
	},
        
        "Labryinth": {
		name: "Labryinth",
		set: "Fury_of_Elementals",
		rarity: 0,
		type: "creature",
		portrait: "labryinth.png",
		cost: 4,
		loyalty_cost: 1,
		school: "@eval SAPIENZA",
        
		creature: {
			portrait_y_offset: 50,
			portrait_scale: 0.4,
			is_construct: true,
            tags: ["Trap"],
                    
            triggered_abilities: [
            {
				name: "Contrived Design",
				rules: "When summoned, the labyrnth gains counter equal to twice your Sapienza level If there is a creature in the labrynth at the start of any turn. Labrynth loses a counter. If there are no counters on it, it is destroyed.",
				on_summoned: "def(class creature creature, class game game) ->commands
                [
                    add(creature.energy, game.players[creature.controller].get_resource_level(SAPIENZA)*2),
                ]",
				on_begin_turn: "def(class creature creature, class game game) ->commands
			             if(game.creature_at_loc(creature.loc),
							 [add(creature.energy, -1),
                             if (creature.energy < 1, set(creature.destroyed, true))])",
            }],
            
            passive_abilities: [{
				name: "Inpenetrable Depths.",
				rules: "Creatures on this hex have no movement.",
				static_effect: "def(class game game, class creature creature) ->commands
				[   
                    if(creature.loc = target.loc,
				    [target.apply_static_effect('move', -target.move)])
				  | target <- game.creatures,
				    target.is_building = false
				]"
			}],
		}
	}, //end of Labryinth

//Entropia
        "Deathly Arrow": {
		name: "Deathly Arrow",
		set: "Fury_of_Elementals",
		rarity: 0,
		type: "invocation",
		cost: 3,
		loyalty_cost: 0,
		portrait: "deathly-arrow.png",
		artist: "eleazzaar",
		school: "@eval BLOOD",
		is_response: false,
		rules: "Target creature loses life equal to your Entropia level.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands
          [
		    add(target.life, -game.players[info.player_index].get_resource_level(BLOOD)),
		  ]
		   where target = game.creature_at_loc_or_die(info.targets[0])",

	},
    
        "Reaper Shade": {
		name: "Reaper Shade",
		type: "creature",
		set: "Fury_of_Elementals",
		rarity: 1,
		portrait: "shade.png",
		cost: 4,
        is_channeled: true,
		school: "@eval BLOOD",
		creature: {
			tags: ['Elemental', 'Darkbound'],
            abilities: ['Lethal'],
			overlays: [ { image_num: 25 } ],
			attack: 4,
			life: 2,
			move: 1,
            channel: 0,
            triggered_abilities: [{
				name: "Soul Drain",
				rules: "For each mana channeled, the shade gains 2 life when it kills a creature.",
				on_deal_damage: "def(class creature creature, class game game, class creature target, int damage) ->commands
                if(not target.is_building and damage > 0, add(creature.life, (2*creature.channel)))",
            }],
			image_num: 35
		}
	},
    
    "Vilest Blight": {
		name: "Vilest Blight",
		type: "invocation",
        set: "Fury_of_Elementals",
		school: "@eval BLOOD",
		portrait: "vilest-blight.png",
		cost: 2,
		loyalty_cost: 2,
		is_response: false,
		rarity: 0,
		is_channeled: true,
		rules: "Poison target creature, then poison it again for each mana channeled.",
        
        possible_targets: "all_creatures_as_possible_targets",
        
		on_play: "def(class game game, class message.play_card info) ->commands
		map(range(info.channel +1),add(game.creature_at_loc_or_die(info.targets[0]).status_effects, ['Poisoned']))",
		
		ai_score: "def(class game game, [Loc] targets) ->int
		if(target.controller = game.current_player_index, 0,
		target.ai_value(game)*(9 - target.tiles_from_start))
		where target = game.creature_at_loc_or_die(targets[0])",
	},

//Mixed and Other

"Vexs Ultimate all-in-one Spell!": {
		name: "Vexs Ultimate all-in-one Spell!",
		set: "Fury_of_Elementals",
		rarity: 0,
		type: "invocation",
		cost: 7,
		loyalty_cost: 0,
		portrait: "vex-ultimate-spell.png",
		school: "@eval SAPIENZA",
		rules: "Gain life equal to your Gaea level. Your opponent loses life equal to your Enthropia Level, Gain mana equal to your Materia level, Draw cards equal to your Sapianza level, and summon an x,x worshiper where x is equal to your Aether level (if your aether level is at least 1)",
		possible_targets: "def(class game game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if (game.players[avatar.controller].get_resource_level(FAITH) >0 and targets = [],
             game.players[avatar.controller].summoning_locs(game, construct('creature', {name: 'Wolf', school: FOOD, image_num: 5})),
             null)",
          
		on_play: "def(class game game, class message.play_card info) ->commands
          [
		    add(caster.life, caster.get_resource_level(FOOD)),
            add(game.players[(game.current_player+1)%2].life, -caster.get_resource_level(BLOOD)),
            caster.draw_cards(game, caster.get_resource_level(SAPIENZA)),
            map(range(0, caster.get_resource_level(GOLD)),
		     caster.gain_mana_from_card(game, me)),
            if (caster.get_resource_level(FAITH) >0 and info.targets[0],
            [game.summon_creature(
		    lib.citadel.create_creature('Vex Worshipper', {
			name: 'Vex Worshipper',
			controller: game.current_player,
			loc: info.targets[0],})),
            ]),
		  ] 
           where caster = game.players[info.player_index]",
	},
    
    "Lava Elemental": {
		name: "Lava Elemental",
		type: "creature",
		set: "Fury_of_Elementals",
		rarity: 1,
		portrait: "lava-elemental.png",
		portrait_focus: [409,208],
		portrait_focus_height: 260,
		cost: 6,
		loyalty_cost: 1,
        is_channeled: true,
		school: "@eval GOLD",
		creature: {
			tags: ['Elemental', 'Stonebound', 'Firebound'],
			overlays: [ { image_num: 25 } ],
			attack: 6,
			life: 7,
            resistance: 1,
			move: 1,
            triggered_abilities: [{
				name: "Molten Blood",
				rules: "When you take damage in melee, inflict damage equal to thrice the amount of mana channeled to your enemy.",
				on_attacked: "def(class creature creature, class game game, class creature attacker, int damage) ->commands
                [
                    if(damage>0 and not creature.targets_attacking(game) = [],
                    attacker.inflict_damage(game, 3*creature.channel)),
                ]",
            }],
			image_num: 35
		}
	},
    
    
//Token for Vexs Ultimate Spell
    "Vex Worshipper": {
                name: "Vex Worshipper",
                type: "creature",
                cost: 1,
                loyalty_cost: 0,
                school: "@eval FAITH",
                creature: {
                        tags: ['Empty'],
                        attack: 1,
                        portrait: "sul-dahl-devout.png",
                        life: 1,
                        move: 1,
                        triggered_abilities: [{
				name: "Fervor",
				rules: "When Vexs Worshipper is summoned it has life and attack equal to your Aether level.",
				on_summoned: "def(class creature creature, class game game) ->commands
                [
                    add(creature.attack, game.players[creature.controller].get_resource_level(FAITH)-1),
                    add(creature.life, game.players[creature.controller].get_resource_level(FAITH)-1),
                ]",
            }],
                }
        },

}
