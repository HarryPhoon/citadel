{

//Aether

    "Water Elemental": {
		name: "Water Elemental",
		set: "Fury_of_Elementals",
		rarity: 1,
		type: "creature",
		portrait: "water-elemental.png",
		cost: 4,
		loyalty_cost: 1,
        is_channeled: true,
        
		school: "@eval FAITH",
		creature: {
            sound_summoned: "creatures/summon-flesh-golem.wav",
            sound_death: "creatures/death-flesh-golem.wav",
			tags: ['Elemental', 'Waterbound'],
			attack: 3,
			life: 5,
			move: 1,
			image_num: 75,
            
            triggered_abilities: [{
				name: "Timeless Depths",
				rules: "Gains 1 life per mana spent on channeling.
When damage is dealt to it, The damage is not enough to kill it, it heals the equal to the amount of damage.",
				on_summoned: "def(class creature creature, class game game) ->commands
                [
                    add(creature.life, creature.channel),
                ]",
                on_damaged: "def(class creature creature, class game game, int damage) ->commands
                    if (creature.life>damage, add(creature.life, damage))",
            }],
		}
	},

"Shrine of the Ancestors": {
		name: "Shrine of the Ancestors",
		set: "Fury_of_Elementals",
		rarity: 0,
		type: "creature",
		portrait: "shrine-of-ancestors.png",
		cost: 4,
		loyalty_cost: 1,
		school: "@eval FAITH",
		creature: {
			tags: ["Shrine"],
			is_construct: true,
			image_num: 4,
            triggered_abilities: [{
				name: "Venerate",
				rules: "When another creature you control dies, this shrine gains +1 energy. At the start of your turn, creatures on the shrine gain life equal to the amount of energy on the shrine.",

				on_another_creature_died: "def(class creature creature, class game game, class creature victim) ->commands if(victim.controller=creature.controller, add(creature.energy, 1))",
                on_begin_turn: "def(class creature creature, class game game) ->commands
			             if(game.creature_at_loc(creature.loc) and game.current_player = creature.controller,
							 if(not enhanced.is_building, add(enhanced.life, creature.energy)))
                             where enhanced = game.creature_at_loc_or_die(creature.loc)",
			}],
		}
	},
    
    "Softhand": {
		name: "Softhand",
		set: "Fury_of_Elementals",
		rarity: 0,
		type: "creature",
		portrait: "softhand.png",
		cost: 2,
		loyalty_cost: 0,
		school: "@eval FAITH",
		creature: {
			tags: ['Human'],
			image_num: 25,
			attack: 0,
			life: 4,
			move: 1,
                
                passive_abilities: [{
				name: "Healing Touch",
				rules: "Softhand and allied creatures adjacent to Softhand gain 1 life each time they take damage.",
				static_effect: "def(class game game, class creature creature) ->commands
				[   
                    if(creature.controller = target.controller,
				    [target.add_triggered_ability_static_duration({
					name: q(Healing),
                    hidden_on_creature: true,
					rules: 'When this creature takes damage, it gains 1 life.',
					on_damaged: 'def(class creature creature, class game game, int damage) ->commands
						if(damage > 0, add(creature.life, 1))
					',
					})])
				  | target <- game.creatures,
				    target.is_building = false and (game.locs_adjacent(creature.loc, target.loc) or creature.loc = target.loc)
				]",
                hidden_on_creature: false,
			}],
            activated_abilities: [{
					name: 'Cure Affliction',
					cost: 1,
					loyalty_cost: 0,
					school: "@eval FAITH",

					portrait: "school-faith.png",
					rules: "Remove all stacks of poison from an adjacent creature. Is a responce.",
					is_response: true,

					sound_resolve: 'creatures/wisp-unsummon.wav',
					possible_targets: "def(class game game, class creature creature, [Loc] targets) ->[Loc]|null
						if(targets != [], null,
						   map(filter(game.creatures, value != creature and value.is_building = false and game.locs_adjacent(creature.loc, value.loc) and value.is_valid_target(game, game.nplayer, me)), value.loc)
						)
					",

					on_play: "
					 def(class game game, class creature creature, class message.play_ability info) ->commands [
					 	set(target.status_effects, filter(target.status_effects, not value in ['Poisoned'])),
                        set(target.static_status_effects, filter(target.static_status_effects, not value in ['Poisoned']))
                        //without this second note, static_status_effects wouldn't be reapplied.
					] where target = game.creature_at_loc_or_die(info.targets[0])"
				}],
		}
	},

//Gaea

    "Wood Elemental": {
		name: "Wood Elemental",
		set: "Fury_of_Elementals",
		rarity: 1,
		type: "creature",
		portrait: "wood-elemental.png",
		cost: 4,
		loyalty_cost: 2,
        is_channeled: true,
        
		school: "@eval FOOD",
		creature: {
            sound_summoned: "creatures/summon-flesh-golem.wav",
            sound_death: "creatures/death-flesh-golem.wav",
            abilities: ['Regeneration'],
			tags: ['Elemental', 'Lifebound'],
			attack: 4,
			life: 3,
			move: 1,
			image_num: 75,
            
            triggered_abilities: [{
				name: "Overgrowth",
				rules: "Gains 1 attack per mana spent on channeling.
Wood Elemental gains a lvl of regeneration if it starts an enemy turn in a Gaea land.",
				on_summoned: "def(class creature creature, class game game) ->commands
                [
                    add(creature.attack, creature.channel),
                ]",
                on_begin_turn: "def(class creature creature, class game game) ->commands
			        [
                         if (game.current_player_index != creature.controller and 0< count(game.permanents, value.is_construct and value.loc = creature.loc and (FOOD in value.school)), add(creature.abilities, ['Regeneration'])),
                    ]",
            }],            
		}
	},

//Materia

"Stone Elemental": {
		name: "Stone Elemental",
		type: "creature",
		set: "Fury_of_Elementals",
		rarity: 1,
		portrait: "stone-elemental.png",
		cost: 4,
		loyalty_cost: 1,
        is_channeled: true,
		school: "@eval GOLD",
		creature: {
			tags: ['Elemental', 'Stonebound'],
			overlays: [ { image_num: 25 } ],
			attack: 4,
			life: 7,
			move: 1,
            triggered_abilities: [{
				name: "Rock Solid",
				rules: "Gains 1 armor per mana spent on channeling.",
				on_summoned: "def(class creature creature, class game game) ->commands
                [
                    add(creature.resistance, creature.channel),
                ]",
            }],
			image_num: 35
		}
	},

//Sapienza

 "Fire Elemental": {
		name: "Fire Elemental",
		set: "Fury_of_Elementals",
		rarity: 1,
		type: "creature",
		portrait: "fire-elemental.png",
		cost: 4,
		loyalty_cost: 1,
        is_channeled: true,
        
		school: "@eval SAPIENZA",
		creature: {
            sound_summoned: "creatures/summon-flesh-golem.wav",
            sound_death: "creatures/death-flesh-golem.wav",
            abilities: ['Haste'],
			tags: ['Elemental', 'Firebound'],
			attack: 5,
			life: 5,
			move: 1,
			image_num: 75,
            
            triggered_abilities: [{
				name: "Raging Blaze",
				rules: "Gains +2/+1 per mana spent on channeling.",
				on_summoned: "def(class creature creature, class game game) ->commands
                [
                    add(creature.attack, creature.channel *2),
                    add(creature.life, creature.channel),
                    if(construct, set(construct.destroyed, true)),
                ] where construct = game.construct_at_loc(creature.loc)",
            },
            {
				name: "Consuming Flame",
				rules: "Destroys lands/constructs moved over, including ones in the hex it is summoned in.",
				on_move_over_construct: "def(class creature creature, class game game, class creature construct) ->commands
            set(construct.destroyed, true)",
            },
            {
				name: "Burnout",
				rules: "Loses 3 life at the beginning of each of your turns.",
				on_begin_turn: "def(class creature creature, class game game) ->commands
			             if(game.current_player_index = creature.controller,
							 add(creature.life, -3))",
            }],
		}
	}, //end Fire Elemental
    
        "Labryinth": {
		name: "Labryinth",
		set: "Fury_of_Elementals",
		rarity: 0,
		type: "creature",
		portrait: "labryinth.png",
		cost: 4,
		loyalty_cost: 1,
		school: "@eval SAPIENZA",
        
		creature: {
			portrait_y_offset: 50,
			portrait_scale: 0.4,
			is_construct: true,
            tags: ["Trap"],
                    
            triggered_abilities: [
            {
				name: "Contrived Design",
				rules: "When summoned, the labyrnth gains counter equal to twice your Sapienza level If there is a creature in the labrynth at the start of any turn. Labrynth loses a counter. If there are no counters on it, it is destroyed.",
				on_summoned: "def(class creature creature, class game game) ->commands
                [
                    add(creature.energy, game.players[creature.controller].get_resource_level(SAPIENZA)*2),
                ]",
				on_begin_turn: "def(class creature creature, class game game) ->commands
			             if(game.creature_at_loc(creature.loc),
							 [add(creature.energy, -1),
                             if (creature.energy < 1, set(creature.destroyed, true))])",
            }],
            
            passive_abilities: [{
				name: "Inpenetrable Depths.",
				rules: "Creatures on this hex have no movement.",
				static_effect: "def(class game game, class creature creature) ->commands
				[   
                    if(creature.loc = target.loc,
				    [target.apply_static_effect('move', -target.move)])
				  | target <- game.creatures,
				    target.is_building = false
				]"
			}],
		}
	}, //end of Labryinth

//Entropia

    "Shadow Elemental": {
		name: "Shadow Elemental",
		type: "creature",
		set: "Fury_of_Elementals",
		rarity: 1,
		portrait: "shadow-elemental.png",
		cost: 4,
		loyalty_cost: 1,
        is_channeled: true,
		school: "@eval BLOOD",
		creature: {
			tags: ['Elemental', 'Darkbound'],
            abilities: ['Cover'],
			overlays: [ { image_num: 25 } ],
			attack: 4,
			life: 5,
			move: 1,
            triggered_abilities: [{
				name: "Dark Awakening.",
				rules: "When summoned, each enemy in the lane you were summoned in loses life equal to the amount channeled.",
				on_summoned: "def(class creature creature, class game game) ->commands
                    map(game.creatures, if(game.current_player_index != value.controller and (not value.is_construct) and (not value.is_building) and value.loc[0] = creature.loc[0], [
			add(value.life, -creature.channel),
		]))",
            }],
			image_num: 35
		}
	},
    
        "Deathly Arrow": {
		name: "Deathly Arrow",
		set: "Fury_of_Elementals",
		rarity: 0,
		type: "invocation",
		cost: 3,
		loyalty_cost: 0,
		portrait: "deathly-arrow.png",
		artist: "eleazzaar",
		school: "@eval BLOOD",
		is_response: true,
		rules: "Target creature loses life equal to your Entropia level.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game game, class message.play_card info) ->commands
          [
		    add(target.life, -game.players[info.player_index].get_resource_level(BLOOD)),
		  ]
		   where target = game.creature_at_loc_or_die(info.targets[0])",

	},

//Mixed and Other

"Vexs Ultimate all-in-one Spell!": {
		name: "Vexs Ultimate all-in-one Spell!",
		set: "Fury_of_Elementals",
		rarity: 0,
		type: "invocation",
		cost: 7,
		loyalty_cost: 0,
		portrait: "vex-ultimate-spell.png",
		school: "@eval SAPIENZA",
		rules: "Gain life equal to your Gaea level. Your opponent loses life equal to your Enthropia Level, Gain mana equal to your Materia level, Draw cards equal to your Sapianza level, and summon an x,x worshiper where x is equal to your Aether level (if your aether level is at least 1)",
		possible_targets: "def(class game game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if (game.players[avatar.controller].get_resource_level(FAITH) >0 and targets = [],
             game.players[avatar.controller].summoning_locs(game, construct('creature', {name: 'Wolf', school: FOOD, image_num: 5})),
             null)",
          
		on_play: "def(class game game, class message.play_card info) ->commands
          [
		    add(caster.life, caster.get_resource_level(FOOD)),
            add(game.players[(game.current_player+1)%2].life, -caster.get_resource_level(BLOOD)),
            caster.draw_cards(game, caster.get_resource_level(SAPIENZA)),
            map(range(0, caster.get_resource_level(GOLD)),
		     caster.gain_mana_from_card(game, me)),
            if (caster.get_resource_level(FAITH) >0 and info.targets[0],
            [game.summon_creature(
		    lib.citadel.create_creature('Vex Worshipper', {
			name: 'Vex Worshipper',
			controller: game.current_player,
			loc: info.targets[0],})),
            ]),
		  ] 
           where caster = game.players[info.player_index]",
	},
    
        "Vilest Blight": {
		name: "Vilest Blight",
		type: "invocation",
        set: "Fury_of_Elementals",
		school: "@eval BLOOD",
		portrait: "vilest-blight.png",
		cost: 2,
		loyalty_cost: 2,
		is_response: false,
		rarity: 0,
		is_channeled: true,
		rules: "Poison target creature, then poison it again for each mana channeled.",
        
        possible_targets: "all_creatures_as_possible_targets",
        
		on_play: "def(class game game, class message.play_card info) ->commands
		map(range(info.channel +1),add(game.creature_at_loc_or_die(info.targets[0]).status_effects, ['Poisoned']))",
		
		ai_score: "def(class game game, [Loc] targets) ->int
		if(target.controller = game.current_player_index, 0,
		target.ai_value(game)*(9 - target.tiles_from_start))
		where target = game.creature_at_loc_or_die(targets[0])",
	},
    
//Token for Vexs Ultimate Spell
    "Vex Worshipper": {
                name: "Vex Worshipper",
                type: "creature",
                cost: 1,
                loyalty_cost: 0,
                school: "@eval FAITH",
                creature: {
                        tags: ['Empty'],
                        attack: 1,
                        portrait: "sul-dahl-devout.png",
                        life: 1,
                        move: 1,
                        initiative: 20,
                        image_num: 5,
                        triggered_abilities: [{
				name: "Fervor",
				rules: "When Vexs Worshipper is summoned it has life and attack equal to your Aether level.",
				on_summoned: "def(class creature creature, class game game) ->commands
                [
                    add(creature.attack, game.players[creature.controller].get_resource_level(FAITH)-1),
                    add(creature.life, game.players[creature.controller].get_resource_level(FAITH)-1),
                ]",
            }],
                }
        },

}
